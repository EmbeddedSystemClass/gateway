ARM GAS  /tmp/ccHNFBM5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_it.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.NMI_Handler,"ax",%progbits
  22              		.align	2
  23              		.global	NMI_Handler
  24              		.thumb
  25              		.thumb_func
  27              	NMI_Handler:
  28              	.LFB129:
  29              		.file 1 "Src/stm32f4xx_it.c"
   1:Src/stm32f4xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f4xx_it.c **** /**
   3:Src/stm32f4xx_it.c ****   ******************************************************************************
   4:Src/stm32f4xx_it.c ****   * @file    stm32f4xx_it.c
   5:Src/stm32f4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f4xx_it.c ****   ******************************************************************************
   7:Src/stm32f4xx_it.c ****   *
   8:Src/stm32f4xx_it.c ****   * COPYRIGHT(c) 2019 STMicroelectronics
   9:Src/stm32f4xx_it.c ****   *
  10:Src/stm32f4xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  11:Src/stm32f4xx_it.c ****   * are permitted provided that the following conditions are met:
  12:Src/stm32f4xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  13:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer.
  14:Src/stm32f4xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  15:Src/stm32f4xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  16:Src/stm32f4xx_it.c ****   *      and/or other materials provided with the distribution.
  17:Src/stm32f4xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  18:Src/stm32f4xx_it.c ****   *      may be used to endorse or promote products derived from this software
  19:Src/stm32f4xx_it.c ****   *      without specific prior written permission.
  20:Src/stm32f4xx_it.c ****   *
  21:Src/stm32f4xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Src/stm32f4xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Src/stm32f4xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  24:Src/stm32f4xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  25:Src/stm32f4xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  26:Src/stm32f4xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  27:Src/stm32f4xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  28:Src/stm32f4xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  29:Src/stm32f4xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccHNFBM5.s 			page 2


  30:Src/stm32f4xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:Src/stm32f4xx_it.c ****   *
  32:Src/stm32f4xx_it.c ****   ******************************************************************************
  33:Src/stm32f4xx_it.c ****   */
  34:Src/stm32f4xx_it.c **** /* USER CODE END Header */
  35:Src/stm32f4xx_it.c **** 
  36:Src/stm32f4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  37:Src/stm32f4xx_it.c **** #include "main.h"
  38:Src/stm32f4xx_it.c **** #include "stm32f4xx_it.h"
  39:Src/stm32f4xx_it.c **** #include "cmsis_os.h"
  40:Src/stm32f4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  41:Src/stm32f4xx_it.c **** /* USER CODE BEGIN Includes */
  42:Src/stm32f4xx_it.c **** /* USER CODE END Includes */
  43:Src/stm32f4xx_it.c **** 
  44:Src/stm32f4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  45:Src/stm32f4xx_it.c **** /* USER CODE BEGIN TD */
  46:Src/stm32f4xx_it.c **** 
  47:Src/stm32f4xx_it.c **** /* USER CODE END TD */
  48:Src/stm32f4xx_it.c **** 
  49:Src/stm32f4xx_it.c **** /* Private define ------------------------------------------------------------*/
  50:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PD */
  51:Src/stm32f4xx_it.c ****  
  52:Src/stm32f4xx_it.c **** /* USER CODE END PD */
  53:Src/stm32f4xx_it.c **** 
  54:Src/stm32f4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  55:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PM */
  56:Src/stm32f4xx_it.c **** 
  57:Src/stm32f4xx_it.c **** /* USER CODE END PM */
  58:Src/stm32f4xx_it.c **** 
  59:Src/stm32f4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  60:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PV */
  61:Src/stm32f4xx_it.c **** 
  62:Src/stm32f4xx_it.c **** /* USER CODE END PV */
  63:Src/stm32f4xx_it.c **** 
  64:Src/stm32f4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  65:Src/stm32f4xx_it.c **** /* USER CODE BEGIN PFP */
  66:Src/stm32f4xx_it.c **** 
  67:Src/stm32f4xx_it.c **** /* USER CODE END PFP */
  68:Src/stm32f4xx_it.c **** 
  69:Src/stm32f4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  70:Src/stm32f4xx_it.c **** /* USER CODE BEGIN 0 */
  71:Src/stm32f4xx_it.c **** 
  72:Src/stm32f4xx_it.c **** /* USER CODE END 0 */
  73:Src/stm32f4xx_it.c **** 
  74:Src/stm32f4xx_it.c **** /* External variables --------------------------------------------------------*/
  75:Src/stm32f4xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_OTG_FS;
  76:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  77:Src/stm32f4xx_it.c **** extern ADC_HandleTypeDef hadc1;
  78:Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  79:Src/stm32f4xx_it.c **** extern CAN_HandleTypeDef hcan2;
  80:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  81:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  82:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart6_rx;
  83:Src/stm32f4xx_it.c **** extern DMA_HandleTypeDef hdma_usart6_tx;
  84:Src/stm32f4xx_it.c **** extern UART_HandleTypeDef huart2;
  85:Src/stm32f4xx_it.c **** extern UART_HandleTypeDef huart6;
  86:Src/stm32f4xx_it.c **** extern TIM_HandleTypeDef htim5;
ARM GAS  /tmp/ccHNFBM5.s 			page 3


  87:Src/stm32f4xx_it.c **** 
  88:Src/stm32f4xx_it.c **** /* USER CODE BEGIN EV */
  89:Src/stm32f4xx_it.c **** 
  90:Src/stm32f4xx_it.c **** /* USER CODE END EV */
  91:Src/stm32f4xx_it.c **** 
  92:Src/stm32f4xx_it.c **** /******************************************************************************/
  93:Src/stm32f4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */ 
  94:Src/stm32f4xx_it.c **** /******************************************************************************/
  95:Src/stm32f4xx_it.c **** /**
  96:Src/stm32f4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  97:Src/stm32f4xx_it.c ****   */
  98:Src/stm32f4xx_it.c **** void NMI_Handler(void)
  99:Src/stm32f4xx_it.c **** {
  30              		.loc 1 99 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE129:
  39 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  40              		.align	2
  41              		.global	HardFault_Handler
  42              		.thumb
  43              		.thumb_func
  45              	HardFault_Handler:
  46              	.LFB130:
 100:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
 101:Src/stm32f4xx_it.c **** 
 102:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
 103:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
 104:Src/stm32f4xx_it.c **** 
 105:Src/stm32f4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
 106:Src/stm32f4xx_it.c **** }
 107:Src/stm32f4xx_it.c **** 
 108:Src/stm32f4xx_it.c **** /**
 109:Src/stm32f4xx_it.c ****   * @brief This function handles Hard fault interrupt.
 110:Src/stm32f4xx_it.c ****   */
 111:Src/stm32f4xx_it.c **** void HardFault_Handler(void)
 112:Src/stm32f4xx_it.c **** {
  47              		.loc 1 112 0
  48              		.cfi_startproc
  49              		@ Volatile: function does not return.
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.L3:
  54 0000 FEE7     		b	.L3
  55              		.cfi_endproc
  56              	.LFE130:
  58 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  59              		.align	2
  60              		.global	MemManage_Handler
  61              		.thumb
  62              		.thumb_func
  64              	MemManage_Handler:
ARM GAS  /tmp/ccHNFBM5.s 			page 4


  65              	.LFB131:
 113:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 114:Src/stm32f4xx_it.c **** 
 115:Src/stm32f4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 116:Src/stm32f4xx_it.c ****   while (1)
 117:Src/stm32f4xx_it.c ****   {
 118:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 119:Src/stm32f4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 120:Src/stm32f4xx_it.c ****   }
 121:Src/stm32f4xx_it.c **** }
 122:Src/stm32f4xx_it.c **** 
 123:Src/stm32f4xx_it.c **** /**
 124:Src/stm32f4xx_it.c ****   * @brief This function handles Memory management fault.
 125:Src/stm32f4xx_it.c ****   */
 126:Src/stm32f4xx_it.c **** void MemManage_Handler(void)
 127:Src/stm32f4xx_it.c **** {
  66              		.loc 1 127 0
  67              		.cfi_startproc
  68              		@ Volatile: function does not return.
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.L5:
  73 0000 FEE7     		b	.L5
  74              		.cfi_endproc
  75              	.LFE131:
  77 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  78              		.align	2
  79              		.global	BusFault_Handler
  80              		.thumb
  81              		.thumb_func
  83              	BusFault_Handler:
  84              	.LFB132:
 128:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 129:Src/stm32f4xx_it.c **** 
 130:Src/stm32f4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 131:Src/stm32f4xx_it.c ****   while (1)
 132:Src/stm32f4xx_it.c ****   {
 133:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 134:Src/stm32f4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 135:Src/stm32f4xx_it.c ****   }
 136:Src/stm32f4xx_it.c **** }
 137:Src/stm32f4xx_it.c **** 
 138:Src/stm32f4xx_it.c **** /**
 139:Src/stm32f4xx_it.c ****   * @brief This function handles Pre-fetch fault, memory access fault.
 140:Src/stm32f4xx_it.c ****   */
 141:Src/stm32f4xx_it.c **** void BusFault_Handler(void)
 142:Src/stm32f4xx_it.c **** {
  85              		.loc 1 142 0
  86              		.cfi_startproc
  87              		@ Volatile: function does not return.
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.L7:
  92 0000 FEE7     		b	.L7
  93              		.cfi_endproc
ARM GAS  /tmp/ccHNFBM5.s 			page 5


  94              	.LFE132:
  96 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  97              		.align	2
  98              		.global	UsageFault_Handler
  99              		.thumb
 100              		.thumb_func
 102              	UsageFault_Handler:
 103              	.LFB133:
 143:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 144:Src/stm32f4xx_it.c **** 
 145:Src/stm32f4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 146:Src/stm32f4xx_it.c ****   while (1)
 147:Src/stm32f4xx_it.c ****   {
 148:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 149:Src/stm32f4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 150:Src/stm32f4xx_it.c ****   }
 151:Src/stm32f4xx_it.c **** }
 152:Src/stm32f4xx_it.c **** 
 153:Src/stm32f4xx_it.c **** /**
 154:Src/stm32f4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 155:Src/stm32f4xx_it.c ****   */
 156:Src/stm32f4xx_it.c **** void UsageFault_Handler(void)
 157:Src/stm32f4xx_it.c **** {
 104              		.loc 1 157 0
 105              		.cfi_startproc
 106              		@ Volatile: function does not return.
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.L9:
 111 0000 FEE7     		b	.L9
 112              		.cfi_endproc
 113              	.LFE133:
 115 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 116              		.align	2
 117              		.global	DebugMon_Handler
 118              		.thumb
 119              		.thumb_func
 121              	DebugMon_Handler:
 122              	.LFB134:
 158:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 159:Src/stm32f4xx_it.c **** 
 160:Src/stm32f4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 161:Src/stm32f4xx_it.c ****   while (1)
 162:Src/stm32f4xx_it.c ****   {
 163:Src/stm32f4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 164:Src/stm32f4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 165:Src/stm32f4xx_it.c ****   }
 166:Src/stm32f4xx_it.c **** }
 167:Src/stm32f4xx_it.c **** 
 168:Src/stm32f4xx_it.c **** /**
 169:Src/stm32f4xx_it.c ****   * @brief This function handles Debug monitor.
 170:Src/stm32f4xx_it.c ****   */
 171:Src/stm32f4xx_it.c **** void DebugMon_Handler(void)
 172:Src/stm32f4xx_it.c **** {
 123              		.loc 1 172 0
 124              		.cfi_startproc
ARM GAS  /tmp/ccHNFBM5.s 			page 6


 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              		@ link register save eliminated.
 128 0000 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE134:
 132 0002 00BF     		.section	.text.DMA1_Stream5_IRQHandler,"ax",%progbits
 133              		.align	2
 134              		.global	DMA1_Stream5_IRQHandler
 135              		.thumb
 136              		.thumb_func
 138              	DMA1_Stream5_IRQHandler:
 139              	.LFB135:
 173:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 174:Src/stm32f4xx_it.c **** 
 175:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 176:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 177:Src/stm32f4xx_it.c **** 
 178:Src/stm32f4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 179:Src/stm32f4xx_it.c **** }
 180:Src/stm32f4xx_it.c **** 
 181:Src/stm32f4xx_it.c **** /******************************************************************************/
 182:Src/stm32f4xx_it.c **** /* STM32F4xx Peripheral Interrupt Handlers                                    */
 183:Src/stm32f4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 184:Src/stm32f4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 185:Src/stm32f4xx_it.c **** /* please refer to the startup file (startup_stm32f4xx.s).                    */
 186:Src/stm32f4xx_it.c **** /******************************************************************************/
 187:Src/stm32f4xx_it.c **** 
 188:Src/stm32f4xx_it.c **** /**
 189:Src/stm32f4xx_it.c ****   * @brief This function handles DMA1 stream5 global interrupt.
 190:Src/stm32f4xx_it.c ****   */
 191:Src/stm32f4xx_it.c **** void DMA1_Stream5_IRQHandler(void)
 192:Src/stm32f4xx_it.c **** {
 140              		.loc 1 192 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		.loc 1 192 0
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI0:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
 193:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
 194:Src/stm32f4xx_it.c **** 
 195:Src/stm32f4xx_it.c ****   /* USER CODE END DMA1_Stream5_IRQn 0 */
 196:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 150              		.loc 1 196 0
 151 0002 0248     		ldr	r0, .L13
 152 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 153              	.LVL0:
 154 0008 08BD     		pop	{r3, pc}
 155              	.L14:
 156 000a 00BF     		.align	2
 157              	.L13:
 158 000c 00000000 		.word	hdma_usart2_rx
 159              		.cfi_endproc
ARM GAS  /tmp/ccHNFBM5.s 			page 7


 160              	.LFE135:
 162              		.section	.text.DMA1_Stream6_IRQHandler,"ax",%progbits
 163              		.align	2
 164              		.global	DMA1_Stream6_IRQHandler
 165              		.thumb
 166              		.thumb_func
 168              	DMA1_Stream6_IRQHandler:
 169              	.LFB136:
 197:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
 198:Src/stm32f4xx_it.c **** 
 199:Src/stm32f4xx_it.c ****   /* USER CODE END DMA1_Stream5_IRQn 1 */
 200:Src/stm32f4xx_it.c **** }
 201:Src/stm32f4xx_it.c **** 
 202:Src/stm32f4xx_it.c **** /**
 203:Src/stm32f4xx_it.c ****   * @brief This function handles DMA1 stream6 global interrupt.
 204:Src/stm32f4xx_it.c ****   */
 205:Src/stm32f4xx_it.c **** void DMA1_Stream6_IRQHandler(void)
 206:Src/stm32f4xx_it.c **** {
 170              		.loc 1 206 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 08B5     		push	{r3, lr}
 175              	.LCFI1:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 3, -8
 178              		.cfi_offset 14, -4
 207:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
 208:Src/stm32f4xx_it.c **** 
 209:Src/stm32f4xx_it.c ****   /* USER CODE END DMA1_Stream6_IRQn 0 */
 210:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 179              		.loc 1 210 0
 180 0002 0248     		ldr	r0, .L17
 181 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 182              	.LVL1:
 183 0008 08BD     		pop	{r3, pc}
 184              	.L18:
 185 000a 00BF     		.align	2
 186              	.L17:
 187 000c 00000000 		.word	hdma_usart2_tx
 188              		.cfi_endproc
 189              	.LFE136:
 191              		.section	.text.ADC_IRQHandler,"ax",%progbits
 192              		.align	2
 193              		.global	ADC_IRQHandler
 194              		.thumb
 195              		.thumb_func
 197              	ADC_IRQHandler:
 198              	.LFB137:
 211:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
 212:Src/stm32f4xx_it.c **** 
 213:Src/stm32f4xx_it.c ****   /* USER CODE END DMA1_Stream6_IRQn 1 */
 214:Src/stm32f4xx_it.c **** }
 215:Src/stm32f4xx_it.c **** 
 216:Src/stm32f4xx_it.c **** /**
 217:Src/stm32f4xx_it.c ****   * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
 218:Src/stm32f4xx_it.c ****   */
ARM GAS  /tmp/ccHNFBM5.s 			page 8


 219:Src/stm32f4xx_it.c **** void ADC_IRQHandler(void)
 220:Src/stm32f4xx_it.c **** {
 199              		.loc 1 220 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI2:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 221:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN ADC_IRQn 0 */
 222:Src/stm32f4xx_it.c **** 
 223:Src/stm32f4xx_it.c ****   /* USER CODE END ADC_IRQn 0 */
 224:Src/stm32f4xx_it.c ****   HAL_ADC_IRQHandler(&hadc1);
 208              		.loc 1 224 0
 209 0002 0248     		ldr	r0, .L21
 210 0004 FFF7FEFF 		bl	HAL_ADC_IRQHandler
 211              	.LVL2:
 212 0008 08BD     		pop	{r3, pc}
 213              	.L22:
 214 000a 00BF     		.align	2
 215              	.L21:
 216 000c 00000000 		.word	hadc1
 217              		.cfi_endproc
 218              	.LFE137:
 220              		.section	.text.CAN1_TX_IRQHandler,"ax",%progbits
 221              		.align	2
 222              		.global	CAN1_TX_IRQHandler
 223              		.thumb
 224              		.thumb_func
 226              	CAN1_TX_IRQHandler:
 227              	.LFB138:
 225:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN ADC_IRQn 1 */
 226:Src/stm32f4xx_it.c **** 
 227:Src/stm32f4xx_it.c ****   /* USER CODE END ADC_IRQn 1 */
 228:Src/stm32f4xx_it.c **** }
 229:Src/stm32f4xx_it.c **** 
 230:Src/stm32f4xx_it.c **** /**
 231:Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 TX interrupts.
 232:Src/stm32f4xx_it.c ****   */
 233:Src/stm32f4xx_it.c **** void CAN1_TX_IRQHandler(void)
 234:Src/stm32f4xx_it.c **** {
 228              		.loc 1 234 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232 0000 08B5     		push	{r3, lr}
 233              	.LCFI3:
 234              		.cfi_def_cfa_offset 8
 235              		.cfi_offset 3, -8
 236              		.cfi_offset 14, -4
 235:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 0 */
 236:Src/stm32f4xx_it.c **** 
 237:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 0 */
 238:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 237              		.loc 1 238 0
ARM GAS  /tmp/ccHNFBM5.s 			page 9


 238 0002 0248     		ldr	r0, .L25
 239 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 240              	.LVL3:
 241 0008 08BD     		pop	{r3, pc}
 242              	.L26:
 243 000a 00BF     		.align	2
 244              	.L25:
 245 000c 00000000 		.word	hcan1
 246              		.cfi_endproc
 247              	.LFE138:
 249              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 250              		.align	2
 251              		.global	CAN1_RX0_IRQHandler
 252              		.thumb
 253              		.thumb_func
 255              	CAN1_RX0_IRQHandler:
 256              	.LFB139:
 239:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 1 */
 240:Src/stm32f4xx_it.c **** 
 241:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 1 */
 242:Src/stm32f4xx_it.c **** }
 243:Src/stm32f4xx_it.c **** 
 244:Src/stm32f4xx_it.c **** /**
 245:Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupts.
 246:Src/stm32f4xx_it.c ****   */
 247:Src/stm32f4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 248:Src/stm32f4xx_it.c **** {
 257              		.loc 1 248 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261 0000 08B5     		push	{r3, lr}
 262              	.LCFI4:
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 3, -8
 265              		.cfi_offset 14, -4
 249:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 250:Src/stm32f4xx_it.c **** 
 251:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 252:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 266              		.loc 1 252 0
 267 0002 0248     		ldr	r0, .L29
 268 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 269              	.LVL4:
 270 0008 08BD     		pop	{r3, pc}
 271              	.L30:
 272 000a 00BF     		.align	2
 273              	.L29:
 274 000c 00000000 		.word	hcan1
 275              		.cfi_endproc
 276              	.LFE139:
 278              		.section	.text.CAN1_RX1_IRQHandler,"ax",%progbits
 279              		.align	2
 280              		.global	CAN1_RX1_IRQHandler
 281              		.thumb
 282              		.thumb_func
 284              	CAN1_RX1_IRQHandler:
ARM GAS  /tmp/ccHNFBM5.s 			page 10


 285              	.LFB140:
 253:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 254:Src/stm32f4xx_it.c **** 
 255:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 256:Src/stm32f4xx_it.c **** }
 257:Src/stm32f4xx_it.c **** 
 258:Src/stm32f4xx_it.c **** /**
 259:Src/stm32f4xx_it.c ****   * @brief This function handles CAN1 RX1 interrupt.
 260:Src/stm32f4xx_it.c ****   */
 261:Src/stm32f4xx_it.c **** void CAN1_RX1_IRQHandler(void)
 262:Src/stm32f4xx_it.c **** {
 286              		.loc 1 262 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290 0000 08B5     		push	{r3, lr}
 291              	.LCFI5:
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 3, -8
 294              		.cfi_offset 14, -4
 263:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
 264:Src/stm32f4xx_it.c **** 
 265:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 0 */
 266:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 295              		.loc 1 266 0
 296 0002 0248     		ldr	r0, .L33
 297 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 298              	.LVL5:
 299 0008 08BD     		pop	{r3, pc}
 300              	.L34:
 301 000a 00BF     		.align	2
 302              	.L33:
 303 000c 00000000 		.word	hcan1
 304              		.cfi_endproc
 305              	.LFE140:
 307              		.section	.text.USART2_IRQHandler,"ax",%progbits
 308              		.align	2
 309              		.global	USART2_IRQHandler
 310              		.thumb
 311              		.thumb_func
 313              	USART2_IRQHandler:
 314              	.LFB141:
 267:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
 268:Src/stm32f4xx_it.c **** 
 269:Src/stm32f4xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 1 */
 270:Src/stm32f4xx_it.c **** }
 271:Src/stm32f4xx_it.c **** 
 272:Src/stm32f4xx_it.c **** /**
 273:Src/stm32f4xx_it.c ****   * @brief This function handles USART2 global interrupt.
 274:Src/stm32f4xx_it.c ****   */
 275:Src/stm32f4xx_it.c **** void USART2_IRQHandler(void)
 276:Src/stm32f4xx_it.c **** {
 315              		.loc 1 276 0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccHNFBM5.s 			page 11


 320              	.LCFI6:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 3, -8
 323              		.cfi_offset 14, -4
 277:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 278:Src/stm32f4xx_it.c **** 
 279:Src/stm32f4xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 280:Src/stm32f4xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 324              		.loc 1 280 0
 325 0002 0248     		ldr	r0, .L37
 326 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 327              	.LVL6:
 328 0008 08BD     		pop	{r3, pc}
 329              	.L38:
 330 000a 00BF     		.align	2
 331              	.L37:
 332 000c 00000000 		.word	huart2
 333              		.cfi_endproc
 334              	.LFE141:
 336              		.section	.text.TIM5_IRQHandler,"ax",%progbits
 337              		.align	2
 338              		.global	TIM5_IRQHandler
 339              		.thumb
 340              		.thumb_func
 342              	TIM5_IRQHandler:
 343              	.LFB142:
 281:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 282:Src/stm32f4xx_it.c **** 
 283:Src/stm32f4xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 284:Src/stm32f4xx_it.c **** }
 285:Src/stm32f4xx_it.c **** 
 286:Src/stm32f4xx_it.c **** /**
 287:Src/stm32f4xx_it.c ****   * @brief This function handles TIM5 global interrupt.
 288:Src/stm32f4xx_it.c ****   */
 289:Src/stm32f4xx_it.c **** void TIM5_IRQHandler(void)
 290:Src/stm32f4xx_it.c **** {
 344              		.loc 1 290 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348 0000 08B5     		push	{r3, lr}
 349              	.LCFI7:
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 3, -8
 352              		.cfi_offset 14, -4
 291:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 0 */
 292:Src/stm32f4xx_it.c **** 
 293:Src/stm32f4xx_it.c ****   /* USER CODE END TIM5_IRQn 0 */
 294:Src/stm32f4xx_it.c ****   HAL_TIM_IRQHandler(&htim5);
 353              		.loc 1 294 0
 354 0002 0248     		ldr	r0, .L41
 355 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 356              	.LVL7:
 357 0008 08BD     		pop	{r3, pc}
 358              	.L42:
 359 000a 00BF     		.align	2
 360              	.L41:
ARM GAS  /tmp/ccHNFBM5.s 			page 12


 361 000c 00000000 		.word	htim5
 362              		.cfi_endproc
 363              	.LFE142:
 365              		.section	.text.DMA2_Stream0_IRQHandler,"ax",%progbits
 366              		.align	2
 367              		.global	DMA2_Stream0_IRQHandler
 368              		.thumb
 369              		.thumb_func
 371              	DMA2_Stream0_IRQHandler:
 372              	.LFB143:
 295:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN TIM5_IRQn 1 */
 296:Src/stm32f4xx_it.c **** 
 297:Src/stm32f4xx_it.c ****   /* USER CODE END TIM5_IRQn 1 */
 298:Src/stm32f4xx_it.c **** }
 299:Src/stm32f4xx_it.c **** 
 300:Src/stm32f4xx_it.c **** /**
 301:Src/stm32f4xx_it.c ****   * @brief This function handles DMA2 stream0 global interrupt.
 302:Src/stm32f4xx_it.c ****   */
 303:Src/stm32f4xx_it.c **** void DMA2_Stream0_IRQHandler(void)
 304:Src/stm32f4xx_it.c **** {
 373              		.loc 1 304 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377 0000 08B5     		push	{r3, lr}
 378              	.LCFI8:
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 3, -8
 381              		.cfi_offset 14, -4
 305:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
 306:Src/stm32f4xx_it.c **** 
 307:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream0_IRQn 0 */
 308:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1);
 382              		.loc 1 308 0
 383 0002 0248     		ldr	r0, .L45
 384 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 385              	.LVL8:
 386 0008 08BD     		pop	{r3, pc}
 387              	.L46:
 388 000a 00BF     		.align	2
 389              	.L45:
 390 000c 00000000 		.word	hdma_adc1
 391              		.cfi_endproc
 392              	.LFE143:
 394              		.section	.text.DMA2_Stream1_IRQHandler,"ax",%progbits
 395              		.align	2
 396              		.global	DMA2_Stream1_IRQHandler
 397              		.thumb
 398              		.thumb_func
 400              	DMA2_Stream1_IRQHandler:
 401              	.LFB144:
 309:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
 310:Src/stm32f4xx_it.c **** 
 311:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream0_IRQn 1 */
 312:Src/stm32f4xx_it.c **** }
 313:Src/stm32f4xx_it.c **** 
 314:Src/stm32f4xx_it.c **** /**
ARM GAS  /tmp/ccHNFBM5.s 			page 13


 315:Src/stm32f4xx_it.c ****   * @brief This function handles DMA2 stream1 global interrupt.
 316:Src/stm32f4xx_it.c ****   */
 317:Src/stm32f4xx_it.c **** void DMA2_Stream1_IRQHandler(void)
 318:Src/stm32f4xx_it.c **** {
 402              		.loc 1 318 0
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 0
 405              		@ frame_needed = 0, uses_anonymous_args = 0
 406 0000 08B5     		push	{r3, lr}
 407              	.LCFI9:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 3, -8
 410              		.cfi_offset 14, -4
 319:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
 320:Src/stm32f4xx_it.c **** 
 321:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream1_IRQn 0 */
 322:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart6_rx);
 411              		.loc 1 322 0
 412 0002 0248     		ldr	r0, .L49
 413 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 414              	.LVL9:
 415 0008 08BD     		pop	{r3, pc}
 416              	.L50:
 417 000a 00BF     		.align	2
 418              	.L49:
 419 000c 00000000 		.word	hdma_usart6_rx
 420              		.cfi_endproc
 421              	.LFE144:
 423              		.section	.text.CAN2_TX_IRQHandler,"ax",%progbits
 424              		.align	2
 425              		.global	CAN2_TX_IRQHandler
 426              		.thumb
 427              		.thumb_func
 429              	CAN2_TX_IRQHandler:
 430              	.LFB145:
 323:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
 324:Src/stm32f4xx_it.c **** 
 325:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream1_IRQn 1 */
 326:Src/stm32f4xx_it.c **** }
 327:Src/stm32f4xx_it.c **** 
 328:Src/stm32f4xx_it.c **** /**
 329:Src/stm32f4xx_it.c ****   * @brief This function handles CAN2 TX interrupts.
 330:Src/stm32f4xx_it.c ****   */
 331:Src/stm32f4xx_it.c **** void CAN2_TX_IRQHandler(void)
 332:Src/stm32f4xx_it.c **** {
 431              		.loc 1 332 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435 0000 08B5     		push	{r3, lr}
 436              	.LCFI10:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 3, -8
 439              		.cfi_offset 14, -4
 333:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_TX_IRQn 0 */
 334:Src/stm32f4xx_it.c **** 
 335:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_TX_IRQn 0 */
ARM GAS  /tmp/ccHNFBM5.s 			page 14


 336:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan2);
 440              		.loc 1 336 0
 441 0002 0248     		ldr	r0, .L53
 442 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 443              	.LVL10:
 444 0008 08BD     		pop	{r3, pc}
 445              	.L54:
 446 000a 00BF     		.align	2
 447              	.L53:
 448 000c 00000000 		.word	hcan2
 449              		.cfi_endproc
 450              	.LFE145:
 452              		.section	.text.CAN2_RX0_IRQHandler,"ax",%progbits
 453              		.align	2
 454              		.global	CAN2_RX0_IRQHandler
 455              		.thumb
 456              		.thumb_func
 458              	CAN2_RX0_IRQHandler:
 459              	.LFB146:
 337:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_TX_IRQn 1 */
 338:Src/stm32f4xx_it.c **** 
 339:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_TX_IRQn 1 */
 340:Src/stm32f4xx_it.c **** }
 341:Src/stm32f4xx_it.c **** 
 342:Src/stm32f4xx_it.c **** /**
 343:Src/stm32f4xx_it.c ****   * @brief This function handles CAN2 RX0 interrupts.
 344:Src/stm32f4xx_it.c ****   */
 345:Src/stm32f4xx_it.c **** void CAN2_RX0_IRQHandler(void)
 346:Src/stm32f4xx_it.c **** {
 460              		.loc 1 346 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464 0000 08B5     		push	{r3, lr}
 465              	.LCFI11:
 466              		.cfi_def_cfa_offset 8
 467              		.cfi_offset 3, -8
 468              		.cfi_offset 14, -4
 347:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_RX0_IRQn 0 */
 348:Src/stm32f4xx_it.c **** 
 349:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_RX0_IRQn 0 */
 350:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan2);
 469              		.loc 1 350 0
 470 0002 0248     		ldr	r0, .L57
 471 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 472              	.LVL11:
 473 0008 08BD     		pop	{r3, pc}
 474              	.L58:
 475 000a 00BF     		.align	2
 476              	.L57:
 477 000c 00000000 		.word	hcan2
 478              		.cfi_endproc
 479              	.LFE146:
 481              		.section	.text.CAN2_RX1_IRQHandler,"ax",%progbits
 482              		.align	2
 483              		.global	CAN2_RX1_IRQHandler
 484              		.thumb
ARM GAS  /tmp/ccHNFBM5.s 			page 15


 485              		.thumb_func
 487              	CAN2_RX1_IRQHandler:
 488              	.LFB147:
 351:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
 352:Src/stm32f4xx_it.c **** 
 353:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_RX0_IRQn 1 */
 354:Src/stm32f4xx_it.c **** }
 355:Src/stm32f4xx_it.c **** 
 356:Src/stm32f4xx_it.c **** /**
 357:Src/stm32f4xx_it.c ****   * @brief This function handles CAN2 RX1 interrupt.
 358:Src/stm32f4xx_it.c ****   */
 359:Src/stm32f4xx_it.c **** void CAN2_RX1_IRQHandler(void)
 360:Src/stm32f4xx_it.c **** {
 489              		.loc 1 360 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493 0000 08B5     		push	{r3, lr}
 494              	.LCFI12:
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 3, -8
 497              		.cfi_offset 14, -4
 361:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_RX1_IRQn 0 */
 362:Src/stm32f4xx_it.c **** 
 363:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_RX1_IRQn 0 */
 364:Src/stm32f4xx_it.c ****   HAL_CAN_IRQHandler(&hcan2);
 498              		.loc 1 364 0
 499 0002 0248     		ldr	r0, .L61
 500 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 501              	.LVL12:
 502 0008 08BD     		pop	{r3, pc}
 503              	.L62:
 504 000a 00BF     		.align	2
 505              	.L61:
 506 000c 00000000 		.word	hcan2
 507              		.cfi_endproc
 508              	.LFE147:
 510              		.section	.text.OTG_FS_IRQHandler,"ax",%progbits
 511              		.align	2
 512              		.global	OTG_FS_IRQHandler
 513              		.thumb
 514              		.thumb_func
 516              	OTG_FS_IRQHandler:
 517              	.LFB148:
 365:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN CAN2_RX1_IRQn 1 */
 366:Src/stm32f4xx_it.c **** 
 367:Src/stm32f4xx_it.c ****   /* USER CODE END CAN2_RX1_IRQn 1 */
 368:Src/stm32f4xx_it.c **** }
 369:Src/stm32f4xx_it.c **** 
 370:Src/stm32f4xx_it.c **** /**
 371:Src/stm32f4xx_it.c ****   * @brief This function handles USB On The Go FS global interrupt.
 372:Src/stm32f4xx_it.c ****   */
 373:Src/stm32f4xx_it.c **** void OTG_FS_IRQHandler(void)
 374:Src/stm32f4xx_it.c **** {
 518              		.loc 1 374 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccHNFBM5.s 			page 16


 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522 0000 08B5     		push	{r3, lr}
 523              	.LCFI13:
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 3, -8
 526              		.cfi_offset 14, -4
 375:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 0 */
 376:Src/stm32f4xx_it.c **** 
 377:Src/stm32f4xx_it.c ****   /* USER CODE END OTG_FS_IRQn 0 */
 378:Src/stm32f4xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 527              		.loc 1 378 0
 528 0002 0248     		ldr	r0, .L65
 529 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 530              	.LVL13:
 531 0008 08BD     		pop	{r3, pc}
 532              	.L66:
 533 000a 00BF     		.align	2
 534              	.L65:
 535 000c 00000000 		.word	hpcd_USB_OTG_FS
 536              		.cfi_endproc
 537              	.LFE148:
 539              		.section	.text.DMA2_Stream6_IRQHandler,"ax",%progbits
 540              		.align	2
 541              		.global	DMA2_Stream6_IRQHandler
 542              		.thumb
 543              		.thumb_func
 545              	DMA2_Stream6_IRQHandler:
 546              	.LFB149:
 379:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN OTG_FS_IRQn 1 */
 380:Src/stm32f4xx_it.c **** 
 381:Src/stm32f4xx_it.c ****   /* USER CODE END OTG_FS_IRQn 1 */
 382:Src/stm32f4xx_it.c **** }
 383:Src/stm32f4xx_it.c **** 
 384:Src/stm32f4xx_it.c **** /**
 385:Src/stm32f4xx_it.c ****   * @brief This function handles DMA2 stream6 global interrupt.
 386:Src/stm32f4xx_it.c ****   */
 387:Src/stm32f4xx_it.c **** void DMA2_Stream6_IRQHandler(void)
 388:Src/stm32f4xx_it.c **** {
 547              		.loc 1 388 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 08B5     		push	{r3, lr}
 552              	.LCFI14:
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 3, -8
 555              		.cfi_offset 14, -4
 389:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
 390:Src/stm32f4xx_it.c **** 
 391:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream6_IRQn 0 */
 392:Src/stm32f4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart6_tx);
 556              		.loc 1 392 0
 557 0002 0248     		ldr	r0, .L69
 558 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 559              	.LVL14:
 560 0008 08BD     		pop	{r3, pc}
 561              	.L70:
ARM GAS  /tmp/ccHNFBM5.s 			page 17


 562 000a 00BF     		.align	2
 563              	.L69:
 564 000c 00000000 		.word	hdma_usart6_tx
 565              		.cfi_endproc
 566              	.LFE149:
 568              		.section	.text.USART6_IRQHandler,"ax",%progbits
 569              		.align	2
 570              		.global	USART6_IRQHandler
 571              		.thumb
 572              		.thumb_func
 574              	USART6_IRQHandler:
 575              	.LFB150:
 393:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */
 394:Src/stm32f4xx_it.c **** 
 395:Src/stm32f4xx_it.c ****   /* USER CODE END DMA2_Stream6_IRQn 1 */
 396:Src/stm32f4xx_it.c **** }
 397:Src/stm32f4xx_it.c **** 
 398:Src/stm32f4xx_it.c **** /**
 399:Src/stm32f4xx_it.c ****   * @brief This function handles USART6 global interrupt.
 400:Src/stm32f4xx_it.c ****   */
 401:Src/stm32f4xx_it.c **** void USART6_IRQHandler(void)
 402:Src/stm32f4xx_it.c **** {
 576              		.loc 1 402 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 0
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580 0000 08B5     		push	{r3, lr}
 581              	.LCFI15:
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 3, -8
 584              		.cfi_offset 14, -4
 403:Src/stm32f4xx_it.c ****   /* USER CODE BEGIN USART6_IRQn 0 */
 404:Src/stm32f4xx_it.c **** 
 405:Src/stm32f4xx_it.c ****   /* USER CODE END USART6_IRQn 0 */
 406:Src/stm32f4xx_it.c ****   HAL_UART_IRQHandler(&huart6);
 585              		.loc 1 406 0
 586 0002 0248     		ldr	r0, .L73
 587 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 588              	.LVL15:
 589 0008 08BD     		pop	{r3, pc}
 590              	.L74:
 591 000a 00BF     		.align	2
 592              	.L73:
 593 000c 00000000 		.word	huart6
 594              		.cfi_endproc
 595              	.LFE150:
 597              		.text
 598              	.Letext0:
 599              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 600              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 601              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 602              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 603              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 604              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 605              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 606              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 607              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
ARM GAS  /tmp/ccHNFBM5.s 			page 18


 608              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 609              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usb.h"
 610              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pcd.h"
 611              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccHNFBM5.s 			page 19


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_it.c
     /tmp/ccHNFBM5.s:22     .text.NMI_Handler:00000000 $t
     /tmp/ccHNFBM5.s:27     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccHNFBM5.s:40     .text.HardFault_Handler:00000000 $t
     /tmp/ccHNFBM5.s:45     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccHNFBM5.s:59     .text.MemManage_Handler:00000000 $t
     /tmp/ccHNFBM5.s:64     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccHNFBM5.s:78     .text.BusFault_Handler:00000000 $t
     /tmp/ccHNFBM5.s:83     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccHNFBM5.s:97     .text.UsageFault_Handler:00000000 $t
     /tmp/ccHNFBM5.s:102    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccHNFBM5.s:116    .text.DebugMon_Handler:00000000 $t
     /tmp/ccHNFBM5.s:121    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/ccHNFBM5.s:133    .text.DMA1_Stream5_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:138    .text.DMA1_Stream5_IRQHandler:00000000 DMA1_Stream5_IRQHandler
     /tmp/ccHNFBM5.s:158    .text.DMA1_Stream5_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:163    .text.DMA1_Stream6_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:168    .text.DMA1_Stream6_IRQHandler:00000000 DMA1_Stream6_IRQHandler
     /tmp/ccHNFBM5.s:187    .text.DMA1_Stream6_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:192    .text.ADC_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:197    .text.ADC_IRQHandler:00000000 ADC_IRQHandler
     /tmp/ccHNFBM5.s:216    .text.ADC_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:221    .text.CAN1_TX_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:226    .text.CAN1_TX_IRQHandler:00000000 CAN1_TX_IRQHandler
     /tmp/ccHNFBM5.s:245    .text.CAN1_TX_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:250    .text.CAN1_RX0_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:255    .text.CAN1_RX0_IRQHandler:00000000 CAN1_RX0_IRQHandler
     /tmp/ccHNFBM5.s:274    .text.CAN1_RX0_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:279    .text.CAN1_RX1_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:284    .text.CAN1_RX1_IRQHandler:00000000 CAN1_RX1_IRQHandler
     /tmp/ccHNFBM5.s:303    .text.CAN1_RX1_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:308    .text.USART2_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:313    .text.USART2_IRQHandler:00000000 USART2_IRQHandler
     /tmp/ccHNFBM5.s:332    .text.USART2_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:337    .text.TIM5_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:342    .text.TIM5_IRQHandler:00000000 TIM5_IRQHandler
     /tmp/ccHNFBM5.s:361    .text.TIM5_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:366    .text.DMA2_Stream0_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:371    .text.DMA2_Stream0_IRQHandler:00000000 DMA2_Stream0_IRQHandler
     /tmp/ccHNFBM5.s:390    .text.DMA2_Stream0_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:395    .text.DMA2_Stream1_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:400    .text.DMA2_Stream1_IRQHandler:00000000 DMA2_Stream1_IRQHandler
     /tmp/ccHNFBM5.s:419    .text.DMA2_Stream1_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:424    .text.CAN2_TX_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:429    .text.CAN2_TX_IRQHandler:00000000 CAN2_TX_IRQHandler
     /tmp/ccHNFBM5.s:448    .text.CAN2_TX_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:453    .text.CAN2_RX0_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:458    .text.CAN2_RX0_IRQHandler:00000000 CAN2_RX0_IRQHandler
     /tmp/ccHNFBM5.s:477    .text.CAN2_RX0_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:482    .text.CAN2_RX1_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:487    .text.CAN2_RX1_IRQHandler:00000000 CAN2_RX1_IRQHandler
     /tmp/ccHNFBM5.s:506    .text.CAN2_RX1_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:511    .text.OTG_FS_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:516    .text.OTG_FS_IRQHandler:00000000 OTG_FS_IRQHandler
     /tmp/ccHNFBM5.s:535    .text.OTG_FS_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:540    .text.DMA2_Stream6_IRQHandler:00000000 $t
ARM GAS  /tmp/ccHNFBM5.s 			page 20


     /tmp/ccHNFBM5.s:545    .text.DMA2_Stream6_IRQHandler:00000000 DMA2_Stream6_IRQHandler
     /tmp/ccHNFBM5.s:564    .text.DMA2_Stream6_IRQHandler:0000000c $d
     /tmp/ccHNFBM5.s:569    .text.USART6_IRQHandler:00000000 $t
     /tmp/ccHNFBM5.s:574    .text.USART6_IRQHandler:00000000 USART6_IRQHandler
     /tmp/ccHNFBM5.s:593    .text.USART6_IRQHandler:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_DMA_IRQHandler
hdma_usart2_rx
hdma_usart2_tx
HAL_ADC_IRQHandler
hadc1
HAL_CAN_IRQHandler
hcan1
HAL_UART_IRQHandler
huart2
HAL_TIM_IRQHandler
htim5
hdma_adc1
hdma_usart6_rx
hcan2
HAL_PCD_IRQHandler
hpcd_USB_OTG_FS
hdma_usart6_tx
huart6
