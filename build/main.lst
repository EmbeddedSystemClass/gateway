ARM GAS  /tmp/cc0KX3zJ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB138:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V. 
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
ARM GAS  /tmp/cc0KX3zJ.s 			page 2


  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  32:Src/main.c    ****   *    this license. 
  33:Src/main.c    ****   *
  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* USER CODE END Header */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  52:Src/main.c    **** #include "main.h"
  53:Src/main.c    **** #include "cmsis_os.h"
  54:Src/main.c    **** #include "usb_device.h"
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  57:Src/main.c    **** /* USER CODE BEGIN Includes */
  58:Src/main.c    **** #include <string.h>
  59:Src/main.c    **** #include "SerialTaskSend.h"
  60:Src/main.c    **** #include "stm32f4xx_hal_pcd.h"
  61:Src/main.c    **** #include "usbd_cdc_if.h"
  62:Src/main.c    **** #include "cdc_txbuff.h"
  63:Src/main.c    **** #include "CanTask.h"
  64:Src/main.c    **** #include "can_iface.h"
  65:Src/main.c    **** #include "canfilter_setup.h"
  66:Src/main.c    **** #include "stm32f4xx_hal_can.h"
  67:Src/main.c    **** #include "getserialbuf.h"
  68:Src/main.c    **** #include "stackwatermark.h"
  69:Src/main.c    **** #include "yprintf.h"
  70:Src/main.c    **** #include "gateway_comm.h"
  71:Src/main.c    **** #include "gateway_CANtoPC.h"
  72:Src/main.c    **** #include "DTW_counter.h"
  73:Src/main.c    **** #include "SerialTaskReceive.h"
  74:Src/main.c    **** #include "yscanf.h"
  75:Src/main.c    **** #include "adctask.h"
  76:Src/main.c    **** #include "ADCTask.h"
  77:Src/main.c    **** #include "adcparams.h"
  78:Src/main.c    **** #include "adcparamsinit.h"
  79:Src/main.c    **** #include "gateway_PCtoCAN.h"
  80:Src/main.c    **** #include "morse.h"
  81:Src/main.c    **** #include "MailboxTask.h"
  82:Src/main.c    **** #include "GatewayTask.h"
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END Includes */
  85:Src/main.c    **** 
  86:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  87:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/cc0KX3zJ.s 			page 3


  88:Src/main.c    **** void* verr[8];
  89:Src/main.c    **** uint32_t verrx = 0;
  90:Src/main.c    **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_SP(void) 
  91:Src/main.c    **** { 
  92:Src/main.c    ****   register uint32_t result; 
  93:Src/main.c    **** 
  94:Src/main.c    ****   __ASM volatile ("MOV %0, SP\n" : "=r" (result) ); 
  95:Src/main.c    ****   return(result); 
  96:Src/main.c    **** } 
  97:Src/main.c    **** 
  98:Src/main.c    **** uint32_t timectr = 0;
  99:Src/main.c    **** struct CAN_CTLBLOCK* pctl1;	// Pointer to CAN1 control block
 100:Src/main.c    **** struct CAN_CTLBLOCK* pctl2;	// Pointer to CAN2 control block
 101:Src/main.c    **** 
 102:Src/main.c    **** uint32_t debugTX1b;
 103:Src/main.c    **** uint32_t debugTX1b_prev;
 104:Src/main.c    **** 
 105:Src/main.c    **** uint32_t debugTX1c;
 106:Src/main.c    **** uint32_t debugTX1c_prev;
 107:Src/main.c    **** 
 108:Src/main.c    **** uint32_t debug03;
 109:Src/main.c    **** uint32_t debug03_prev;
 110:Src/main.c    **** 
 111:Src/main.c    **** extern osThreadId SerialTaskHandle;
 112:Src/main.c    **** extern osThreadId CanTxTaskHandle;
 113:Src/main.c    **** extern osThreadId CanRxTaskHandle;
 114:Src/main.c    **** extern osThreadId SerialTaskReceiveHandle;
 115:Src/main.c    **** 
 116:Src/main.c    **** uint8_t canflag;
 117:Src/main.c    **** uint8_t canflag1;
 118:Src/main.c    **** uint8_t canflag2;
 119:Src/main.c    **** 
 120:Src/main.c    **** /* USER CODE END PTD */
 121:Src/main.c    **** 
 122:Src/main.c    **** /* Private define ------------------------------------------------------------*/
 123:Src/main.c    **** /* USER CODE BEGIN PD */
 124:Src/main.c    **** 
 125:Src/main.c    **** /* USER CODE END PD */
 126:Src/main.c    **** 
 127:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
 128:Src/main.c    **** /* USER CODE BEGIN PM */
 129:Src/main.c    **** 
 130:Src/main.c    **** /* USER CODE END PM */
 131:Src/main.c    **** 
 132:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 133:Src/main.c    **** ADC_HandleTypeDef hadc1;
 134:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
 135:Src/main.c    **** 
 136:Src/main.c    **** CAN_HandleTypeDef hcan1;
 137:Src/main.c    **** CAN_HandleTypeDef hcan2;
 138:Src/main.c    **** 
 139:Src/main.c    **** UART_HandleTypeDef huart2;
 140:Src/main.c    **** UART_HandleTypeDef huart6;
 141:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_rx;
 142:Src/main.c    **** DMA_HandleTypeDef hdma_usart2_tx;
 143:Src/main.c    **** DMA_HandleTypeDef hdma_usart6_rx;
 144:Src/main.c    **** DMA_HandleTypeDef hdma_usart6_tx;
ARM GAS  /tmp/cc0KX3zJ.s 			page 4


 145:Src/main.c    **** 
 146:Src/main.c    **** osThreadId defaultTaskHandle;
 147:Src/main.c    **** osTimerId defaultTaskTimerHandle;
 148:Src/main.c    **** osTimerId defautTaskTimer01Handle;
 149:Src/main.c    **** /* USER CODE BEGIN PV */
 150:Src/main.c    **** 
 151:Src/main.c    **** /* USER CODE END PV */
 152:Src/main.c    **** 
 153:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 154:Src/main.c    **** void SystemClock_Config(void);
 155:Src/main.c    **** static void MX_GPIO_Init(void);
 156:Src/main.c    **** static void MX_DMA_Init(void);
 157:Src/main.c    **** static void MX_USART6_UART_Init(void);
 158:Src/main.c    **** static void MX_USART2_UART_Init(void);
 159:Src/main.c    **** static void MX_CAN1_Init(void);
 160:Src/main.c    **** static void MX_CAN2_Init(void);
 161:Src/main.c    **** static void MX_ADC1_Init(void);
 162:Src/main.c    **** void StartDefaultTask(void const * argument);
 163:Src/main.c    **** void CallbackdefaultTaskTimer(void const * argument);
 164:Src/main.c    **** void CallbackdefaultTaskTimer01(void const * argument);
 165:Src/main.c    **** 
 166:Src/main.c    **** /* USER CODE BEGIN PFP */
 167:Src/main.c    **** 
 168:Src/main.c    **** /* USER CODE END PFP */
 169:Src/main.c    **** 
 170:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 171:Src/main.c    **** /* USER CODE BEGIN 0 */
 172:Src/main.c    **** 
 173:Src/main.c    **** /* USER CODE END 0 */
 174:Src/main.c    **** 
 175:Src/main.c    **** /**
 176:Src/main.c    ****   * @brief  The application entry point.
 177:Src/main.c    ****   * @retval int
 178:Src/main.c    ****   */
 179:Src/main.c    **** int main(void)
 180:Src/main.c    **** {
 181:Src/main.c    ****   /* USER CODE BEGIN 1 */
 182:Src/main.c    **** 	BaseType_t ret;	   // Used for returns from function calls
 183:Src/main.c    **** 	osMessageQId Qidret; // Functin call return
 184:Src/main.c    ****   /* USER CODE END 1 */
 185:Src/main.c    **** 
 186:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 187:Src/main.c    **** 
 188:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 189:Src/main.c    ****   HAL_Init();
 190:Src/main.c    **** 
 191:Src/main.c    ****   /* USER CODE BEGIN Init */
 192:Src/main.c    **** 	DTW_counter_init();
 193:Src/main.c    ****   /* USER CODE END Init */
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* Configure the system clock */
 196:Src/main.c    ****   SystemClock_Config();
 197:Src/main.c    **** 
 198:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 199:Src/main.c    **** 
 200:Src/main.c    ****   /* USER CODE END SysInit */
 201:Src/main.c    **** 
ARM GAS  /tmp/cc0KX3zJ.s 			page 5


 202:Src/main.c    ****   /* Initialize all configured peripherals */
 203:Src/main.c    ****   MX_GPIO_Init();
 204:Src/main.c    ****   MX_DMA_Init();
 205:Src/main.c    ****   MX_USART6_UART_Init();
 206:Src/main.c    ****   MX_USART2_UART_Init();
 207:Src/main.c    ****   MX_CAN1_Init();
 208:Src/main.c    ****   MX_CAN2_Init();
 209:Src/main.c    ****   MX_ADC1_Init();
 210:Src/main.c    ****   /* USER CODE BEGIN 2 */
 211:Src/main.c    **** /*
 212:Src/main.c    **** DiscoveryF4 LEDs --
 213:Src/main.c    ****  GPIOD, GPIO_PIN_12 GREEN
 214:Src/main.c    ****  GPIOD, GPIO_PIN_13 ORANGE
 215:Src/main.c    ****  GPIOD, GPIO_PIN_14 RED
 216:Src/main.c    ****  GPIOD, GPIO_PIN_15 BLUE
 217:Src/main.c    **** */
 218:Src/main.c    **** 
 219:Src/main.c    **** 
 220:Src/main.c    ****   /* USER CODE END 2 */
 221:Src/main.c    **** 
 222:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 223:Src/main.c    ****   /* add mutexes, ... */
 224:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 225:Src/main.c    **** 
 226:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 227:Src/main.c    ****   /* add semaphores, ... */
 228:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 229:Src/main.c    **** 
 230:Src/main.c    ****   /* Create the timer(s) */
 231:Src/main.c    ****   /* definition and creation of defaultTaskTimer */
 232:Src/main.c    ****   osTimerDef(defaultTaskTimer, CallbackdefaultTaskTimer);
 233:Src/main.c    ****   defaultTaskTimerHandle = osTimerCreate(osTimer(defaultTaskTimer), osTimerPeriodic, NULL);
 234:Src/main.c    **** 
 235:Src/main.c    ****   /* definition and creation of defautTaskTimer01 */
 236:Src/main.c    ****   osTimerDef(defautTaskTimer01, CallbackdefaultTaskTimer01);
 237:Src/main.c    ****   defautTaskTimer01Handle = osTimerCreate(osTimer(defautTaskTimer01), osTimerPeriodic, NULL);
 238:Src/main.c    **** 
 239:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 240:Src/main.c    ****   /* start timers, add new ones, ... */
 241:Src/main.c    **** 
 242:Src/main.c    **** 	/* defaultTask timer for pacing display of stack usages. */
 243:Src/main.c    **** 	ret = xTimerChangePeriod( defaultTaskTimerHandle  ,pdMS_TO_TICKS(5000),0);
 244:Src/main.c    **** 	/* defaultTask timer for pacing ADC monitoring. */
 245:Src/main.c    **** 	ret = xTimerChangePeriod( defautTaskTimer01Handle,pdMS_TO_TICKS(1000),0);
 246:Src/main.c    **** 
 247:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 248:Src/main.c    **** 
 249:Src/main.c    ****   /* Create the thread(s) */
 250:Src/main.c    ****   /* definition and creation of defaultTask */
 251:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 384);
 252:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 253:Src/main.c    **** 
 254:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 255:Src/main.c    ****   /* add threads, ... */
 256:Src/main.c    **** /* =================================================== */
 257:Src/main.c    **** 	/* Create serial task (priority) */
 258:Src/main.c    **** 	// Task handle "osThreadId SerialTaskHandle" is global
ARM GAS  /tmp/cc0KX3zJ.s 			page 6


 259:Src/main.c    **** 	xSerialTaskSendCreate(0);	// Create task and set Task priority
 260:Src/main.c    **** 
 261:Src/main.c    **** 	/* Add bcb circular buffer to SerialTaskSend for usart6 */
 262:Src/main.c    **** 	#define NUMCIRBCB6  16 // Size of circular buffer of BCB for usart6
 263:Src/main.c    **** 	ret = xSerialTaskSendAdd(&huart6, NUMCIRBCB6, 0); // char-by-char
 264:Src/main.c    **** 	if (ret < 0) morse_trap(1); // Panic LED flashing
 265:Src/main.c    **** 
 266:Src/main.c    **** 	/* Add bcb circular buffer to SerialTaskSend for usart2 */
 267:Src/main.c    **** 	#define NUMCIRBCB2  12 // Size of circular buffer of BCB for usart2
 268:Src/main.c    **** 	ret = xSerialTaskSendAdd(&huart2, NUMCIRBCB2, 1); // dma
 269:Src/main.c    **** 	if (ret < 0) morse_trap(2); // Panic LED flashing
 270:Src/main.c    **** 
 271:Src/main.c    **** 	/* Setup semaphore for yprint and sprintf et al. */
 272:Src/main.c    **** 	yprintf_init();
 273:Src/main.c    **** 
 274:Src/main.c    **** 	/* Create serial receiving task of uart6 (char-by-char) */
 275:Src/main.c    **** 	xSerialTaskReceiveCreate(0);
 276:Src/main.c    **** 
 277:Src/main.c    **** 	/* USB-CDC buffering */
 278:Src/main.c    **** 	#define NUMCDCBUFF 3	// Number of CDC task local buffers
 279:Src/main.c    **** 	#define CDCBUFFSIZE 64*16	// Best buff size is multiples of usb packet size
 280:Src/main.c    **** 	struct CDCBUFFPTR* pret;
 281:Src/main.c    **** 	pret = cdc_txbuff_init(NUMCDCBUFF, CDCBUFFSIZE); // Setup local buffers
 282:Src/main.c    **** 	if (pret == NULL) morse_trap(3);
 283:Src/main.c    **** 	
 284:Src/main.c    **** 	/* USB-CDC queue and task creation */
 285:Src/main.c    **** 	Qidret = xCdcTxTaskSendCreate(3);
 286:Src/main.c    **** 	if (Qidret < 0) morse_trap(4); // Maybe add panic led flashing here
 287:Src/main.c    **** 
 288:Src/main.c    ****   /* definition and creation of CanTxTask - CAN driver TX interface. */
 289:Src/main.c    ****   Qidret = xCanTxTaskCreate(0, 32); // CanTask priority, Number of msgs in queue
 290:Src/main.c    **** 	if (Qidret < 0) morse_trap(5); // Panic LED flashing
 291:Src/main.c    **** 
 292:Src/main.c    ****   /* definition and creation of CanRxTask - CAN driver RX interface. */
 293:Src/main.c    **** //  Qidret = xCanRxTaskCreate(1, 32); // CanTask priority, Number of msgs in queue
 294:Src/main.c    **** //	if (Qidret < 0) morse_trap(6); // Panic LED flashing
 295:Src/main.c    **** 
 296:Src/main.c    **** 	/* Setup TX linked list for CAN  */
 297:Src/main.c    ****    // CAN1 (CAN_HandleTypeDef *phcan, uint8_t canidx, uint16_t numtx, uint16_t numrx);
 298:Src/main.c    **** 	pctl1 = can_iface_init(&hcan1, 1, 32, 64);
 299:Src/main.c    **** 	if (pctl1 == NULL) morse_trap(7); // Panic LED flashing
 300:Src/main.c    **** 	if (pctl1->ret < 0) morse_trap(77);
 301:Src/main.c    **** 
 302:Src/main.c    **** 	// CAN 2
 303:Src/main.c    **** 	pctl2 = can_iface_init(&hcan2, 2, 8, 16);
 304:Src/main.c    **** 	if (pctl2 == NULL) morse_trap(8); // Panic LED flashing
 305:Src/main.c    **** 
 306:Src/main.c    **** 	/* Setup CAN hardware filters to default to accept all ids. */
 307:Src/main.c    **** 	HAL_StatusTypeDef Cret;
 308:Src/main.c    **** 	Cret = canfilter_setup_first(1, &hcan1, 15); // CAN1
 309:Src/main.c    **** 	if (Cret == HAL_ERROR) morse_trap(9);
 310:Src/main.c    **** 
 311:Src/main.c    **** //	Cret = canfilter_setup_first(2, &hcan2, 15); // CAN2
 312:Src/main.c    **** //	if (Cret == HAL_ERROR) morse_trap(10);
 313:Src/main.c    **** 
 314:Src/main.c    **** 	/* Remove "accept all" CAN msgs and add specific id & mask, or id here. */
 315:Src/main.c    **** 	// See canfilter_setup.h
ARM GAS  /tmp/cc0KX3zJ.s 			page 7


 316:Src/main.c    **** 
 317:Src/main.c    **** 	/* Create MailboxTask */
 318:Src/main.c    **** 	xMailboxTaskCreate(1);
 319:Src/main.c    **** 
 320:Src/main.c    **** 	/* Create GatewayTask */
 321:Src/main.c    **** 	xGatewayTaskCreate(0);
 322:Src/main.c    **** 
 323:Src/main.c    **** 	/* Create Mailbox control block w 'take' pointer for each CAN module. */
 324:Src/main.c    **** 	struct MAILBOXCANNUM* pmbxret;
 325:Src/main.c    **** 	// (CAN1 control block pointer, size of circular buffer)
 326:Src/main.c    **** 	pmbxret = MailboxTask_add_CANlist(pctl1, 48);
 327:Src/main.c    **** 	if (pmbxret == NULL) morse_trap(16);
 328:Src/main.c    **** 
 329:Src/main.c    **** 	// (CAN2 control block pointer, size of circular buffer)
 330:Src/main.c    **** //	MailboxTask_add_CANlist(pctl1, 0); // Use default buff size
 331:Src/main.c    **** //	if (pmbxret == NULL) morse_trap(17);
 332:Src/main.c    **** 
 333:Src/main.c    **** 	/* Further initialization of mailboxes takes place when tasks start */
 334:Src/main.c    **** 
 335:Src/main.c    **** 	/* Select interrupts for CAN1 */
 336:Src/main.c    **** 	HAL_CAN_ActivateNotification(&hcan1, \
 337:Src/main.c    **** 		CAN_IT_TX_MAILBOX_EMPTY     |  \
 338:Src/main.c    **** 		CAN_IT_RX_FIFO0_MSG_PENDING |  \
 339:Src/main.c    **** 		CAN_IT_RX_FIFO1_MSG_PENDING    );
 340:Src/main.c    **** 
 341:Src/main.c    **** 	/* Start CANs */
 342:Src/main.c    **** 	HAL_CAN_Start(&hcan1); // CAN1
 343:Src/main.c    **** //	HAL_CAN_Start(&hcan2); // CAN2
 344:Src/main.c    **** 
 345:Src/main.c    **** 	/* ADC summing, calibration, etc. */
 346:Src/main.c    **** 	xADCTaskCreate(2);
 347:Src/main.c    **** 
 348:Src/main.c    **** /* =================================================== */
 349:Src/main.c    **** 
 350:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 351:Src/main.c    **** 
 352:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 353:Src/main.c    ****   /* add queues, ... */
 354:Src/main.c    **** 
 355:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 356:Src/main.c    ****  
 357:Src/main.c    **** 
 358:Src/main.c    ****   /* Start scheduler */
 359:Src/main.c    ****   osKernelStart();
 360:Src/main.c    ****   
 361:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 362:Src/main.c    **** 
 363:Src/main.c    ****   /* Infinite loop */
 364:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 365:Src/main.c    ****   while (1)
 366:Src/main.c    ****   {
 367:Src/main.c    ****     /* USER CODE END WHILE */
 368:Src/main.c    **** 
 369:Src/main.c    ****     /* USER CODE BEGIN 3 */
 370:Src/main.c    ****   }
 371:Src/main.c    ****   /* USER CODE END 3 */
 372:Src/main.c    **** }
ARM GAS  /tmp/cc0KX3zJ.s 			page 8


 373:Src/main.c    **** 
 374:Src/main.c    **** /**
 375:Src/main.c    ****   * @brief System Clock Configuration
 376:Src/main.c    ****   * @retval None
 377:Src/main.c    ****   */
 378:Src/main.c    **** void SystemClock_Config(void)
 379:Src/main.c    **** {
 380:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 381:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 382:Src/main.c    **** 
 383:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 384:Src/main.c    ****   */
 385:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 386:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 387:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 388:Src/main.c    ****   */
 389:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 390:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 391:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 392:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 393:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 394:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 395:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 396:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 397:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 398:Src/main.c    ****   {
 399:Src/main.c    ****     Error_Handler();
 400:Src/main.c    ****   }
 401:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 402:Src/main.c    ****   */
 403:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 404:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 405:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 406:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 407:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 408:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 409:Src/main.c    **** 
 410:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 411:Src/main.c    ****   {
 412:Src/main.c    ****     Error_Handler();
 413:Src/main.c    ****   }
 414:Src/main.c    **** }
 415:Src/main.c    **** 
 416:Src/main.c    **** /**
 417:Src/main.c    ****   * @brief ADC1 Initialization Function
 418:Src/main.c    ****   * @param None
 419:Src/main.c    ****   * @retval None
 420:Src/main.c    ****   */
 421:Src/main.c    **** static void MX_ADC1_Init(void)
 422:Src/main.c    **** {
 423:Src/main.c    **** 
 424:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 425:Src/main.c    **** 
 426:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 427:Src/main.c    **** 
 428:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 429:Src/main.c    **** 
ARM GAS  /tmp/cc0KX3zJ.s 			page 9


 430:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 431:Src/main.c    **** 
 432:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 433:Src/main.c    ****   /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conv
 434:Src/main.c    ****   */
 435:Src/main.c    ****   hadc1.Instance = ADC1;
 436:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 437:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 438:Src/main.c    ****   hadc1.Init.ScanConvMode = ENABLE;
 439:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 440:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 441:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 442:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 443:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 444:Src/main.c    ****   hadc1.Init.NbrOfConversion = 10;
 445:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 446:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 447:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 448:Src/main.c    ****   {
 449:Src/main.c    ****     Error_Handler();
 450:Src/main.c    ****   }
 451:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 452:Src/main.c    ****   */
 453:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 454:Src/main.c    ****   sConfig.Rank = 1;
 455:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 456:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 457:Src/main.c    ****   {
 458:Src/main.c    ****     Error_Handler();
 459:Src/main.c    ****   }
 460:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 461:Src/main.c    ****   */
 462:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 463:Src/main.c    ****   sConfig.Rank = 2;
 464:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 465:Src/main.c    ****   {
 466:Src/main.c    ****     Error_Handler();
 467:Src/main.c    ****   }
 468:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 469:Src/main.c    ****   */
 470:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_6;
 471:Src/main.c    ****   sConfig.Rank = 3;
 472:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 473:Src/main.c    ****   {
 474:Src/main.c    ****     Error_Handler();
 475:Src/main.c    ****   }
 476:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 477:Src/main.c    ****   */
 478:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_7;
 479:Src/main.c    ****   sConfig.Rank = 4;
 480:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 481:Src/main.c    ****   {
 482:Src/main.c    ****     Error_Handler();
 483:Src/main.c    ****   }
 484:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 485:Src/main.c    ****   */
 486:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_8;
ARM GAS  /tmp/cc0KX3zJ.s 			page 10


 487:Src/main.c    ****   sConfig.Rank = 5;
 488:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 489:Src/main.c    ****   {
 490:Src/main.c    ****     Error_Handler();
 491:Src/main.c    ****   }
 492:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 493:Src/main.c    ****   */
 494:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_11;
 495:Src/main.c    ****   sConfig.Rank = 6;
 496:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 497:Src/main.c    ****   {
 498:Src/main.c    ****     Error_Handler();
 499:Src/main.c    ****   }
 500:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 501:Src/main.c    ****   */
 502:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_12;
 503:Src/main.c    ****   sConfig.Rank = 7;
 504:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 505:Src/main.c    ****   {
 506:Src/main.c    ****     Error_Handler();
 507:Src/main.c    ****   }
 508:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 509:Src/main.c    ****   */
 510:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_15;
 511:Src/main.c    ****   sConfig.Rank = 8;
 512:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 513:Src/main.c    ****   {
 514:Src/main.c    ****     Error_Handler();
 515:Src/main.c    ****   }
 516:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 517:Src/main.c    ****   */
 518:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 519:Src/main.c    ****   sConfig.Rank = 9;
 520:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 521:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 522:Src/main.c    ****   {
 523:Src/main.c    ****     Error_Handler();
 524:Src/main.c    ****   }
 525:Src/main.c    ****   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its
 526:Src/main.c    ****   */
 527:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_VREFINT;
 528:Src/main.c    ****   sConfig.Rank = 10;
 529:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 530:Src/main.c    ****   {
 531:Src/main.c    ****     Error_Handler();
 532:Src/main.c    ****   }
 533:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 534:Src/main.c    **** 
 535:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 536:Src/main.c    **** 
 537:Src/main.c    **** }
 538:Src/main.c    **** 
 539:Src/main.c    **** /**
 540:Src/main.c    ****   * @brief CAN1 Initialization Function
 541:Src/main.c    ****   * @param None
 542:Src/main.c    ****   * @retval None
 543:Src/main.c    ****   */
ARM GAS  /tmp/cc0KX3zJ.s 			page 11


 544:Src/main.c    **** static void MX_CAN1_Init(void)
 545:Src/main.c    **** {
 546:Src/main.c    **** 
 547:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 548:Src/main.c    **** 
 549:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 550:Src/main.c    **** 
 551:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 552:Src/main.c    **** 
 553:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 554:Src/main.c    ****   hcan1.Instance = CAN1;
 555:Src/main.c    ****   hcan1.Init.Prescaler = 12;
 556:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 557:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 558:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 559:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 560:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 561:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 562:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 563:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 564:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 565:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 566:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 567:Src/main.c    ****   {
 568:Src/main.c    ****     Error_Handler();
 569:Src/main.c    ****   }
 570:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 571:Src/main.c    **** 
 572:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 573:Src/main.c    **** 
 574:Src/main.c    **** }
 575:Src/main.c    **** 
 576:Src/main.c    **** /**
 577:Src/main.c    ****   * @brief CAN2 Initialization Function
 578:Src/main.c    ****   * @param None
 579:Src/main.c    ****   * @retval None
 580:Src/main.c    ****   */
 581:Src/main.c    **** static void MX_CAN2_Init(void)
 582:Src/main.c    **** {
 583:Src/main.c    **** 
 584:Src/main.c    ****   /* USER CODE BEGIN CAN2_Init 0 */
 585:Src/main.c    **** 
 586:Src/main.c    ****   /* USER CODE END CAN2_Init 0 */
 587:Src/main.c    **** 
 588:Src/main.c    ****   /* USER CODE BEGIN CAN2_Init 1 */
 589:Src/main.c    **** 
 590:Src/main.c    ****   /* USER CODE END CAN2_Init 1 */
 591:Src/main.c    ****   hcan2.Instance = CAN2;
 592:Src/main.c    ****   hcan2.Init.Prescaler = 12;
 593:Src/main.c    ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 594:Src/main.c    ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 595:Src/main.c    ****   hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 596:Src/main.c    ****   hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 597:Src/main.c    ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 598:Src/main.c    ****   hcan2.Init.AutoBusOff = DISABLE;
 599:Src/main.c    ****   hcan2.Init.AutoWakeUp = DISABLE;
 600:Src/main.c    ****   hcan2.Init.AutoRetransmission = DISABLE;
ARM GAS  /tmp/cc0KX3zJ.s 			page 12


 601:Src/main.c    ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 602:Src/main.c    ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 603:Src/main.c    ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 604:Src/main.c    ****   {
 605:Src/main.c    ****     Error_Handler();
 606:Src/main.c    ****   }
 607:Src/main.c    ****   /* USER CODE BEGIN CAN2_Init 2 */
 608:Src/main.c    **** 
 609:Src/main.c    ****   /* USER CODE END CAN2_Init 2 */
 610:Src/main.c    **** 
 611:Src/main.c    **** }
 612:Src/main.c    **** 
 613:Src/main.c    **** /**
 614:Src/main.c    ****   * @brief USART2 Initialization Function
 615:Src/main.c    ****   * @param None
 616:Src/main.c    ****   * @retval None
 617:Src/main.c    ****   */
 618:Src/main.c    **** static void MX_USART2_UART_Init(void)
 619:Src/main.c    **** {
 620:Src/main.c    **** 
 621:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 622:Src/main.c    **** 
 623:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 624:Src/main.c    **** 
 625:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 626:Src/main.c    **** 
 627:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 628:Src/main.c    ****   huart2.Instance = USART2;
 629:Src/main.c    ****   huart2.Init.BaudRate = 2000000;
 630:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 631:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 632:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 633:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 634:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 635:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 636:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 637:Src/main.c    ****   {
 638:Src/main.c    ****     Error_Handler();
 639:Src/main.c    ****   }
 640:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 641:Src/main.c    **** 
 642:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 643:Src/main.c    **** 
 644:Src/main.c    **** }
 645:Src/main.c    **** 
 646:Src/main.c    **** /**
 647:Src/main.c    ****   * @brief USART6 Initialization Function
 648:Src/main.c    ****   * @param None
 649:Src/main.c    ****   * @retval None
 650:Src/main.c    ****   */
 651:Src/main.c    **** static void MX_USART6_UART_Init(void)
 652:Src/main.c    **** {
 653:Src/main.c    **** 
 654:Src/main.c    ****   /* USER CODE BEGIN USART6_Init 0 */
 655:Src/main.c    **** 
 656:Src/main.c    ****   /* USER CODE END USART6_Init 0 */
 657:Src/main.c    **** 
ARM GAS  /tmp/cc0KX3zJ.s 			page 13


 658:Src/main.c    ****   /* USER CODE BEGIN USART6_Init 1 */
 659:Src/main.c    **** 
 660:Src/main.c    ****   /* USER CODE END USART6_Init 1 */
 661:Src/main.c    ****   huart6.Instance = USART6;
 662:Src/main.c    ****   huart6.Init.BaudRate = 115200;
 663:Src/main.c    ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 664:Src/main.c    ****   huart6.Init.StopBits = UART_STOPBITS_1;
 665:Src/main.c    ****   huart6.Init.Parity = UART_PARITY_NONE;
 666:Src/main.c    ****   huart6.Init.Mode = UART_MODE_TX_RX;
 667:Src/main.c    ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 668:Src/main.c    ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 669:Src/main.c    ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 670:Src/main.c    ****   {
 671:Src/main.c    ****     Error_Handler();
 672:Src/main.c    ****   }
 673:Src/main.c    ****   /* USER CODE BEGIN USART6_Init 2 */
 674:Src/main.c    **** 
 675:Src/main.c    ****   /* USER CODE END USART6_Init 2 */
 676:Src/main.c    **** 
 677:Src/main.c    **** }
 678:Src/main.c    **** 
 679:Src/main.c    **** /** 
 680:Src/main.c    ****   * Enable DMA controller clock
 681:Src/main.c    ****   */
 682:Src/main.c    **** static void MX_DMA_Init(void) 
 683:Src/main.c    **** {
 684:Src/main.c    ****   /* DMA controller clock enable */
 685:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 686:Src/main.c    ****   __HAL_RCC_DMA2_CLK_ENABLE();
 687:Src/main.c    **** 
 688:Src/main.c    ****   /* DMA interrupt init */
 689:Src/main.c    ****   /* DMA1_Stream5_IRQn interrupt configuration */
 690:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 691:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 692:Src/main.c    ****   /* DMA1_Stream6_IRQn interrupt configuration */
 693:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 694:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 695:Src/main.c    ****   /* DMA2_Stream0_IRQn interrupt configuration */
 696:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 697:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 698:Src/main.c    ****   /* DMA2_Stream1_IRQn interrupt configuration */
 699:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 7, 0);
 700:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 701:Src/main.c    ****   /* DMA2_Stream6_IRQn interrupt configuration */
 702:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 7, 0);
 703:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 704:Src/main.c    **** 
 705:Src/main.c    **** }
 706:Src/main.c    **** 
 707:Src/main.c    **** /**
 708:Src/main.c    ****   * @brief GPIO Initialization Function
 709:Src/main.c    ****   * @param None
 710:Src/main.c    ****   * @retval None
 711:Src/main.c    ****   */
 712:Src/main.c    **** static void MX_GPIO_Init(void)
 713:Src/main.c    **** {
  29              		.loc 1 713 0
ARM GAS  /tmp/cc0KX3zJ.s 			page 14


  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 40
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 30B5     		push	{r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 8BB0     		sub	sp, sp, #44
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 56
 714:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 714 0
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
  49              	.LBB2:
 715:Src/main.c    **** 
 716:Src/main.c    ****   /* GPIO Ports Clock Enable */
 717:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  50              		.loc 1 717 0
  51 0010 0094     		str	r4, [sp]
  52 0012 234B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F08002 		orr	r2, r2, #128
  55 001a 1A63     		str	r2, [r3, #48]
  56 001c 1A6B     		ldr	r2, [r3, #48]
  57 001e 02F08002 		and	r2, r2, #128
  58 0022 0092     		str	r2, [sp]
  59 0024 009A     		ldr	r2, [sp]
  60              	.LBE2:
  61              	.LBB3:
 718:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  62              		.loc 1 718 0
  63 0026 0194     		str	r4, [sp, #4]
  64 0028 1A6B     		ldr	r2, [r3, #48]
  65 002a 42F00402 		orr	r2, r2, #4
  66 002e 1A63     		str	r2, [r3, #48]
  67 0030 1A6B     		ldr	r2, [r3, #48]
  68 0032 02F00402 		and	r2, r2, #4
  69 0036 0192     		str	r2, [sp, #4]
  70 0038 019A     		ldr	r2, [sp, #4]
  71              	.LBE3:
  72              	.LBB4:
 719:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  73              		.loc 1 719 0
  74 003a 0294     		str	r4, [sp, #8]
  75 003c 1A6B     		ldr	r2, [r3, #48]
  76 003e 42F00102 		orr	r2, r2, #1
  77 0042 1A63     		str	r2, [r3, #48]
  78 0044 1A6B     		ldr	r2, [r3, #48]
  79 0046 02F00102 		and	r2, r2, #1
  80 004a 0292     		str	r2, [sp, #8]
ARM GAS  /tmp/cc0KX3zJ.s 			page 15


  81 004c 029A     		ldr	r2, [sp, #8]
  82              	.LBE4:
  83              	.LBB5:
 720:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  84              		.loc 1 720 0
  85 004e 0394     		str	r4, [sp, #12]
  86 0050 1A6B     		ldr	r2, [r3, #48]
  87 0052 42F00202 		orr	r2, r2, #2
  88 0056 1A63     		str	r2, [r3, #48]
  89 0058 1A6B     		ldr	r2, [r3, #48]
  90 005a 02F00202 		and	r2, r2, #2
  91 005e 0392     		str	r2, [sp, #12]
  92 0060 039A     		ldr	r2, [sp, #12]
  93              	.LBE5:
  94              	.LBB6:
 721:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  95              		.loc 1 721 0
  96 0062 0494     		str	r4, [sp, #16]
  97 0064 1A6B     		ldr	r2, [r3, #48]
  98 0066 42F00802 		orr	r2, r2, #8
  99 006a 1A63     		str	r2, [r3, #48]
 100 006c 1B6B     		ldr	r3, [r3, #48]
 101 006e 03F00803 		and	r3, r3, #8
 102 0072 0493     		str	r3, [sp, #16]
 103 0074 049B     		ldr	r3, [sp, #16]
 104              	.LBE6:
 722:Src/main.c    **** 
 723:Src/main.c    ****   /*Configure GPIO pin Output Level */
 724:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 105              		.loc 1 724 0
 106 0076 0B4D     		ldr	r5, .L3+4
 107 0078 2246     		mov	r2, r4
 108 007a 4FF47041 		mov	r1, #61440
 109 007e 2846     		mov	r0, r5
 110 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 111              	.LVL0:
 725:Src/main.c    **** 
 726:Src/main.c    ****   /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
 727:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 112              		.loc 1 727 0
 113 0084 4FF47043 		mov	r3, #61440
 114 0088 0593     		str	r3, [sp, #20]
 728:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 115              		.loc 1 728 0
 116 008a 0123     		movs	r3, #1
 117 008c 0693     		str	r3, [sp, #24]
 729:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 118              		.loc 1 729 0
 119 008e 0794     		str	r4, [sp, #28]
 730:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 120              		.loc 1 730 0
 121 0090 0894     		str	r4, [sp, #32]
 731:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 122              		.loc 1 731 0
 123 0092 05A9     		add	r1, sp, #20
 124 0094 2846     		mov	r0, r5
 125 0096 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cc0KX3zJ.s 			page 16


 126              	.LVL1:
 732:Src/main.c    **** 
 733:Src/main.c    **** }
 127              		.loc 1 733 0
 128 009a 0BB0     		add	sp, sp, #44
 129              	.LCFI2:
 130              		.cfi_def_cfa_offset 12
 131              		@ sp needed
 132 009c 30BD     		pop	{r4, r5, pc}
 133              	.L4:
 134 009e 00BF     		.align	2
 135              	.L3:
 136 00a0 00380240 		.word	1073887232
 137 00a4 000C0240 		.word	1073875968
 138              		.cfi_endproc
 139              	.LFE138:
 141              		.section	.text.MX_DMA_Init,"ax",%progbits
 142              		.align	2
 143              		.thumb
 144              		.thumb_func
 146              	MX_DMA_Init:
 147              	.LFB137:
 683:Src/main.c    ****   /* DMA controller clock enable */
 148              		.loc 1 683 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152 0000 10B5     		push	{r4, lr}
 153              	.LCFI3:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 4, -8
 156              		.cfi_offset 14, -4
 157 0002 82B0     		sub	sp, sp, #8
 158              	.LCFI4:
 159              		.cfi_def_cfa_offset 16
 160              	.LBB7:
 685:Src/main.c    ****   __HAL_RCC_DMA2_CLK_ENABLE();
 161              		.loc 1 685 0
 162 0004 0024     		movs	r4, #0
 163 0006 0094     		str	r4, [sp]
 164 0008 1E4B     		ldr	r3, .L7
 165 000a 1A6B     		ldr	r2, [r3, #48]
 166 000c 42F40012 		orr	r2, r2, #2097152
 167 0010 1A63     		str	r2, [r3, #48]
 168 0012 1A6B     		ldr	r2, [r3, #48]
 169 0014 02F40012 		and	r2, r2, #2097152
 170 0018 0092     		str	r2, [sp]
 171 001a 009A     		ldr	r2, [sp]
 172              	.LBE7:
 173              	.LBB8:
 686:Src/main.c    **** 
 174              		.loc 1 686 0
 175 001c 0194     		str	r4, [sp, #4]
 176 001e 1A6B     		ldr	r2, [r3, #48]
 177 0020 42F48002 		orr	r2, r2, #4194304
 178 0024 1A63     		str	r2, [r3, #48]
 179 0026 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/cc0KX3zJ.s 			page 17


 180 0028 03F48003 		and	r3, r3, #4194304
 181 002c 0193     		str	r3, [sp, #4]
 182 002e 019B     		ldr	r3, [sp, #4]
 183              	.LBE8:
 690:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 184              		.loc 1 690 0
 185 0030 2246     		mov	r2, r4
 186 0032 0621     		movs	r1, #6
 187 0034 1020     		movs	r0, #16
 188 0036 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 189              	.LVL2:
 691:Src/main.c    ****   /* DMA1_Stream6_IRQn interrupt configuration */
 190              		.loc 1 691 0
 191 003a 1020     		movs	r0, #16
 192 003c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 193              	.LVL3:
 693:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 194              		.loc 1 693 0
 195 0040 2246     		mov	r2, r4
 196 0042 0621     		movs	r1, #6
 197 0044 1120     		movs	r0, #17
 198 0046 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 199              	.LVL4:
 694:Src/main.c    ****   /* DMA2_Stream0_IRQn interrupt configuration */
 200              		.loc 1 694 0
 201 004a 1120     		movs	r0, #17
 202 004c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 203              	.LVL5:
 696:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 204              		.loc 1 696 0
 205 0050 2246     		mov	r2, r4
 206 0052 0521     		movs	r1, #5
 207 0054 3820     		movs	r0, #56
 208 0056 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 209              	.LVL6:
 697:Src/main.c    ****   /* DMA2_Stream1_IRQn interrupt configuration */
 210              		.loc 1 697 0
 211 005a 3820     		movs	r0, #56
 212 005c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 213              	.LVL7:
 699:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 214              		.loc 1 699 0
 215 0060 2246     		mov	r2, r4
 216 0062 0721     		movs	r1, #7
 217 0064 3920     		movs	r0, #57
 218 0066 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 219              	.LVL8:
 700:Src/main.c    ****   /* DMA2_Stream6_IRQn interrupt configuration */
 220              		.loc 1 700 0
 221 006a 3920     		movs	r0, #57
 222 006c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 223              	.LVL9:
 702:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 224              		.loc 1 702 0
 225 0070 2246     		mov	r2, r4
 226 0072 0721     		movs	r1, #7
 227 0074 4520     		movs	r0, #69
ARM GAS  /tmp/cc0KX3zJ.s 			page 18


 228 0076 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 229              	.LVL10:
 703:Src/main.c    **** 
 230              		.loc 1 703 0
 231 007a 4520     		movs	r0, #69
 232 007c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 233              	.LVL11:
 705:Src/main.c    **** 
 234              		.loc 1 705 0
 235 0080 02B0     		add	sp, sp, #8
 236              	.LCFI5:
 237              		.cfi_def_cfa_offset 8
 238              		@ sp needed
 239 0082 10BD     		pop	{r4, pc}
 240              	.L8:
 241              		.align	2
 242              	.L7:
 243 0084 00380240 		.word	1073887232
 244              		.cfi_endproc
 245              	.LFE137:
 247              		.section	.text.MX_USART6_UART_Init,"ax",%progbits
 248              		.align	2
 249              		.thumb
 250              		.thumb_func
 252              	MX_USART6_UART_Init:
 253              	.LFB136:
 652:Src/main.c    **** 
 254              		.loc 1 652 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258 0000 08B5     		push	{r3, lr}
 259              	.LCFI6:
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 3, -8
 262              		.cfi_offset 14, -4
 661:Src/main.c    ****   huart6.Init.BaudRate = 115200;
 263              		.loc 1 661 0
 264 0002 0848     		ldr	r0, .L11
 265 0004 084B     		ldr	r3, .L11+4
 266 0006 0360     		str	r3, [r0]
 662:Src/main.c    ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 267              		.loc 1 662 0
 268 0008 4FF4E133 		mov	r3, #115200
 269 000c 4360     		str	r3, [r0, #4]
 663:Src/main.c    ****   huart6.Init.StopBits = UART_STOPBITS_1;
 270              		.loc 1 663 0
 271 000e 0023     		movs	r3, #0
 272 0010 8360     		str	r3, [r0, #8]
 664:Src/main.c    ****   huart6.Init.Parity = UART_PARITY_NONE;
 273              		.loc 1 664 0
 274 0012 C360     		str	r3, [r0, #12]
 665:Src/main.c    ****   huart6.Init.Mode = UART_MODE_TX_RX;
 275              		.loc 1 665 0
 276 0014 0361     		str	r3, [r0, #16]
 666:Src/main.c    ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 277              		.loc 1 666 0
ARM GAS  /tmp/cc0KX3zJ.s 			page 19


 278 0016 0C22     		movs	r2, #12
 279 0018 4261     		str	r2, [r0, #20]
 667:Src/main.c    ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 280              		.loc 1 667 0
 281 001a 8361     		str	r3, [r0, #24]
 668:Src/main.c    ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 282              		.loc 1 668 0
 283 001c C361     		str	r3, [r0, #28]
 669:Src/main.c    ****   {
 284              		.loc 1 669 0
 285 001e FFF7FEFF 		bl	HAL_UART_Init
 286              	.LVL12:
 287 0022 08BD     		pop	{r3, pc}
 288              	.L12:
 289              		.align	2
 290              	.L11:
 291 0024 00000000 		.word	huart6
 292 0028 00140140 		.word	1073812480
 293              		.cfi_endproc
 294              	.LFE136:
 296              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 297              		.align	2
 298              		.thumb
 299              		.thumb_func
 301              	MX_USART2_UART_Init:
 302              	.LFB135:
 619:Src/main.c    **** 
 303              		.loc 1 619 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307 0000 08B5     		push	{r3, lr}
 308              	.LCFI7:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 3, -8
 311              		.cfi_offset 14, -4
 628:Src/main.c    ****   huart2.Init.BaudRate = 2000000;
 312              		.loc 1 628 0
 313 0002 0848     		ldr	r0, .L15
 314 0004 084B     		ldr	r3, .L15+4
 315 0006 0360     		str	r3, [r0]
 629:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 316              		.loc 1 629 0
 317 0008 084B     		ldr	r3, .L15+8
 318 000a 4360     		str	r3, [r0, #4]
 630:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 319              		.loc 1 630 0
 320 000c 0023     		movs	r3, #0
 321 000e 8360     		str	r3, [r0, #8]
 631:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 322              		.loc 1 631 0
 323 0010 C360     		str	r3, [r0, #12]
 632:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 324              		.loc 1 632 0
 325 0012 0361     		str	r3, [r0, #16]
 633:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 326              		.loc 1 633 0
ARM GAS  /tmp/cc0KX3zJ.s 			page 20


 327 0014 0C22     		movs	r2, #12
 328 0016 4261     		str	r2, [r0, #20]
 634:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 329              		.loc 1 634 0
 330 0018 8361     		str	r3, [r0, #24]
 635:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 331              		.loc 1 635 0
 332 001a C361     		str	r3, [r0, #28]
 636:Src/main.c    ****   {
 333              		.loc 1 636 0
 334 001c FFF7FEFF 		bl	HAL_UART_Init
 335              	.LVL13:
 336 0020 08BD     		pop	{r3, pc}
 337              	.L16:
 338 0022 00BF     		.align	2
 339              	.L15:
 340 0024 00000000 		.word	huart2
 341 0028 00440040 		.word	1073759232
 342 002c 80841E00 		.word	2000000
 343              		.cfi_endproc
 344              	.LFE135:
 346              		.section	.text.MX_CAN1_Init,"ax",%progbits
 347              		.align	2
 348              		.thumb
 349              		.thumb_func
 351              	MX_CAN1_Init:
 352              	.LFB133:
 545:Src/main.c    **** 
 353              		.loc 1 545 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 08B5     		push	{r3, lr}
 358              	.LCFI8:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 3, -8
 361              		.cfi_offset 14, -4
 554:Src/main.c    ****   hcan1.Init.Prescaler = 12;
 362              		.loc 1 554 0
 363 0002 0A48     		ldr	r0, .L19
 364 0004 0A4B     		ldr	r3, .L19+4
 365 0006 0360     		str	r3, [r0]
 555:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 366              		.loc 1 555 0
 367 0008 0C23     		movs	r3, #12
 368 000a 4360     		str	r3, [r0, #4]
 556:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 369              		.loc 1 556 0
 370 000c 0023     		movs	r3, #0
 371 000e 8360     		str	r3, [r0, #8]
 557:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 372              		.loc 1 557 0
 373 0010 C360     		str	r3, [r0, #12]
 558:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 374              		.loc 1 558 0
 375 0012 4FF48022 		mov	r2, #262144
 376 0016 0261     		str	r2, [r0, #16]
ARM GAS  /tmp/cc0KX3zJ.s 			page 21


 559:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 377              		.loc 1 559 0
 378 0018 4361     		str	r3, [r0, #20]
 560:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 379              		.loc 1 560 0
 380 001a 0376     		strb	r3, [r0, #24]
 561:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 381              		.loc 1 561 0
 382 001c 4376     		strb	r3, [r0, #25]
 562:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 383              		.loc 1 562 0
 384 001e 8376     		strb	r3, [r0, #26]
 563:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 385              		.loc 1 563 0
 386 0020 C376     		strb	r3, [r0, #27]
 564:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 387              		.loc 1 564 0
 388 0022 0377     		strb	r3, [r0, #28]
 565:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 389              		.loc 1 565 0
 390 0024 4377     		strb	r3, [r0, #29]
 566:Src/main.c    ****   {
 391              		.loc 1 566 0
 392 0026 FFF7FEFF 		bl	HAL_CAN_Init
 393              	.LVL14:
 394 002a 08BD     		pop	{r3, pc}
 395              	.L20:
 396              		.align	2
 397              	.L19:
 398 002c 00000000 		.word	hcan1
 399 0030 00640040 		.word	1073767424
 400              		.cfi_endproc
 401              	.LFE133:
 403              		.section	.text.MX_CAN2_Init,"ax",%progbits
 404              		.align	2
 405              		.thumb
 406              		.thumb_func
 408              	MX_CAN2_Init:
 409              	.LFB134:
 582:Src/main.c    **** 
 410              		.loc 1 582 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414 0000 08B5     		push	{r3, lr}
 415              	.LCFI9:
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 3, -8
 418              		.cfi_offset 14, -4
 591:Src/main.c    ****   hcan2.Init.Prescaler = 12;
 419              		.loc 1 591 0
 420 0002 0A48     		ldr	r0, .L23
 421 0004 0A4B     		ldr	r3, .L23+4
 422 0006 0360     		str	r3, [r0]
 592:Src/main.c    ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 423              		.loc 1 592 0
 424 0008 0C23     		movs	r3, #12
ARM GAS  /tmp/cc0KX3zJ.s 			page 22


 425 000a 4360     		str	r3, [r0, #4]
 593:Src/main.c    ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 426              		.loc 1 593 0
 427 000c 0023     		movs	r3, #0
 428 000e 8360     		str	r3, [r0, #8]
 594:Src/main.c    ****   hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 429              		.loc 1 594 0
 430 0010 C360     		str	r3, [r0, #12]
 595:Src/main.c    ****   hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 431              		.loc 1 595 0
 432 0012 4FF48022 		mov	r2, #262144
 433 0016 0261     		str	r2, [r0, #16]
 596:Src/main.c    ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 434              		.loc 1 596 0
 435 0018 4361     		str	r3, [r0, #20]
 597:Src/main.c    ****   hcan2.Init.AutoBusOff = DISABLE;
 436              		.loc 1 597 0
 437 001a 0376     		strb	r3, [r0, #24]
 598:Src/main.c    ****   hcan2.Init.AutoWakeUp = DISABLE;
 438              		.loc 1 598 0
 439 001c 4376     		strb	r3, [r0, #25]
 599:Src/main.c    ****   hcan2.Init.AutoRetransmission = DISABLE;
 440              		.loc 1 599 0
 441 001e 8376     		strb	r3, [r0, #26]
 600:Src/main.c    ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 442              		.loc 1 600 0
 443 0020 C376     		strb	r3, [r0, #27]
 601:Src/main.c    ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 444              		.loc 1 601 0
 445 0022 0377     		strb	r3, [r0, #28]
 602:Src/main.c    ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 446              		.loc 1 602 0
 447 0024 4377     		strb	r3, [r0, #29]
 603:Src/main.c    ****   {
 448              		.loc 1 603 0
 449 0026 FFF7FEFF 		bl	HAL_CAN_Init
 450              	.LVL15:
 451 002a 08BD     		pop	{r3, pc}
 452              	.L24:
 453              		.align	2
 454              	.L23:
 455 002c 00000000 		.word	hcan2
 456 0030 00680040 		.word	1073768448
 457              		.cfi_endproc
 458              	.LFE134:
 460              		.section	.text.MX_ADC1_Init,"ax",%progbits
 461              		.align	2
 462              		.thumb
 463              		.thumb_func
 465              	MX_ADC1_Init:
 466              	.LFB132:
 422:Src/main.c    **** 
 467              		.loc 1 422 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 16
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/cc0KX3zJ.s 			page 23


 472              	.LCFI10:
 473              		.cfi_def_cfa_offset 28
 474              		.cfi_offset 4, -28
 475              		.cfi_offset 5, -24
 476              		.cfi_offset 6, -20
 477              		.cfi_offset 7, -16
 478              		.cfi_offset 8, -12
 479              		.cfi_offset 9, -8
 480              		.cfi_offset 14, -4
 481 0004 85B0     		sub	sp, sp, #20
 482              	.LCFI11:
 483              		.cfi_def_cfa_offset 48
 428:Src/main.c    **** 
 484              		.loc 1 428 0
 485 0006 0023     		movs	r3, #0
 486 0008 0093     		str	r3, [sp]
 487 000a 0193     		str	r3, [sp, #4]
 488 000c 0293     		str	r3, [sp, #8]
 489 000e 0393     		str	r3, [sp, #12]
 435:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 490              		.loc 1 435 0
 491 0010 344C     		ldr	r4, .L27
 492 0012 354A     		ldr	r2, .L27+4
 493 0014 2260     		str	r2, [r4]
 436:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 494              		.loc 1 436 0
 495 0016 4FF48032 		mov	r2, #65536
 496 001a 6260     		str	r2, [r4, #4]
 437:Src/main.c    ****   hadc1.Init.ScanConvMode = ENABLE;
 497              		.loc 1 437 0
 498 001c A360     		str	r3, [r4, #8]
 438:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 499              		.loc 1 438 0
 500 001e 0125     		movs	r5, #1
 501 0020 2561     		str	r5, [r4, #16]
 439:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 502              		.loc 1 439 0
 503 0022 A561     		str	r5, [r4, #24]
 440:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 504              		.loc 1 440 0
 505 0024 2362     		str	r3, [r4, #32]
 441:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 506              		.loc 1 441 0
 507 0026 E362     		str	r3, [r4, #44]
 442:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 508              		.loc 1 442 0
 509 0028 304A     		ldr	r2, .L27+8
 510 002a A262     		str	r2, [r4, #40]
 443:Src/main.c    ****   hadc1.Init.NbrOfConversion = 10;
 511              		.loc 1 443 0
 512 002c E360     		str	r3, [r4, #12]
 444:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 513              		.loc 1 444 0
 514 002e 0A26     		movs	r6, #10
 515 0030 E661     		str	r6, [r4, #28]
 445:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 516              		.loc 1 445 0
ARM GAS  /tmp/cc0KX3zJ.s 			page 24


 517 0032 2563     		str	r5, [r4, #48]
 446:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 518              		.loc 1 446 0
 519 0034 6561     		str	r5, [r4, #20]
 447:Src/main.c    ****   {
 520              		.loc 1 447 0
 521 0036 2046     		mov	r0, r4
 522 0038 FFF7FEFF 		bl	HAL_ADC_Init
 523              	.LVL16:
 453:Src/main.c    ****   sConfig.Rank = 1;
 524              		.loc 1 453 0
 525 003c 0095     		str	r5, [sp]
 454:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 526              		.loc 1 454 0
 527 003e 0195     		str	r5, [sp, #4]
 455:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 528              		.loc 1 455 0
 529 0040 0325     		movs	r5, #3
 530 0042 0295     		str	r5, [sp, #8]
 456:Src/main.c    ****   {
 531              		.loc 1 456 0
 532 0044 6946     		mov	r1, sp
 533 0046 2046     		mov	r0, r4
 534 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 535              	.LVL17:
 462:Src/main.c    ****   sConfig.Rank = 2;
 536              		.loc 1 462 0
 537 004c 4FF00509 		mov	r9, #5
 538 0050 CDF80090 		str	r9, [sp]
 463:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 539              		.loc 1 463 0
 540 0054 0223     		movs	r3, #2
 541 0056 0193     		str	r3, [sp, #4]
 464:Src/main.c    ****   {
 542              		.loc 1 464 0
 543 0058 6946     		mov	r1, sp
 544 005a 2046     		mov	r0, r4
 545 005c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 546              	.LVL18:
 470:Src/main.c    ****   sConfig.Rank = 3;
 547              		.loc 1 470 0
 548 0060 4FF00608 		mov	r8, #6
 549 0064 CDF80080 		str	r8, [sp]
 471:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 550              		.loc 1 471 0
 551 0068 0195     		str	r5, [sp, #4]
 472:Src/main.c    ****   {
 552              		.loc 1 472 0
 553 006a 6946     		mov	r1, sp
 554 006c 2046     		mov	r0, r4
 555 006e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 556              	.LVL19:
 478:Src/main.c    ****   sConfig.Rank = 4;
 557              		.loc 1 478 0
 558 0072 0725     		movs	r5, #7
 559 0074 0095     		str	r5, [sp]
 479:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/cc0KX3zJ.s 			page 25


 560              		.loc 1 479 0
 561 0076 0423     		movs	r3, #4
 562 0078 0193     		str	r3, [sp, #4]
 480:Src/main.c    ****   {
 563              		.loc 1 480 0
 564 007a 6946     		mov	r1, sp
 565 007c 2046     		mov	r0, r4
 566 007e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 567              	.LVL20:
 486:Src/main.c    ****   sConfig.Rank = 5;
 568              		.loc 1 486 0
 569 0082 0827     		movs	r7, #8
 570 0084 0097     		str	r7, [sp]
 487:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 571              		.loc 1 487 0
 572 0086 CDF80490 		str	r9, [sp, #4]
 488:Src/main.c    ****   {
 573              		.loc 1 488 0
 574 008a 6946     		mov	r1, sp
 575 008c 2046     		mov	r0, r4
 576 008e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 577              	.LVL21:
 494:Src/main.c    ****   sConfig.Rank = 6;
 578              		.loc 1 494 0
 579 0092 0B23     		movs	r3, #11
 580 0094 0093     		str	r3, [sp]
 495:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 581              		.loc 1 495 0
 582 0096 CDF80480 		str	r8, [sp, #4]
 496:Src/main.c    ****   {
 583              		.loc 1 496 0
 584 009a 6946     		mov	r1, sp
 585 009c 2046     		mov	r0, r4
 586 009e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 587              	.LVL22:
 502:Src/main.c    ****   sConfig.Rank = 7;
 588              		.loc 1 502 0
 589 00a2 0C23     		movs	r3, #12
 590 00a4 0093     		str	r3, [sp]
 503:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 591              		.loc 1 503 0
 592 00a6 0195     		str	r5, [sp, #4]
 504:Src/main.c    ****   {
 593              		.loc 1 504 0
 594 00a8 6946     		mov	r1, sp
 595 00aa 2046     		mov	r0, r4
 596 00ac FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 597              	.LVL23:
 510:Src/main.c    ****   sConfig.Rank = 8;
 598              		.loc 1 510 0
 599 00b0 0F23     		movs	r3, #15
 600 00b2 0093     		str	r3, [sp]
 511:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 601              		.loc 1 511 0
 602 00b4 0197     		str	r7, [sp, #4]
 512:Src/main.c    ****   {
 603              		.loc 1 512 0
ARM GAS  /tmp/cc0KX3zJ.s 			page 26


 604 00b6 6946     		mov	r1, sp
 605 00b8 2046     		mov	r0, r4
 606 00ba FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 607              	.LVL24:
 518:Src/main.c    ****   sConfig.Rank = 9;
 608              		.loc 1 518 0
 609 00be 1023     		movs	r3, #16
 610 00c0 0093     		str	r3, [sp]
 519:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 611              		.loc 1 519 0
 612 00c2 0923     		movs	r3, #9
 613 00c4 0193     		str	r3, [sp, #4]
 520:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 614              		.loc 1 520 0
 615 00c6 0295     		str	r5, [sp, #8]
 521:Src/main.c    ****   {
 616              		.loc 1 521 0
 617 00c8 6946     		mov	r1, sp
 618 00ca 2046     		mov	r0, r4
 619 00cc FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 620              	.LVL25:
 527:Src/main.c    ****   sConfig.Rank = 10;
 621              		.loc 1 527 0
 622 00d0 1123     		movs	r3, #17
 623 00d2 0093     		str	r3, [sp]
 528:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 624              		.loc 1 528 0
 625 00d4 0196     		str	r6, [sp, #4]
 529:Src/main.c    ****   {
 626              		.loc 1 529 0
 627 00d6 6946     		mov	r1, sp
 628 00d8 2046     		mov	r0, r4
 629 00da FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 630              	.LVL26:
 537:Src/main.c    **** 
 631              		.loc 1 537 0
 632 00de 05B0     		add	sp, sp, #20
 633              	.LCFI12:
 634              		.cfi_def_cfa_offset 28
 635              		@ sp needed
 636 00e0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 637              	.L28:
 638              		.align	2
 639              	.L27:
 640 00e4 00000000 		.word	hadc1
 641 00e8 00200140 		.word	1073815552
 642 00ec 0100000F 		.word	251658241
 643              		.cfi_endproc
 644              	.LFE132:
 646              		.global	__aeabi_f2d
 647              		.global	__aeabi_dmul
 648              		.global	__aeabi_ddiv
 649              		.section	.text.StartDefaultTask,"ax",%progbits
 650              		.align	2
 651              		.global	StartDefaultTask
 652              		.thumb
 653              		.thumb_func
ARM GAS  /tmp/cc0KX3zJ.s 			page 27


 655              	StartDefaultTask:
 656              	.LFB139:
 734:Src/main.c    **** 
 735:Src/main.c    **** /* USER CODE BEGIN 4 */
 736:Src/main.c    **** 
 737:Src/main.c    **** /* USER CODE END 4 */
 738:Src/main.c    **** 
 739:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 740:Src/main.c    **** /**
 741:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 742:Src/main.c    ****   * @param  argument: Not used 
 743:Src/main.c    ****   * @retval None
 744:Src/main.c    ****   */
 745:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 746:Src/main.c    **** void StartDefaultTask(void const * argument)
 747:Src/main.c    **** {
 657              		.loc 1 747 0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 48
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661              	.LVL27:
 662 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 663              	.LCFI13:
 664              		.cfi_def_cfa_offset 36
 665              		.cfi_offset 4, -36
 666              		.cfi_offset 5, -32
 667              		.cfi_offset 6, -28
 668              		.cfi_offset 7, -24
 669              		.cfi_offset 8, -20
 670              		.cfi_offset 9, -16
 671              		.cfi_offset 10, -12
 672              		.cfi_offset 11, -8
 673              		.cfi_offset 14, -4
 674 0004 2DED028B 		vpush.64	{d8}
 675              	.LCFI14:
 676              		.cfi_def_cfa_offset 44
 677              		.cfi_offset 80, -44
 678              		.cfi_offset 81, -40
 679 0008 93B0     		sub	sp, sp, #76
 680              	.LCFI15:
 681              		.cfi_def_cfa_offset 120
 748:Src/main.c    ****   /* init code for USB_DEVICE */
 749:Src/main.c    ****   MX_USB_DEVICE_Init();
 682              		.loc 1 749 0
 683 000a FFF7FEFF 		bl	MX_USB_DEVICE_Init
 684              	.LVL28:
 750:Src/main.c    **** 
 751:Src/main.c    ****   /* USER CODE BEGIN 5 */
 752:Src/main.c    **** 	int i;
 753:Src/main.c    **** 
 754:Src/main.c    **** 	#define DEFAULTTSKBIT00	(1 << 0)  // Task notification bit for sw timer: stackusage
 755:Src/main.c    **** 	#define DEFAULTTSKBIT01	(1 << 1)  // Task notification bit for sw timer: something else
 756:Src/main.c    **** 
 757:Src/main.c    **** 	/* A notification copies the internal notification word to this. */
 758:Src/main.c    **** 	uint32_t noteval = 0;    // Receives notification word upon an API notify
 685              		.loc 1 758 0
 686 000e 0023     		movs	r3, #0
ARM GAS  /tmp/cc0KX3zJ.s 			page 28


 687 0010 1193     		str	r3, [sp, #68]
 688              	.LVL29:
 759:Src/main.c    **** 
 760:Src/main.c    **** 	/* notification bits processed after a 'Wait. */
 761:Src/main.c    **** 	uint32_t noteused = 0;
 762:Src/main.c    **** 
 763:Src/main.c    **** 	struct SERIALSENDTASKBCB* pbuf1 = getserialbuf(&huart6,96);
 689              		.loc 1 763 0
 690 0012 6021     		movs	r1, #96
 691 0014 6B48     		ldr	r0, .L42
 692 0016 FFF7FEFF 		bl	getserialbuf
 693              	.LVL30:
 764:Src/main.c    **** 	if (pbuf1 == NULL) morse_trap(11);
 694              		.loc 1 764 0
 695 001a 0446     		mov	r4, r0
 696 001c 10B9     		cbnz	r0, .L30
 697              		.loc 1 764 0 is_stmt 0 discriminator 1
 698 001e 0B20     		movs	r0, #11
 699              	.LVL31:
 700 0020 FFF7FEFF 		bl	morse_trap
 701              	.LVL32:
 702              	.L30:
 765:Src/main.c    **** 
 766:Src/main.c    **** 	struct SERIALSENDTASKBCB* pbuf3 = getserialbuf(&huart6,96);
 703              		.loc 1 766 0 is_stmt 1
 704 0024 6021     		movs	r1, #96
 705 0026 6748     		ldr	r0, .L42
 706 0028 FFF7FEFF 		bl	getserialbuf
 707              	.LVL33:
 708 002c 1090     		str	r0, [sp, #64]
 767:Src/main.c    **** 	if (pbuf1 == NULL) morse_trap(111);
 709              		.loc 1 767 0
 710 002e 14B9     		cbnz	r4, .L31
 711              		.loc 1 767 0 is_stmt 0 discriminator 1
 712 0030 6F20     		movs	r0, #111
 713 0032 FFF7FEFF 		bl	morse_trap
 714              	.LVL34:
 715              	.L31:
 768:Src/main.c    **** 
 769:Src/main.c    **** 	struct SERIALSENDTASKBCB* pbuf2 = getserialbuf(&huart6,96);
 716              		.loc 1 769 0 is_stmt 1
 717 0036 6021     		movs	r1, #96
 718 0038 6248     		ldr	r0, .L42
 719 003a FFF7FEFF 		bl	getserialbuf
 720              	.LVL35:
 721 003e 0F90     		str	r0, [sp, #60]
 770:Src/main.c    **** 	if (pbuf1 == NULL) morse_trap(12);
 722              		.loc 1 770 0
 723 0040 14B9     		cbnz	r4, .L32
 724              		.loc 1 770 0 is_stmt 0 discriminator 1
 725 0042 0C20     		movs	r0, #12
 726 0044 FFF7FEFF 		bl	morse_trap
 727              	.LVL36:
 728              	.L32:
 771:Src/main.c    **** 
 772:Src/main.c    **** 	int ctr = 0; // Running count
 773:Src/main.c    **** 	uint32_t heapsize;
ARM GAS  /tmp/cc0KX3zJ.s 			page 29


 774:Src/main.c    **** 
 775:Src/main.c    **** 	/* Test CAN msg */
 776:Src/main.c    **** 	struct CANTXQMSG testtx;
 777:Src/main.c    **** 	testtx.pctl = pctl1;
 729              		.loc 1 777 0 is_stmt 1
 730 0048 5F4B     		ldr	r3, .L42+4
 731 004a 1B68     		ldr	r3, [r3]
 732 004c 0693     		str	r3, [sp, #24]
 778:Src/main.c    **** 	testtx.can.id = 0xc2200000;
 733              		.loc 1 778 0
 734 004e 5F4B     		ldr	r3, .L42+8
 735 0050 0893     		str	r3, [sp, #32]
 779:Src/main.c    **** 	testtx.can.dlc = 8;
 736              		.loc 1 779 0
 737 0052 0823     		movs	r3, #8
 738 0054 0993     		str	r3, [sp, #36]
 739              	.LVL37:
 780:Src/main.c    **** 	for (i = 0; i < 8; i++)
 740              		.loc 1 780 0
 741 0056 0023     		movs	r3, #0
 742 0058 06E0     		b	.L33
 743              	.LVL38:
 744              	.L34:
 781:Src/main.c    **** 		testtx.can.cd.uc[i] = 0x30 + i;
 745              		.loc 1 781 0 discriminator 3
 746 005a 12AA     		add	r2, sp, #72
 747 005c 1A44     		add	r2, r2, r3
 748 005e 03F13001 		add	r1, r3, #48
 749 0062 02F8201C 		strb	r1, [r2, #-32]
 780:Src/main.c    **** 	for (i = 0; i < 8; i++)
 750              		.loc 1 780 0 discriminator 3
 751 0066 0133     		adds	r3, r3, #1
 752              	.LVL39:
 753              	.L33:
 780:Src/main.c    **** 	for (i = 0; i < 8; i++)
 754              		.loc 1 780 0 is_stmt 0 discriminator 1
 755 0068 072B     		cmp	r3, #7
 756 006a F6DD     		ble	.L34
 782:Src/main.c    **** 	testtx.maxretryct = 8;
 757              		.loc 1 782 0 is_stmt 1
 758 006c 0823     		movs	r3, #8
 759              	.LVL40:
 760 006e 8DF83030 		strb	r3, [sp, #48]
 783:Src/main.c    **** 	testtx.bits = 0;
 761              		.loc 1 783 0
 762 0072 0024     		movs	r4, #0
 763              	.LVL41:
 764 0074 8DF83140 		strb	r4, [sp, #49]
 784:Src/main.c    **** 
 785:Src/main.c    **** HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15); // BLUE LED
 765              		.loc 1 785 0
 766 0078 4FF40041 		mov	r1, #32768
 767 007c 5448     		ldr	r0, .L42+12
 768 007e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 769              	.LVL42:
 786:Src/main.c    **** 
 787:Src/main.c    **** 	uint32_t dmact_prev = adcommon.dmact;
ARM GAS  /tmp/cc0KX3zJ.s 			page 30


 770              		.loc 1 787 0
 771 0082 544B     		ldr	r3, .L42+16
 772 0084 9E6B     		ldr	r6, [r3, #56]
 773              	.LVL43:
 772:Src/main.c    **** 	uint32_t heapsize;
 774              		.loc 1 772 0
 775 0086 2746     		mov	r7, r4
 776              	.LVL44:
 777              	.L35:
 788:Src/main.c    **** 
 789:Src/main.c    **** extern volatile uint32_t adcdbg2;
 790:Src/main.c    **** 
 791:Src/main.c    **** #define LOOPDELAYTICKS ((64*8)*5)	// 5 sec Loop delay (512 Hz tick rate)
 792:Src/main.c    **** 	for ( ;; )
 793:Src/main.c    **** 	{
 794:Src/main.c    **** 		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
 778              		.loc 1 794 0
 779 0088 4FF0FF33 		mov	r3, #-1
 780 008c 11AA     		add	r2, sp, #68
 781 008e 0021     		movs	r1, #0
 782 0090 2046     		mov	r0, r4
 783 0092 FFF7FEFF 		bl	xTaskNotifyWait
 784              	.LVL45:
 795:Src/main.c    **** 		noteused = 0;
 796:Src/main.c    **** 		if ((noteval & DEFAULTTSKBIT00) != 0)
 785              		.loc 1 796 0
 786 0096 119B     		ldr	r3, [sp, #68]
 787 0098 13F0010F 		tst	r3, #1
 788 009c 58D0     		beq	.L40
 789              	.LVL46:
 797:Src/main.c    **** 		{
 798:Src/main.c    **** 			noteused |= DEFAULTTSKBIT00;
 799:Src/main.c    **** 
 800:Src/main.c    **** 			/* Display the amount of unused stack space for tasks. */
 801:Src/main.c    **** 			yprintf(&pbuf2,"\n\r%4i Unused Task stack space--", ctr++);
 790              		.loc 1 801 0
 791 009e 7D1C     		adds	r5, r7, #1
 792              	.LVL47:
 793 00a0 3A46     		mov	r2, r7
 794 00a2 4D49     		ldr	r1, .L42+20
 795 00a4 0FA8     		add	r0, sp, #60
 796 00a6 FFF7FEFF 		bl	yprintf
 797              	.LVL48:
 802:Src/main.c    **** 			stackwatermark_show(defaultTaskHandle,&pbuf2,"defaultTask--");
 798              		.loc 1 802 0
 799 00aa 4C4A     		ldr	r2, .L42+24
 800 00ac 0FA9     		add	r1, sp, #60
 801 00ae 4C4B     		ldr	r3, .L42+28
 802 00b0 1868     		ldr	r0, [r3]
 803 00b2 FFF7FEFF 		bl	stackwatermark_show
 804              	.LVL49:
 803:Src/main.c    **** 			stackwatermark_show(SerialTaskHandle ,&pbuf2,"SerialTask---");
 805              		.loc 1 803 0
 806 00b6 4B4A     		ldr	r2, .L42+32
 807 00b8 0FA9     		add	r1, sp, #60
 808 00ba 4B4B     		ldr	r3, .L42+36
 809 00bc 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cc0KX3zJ.s 			page 31


 810 00be FFF7FEFF 		bl	stackwatermark_show
 811              	.LVL50:
 804:Src/main.c    **** 			stackwatermark_show(CanTxTaskHandle  ,&pbuf2,"CanTxTask----");
 812              		.loc 1 804 0
 813 00c2 4A4A     		ldr	r2, .L42+40
 814 00c4 0FA9     		add	r1, sp, #60
 815 00c6 4A4B     		ldr	r3, .L42+44
 816 00c8 1868     		ldr	r0, [r3]
 817 00ca FFF7FEFF 		bl	stackwatermark_show
 818              	.LVL51:
 805:Src/main.c    **** 	//		stackwatermark_show(CanRxTaskHandle  ,&pbuf2,"CanRxTask----");
 806:Src/main.c    **** 			stackwatermark_show(MailboxTaskHandle,&pbuf2,"MailboxTask--");
 819              		.loc 1 806 0
 820 00ce 494A     		ldr	r2, .L42+48
 821 00d0 0FA9     		add	r1, sp, #60
 822 00d2 494B     		ldr	r3, .L42+52
 823 00d4 1868     		ldr	r0, [r3]
 824 00d6 FFF7FEFF 		bl	stackwatermark_show
 825              	.LVL52:
 807:Src/main.c    **** 			stackwatermark_show(ADCTaskHandle    ,&pbuf2,"ADCTask------");
 826              		.loc 1 807 0
 827 00da 484A     		ldr	r2, .L42+56
 828 00dc 0FA9     		add	r1, sp, #60
 829 00de 484B     		ldr	r3, .L42+60
 830 00e0 1868     		ldr	r0, [r3]
 831 00e2 FFF7FEFF 		bl	stackwatermark_show
 832              	.LVL53:
 808:Src/main.c    **** 			stackwatermark_show(SerialTaskReceiveHandle,&pbuf2,"SerialRcvTask");
 833              		.loc 1 808 0
 834 00e6 474A     		ldr	r2, .L42+64
 835 00e8 0FA9     		add	r1, sp, #60
 836 00ea 474B     		ldr	r3, .L42+68
 837 00ec 1868     		ldr	r0, [r3]
 838 00ee FFF7FEFF 		bl	stackwatermark_show
 839              	.LVL54:
 809:Src/main.c    **** 
 810:Src/main.c    **** 			/* Heap usage (and test fp woking. */
 811:Src/main.c    **** 			heapsize = xPortGetFreeHeapSize();
 840              		.loc 1 811 0
 841 00f2 FFF7FEFF 		bl	xPortGetFreeHeapSize
 842              	.LVL55:
 843 00f6 0446     		mov	r4, r0
 844              	.LVL56:
 812:Src/main.c    **** 			yprintf(&pbuf2,"\n\rGetFreeHeapSize: total: %i used %i %3.1f%% free: %i",configTOTAL_HEAP_SIZE, 
 813:Src/main.c    **** 				100.0*(float)heapsize/configTOTAL_HEAP_SIZE,(configTOTAL_HEAP_SIZE-heapsize));
 845              		.loc 1 813 0
 846 00f8 07EE900A 		vmov	s15, r0	@ int
 847 00fc F8EE677A 		vcvt.f32.u32	s15, s15
 848 0100 17EE900A 		vmov	r0, s15
 849              	.LVL57:
 850 0104 FFF7FEFF 		bl	__aeabi_f2d
 851              	.LVL58:
 852 0108 0022     		movs	r2, #0
 853 010a 404B     		ldr	r3, .L42+72
 854 010c FFF7FEFF 		bl	__aeabi_dmul
 855              	.LVL59:
 812:Src/main.c    **** 			yprintf(&pbuf2,"\n\rGetFreeHeapSize: total: %i used %i %3.1f%% free: %i",configTOTAL_HEAP_SIZE, 
ARM GAS  /tmp/cc0KX3zJ.s 			page 32


 856              		.loc 1 812 0
 857 0110 C4F57053 		rsb	r3, r4, #15360
 858 0114 0293     		str	r3, [sp, #8]
 859 0116 0022     		movs	r2, #0
 860 0118 3D4B     		ldr	r3, .L42+76
 861 011a FFF7FEFF 		bl	__aeabi_ddiv
 862              	.LVL60:
 863 011e CDE90001 		strd	r0, [sp]
 864 0122 2346     		mov	r3, r4
 865 0124 4FF47052 		mov	r2, #15360
 866 0128 3A49     		ldr	r1, .L42+80
 867 012a 0FA8     		add	r0, sp, #60
 868 012c FFF7FEFF 		bl	yprintf
 869              	.LVL61:
 814:Src/main.c    **** 
 815:Src/main.c    **** 			/* ==== CAN MSG sending test ===== */
 816:Src/main.c    **** 			/* Place test CAN msg to send on queue in a burst. */
 817:Src/main.c    **** 			/* Note: an odd makes the LED flash since it toggles on each msg. */
 818:Src/main.c    **** 			for (i = 0; i < 7; i++)
 870              		.loc 1 818 0
 871 0130 0024     		movs	r4, #0
 872              	.LVL62:
 873 0132 08E0     		b	.L37
 874              	.LVL63:
 875              	.L38:
 819:Src/main.c    **** 				xQueueSendToBack(CanTxQHandle,&testtx,portMAX_DELAY);
 876              		.loc 1 819 0 discriminator 3
 877 0134 0023     		movs	r3, #0
 878 0136 4FF0FF32 		mov	r2, #-1
 879 013a 06A9     		add	r1, sp, #24
 880 013c 3648     		ldr	r0, .L42+84
 881 013e 0068     		ldr	r0, [r0]
 882 0140 FFF7FEFF 		bl	xQueueGenericSend
 883              	.LVL64:
 818:Src/main.c    **** 				xQueueSendToBack(CanTxQHandle,&testtx,portMAX_DELAY);
 884              		.loc 1 818 0 discriminator 3
 885 0144 0134     		adds	r4, r4, #1
 886              	.LVL65:
 887              	.L37:
 818:Src/main.c    **** 				xQueueSendToBack(CanTxQHandle,&testtx,portMAX_DELAY);
 888              		.loc 1 818 0 is_stmt 0 discriminator 1
 889 0146 062C     		cmp	r4, #6
 890 0148 F4DD     		ble	.L38
 801:Src/main.c    **** 			stackwatermark_show(defaultTaskHandle,&pbuf2,"defaultTask--");
 891              		.loc 1 801 0 is_stmt 1
 892 014a 2F46     		mov	r7, r5
 798:Src/main.c    **** 
 893              		.loc 1 798 0
 894 014c 0124     		movs	r4, #1
 895              	.LVL66:
 896 014e 00E0     		b	.L36
 897              	.LVL67:
 898              	.L40:
 795:Src/main.c    **** 		if ((noteval & DEFAULTTSKBIT00) != 0)
 899              		.loc 1 795 0
 900 0150 0024     		movs	r4, #0
 901              	.LVL68:
ARM GAS  /tmp/cc0KX3zJ.s 			page 33


 902              	.L36:
 820:Src/main.c    **** 		}
 821:Src/main.c    **** 		if ((noteval & DEFAULTTSKBIT01) != 0)
 903              		.loc 1 821 0
 904 0152 119B     		ldr	r3, [sp, #68]
 905 0154 13F0020F 		tst	r3, #2
 906 0158 96D0     		beq	.L35
 822:Src/main.c    **** 		{
 823:Src/main.c    **** 			noteused |= DEFAULTTSKBIT01;
 907              		.loc 1 823 0
 908 015a 44F00204 		orr	r4, r4, #2
 909              	.LVL69:
 824:Src/main.c    **** 		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15); // BLUE LED
 910              		.loc 1 824 0
 911 015e 4FF40041 		mov	r1, #32768
 912 0162 1B48     		ldr	r0, .L42+12
 913 0164 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 914              	.LVL70:
 825:Src/main.c    **** 			yprintf(&pbuf2,"\n\rADC: Vdd: %7.4f %8.4f   Temp: %6.1f  %i",adcommon.fvdd,adcommon.fvddfilt,adc
 915              		.loc 1 825 0
 916 0168 1A4D     		ldr	r5, .L42+16
 917 016a D5F810B0 		ldr	fp, [r5, #16]	@ float
 918 016e 95ED0D8A 		vldr.32	s16, [r5, #52]
 919 0172 D5F838A0 		ldr	r10, [r5, #56]
 920 0176 E868     		ldr	r0, [r5, #12]	@ float
 921 0178 FFF7FEFF 		bl	__aeabi_f2d
 922              	.LVL71:
 923 017c 8046     		mov	r8, r0
 924 017e 8946     		mov	r9, r1
 925 0180 C6EB0A06 		rsb	r6, r6, r10
 926              	.LVL72:
 927 0184 0496     		str	r6, [sp, #16]
 928 0186 18EE100A 		vmov	r0, s16
 929 018a FFF7FEFF 		bl	__aeabi_f2d
 930              	.LVL73:
 931 018e CDE90201 		strd	r0, [sp, #8]
 932 0192 5846     		mov	r0, fp	@ float
 933 0194 FFF7FEFF 		bl	__aeabi_f2d
 934              	.LVL74:
 935 0198 CDE90001 		strd	r0, [sp]
 936 019c 4246     		mov	r2, r8
 937 019e 4B46     		mov	r3, r9
 938 01a0 1E49     		ldr	r1, .L42+88
 939 01a2 0FA8     		add	r0, sp, #60
 940 01a4 FFF7FEFF 		bl	yprintf
 941              	.LVL75:
 826:Src/main.c    **** 			dmact_prev = adcommon.dmact;
 942              		.loc 1 826 0
 943 01a8 AE6B     		ldr	r6, [r5, #56]
 944              	.LVL76:
 827:Src/main.c    **** 
 828:Src/main.c    **** 			yprintf(&pbuf3,"\n\r C:   %d %d %d",adc1data.adcs1sum[ADC1IDX_INTERNALVREF]/ADC1DMANUMSEQ, adcom
 945              		.loc 1 828 0
 946 01aa 1D4B     		ldr	r3, .L42+92
 947 01ac DA8F     		ldrh	r2, [r3, #62]
 948 01ae AB8A     		ldrh	r3, [r5, #20]
 949 01b0 1C49     		ldr	r1, .L42+96
ARM GAS  /tmp/cc0KX3zJ.s 			page 34


 950 01b2 0968     		ldr	r1, [r1]
 951 01b4 0091     		str	r1, [sp]
 952 01b6 1209     		lsrs	r2, r2, #4
 953 01b8 1B49     		ldr	r1, .L42+100
 954 01ba 10A8     		add	r0, sp, #64
 955 01bc FFF7FEFF 		bl	yprintf
 956              	.LVL77:
 957 01c0 62E7     		b	.L35
 958              	.L43:
 959 01c2 00BF     		.align	2
 960              	.L42:
 961 01c4 00000000 		.word	huart6
 962 01c8 00000000 		.word	pctl1
 963 01cc 000020C2 		.word	-1038090240
 964 01d0 000C0240 		.word	1073875968
 965 01d4 00000000 		.word	adcommon
 966 01d8 00000000 		.word	.LC2
 967 01dc 20000000 		.word	.LC3
 968 01e0 00000000 		.word	defaultTaskHandle
 969 01e4 30000000 		.word	.LC4
 970 01e8 00000000 		.word	SerialTaskHandle
 971 01ec 40000000 		.word	.LC5
 972 01f0 00000000 		.word	CanTxTaskHandle
 973 01f4 50000000 		.word	.LC6
 974 01f8 00000000 		.word	MailboxTaskHandle
 975 01fc 60000000 		.word	.LC7
 976 0200 00000000 		.word	ADCTaskHandle
 977 0204 70000000 		.word	.LC8
 978 0208 00000000 		.word	SerialTaskReceiveHandle
 979 020c 00005940 		.word	1079574528
 980 0210 0000CE40 		.word	1087242240
 981 0214 80000000 		.word	.LC9
 982 0218 00000000 		.word	CanTxQHandle
 983 021c B8000000 		.word	.LC10
 984 0220 00000000 		.word	adc1data
 985 0224 00000000 		.word	adcdbg2
 986 0228 E4000000 		.word	.LC11
 987              		.cfi_endproc
 988              	.LFE139:
 990              		.section	.text.CallbackdefaultTaskTimer,"ax",%progbits
 991              		.align	2
 992              		.global	CallbackdefaultTaskTimer
 993              		.thumb
 994              		.thumb_func
 996              	CallbackdefaultTaskTimer:
 997              	.LFB140:
 829:Src/main.c    **** 		}	
 830:Src/main.c    **** 	}
 831:Src/main.c    ****   /* USER CODE END 5 */ 
 832:Src/main.c    **** }
 833:Src/main.c    **** 
 834:Src/main.c    **** /* CallbackdefaultTaskTimer function */
 835:Src/main.c    **** void CallbackdefaultTaskTimer(void const * argument)
 836:Src/main.c    **** {
 998              		.loc 1 836 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc0KX3zJ.s 			page 35


 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              	.LVL78:
 1003 0000 00B5     		push	{lr}
 1004              	.LCFI16:
 1005              		.cfi_def_cfa_offset 4
 1006              		.cfi_offset 14, -4
 1007 0002 85B0     		sub	sp, sp, #20
 1008              	.LCFI17:
 1009              		.cfi_def_cfa_offset 24
 837:Src/main.c    ****   /* USER CODE BEGIN CallbackdefaultTaskTimer */
 838:Src/main.c    **** 	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 1010              		.loc 1 838 0
 1011 0004 0023     		movs	r3, #0
 1012 0006 04AA     		add	r2, sp, #16
 1013 0008 42F8043D 		str	r3, [r2, #-4]!
 839:Src/main.c    **** 	xTaskNotifyFromISR(defaultTaskHandle, 
 1014              		.loc 1 839 0
 1015 000c 0449     		ldr	r1, .L46
 1016 000e 0868     		ldr	r0, [r1]
 1017              	.LVL79:
 1018 0010 0092     		str	r2, [sp]
 1019 0012 0122     		movs	r2, #1
 1020 0014 1146     		mov	r1, r2
 1021 0016 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 1022              	.LVL80:
 840:Src/main.c    **** 		DEFAULTTSKBIT00,	/* 'or' bit assigned to buffer to notification value. */
 841:Src/main.c    **** 		eSetBits,      /* Set 'or' option */
 842:Src/main.c    **** 		&xHigherPriorityTaskWoken ); 
 843:Src/main.c    **** 
 844:Src/main.c    ****   /* USER CODE END CallbackdefaultTaskTimer */
 845:Src/main.c    **** }
 1023              		.loc 1 845 0
 1024 001a 05B0     		add	sp, sp, #20
 1025              	.LCFI18:
 1026              		.cfi_def_cfa_offset 4
 1027              		@ sp needed
 1028 001c 5DF804FB 		ldr	pc, [sp], #4
 1029              	.L47:
 1030              		.align	2
 1031              	.L46:
 1032 0020 00000000 		.word	defaultTaskHandle
 1033              		.cfi_endproc
 1034              	.LFE140:
 1036              		.section	.text.CallbackdefaultTaskTimer01,"ax",%progbits
 1037              		.align	2
 1038              		.global	CallbackdefaultTaskTimer01
 1039              		.thumb
 1040              		.thumb_func
 1042              	CallbackdefaultTaskTimer01:
 1043              	.LFB141:
 846:Src/main.c    **** 
 847:Src/main.c    **** /* CallbackdefaultTaskTimer01 function */
 848:Src/main.c    **** void CallbackdefaultTaskTimer01(void const * argument)
 849:Src/main.c    **** {
 1044              		.loc 1 849 0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc0KX3zJ.s 			page 36


 1047              		@ frame_needed = 0, uses_anonymous_args = 0
 1048              	.LVL81:
 1049 0000 00B5     		push	{lr}
 1050              	.LCFI19:
 1051              		.cfi_def_cfa_offset 4
 1052              		.cfi_offset 14, -4
 1053 0002 85B0     		sub	sp, sp, #20
 1054              	.LCFI20:
 1055              		.cfi_def_cfa_offset 24
 850:Src/main.c    ****   /* USER CODE BEGIN CallbackdefaultTaskTimer01 */
 851:Src/main.c    ****   	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 1056              		.loc 1 851 0
 1057 0004 0023     		movs	r3, #0
 1058 0006 04AA     		add	r2, sp, #16
 1059 0008 42F8043D 		str	r3, [r2, #-4]!
 852:Src/main.c    **** 	xTaskNotifyFromISR(defaultTaskHandle, 
 1060              		.loc 1 852 0
 1061 000c 0449     		ldr	r1, .L50
 1062 000e 0868     		ldr	r0, [r1]
 1063              	.LVL82:
 1064 0010 0092     		str	r2, [sp]
 1065 0012 0122     		movs	r2, #1
 1066 0014 0221     		movs	r1, #2
 1067 0016 FFF7FEFF 		bl	xTaskGenericNotifyFromISR
 1068              	.LVL83:
 853:Src/main.c    **** 		DEFAULTTSKBIT01,	/* 'or' bit assigned to buffer to notification value. */
 854:Src/main.c    **** 		eSetBits,      /* Set 'or' option */
 855:Src/main.c    **** 		&xHigherPriorityTaskWoken ); 
 856:Src/main.c    ****   /* USER CODE END CallbackdefaultTaskTimer01 */
 857:Src/main.c    **** }
 1069              		.loc 1 857 0
 1070 001a 05B0     		add	sp, sp, #20
 1071              	.LCFI21:
 1072              		.cfi_def_cfa_offset 4
 1073              		@ sp needed
 1074 001c 5DF804FB 		ldr	pc, [sp], #4
 1075              	.L51:
 1076              		.align	2
 1077              	.L50:
 1078 0020 00000000 		.word	defaultTaskHandle
 1079              		.cfi_endproc
 1080              	.LFE141:
 1082              		.section	.text.SystemClock_Config,"ax",%progbits
 1083              		.align	2
 1084              		.global	SystemClock_Config
 1085              		.thumb
 1086              		.thumb_func
 1088              	SystemClock_Config:
 1089              	.LFB131:
 379:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1090              		.loc 1 379 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 80
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094 0000 30B5     		push	{r4, r5, lr}
 1095              	.LCFI22:
 1096              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cc0KX3zJ.s 			page 37


 1097              		.cfi_offset 4, -12
 1098              		.cfi_offset 5, -8
 1099              		.cfi_offset 14, -4
 1100 0002 95B0     		sub	sp, sp, #84
 1101              	.LCFI23:
 1102              		.cfi_def_cfa_offset 96
 380:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1103              		.loc 1 380 0
 1104 0004 3022     		movs	r2, #48
 1105 0006 0021     		movs	r1, #0
 1106 0008 08A8     		add	r0, sp, #32
 1107 000a FFF7FEFF 		bl	memset
 1108              	.LVL84:
 381:Src/main.c    **** 
 1109              		.loc 1 381 0
 1110 000e 0024     		movs	r4, #0
 1111 0010 0394     		str	r4, [sp, #12]
 1112 0012 0494     		str	r4, [sp, #16]
 1113 0014 0594     		str	r4, [sp, #20]
 1114 0016 0694     		str	r4, [sp, #24]
 1115 0018 0794     		str	r4, [sp, #28]
 1116              	.LBB9:
 385:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1117              		.loc 1 385 0
 1118 001a 0194     		str	r4, [sp, #4]
 1119 001c 1C4B     		ldr	r3, .L54
 1120 001e 1A6C     		ldr	r2, [r3, #64]
 1121 0020 42F08052 		orr	r2, r2, #268435456
 1122 0024 1A64     		str	r2, [r3, #64]
 1123 0026 1B6C     		ldr	r3, [r3, #64]
 1124 0028 03F08053 		and	r3, r3, #268435456
 1125 002c 0193     		str	r3, [sp, #4]
 1126 002e 019B     		ldr	r3, [sp, #4]
 1127              	.LBE9:
 1128              	.LBB10:
 386:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 1129              		.loc 1 386 0
 1130 0030 0294     		str	r4, [sp, #8]
 1131 0032 184B     		ldr	r3, .L54+4
 1132 0034 1A68     		ldr	r2, [r3]
 1133 0036 42F48042 		orr	r2, r2, #16384
 1134 003a 1A60     		str	r2, [r3]
 1135 003c 1B68     		ldr	r3, [r3]
 1136 003e 03F48043 		and	r3, r3, #16384
 1137 0042 0293     		str	r3, [sp, #8]
 1138 0044 029B     		ldr	r3, [sp, #8]
 1139              	.LBE10:
 389:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1140              		.loc 1 389 0
 1141 0046 0123     		movs	r3, #1
 1142 0048 0893     		str	r3, [sp, #32]
 390:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1143              		.loc 1 390 0
 1144 004a 4FF48033 		mov	r3, #65536
 1145 004e 0993     		str	r3, [sp, #36]
 391:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1146              		.loc 1 391 0
ARM GAS  /tmp/cc0KX3zJ.s 			page 38


 1147 0050 0225     		movs	r5, #2
 1148 0052 0E95     		str	r5, [sp, #56]
 392:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1149              		.loc 1 392 0
 1150 0054 4FF48003 		mov	r3, #4194304
 1151 0058 0F93     		str	r3, [sp, #60]
 393:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1152              		.loc 1 393 0
 1153 005a 0823     		movs	r3, #8
 1154 005c 1093     		str	r3, [sp, #64]
 394:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1155              		.loc 1 394 0
 1156 005e 4FF4A873 		mov	r3, #336
 1157 0062 1193     		str	r3, [sp, #68]
 395:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 1158              		.loc 1 395 0
 1159 0064 1295     		str	r5, [sp, #72]
 396:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1160              		.loc 1 396 0
 1161 0066 0723     		movs	r3, #7
 1162 0068 1393     		str	r3, [sp, #76]
 397:Src/main.c    ****   {
 1163              		.loc 1 397 0
 1164 006a 08A8     		add	r0, sp, #32
 1165 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1166              	.LVL85:
 403:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1167              		.loc 1 403 0
 1168 0070 0F23     		movs	r3, #15
 1169 0072 0393     		str	r3, [sp, #12]
 405:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1170              		.loc 1 405 0
 1171 0074 0495     		str	r5, [sp, #16]
 406:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1172              		.loc 1 406 0
 1173 0076 0594     		str	r4, [sp, #20]
 407:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1174              		.loc 1 407 0
 1175 0078 4FF4A053 		mov	r3, #5120
 1176 007c 0693     		str	r3, [sp, #24]
 408:Src/main.c    **** 
 1177              		.loc 1 408 0
 1178 007e 4FF48053 		mov	r3, #4096
 1179 0082 0793     		str	r3, [sp, #28]
 410:Src/main.c    ****   {
 1180              		.loc 1 410 0
 1181 0084 0521     		movs	r1, #5
 1182 0086 03A8     		add	r0, sp, #12
 1183 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1184              	.LVL86:
 414:Src/main.c    **** 
 1185              		.loc 1 414 0
 1186 008c 15B0     		add	sp, sp, #84
 1187              	.LCFI24:
 1188              		.cfi_def_cfa_offset 12
 1189              		@ sp needed
 1190 008e 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/cc0KX3zJ.s 			page 39


 1191              	.L55:
 1192              		.align	2
 1193              	.L54:
 1194 0090 00380240 		.word	1073887232
 1195 0094 00700040 		.word	1073770496
 1196              		.cfi_endproc
 1197              	.LFE131:
 1199              		.section	.text.main,"ax",%progbits
 1200              		.align	2
 1201              		.global	main
 1202              		.thumb
 1203              		.thumb_func
 1205              	main:
 1206              	.LFB130:
 180:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1207              		.loc 1 180 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 48
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211 0000 70B5     		push	{r4, r5, r6, lr}
 1212              	.LCFI25:
 1213              		.cfi_def_cfa_offset 16
 1214              		.cfi_offset 4, -16
 1215              		.cfi_offset 5, -12
 1216              		.cfi_offset 6, -8
 1217              		.cfi_offset 14, -4
 1218 0002 8EB0     		sub	sp, sp, #56
 1219              	.LCFI26:
 1220              		.cfi_def_cfa_offset 72
 189:Src/main.c    **** 
 1221              		.loc 1 189 0
 1222 0004 FFF7FEFF 		bl	HAL_Init
 1223              	.LVL87:
 192:Src/main.c    ****   /* USER CODE END Init */
 1224              		.loc 1 192 0
 1225 0008 FFF7FEFF 		bl	DTW_counter_init
 1226              	.LVL88:
 196:Src/main.c    **** 
 1227              		.loc 1 196 0
 1228 000c FFF7FEFF 		bl	SystemClock_Config
 1229              	.LVL89:
 203:Src/main.c    ****   MX_DMA_Init();
 1230              		.loc 1 203 0
 1231 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1232              	.LVL90:
 204:Src/main.c    ****   MX_USART6_UART_Init();
 1233              		.loc 1 204 0
 1234 0014 FFF7FEFF 		bl	MX_DMA_Init
 1235              	.LVL91:
 205:Src/main.c    ****   MX_USART2_UART_Init();
 1236              		.loc 1 205 0
 1237 0018 FFF7FEFF 		bl	MX_USART6_UART_Init
 1238              	.LVL92:
 206:Src/main.c    ****   MX_CAN1_Init();
 1239              		.loc 1 206 0
 1240 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1241              	.LVL93:
ARM GAS  /tmp/cc0KX3zJ.s 			page 40


 207:Src/main.c    ****   MX_CAN2_Init();
 1242              		.loc 1 207 0
 1243 0020 FFF7FEFF 		bl	MX_CAN1_Init
 1244              	.LVL94:
 208:Src/main.c    ****   MX_ADC1_Init();
 1245              		.loc 1 208 0
 1246 0024 FFF7FEFF 		bl	MX_CAN2_Init
 1247              	.LVL95:
 209:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1248              		.loc 1 209 0
 1249 0028 FFF7FEFF 		bl	MX_ADC1_Init
 1250              	.LVL96:
 232:Src/main.c    ****   defaultTaskTimerHandle = osTimerCreate(osTimer(defaultTaskTimer), osTimerPeriodic, NULL);
 1251              		.loc 1 232 0
 1252 002c 534B     		ldr	r3, .L67
 1253 002e 0C93     		str	r3, [sp, #48]
 1254 0030 0024     		movs	r4, #0
 1255 0032 0D94     		str	r4, [sp, #52]
 233:Src/main.c    **** 
 1256              		.loc 1 233 0
 1257 0034 2246     		mov	r2, r4
 1258 0036 0121     		movs	r1, #1
 1259 0038 0CA8     		add	r0, sp, #48
 1260 003a FFF7FEFF 		bl	osTimerCreate
 1261              	.LVL97:
 1262 003e 504E     		ldr	r6, .L67+4
 1263 0040 3060     		str	r0, [r6]
 236:Src/main.c    ****   defautTaskTimer01Handle = osTimerCreate(osTimer(defautTaskTimer01), osTimerPeriodic, NULL);
 1264              		.loc 1 236 0
 1265 0042 504B     		ldr	r3, .L67+8
 1266 0044 0A93     		str	r3, [sp, #40]
 1267 0046 0B94     		str	r4, [sp, #44]
 237:Src/main.c    **** 
 1268              		.loc 1 237 0
 1269 0048 2246     		mov	r2, r4
 1270 004a 0121     		movs	r1, #1
 1271 004c 0AA8     		add	r0, sp, #40
 1272 004e FFF7FEFF 		bl	osTimerCreate
 1273              	.LVL98:
 1274 0052 4D4D     		ldr	r5, .L67+12
 1275 0054 2860     		str	r0, [r5]
 243:Src/main.c    **** 	/* defaultTask timer for pacing ADC monitoring. */
 1276              		.loc 1 243 0
 1277 0056 3068     		ldr	r0, [r6]
 1278 0058 0094     		str	r4, [sp]
 1279 005a 2346     		mov	r3, r4
 1280 005c 4FF42062 		mov	r2, #2560
 1281 0060 0421     		movs	r1, #4
 1282 0062 FFF7FEFF 		bl	xTimerGenericCommand
 1283              	.LVL99:
 245:Src/main.c    **** 
 1284              		.loc 1 245 0
 1285 0066 2868     		ldr	r0, [r5]
 1286 0068 0094     		str	r4, [sp]
 1287 006a 2346     		mov	r3, r4
 1288 006c 4FF40072 		mov	r2, #512
 1289 0070 0421     		movs	r1, #4
ARM GAS  /tmp/cc0KX3zJ.s 			page 41


 1290 0072 FFF7FEFF 		bl	xTimerGenericCommand
 1291              	.LVL100:
 251:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1292              		.loc 1 251 0
 1293 0076 03AD     		add	r5, sp, #12
 1294 0078 444E     		ldr	r6, .L67+16
 1295 007a 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 1296 007c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 1297 007e 96E80700 		ldmia	r6, {r0, r1, r2}
 1298 0082 85E80700 		stmia	r5, {r0, r1, r2}
 252:Src/main.c    **** 
 1299              		.loc 1 252 0
 1300 0086 2146     		mov	r1, r4
 1301 0088 03A8     		add	r0, sp, #12
 1302 008a FFF7FEFF 		bl	osThreadCreate
 1303              	.LVL101:
 1304 008e 404B     		ldr	r3, .L67+20
 1305 0090 1860     		str	r0, [r3]
 259:Src/main.c    **** 
 1306              		.loc 1 259 0
 1307 0092 2046     		mov	r0, r4
 1308 0094 FFF7FEFF 		bl	xSerialTaskSendCreate
 1309              	.LVL102:
 263:Src/main.c    **** 	if (ret < 0) morse_trap(1); // Panic LED flashing
 1310              		.loc 1 263 0
 1311 0098 2246     		mov	r2, r4
 1312 009a 1021     		movs	r1, #16
 1313 009c 3D48     		ldr	r0, .L67+24
 1314 009e FFF7FEFF 		bl	xSerialTaskSendAdd
 1315              	.LVL103:
 264:Src/main.c    **** 
 1316              		.loc 1 264 0
 1317 00a2 A042     		cmp	r0, r4
 1318 00a4 02DA     		bge	.L57
 264:Src/main.c    **** 
 1319              		.loc 1 264 0 is_stmt 0 discriminator 1
 1320 00a6 0120     		movs	r0, #1
 1321              	.LVL104:
 1322 00a8 FFF7FEFF 		bl	morse_trap
 1323              	.LVL105:
 1324              	.L57:
 268:Src/main.c    **** 	if (ret < 0) morse_trap(2); // Panic LED flashing
 1325              		.loc 1 268 0 is_stmt 1
 1326 00ac 0122     		movs	r2, #1
 1327 00ae 0C21     		movs	r1, #12
 1328 00b0 3948     		ldr	r0, .L67+28
 1329 00b2 FFF7FEFF 		bl	xSerialTaskSendAdd
 1330              	.LVL106:
 269:Src/main.c    **** 
 1331              		.loc 1 269 0
 1332 00b6 0028     		cmp	r0, #0
 1333 00b8 02DA     		bge	.L58
 269:Src/main.c    **** 
 1334              		.loc 1 269 0 is_stmt 0 discriminator 1
 1335 00ba 0220     		movs	r0, #2
 1336              	.LVL107:
 1337 00bc FFF7FEFF 		bl	morse_trap
ARM GAS  /tmp/cc0KX3zJ.s 			page 42


 1338              	.LVL108:
 1339              	.L58:
 272:Src/main.c    **** 
 1340              		.loc 1 272 0 is_stmt 1
 1341 00c0 FFF7FEFF 		bl	yprintf_init
 1342              	.LVL109:
 275:Src/main.c    **** 
 1343              		.loc 1 275 0
 1344 00c4 0020     		movs	r0, #0
 1345 00c6 FFF7FEFF 		bl	xSerialTaskReceiveCreate
 1346              	.LVL110:
 281:Src/main.c    **** 	if (pret == NULL) morse_trap(3);
 1347              		.loc 1 281 0
 1348 00ca 4FF48061 		mov	r1, #1024
 1349 00ce 0320     		movs	r0, #3
 1350 00d0 FFF7FEFF 		bl	cdc_txbuff_init
 1351              	.LVL111:
 282:Src/main.c    **** 	
 1352              		.loc 1 282 0
 1353 00d4 10B9     		cbnz	r0, .L59
 282:Src/main.c    **** 	
 1354              		.loc 1 282 0 is_stmt 0 discriminator 1
 1355 00d6 0320     		movs	r0, #3
 1356              	.LVL112:
 1357 00d8 FFF7FEFF 		bl	morse_trap
 1358              	.LVL113:
 1359              	.L59:
 285:Src/main.c    **** 	if (Qidret < 0) morse_trap(4); // Maybe add panic led flashing here
 1360              		.loc 1 285 0 is_stmt 1
 1361 00dc 0320     		movs	r0, #3
 1362 00de FFF7FEFF 		bl	xCdcTxTaskSendCreate
 1363              	.LVL114:
 289:Src/main.c    **** 	if (Qidret < 0) morse_trap(5); // Panic LED flashing
 1364              		.loc 1 289 0
 1365 00e2 2021     		movs	r1, #32
 1366 00e4 0020     		movs	r0, #0
 1367 00e6 FFF7FEFF 		bl	xCanTxTaskCreate
 1368              	.LVL115:
 298:Src/main.c    **** 	if (pctl1 == NULL) morse_trap(7); // Panic LED flashing
 1369              		.loc 1 298 0
 1370 00ea 4023     		movs	r3, #64
 1371 00ec 2022     		movs	r2, #32
 1372 00ee 0121     		movs	r1, #1
 1373 00f0 2A48     		ldr	r0, .L67+32
 1374 00f2 FFF7FEFF 		bl	can_iface_init
 1375              	.LVL116:
 1376 00f6 2A4B     		ldr	r3, .L67+36
 1377 00f8 1860     		str	r0, [r3]
 299:Src/main.c    **** 	if (pctl1->ret < 0) morse_trap(77);
 1378              		.loc 1 299 0
 1379 00fa 10B9     		cbnz	r0, .L60
 299:Src/main.c    **** 	if (pctl1->ret < 0) morse_trap(77);
 1380              		.loc 1 299 0 is_stmt 0 discriminator 1
 1381 00fc 0720     		movs	r0, #7
 1382 00fe FFF7FEFF 		bl	morse_trap
 1383              	.LVL117:
 1384              	.L60:
ARM GAS  /tmp/cc0KX3zJ.s 			page 43


 300:Src/main.c    **** 
 1385              		.loc 1 300 0 is_stmt 1
 1386 0102 274B     		ldr	r3, .L67+36
 1387 0104 1B68     		ldr	r3, [r3]
 1388 0106 93F9B030 		ldrsb	r3, [r3, #176]
 1389 010a 002B     		cmp	r3, #0
 1390 010c 02DA     		bge	.L61
 300:Src/main.c    **** 
 1391              		.loc 1 300 0 is_stmt 0 discriminator 1
 1392 010e 4D20     		movs	r0, #77
 1393 0110 FFF7FEFF 		bl	morse_trap
 1394              	.LVL118:
 1395              	.L61:
 303:Src/main.c    **** 	if (pctl2 == NULL) morse_trap(8); // Panic LED flashing
 1396              		.loc 1 303 0 is_stmt 1
 1397 0114 1023     		movs	r3, #16
 1398 0116 0822     		movs	r2, #8
 1399 0118 0221     		movs	r1, #2
 1400 011a 2248     		ldr	r0, .L67+40
 1401 011c FFF7FEFF 		bl	can_iface_init
 1402              	.LVL119:
 1403 0120 214B     		ldr	r3, .L67+44
 1404 0122 1860     		str	r0, [r3]
 304:Src/main.c    **** 
 1405              		.loc 1 304 0
 1406 0124 10B9     		cbnz	r0, .L62
 304:Src/main.c    **** 
 1407              		.loc 1 304 0 is_stmt 0 discriminator 1
 1408 0126 0820     		movs	r0, #8
 1409 0128 FFF7FEFF 		bl	morse_trap
 1410              	.LVL120:
 1411              	.L62:
 308:Src/main.c    **** 	if (Cret == HAL_ERROR) morse_trap(9);
 1412              		.loc 1 308 0 is_stmt 1
 1413 012c 0F22     		movs	r2, #15
 1414 012e 1B49     		ldr	r1, .L67+32
 1415 0130 0120     		movs	r0, #1
 1416 0132 FFF7FEFF 		bl	canfilter_setup_first
 1417              	.LVL121:
 309:Src/main.c    **** 
 1418              		.loc 1 309 0
 1419 0136 0128     		cmp	r0, #1
 1420 0138 02D1     		bne	.L63
 309:Src/main.c    **** 
 1421              		.loc 1 309 0 is_stmt 0 discriminator 1
 1422 013a 0920     		movs	r0, #9
 1423              	.LVL122:
 1424 013c FFF7FEFF 		bl	morse_trap
 1425              	.LVL123:
 1426              	.L63:
 318:Src/main.c    **** 
 1427              		.loc 1 318 0 is_stmt 1
 1428 0140 0120     		movs	r0, #1
 1429 0142 FFF7FEFF 		bl	xMailboxTaskCreate
 1430              	.LVL124:
 321:Src/main.c    **** 
 1431              		.loc 1 321 0
ARM GAS  /tmp/cc0KX3zJ.s 			page 44


 1432 0146 0020     		movs	r0, #0
 1433 0148 FFF7FEFF 		bl	xGatewayTaskCreate
 1434              	.LVL125:
 326:Src/main.c    **** 	if (pmbxret == NULL) morse_trap(16);
 1435              		.loc 1 326 0
 1436 014c 3021     		movs	r1, #48
 1437 014e 144B     		ldr	r3, .L67+36
 1438 0150 1868     		ldr	r0, [r3]
 1439 0152 FFF7FEFF 		bl	MailboxTask_add_CANlist
 1440              	.LVL126:
 327:Src/main.c    **** 
 1441              		.loc 1 327 0
 1442 0156 10B9     		cbnz	r0, .L64
 327:Src/main.c    **** 
 1443              		.loc 1 327 0 is_stmt 0 discriminator 1
 1444 0158 1020     		movs	r0, #16
 1445              	.LVL127:
 1446 015a FFF7FEFF 		bl	morse_trap
 1447              	.LVL128:
 1448              	.L64:
 336:Src/main.c    **** 		CAN_IT_TX_MAILBOX_EMPTY     |  \
 1449              		.loc 1 336 0 is_stmt 1
 1450 015e 0F4C     		ldr	r4, .L67+32
 1451 0160 1321     		movs	r1, #19
 1452 0162 2046     		mov	r0, r4
 1453 0164 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1454              	.LVL129:
 342:Src/main.c    **** //	HAL_CAN_Start(&hcan2); // CAN2
 1455              		.loc 1 342 0
 1456 0168 2046     		mov	r0, r4
 1457 016a FFF7FEFF 		bl	HAL_CAN_Start
 1458              	.LVL130:
 346:Src/main.c    **** 
 1459              		.loc 1 346 0
 1460 016e 0220     		movs	r0, #2
 1461 0170 FFF7FEFF 		bl	xADCTaskCreate
 1462              	.LVL131:
 359:Src/main.c    ****   
 1463              		.loc 1 359 0
 1464 0174 FFF7FEFF 		bl	osKernelStart
 1465              	.LVL132:
 1466              	.L65:
 1467 0178 FEE7     		b	.L65
 1468              	.L68:
 1469 017a 00BF     		.align	2
 1470              	.L67:
 1471 017c 00000000 		.word	CallbackdefaultTaskTimer
 1472 0180 00000000 		.word	defaultTaskTimerHandle
 1473 0184 00000000 		.word	CallbackdefaultTaskTimer01
 1474 0188 00000000 		.word	defautTaskTimer01Handle
 1475 018c 00000000 		.word	.LANCHOR0
 1476 0190 00000000 		.word	defaultTaskHandle
 1477 0194 00000000 		.word	huart6
 1478 0198 00000000 		.word	huart2
 1479 019c 00000000 		.word	hcan1
 1480 01a0 00000000 		.word	pctl1
 1481 01a4 00000000 		.word	hcan2
ARM GAS  /tmp/cc0KX3zJ.s 			page 45


 1482 01a8 00000000 		.word	pctl2
 1483              		.cfi_endproc
 1484              	.LFE130:
 1486              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1487              		.align	2
 1488              		.global	HAL_TIM_PeriodElapsedCallback
 1489              		.thumb
 1490              		.thumb_func
 1492              	HAL_TIM_PeriodElapsedCallback:
 1493              	.LFB142:
 858:Src/main.c    **** 
 859:Src/main.c    **** /**
 860:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 861:Src/main.c    ****   * @note   This function is called  when TIM5 interrupt took place, inside
 862:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 863:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 864:Src/main.c    ****   * @param  htim : TIM handle
 865:Src/main.c    ****   * @retval None
 866:Src/main.c    ****   */
 867:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 868:Src/main.c    **** {
 1494              		.loc 1 868 0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 0
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498              	.LVL133:
 1499 0000 08B5     		push	{r3, lr}
 1500              	.LCFI27:
 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 3, -8
 1503              		.cfi_offset 14, -4
 869:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 870:Src/main.c    **** 
 871:Src/main.c    ****   /* USER CODE END Callback 0 */
 872:Src/main.c    ****   if (htim->Instance == TIM5) {
 1504              		.loc 1 872 0
 1505 0002 0268     		ldr	r2, [r0]
 1506 0004 024B     		ldr	r3, .L72
 1507 0006 9A42     		cmp	r2, r3
 1508 0008 01D1     		bne	.L69
 873:Src/main.c    ****     HAL_IncTick();
 1509              		.loc 1 873 0
 1510 000a FFF7FEFF 		bl	HAL_IncTick
 1511              	.LVL134:
 1512              	.L69:
 1513 000e 08BD     		pop	{r3, pc}
 1514              	.L73:
 1515              		.align	2
 1516              	.L72:
 1517 0010 000C0040 		.word	1073744896
 1518              		.cfi_endproc
 1519              	.LFE142:
 1521              		.section	.text.Error_Handler,"ax",%progbits
 1522              		.align	2
 1523              		.global	Error_Handler
 1524              		.thumb
 1525              		.thumb_func
ARM GAS  /tmp/cc0KX3zJ.s 			page 46


 1527              	Error_Handler:
 1528              	.LFB143:
 874:Src/main.c    ****   }
 875:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 876:Src/main.c    **** 
 877:Src/main.c    ****   /* USER CODE END Callback 1 */
 878:Src/main.c    **** }
 879:Src/main.c    **** 
 880:Src/main.c    **** /**
 881:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 882:Src/main.c    ****   * @retval None
 883:Src/main.c    ****   */
 884:Src/main.c    **** void Error_Handler(void)
 885:Src/main.c    **** {
 1529              		.loc 1 885 0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 0
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533              		@ link register save eliminated.
 1534 0000 7047     		bx	lr
 1535              		.cfi_endproc
 1536              	.LFE143:
 1538              		.comm	defautTaskTimer01Handle,4,4
 1539              		.comm	defaultTaskTimerHandle,4,4
 1540              		.comm	defaultTaskHandle,4,4
 1541              		.comm	hdma_usart6_tx,96,4
 1542              		.comm	hdma_usart6_rx,96,4
 1543              		.comm	hdma_usart2_tx,96,4
 1544              		.comm	hdma_usart2_rx,96,4
 1545              		.comm	huart6,64,4
 1546              		.comm	huart2,64,4
 1547              		.comm	hcan2,40,4
 1548              		.comm	hcan1,40,4
 1549              		.comm	hdma_adc1,96,4
 1550              		.comm	hadc1,72,4
 1551              		.comm	canflag2,1,1
 1552              		.comm	canflag1,1,1
 1553              		.comm	canflag,1,1
 1554              		.comm	debug03_prev,4,4
 1555              		.comm	debug03,4,4
 1556              		.comm	debugTX1c_prev,4,4
 1557              		.comm	debugTX1c,4,4
 1558              		.comm	debugTX1b_prev,4,4
 1559              		.comm	debugTX1b,4,4
 1560              		.comm	pctl2,4,4
 1561              		.comm	pctl1,4,4
 1562              		.global	timectr
 1563              		.global	verrx
 1564              		.comm	verr,32,4
 1565 0002 00BF     		.section	.rodata
 1566              		.align	2
 1567              		.set	.LANCHOR0,. + 0
 1568              	.LC12:
 1569 0000 F8000000 		.word	.LC0
 1570 0004 00000000 		.word	StartDefaultTask
 1571 0008 0000     		.short	0
 1572 000a 0000     		.space	2
ARM GAS  /tmp/cc0KX3zJ.s 			page 47


 1573 000c 00000000 		.word	0
 1574 0010 80010000 		.word	384
 1575 0014 00000000 		.word	0
 1576 0018 00000000 		.word	0
 1577              		.section	.bss.verrx,"aw",%nobits
 1578              		.align	2
 1581              	verrx:
 1582 0000 00000000 		.space	4
 1583              		.section	.rodata.str1.4,"aMS",%progbits,1
 1584              		.align	2
 1585              	.LC2:
 1586 0000 0A0D2534 		.ascii	"\012\015%4i Unused Task stack space--\000"
 1586      6920556E 
 1586      75736564 
 1586      20546173 
 1586      6B207374 
 1587              	.LC3:
 1588 0020 64656661 		.ascii	"defaultTask--\000"
 1588      756C7454 
 1588      61736B2D 
 1588      2D00
 1589 002e 0000     		.space	2
 1590              	.LC4:
 1591 0030 53657269 		.ascii	"SerialTask---\000"
 1591      616C5461 
 1591      736B2D2D 
 1591      2D00
 1592 003e 0000     		.space	2
 1593              	.LC5:
 1594 0040 43616E54 		.ascii	"CanTxTask----\000"
 1594      78546173 
 1594      6B2D2D2D 
 1594      2D00
 1595 004e 0000     		.space	2
 1596              	.LC6:
 1597 0050 4D61696C 		.ascii	"MailboxTask--\000"
 1597      626F7854 
 1597      61736B2D 
 1597      2D00
 1598 005e 0000     		.space	2
 1599              	.LC7:
 1600 0060 41444354 		.ascii	"ADCTask------\000"
 1600      61736B2D 
 1600      2D2D2D2D 
 1600      2D00
 1601 006e 0000     		.space	2
 1602              	.LC8:
 1603 0070 53657269 		.ascii	"SerialRcvTask\000"
 1603      616C5263 
 1603      76546173 
 1603      6B00
 1604 007e 0000     		.space	2
 1605              	.LC9:
 1606 0080 0A0D4765 		.ascii	"\012\015GetFreeHeapSize: total: %i used %i %3.1f%% "
 1606      74467265 
 1606      65486561 
 1606      7053697A 
ARM GAS  /tmp/cc0KX3zJ.s 			page 48


 1606      653A2074 
 1607 00ad 66726565 		.ascii	"free: %i\000"
 1607      3A202569 
 1607      00
 1608 00b6 0000     		.space	2
 1609              	.LC10:
 1610 00b8 0A0D4144 		.ascii	"\012\015ADC: Vdd: %7.4f %8.4f   Temp: %6.1f  %i\000"
 1610      433A2056 
 1610      64643A20 
 1610      25372E34 
 1610      66202538 
 1611 00e2 0000     		.space	2
 1612              	.LC11:
 1613 00e4 0A0D2043 		.ascii	"\012\015 C:   %d %d %d\000"
 1613      3A202020 
 1613      25642025 
 1613      64202564 
 1613      00
 1614 00f5 000000   		.space	3
 1615              	.LC0:
 1616 00f8 64656661 		.ascii	"defaultTask\000"
 1616      756C7454 
 1616      61736B00 
 1617              		.section	.bss.timectr,"aw",%nobits
 1618              		.align	2
 1621              	timectr:
 1622 0000 00000000 		.space	4
 1623              		.text
 1624              	.Letext0:
 1625              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 1626              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1627              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1628              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1629              		.file 6 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/lib/gcc/arm-none-eabi/5.4.1/include/stdd
 1630              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1631              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1632              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1633              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1634              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1635              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1636              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1637              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1638              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1639              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1640              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1641              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1642              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 1643              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1644              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1645              		.file 22 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1646              		.file 23 "Ourwares/SerialTaskSend.h"
 1647              		.file 24 "Ourwares/cdc_txbuff.h"
 1648              		.file 25 "Ourwares/common_misc.h"
 1649              		.file 26 "Ourwares/common_can.h"
 1650              		.file 27 "Ourwares/CanTask.h"
 1651              		.file 28 "Ourwares/can_iface.h"
 1652              		.file 29 "Ourtasks/adcparams.h"
ARM GAS  /tmp/cc0KX3zJ.s 			page 49


 1653              		.file 30 "Ourwares/MailboxTask.h"
 1654              		.file 31 "Drivers/CMSIS/Include/core_cm4.h"
 1655              		.file 32 "Ourwares/ADCTask.h"
 1656              		.file 33 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1657              		.file 34 "Inc/usb_device.h"
 1658              		.file 35 "Ourwares/getserialbuf.h"
 1659              		.file 36 "Ourwares/morse.h"
 1660              		.file 37 "Ourwares/yprintf.h"
 1661              		.file 38 "Ourtasks/stackwatermark.h"
 1662              		.file 39 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 1663              		.file 40 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1664              		.file 41 "Ourwares/DTW_counter.h"
 1665              		.file 42 "Ourwares/SerialTaskReceive.h"
 1666              		.file 43 "Ourwares/canfilter_setup.h"
 1667              		.file 44 "Ourwares/GatewayTask.h"
ARM GAS  /tmp/cc0KX3zJ.s 			page 50


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc0KX3zJ.s:22     .text.MX_GPIO_Init:00000000 $t
     /tmp/cc0KX3zJ.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cc0KX3zJ.s:136    .text.MX_GPIO_Init:000000a0 $d
     /tmp/cc0KX3zJ.s:142    .text.MX_DMA_Init:00000000 $t
     /tmp/cc0KX3zJ.s:146    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/cc0KX3zJ.s:243    .text.MX_DMA_Init:00000084 $d
     /tmp/cc0KX3zJ.s:248    .text.MX_USART6_UART_Init:00000000 $t
     /tmp/cc0KX3zJ.s:252    .text.MX_USART6_UART_Init:00000000 MX_USART6_UART_Init
     /tmp/cc0KX3zJ.s:291    .text.MX_USART6_UART_Init:00000024 $d
                            *COM*:00000040 huart6
     /tmp/cc0KX3zJ.s:297    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/cc0KX3zJ.s:301    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/cc0KX3zJ.s:340    .text.MX_USART2_UART_Init:00000024 $d
                            *COM*:00000040 huart2
     /tmp/cc0KX3zJ.s:347    .text.MX_CAN1_Init:00000000 $t
     /tmp/cc0KX3zJ.s:351    .text.MX_CAN1_Init:00000000 MX_CAN1_Init
     /tmp/cc0KX3zJ.s:398    .text.MX_CAN1_Init:0000002c $d
                            *COM*:00000028 hcan1
     /tmp/cc0KX3zJ.s:404    .text.MX_CAN2_Init:00000000 $t
     /tmp/cc0KX3zJ.s:408    .text.MX_CAN2_Init:00000000 MX_CAN2_Init
     /tmp/cc0KX3zJ.s:455    .text.MX_CAN2_Init:0000002c $d
                            *COM*:00000028 hcan2
     /tmp/cc0KX3zJ.s:461    .text.MX_ADC1_Init:00000000 $t
     /tmp/cc0KX3zJ.s:465    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/cc0KX3zJ.s:640    .text.MX_ADC1_Init:000000e4 $d
                            *COM*:00000048 hadc1
     /tmp/cc0KX3zJ.s:650    .text.StartDefaultTask:00000000 $t
     /tmp/cc0KX3zJ.s:655    .text.StartDefaultTask:00000000 StartDefaultTask
     /tmp/cc0KX3zJ.s:961    .text.StartDefaultTask:000001c4 $d
                            *COM*:00000004 pctl1
                            *COM*:00000004 defaultTaskHandle
     /tmp/cc0KX3zJ.s:991    .text.CallbackdefaultTaskTimer:00000000 $t
     /tmp/cc0KX3zJ.s:996    .text.CallbackdefaultTaskTimer:00000000 CallbackdefaultTaskTimer
     /tmp/cc0KX3zJ.s:1032   .text.CallbackdefaultTaskTimer:00000020 $d
     /tmp/cc0KX3zJ.s:1037   .text.CallbackdefaultTaskTimer01:00000000 $t
     /tmp/cc0KX3zJ.s:1042   .text.CallbackdefaultTaskTimer01:00000000 CallbackdefaultTaskTimer01
     /tmp/cc0KX3zJ.s:1078   .text.CallbackdefaultTaskTimer01:00000020 $d
     /tmp/cc0KX3zJ.s:1083   .text.SystemClock_Config:00000000 $t
     /tmp/cc0KX3zJ.s:1088   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cc0KX3zJ.s:1194   .text.SystemClock_Config:00000090 $d
     /tmp/cc0KX3zJ.s:1200   .text.main:00000000 $t
     /tmp/cc0KX3zJ.s:1205   .text.main:00000000 main
     /tmp/cc0KX3zJ.s:1471   .text.main:0000017c $d
                            *COM*:00000004 defaultTaskTimerHandle
                            *COM*:00000004 defautTaskTimer01Handle
                            *COM*:00000004 pctl2
     /tmp/cc0KX3zJ.s:1487   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/cc0KX3zJ.s:1492   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc0KX3zJ.s:1517   .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
     /tmp/cc0KX3zJ.s:1522   .text.Error_Handler:00000000 $t
     /tmp/cc0KX3zJ.s:1527   .text.Error_Handler:00000000 Error_Handler
                            *COM*:00000060 hdma_usart6_tx
                            *COM*:00000060 hdma_usart6_rx
                            *COM*:00000060 hdma_usart2_tx
                            *COM*:00000060 hdma_usart2_rx
ARM GAS  /tmp/cc0KX3zJ.s 			page 51


                            *COM*:00000060 hdma_adc1
                            *COM*:00000001 canflag2
                            *COM*:00000001 canflag1
                            *COM*:00000001 canflag
                            *COM*:00000004 debug03_prev
                            *COM*:00000004 debug03
                            *COM*:00000004 debugTX1c_prev
                            *COM*:00000004 debugTX1c
                            *COM*:00000004 debugTX1b_prev
                            *COM*:00000004 debugTX1b
     /tmp/cc0KX3zJ.s:1621   .bss.timectr:00000000 timectr
     /tmp/cc0KX3zJ.s:1581   .bss.verrx:00000000 verrx
                            *COM*:00000020 verr
     /tmp/cc0KX3zJ.s:1566   .rodata:00000000 $d
     /tmp/cc0KX3zJ.s:1578   .bss.verrx:00000000 $d
     /tmp/cc0KX3zJ.s:1584   .rodata.str1.4:00000000 $d
     /tmp/cc0KX3zJ.s:1618   .bss.timectr:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Init
HAL_CAN_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
__aeabi_f2d
__aeabi_dmul
__aeabi_ddiv
MX_USB_DEVICE_Init
getserialbuf
morse_trap
HAL_GPIO_TogglePin
xTaskNotifyWait
yprintf
stackwatermark_show
xPortGetFreeHeapSize
xQueueGenericSend
adcommon
SerialTaskHandle
CanTxTaskHandle
MailboxTaskHandle
ADCTaskHandle
SerialTaskReceiveHandle
CanTxQHandle
adc1data
adcdbg2
xTaskGenericNotifyFromISR
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
DTW_counter_init
osTimerCreate
xTimerGenericCommand
ARM GAS  /tmp/cc0KX3zJ.s 			page 52


osThreadCreate
xSerialTaskSendCreate
xSerialTaskSendAdd
yprintf_init
xSerialTaskReceiveCreate
cdc_txbuff_init
xCdcTxTaskSendCreate
xCanTxTaskCreate
can_iface_init
canfilter_setup_first
xMailboxTaskCreate
xGatewayTaskCreate
MailboxTask_add_CANlist
HAL_CAN_ActivateNotification
HAL_CAN_Start
xADCTaskCreate
osKernelStart
HAL_IncTick
