ARM GAS  /tmp/ccZIDsX1.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"cdc_txbuff.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.step_ptr,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	step_ptr:
  27              	.LFB130:
  28              		.file 1 "Ourwares/cdc_txbuff.c"
   1:Ourwares/cdc_txbuff.c **** /**
   2:Ourwares/cdc_txbuff.c ****   ******************************************************************************
   3:Ourwares/cdc_txbuff.c ****   * @file           : cdc_txbuff.c
   4:Ourwares/cdc_txbuff.c ****   * @brief          : Buffering for HAL CDC 2017 12 11
   5:Ourwares/cdc_txbuff.c ****   ******************************************************************************
   6:Ourwares/cdc_txbuff.c **** Updates:
   7:Ourwares/cdc_txbuff.c **** 2018 12 30 Multiple Tasks can call, plus timer polling (allows unmodified HAL code)
   8:Ourwares/cdc_txbuff.c ****    
   9:Ourwares/cdc_txbuff.c **** Strategy:
  10:Ourwares/cdc_txbuff.c **** A circular array of local buffers are created during initialization.  Tasks that
  11:Ourwares/cdc_txbuff.c **** have data to send via cdc tx place a block holding a pointer to the data plus the
  12:Ourwares/cdc_txbuff.c **** number of bytes on a queue.
  13:Ourwares/cdc_txbuff.c **** 
  14:Ourwares/cdc_txbuff.c **** The serial task send routine waits for blocks to be added tot he queue.  When it receives
  15:Ourwares/cdc_txbuff.c **** the notification it checks for NULL pointer and zero size and calls the 'add' routine
  16:Ourwares/cdc_txbuff.c **** that copies the data into the local buffer(s).  It starts the cdc tx sending if it
  17:Ourwares/cdc_txbuff.c **** is not busy.  
  18:Ourwares/cdc_txbuff.c **** 
  19:Ourwares/cdc_txbuff.c **** When the timer, or modified HAL program, executes a callback the callback routine 
  20:Ourwares/cdc_txbuff.c **** checks if more buffers are to be sent and initiates the sending of the next buffer.
  21:Ourwares/cdc_txbuff.c **** 
  22:Ourwares/cdc_txbuff.c **** When data is added to the local buffer and the cdc tx is busy sending the previous
  23:Ourwares/cdc_txbuff.c **** local buffer, the new data is appended to the local buffer.  This allows the lower
  24:Ourwares/cdc_txbuff.c **** level cdc routines to send longer runs of data.  Otherwise, it would be likely that
  25:Ourwares/cdc_txbuff.c **** sending short strings would result in the usb causing 1 ms delays between each
  26:Ourwares/cdc_txbuff.c **** string, thus limiting the throughput.
  27:Ourwares/cdc_txbuff.c **** 
  28:Ourwares/cdc_txbuff.c **** ==> NOTE: STM32CubeMX places MX_USB_DEVICE_Init(); in "StartDefaultTask".  A time
  29:Ourwares/cdc_txbuff.c **** delay is needed for the PC to recognize our usb device, e.g. 'osDelay(1000)'.
  30:Ourwares/cdc_txbuff.c **** 
ARM GAS  /tmp/ccZIDsX1.s 			page 2


  31:Ourwares/cdc_txbuff.c **** */
  32:Ourwares/cdc_txbuff.c **** 
  33:Ourwares/cdc_txbuff.c **** #include <malloc.h>
  34:Ourwares/cdc_txbuff.c **** #include "cdc_txbuff.h"
  35:Ourwares/cdc_txbuff.c **** #include "usbd_cdc_if.h"
  36:Ourwares/cdc_txbuff.c **** 
  37:Ourwares/cdc_txbuff.c **** #define CDCTIMEDURATION 5	// Timer time period (ms)
  38:Ourwares/cdc_txbuff.c **** 
  39:Ourwares/cdc_txbuff.c **** /* Prototypes */
  40:Ourwares/cdc_txbuff.c **** static uint32_t cdc_txbuff_add(struct CDCTXTASKBCB* p);
  41:Ourwares/cdc_txbuff.c **** void cdc_txbuff_callback(void const * argument);
  42:Ourwares/cdc_txbuff.c **** 
  43:Ourwares/cdc_txbuff.c **** /* Pointers for each buffer */
  44:Ourwares/cdc_txbuff.c **** static struct CDCBUFFPTR* pbuff_begin;
  45:Ourwares/cdc_txbuff.c **** static struct CDCBUFFPTR* pbuff_end;
  46:Ourwares/cdc_txbuff.c **** static struct CDCBUFFPTR* pbuff_m;	// Pointer to buffer that 'main' is adding to
  47:Ourwares/cdc_txbuff.c **** static struct CDCBUFFPTR* pbuff_i;	// Pointer to buffer that 'interrupt' (or poll) taking from
  48:Ourwares/cdc_txbuff.c **** 
  49:Ourwares/cdc_txbuff.c **** /* Task */
  50:Ourwares/cdc_txbuff.c **** #define SSPRIORITY 1	// Priority for this task (0 = Normal, -3 = Idle)
  51:Ourwares/cdc_txbuff.c **** 
  52:Ourwares/cdc_txbuff.c **** static uint32_t CdcTxTaskSendBuffer[ 64 ];
  53:Ourwares/cdc_txbuff.c **** static osStaticThreadDef_t CdcTxTaskSendControlBlock;
  54:Ourwares/cdc_txbuff.c **** osThreadId CdcTxTaskSendHandle = NULL;
  55:Ourwares/cdc_txbuff.c **** void StartCdcTxTaskSend(void const * argument);
  56:Ourwares/cdc_txbuff.c **** osTimerId CdcTxTimerHandle;
  57:Ourwares/cdc_txbuff.c **** 
  58:Ourwares/cdc_txbuff.c **** /* Queue */
  59:Ourwares/cdc_txbuff.c **** #define CDCTXQUEUESIZE 8	// Total size of bcb's tasks can queue up
  60:Ourwares/cdc_txbuff.c **** 
  61:Ourwares/cdc_txbuff.c **** osMessageQId CdcTxTaskSendQHandle;
  62:Ourwares/cdc_txbuff.c **** static uint8_t CdcTxTaskSendQBuffer[ CDCTXQUEUESIZE * sizeof( struct CDCTXTASKBCB ) ];
  63:Ourwares/cdc_txbuff.c **** static osStaticMessageQDef_t CdcTxTaskSendQCB;
  64:Ourwares/cdc_txbuff.c **** 
  65:Ourwares/cdc_txbuff.c **** /* *************************************************************************
  66:Ourwares/cdc_txbuff.c ****  * osMessageQId xCdcTxTaskSendCreate(uint32_t taskpriority);
  67:Ourwares/cdc_txbuff.c ****  * @brief	: Create task; task handle created is global for all to enjoy!
  68:Ourwares/cdc_txbuff.c ****  * @param	: taskpriority = Task priority (just as it says!)
  69:Ourwares/cdc_txbuff.c ****  * @return	: Handle to queue
  70:Ourwares/cdc_txbuff.c ****  * *************************************************************************/
  71:Ourwares/cdc_txbuff.c **** osThreadId xCdcTxTaskSendCreate(uint32_t taskpriority)
  72:Ourwares/cdc_txbuff.c **** {
  73:Ourwares/cdc_txbuff.c **** 	/* definition and creation of task: CdcTxTaskSend */
  74:Ourwares/cdc_txbuff.c **** 	osThreadStaticDef(CdcTxTaskSend, StartCdcTxTaskSend, osPriorityNormal, 0, 64, CdcTxTaskSendBuffer,
  75:Ourwares/cdc_txbuff.c ****    CdcTxTaskSendHandle = osThreadCreate(osThread(CdcTxTaskSend), NULL);
  76:Ourwares/cdc_txbuff.c **** 	vTaskPrioritySet( CdcTxTaskSendHandle, taskpriority );
  77:Ourwares/cdc_txbuff.c **** 	if (CdcTxTaskSendHandle == NULL) return NULL;
  78:Ourwares/cdc_txbuff.c **** 
  79:Ourwares/cdc_txbuff.c **** 	/* FreeRTOS queue for task with data to send. */
  80:Ourwares/cdc_txbuff.c ****   osMessageQStaticDef(CdcTxSendQ, CDCTXQUEUESIZE, struct CDCTXTASKBCB, CdcTxTaskSendQBuffer, &CdcTx
  81:Ourwares/cdc_txbuff.c ****   CdcTxTaskSendQHandle = osMessageCreate(osMessageQ(CdcTxSendQ), NULL);
  82:Ourwares/cdc_txbuff.c **** 
  83:Ourwares/cdc_txbuff.c ****   /* definition and creation of CdcTxTimer */
  84:Ourwares/cdc_txbuff.c ****   osTimerDef(CdcTxTim, cdc_txbuff_callback);
  85:Ourwares/cdc_txbuff.c ****   CdcTxTimerHandle = osTimerCreate(osTimer(CdcTxTim), osTimerPeriodic, NULL);
  86:Ourwares/cdc_txbuff.c **** 
  87:Ourwares/cdc_txbuff.c **** 	/* Start timer callback polling */
ARM GAS  /tmp/ccZIDsX1.s 			page 3


  88:Ourwares/cdc_txbuff.c **** 	osTimerStart (CdcTxTimerHandle, CDCTIMEDURATION);	
  89:Ourwares/cdc_txbuff.c **** 
  90:Ourwares/cdc_txbuff.c **** 	return CdcTxTaskSendQHandle;
  91:Ourwares/cdc_txbuff.c **** }
  92:Ourwares/cdc_txbuff.c **** /* *****************************************************************************
  93:Ourwares/cdc_txbuff.c ****   Advance buffer pointer
  94:Ourwares/cdc_txbuff.c **** ********************************************************************************/
  95:Ourwares/cdc_txbuff.c **** static struct CDCBUFFPTR* step_ptr(struct CDCBUFFPTR* pb)
  96:Ourwares/cdc_txbuff.c **** {
  29              		.loc 1 96 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  97:Ourwares/cdc_txbuff.c **** 		pb++;	//Step to next struct of pointers for a buffer
  35              		.loc 1 97 0
  36 0000 0C30     		adds	r0, r0, #12
  37              	.LVL1:
  98:Ourwares/cdc_txbuff.c **** 		if (pb >= pbuff_end)
  38              		.loc 1 98 0
  39 0002 034B     		ldr	r3, .L3
  40 0004 1B68     		ldr	r3, [r3]
  41 0006 9842     		cmp	r0, r3
  42 0008 01D3     		bcc	.L2
  99:Ourwares/cdc_txbuff.c **** 			pb = pbuff_begin; // Wrap around
  43              		.loc 1 99 0
  44 000a 024B     		ldr	r3, .L3+4
  45 000c 1868     		ldr	r0, [r3]
  46              	.LVL2:
  47              	.L2:
 100:Ourwares/cdc_txbuff.c **** 		return pb;
 101:Ourwares/cdc_txbuff.c **** }
  48              		.loc 1 101 0
  49 000e 7047     		bx	lr
  50              	.L4:
  51              		.align	2
  52              	.L3:
  53 0010 00000000 		.word	.LANCHOR0
  54 0014 00000000 		.word	.LANCHOR1
  55              		.cfi_endproc
  56              	.LFE130:
  58              		.section	.text.pbuff_init,"ax",%progbits
  59              		.align	2
  60              		.thumb
  61              		.thumb_func
  63              	pbuff_init:
  64              	.LFB131:
 102:Ourwares/cdc_txbuff.c **** /* *****************************************************************************
 103:Ourwares/cdc_txbuff.c ****    Get buffer space and init pointers
 104:Ourwares/cdc_txbuff.c **** ********************************************************************************/
 105:Ourwares/cdc_txbuff.c **** static uint8_t* pbuff_init(struct CDCBUFFPTR* pb, uint16_t size)
 106:Ourwares/cdc_txbuff.c **** {
  65              		.loc 1 106 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccZIDsX1.s 			page 4


  69              	.LVL3:
  70 0000 38B5     		push	{r3, r4, r5, lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 16
  73              		.cfi_offset 3, -16
  74              		.cfi_offset 4, -12
  75              		.cfi_offset 5, -8
  76              		.cfi_offset 14, -4
  77 0002 0546     		mov	r5, r0
  78 0004 0C46     		mov	r4, r1
 107:Ourwares/cdc_txbuff.c ****   pb->begin = calloc(size, sizeof(uint8_t));
  79              		.loc 1 107 0
  80 0006 0121     		movs	r1, #1
  81              	.LVL4:
  82 0008 2046     		mov	r0, r4
  83              	.LVL5:
  84 000a FFF7FEFF 		bl	calloc
  85              	.LVL6:
  86 000e 2860     		str	r0, [r5]
 108:Ourwares/cdc_txbuff.c ****   pb->work  = pb->begin;
  87              		.loc 1 108 0
  88 0010 A860     		str	r0, [r5, #8]
 109:Ourwares/cdc_txbuff.c ****   pb->end   = pb->begin + size;
  89              		.loc 1 109 0
  90 0012 0444     		add	r4, r4, r0
  91 0014 6C60     		str	r4, [r5, #4]
 110:Ourwares/cdc_txbuff.c ****   return pb->begin;
 111:Ourwares/cdc_txbuff.c **** }
  92              		.loc 1 111 0
  93 0016 38BD     		pop	{r3, r4, r5, pc}
  94              		.cfi_endproc
  95              	.LFE131:
  97              		.section	.text.poll,"ax",%progbits
  98              		.align	2
  99              		.thumb
 100              		.thumb_func
 102              	poll:
 103              	.LFB134:
 112:Ourwares/cdc_txbuff.c **** /** ****************************************************************************
 113:Ourwares/cdc_txbuff.c ****   * struct CDCBUFFPTR* cdc_txbuff_init(uint16_t numbuff, uint16_t size);
 114:Ourwares/cdc_txbuff.c ****   * @brief	: Setup buffer pair for CDC TX
 115:Ourwares/cdc_txbuff.c ****   * @param	: numbuff = number of buffers (of size 'size')
 116:Ourwares/cdc_txbuff.c ****   * @param	: size = number of bytes in each buffer
 117:Ourwares/cdc_txbuff.c ****   * @return	: NULL = calloc failed; not NULL = pointer to 1st struct with buff ptrs
 118:Ourwares/cdc_txbuff.c ****   ******************************************************************************
 119:Ourwares/cdc_txbuff.c ****   */
 120:Ourwares/cdc_txbuff.c **** struct CDCBUFFPTR* cdc_txbuff_init(uint16_t numbuff, uint16_t size)
 121:Ourwares/cdc_txbuff.c **** {
 122:Ourwares/cdc_txbuff.c **** 	/* Minimum of 2 buffers required */
 123:Ourwares/cdc_txbuff.c **** 	if (numbuff < 2)
 124:Ourwares/cdc_txbuff.c **** 	{ // Here, we force 2, but we *could* just bomb, but what if the hapless Programmer
 125:Ourwares/cdc_txbuff.c **** 		// doesn't check the return!
 126:Ourwares/cdc_txbuff.c **** 		numbuff = 2; 
 127:Ourwares/cdc_txbuff.c **** 	}
 128:Ourwares/cdc_txbuff.c **** 	/* Miminum of one char for the buffer (is this a duh?) */
 129:Ourwares/cdc_txbuff.c **** 	if (size == 0)
 130:Ourwares/cdc_txbuff.c **** 	{
ARM GAS  /tmp/ccZIDsX1.s 			page 5


 131:Ourwares/cdc_txbuff.c **** 		size = 1;
 132:Ourwares/cdc_txbuff.c **** 	}
 133:Ourwares/cdc_txbuff.c **** 
 134:Ourwares/cdc_txbuff.c **** 	struct CDCBUFFPTR* pb = calloc(numbuff, sizeof(struct CDCBUFFPTR));
 135:Ourwares/cdc_txbuff.c **** 	if (pb == NULL)  return NULL;
 136:Ourwares/cdc_txbuff.c **** 	pbuff_begin = pb;
 137:Ourwares/cdc_txbuff.c **** 	pbuff_end = pbuff_begin;
 138:Ourwares/cdc_txbuff.c **** 	pbuff_end += numbuff;
 139:Ourwares/cdc_txbuff.c **** 
 140:Ourwares/cdc_txbuff.c **** 	/* Get memory for buffers, and init pointers for each */
 141:Ourwares/cdc_txbuff.c **** 	while (pb != pbuff_end)
 142:Ourwares/cdc_txbuff.c **** 	{
 143:Ourwares/cdc_txbuff.c **** 	   if (pbuff_init(pb++, size) == NULL) return NULL;
 144:Ourwares/cdc_txbuff.c ****    }
 145:Ourwares/cdc_txbuff.c **** 
 146:Ourwares/cdc_txbuff.c **** 	/* Init pointers for adding/taking */
 147:Ourwares/cdc_txbuff.c **** 	pbuff_m = pbuff_begin;	// Adding
 148:Ourwares/cdc_txbuff.c **** 	pbuff_i = pbuff_begin;	// Taking
 149:Ourwares/cdc_txbuff.c **** 	pbuff_i += numbuff;		//  (initially one behind Adding)
 150:Ourwares/cdc_txbuff.c **** 
 151:Ourwares/cdc_txbuff.c ****    return pbuff_m;	// Probably not used except for debugging
 152:Ourwares/cdc_txbuff.c **** }
 153:Ourwares/cdc_txbuff.c **** /** ****************************************************************************
 154:Ourwares/cdc_txbuff.c ****   * uint32_t cdc_txbuff_poll(void);
 155:Ourwares/cdc_txbuff.c ****   * @brief	: Start USBD sending if it is not busy
 156:Ourwares/cdc_txbuff.c ****   * @return	: 0 = busy; 1 = new buffer started sending; 2 = no new data to send
 157:Ourwares/cdc_txbuff.c ****   *****************************************************************************
 158:Ourwares/cdc_txbuff.c ****   */
 159:Ourwares/cdc_txbuff.c **** static uint32_t poll(void);
 160:Ourwares/cdc_txbuff.c **** static volatile uint32_t cdcaddbusy = 0;	// 0 = cdc_txbuff_add routine not active; 1 = in process
 161:Ourwares/cdc_txbuff.c **** 
 162:Ourwares/cdc_txbuff.c **** uint32_t cdc_txbuff_poll(void)
 163:Ourwares/cdc_txbuff.c **** {
 164:Ourwares/cdc_txbuff.c **** 	cdcaddbusy = 1;	// Show callback that adding data is active
 165:Ourwares/cdc_txbuff.c **** 	uint32_t ret = poll();
 166:Ourwares/cdc_txbuff.c **** 	cdcaddbusy = 0;	// Done adding	
 167:Ourwares/cdc_txbuff.c **** 	return ret;
 168:Ourwares/cdc_txbuff.c **** }
 169:Ourwares/cdc_txbuff.c **** 
 170:Ourwares/cdc_txbuff.c **** uint32_t cdcct5;
 171:Ourwares/cdc_txbuff.c **** 
 172:Ourwares/cdc_txbuff.c **** /* static version called by callback */
 173:Ourwares/cdc_txbuff.c **** static uint32_t poll(void)
 174:Ourwares/cdc_txbuff.c **** {
 104              		.loc 1 174 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108 0000 10B5     		push	{r4, lr}
 109              	.LCFI1:
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 4, -8
 112              		.cfi_offset 14, -4
 175:Ourwares/cdc_txbuff.c **** 	struct CDCBUFFPTR* pbuff_tmp;
 176:Ourwares/cdc_txbuff.c **** 
 177:Ourwares/cdc_txbuff.c **** 	/* Return if caught up with buffer ptrs AND no new data */
 178:Ourwares/cdc_txbuff.c **** 	pbuff_tmp = step_ptr(pbuff_i);	// Advance last sent ptr JIC
ARM GAS  /tmp/ccZIDsX1.s 			page 6


 113              		.loc 1 178 0
 114 0002 164B     		ldr	r3, .L14
 115 0004 1868     		ldr	r0, [r3]
 116 0006 FFF7FEFF 		bl	step_ptr
 117              	.LVL7:
 118 000a 0446     		mov	r4, r0
 119              	.LVL8:
 179:Ourwares/cdc_txbuff.c **** 	if ((pbuff_m == pbuff_tmp)	&& ((pbuff_m->work - pbuff_m->begin) == 0)) return 2;
 120              		.loc 1 179 0
 121 000c 144B     		ldr	r3, .L14+4
 122 000e 1B68     		ldr	r3, [r3]
 123 0010 9842     		cmp	r0, r3
 124 0012 03D1     		bne	.L8
 125              		.loc 1 179 0 is_stmt 0 discriminator 1
 126 0014 9A68     		ldr	r2, [r3, #8]
 127 0016 1B68     		ldr	r3, [r3]
 128 0018 9A42     		cmp	r2, r3
 129 001a 18D0     		beq	.L10
 130              	.L8:
 180:Ourwares/cdc_txbuff.c **** 
 181:Ourwares/cdc_txbuff.c **** 	/* Start next buffer sending if USBD is ready */
 182:Ourwares/cdc_txbuff.c **** 	if ((CDC_Transmit_FS( (uint8_t*)pbuff_tmp->begin, (pbuff_tmp->work - pbuff_tmp->begin))) == USBD_O
 131              		.loc 1 182 0 is_stmt 1
 132 001c A168     		ldr	r1, [r4, #8]
 133 001e 2068     		ldr	r0, [r4]
 134              	.LVL9:
 135 0020 091A     		subs	r1, r1, r0
 136 0022 89B2     		uxth	r1, r1
 137 0024 FFF7FEFF 		bl	CDC_Transmit_FS
 138              	.LVL10:
 139 0028 98B9     		cbnz	r0, .L11
 183:Ourwares/cdc_txbuff.c **** 	{ // Here, not busy, AND sending of next-buffer-to-send has been started
 184:Ourwares/cdc_txbuff.c **** cdcct5 +=1;	// DEBUG: Count number of buffer "sends"
 140              		.loc 1 184 0
 141 002a 0E4A     		ldr	r2, .L14+8
 142 002c 1368     		ldr	r3, [r2]
 143 002e 0133     		adds	r3, r3, #1
 144 0030 1360     		str	r3, [r2]
 185:Ourwares/cdc_txbuff.c **** 		pbuff_i = pbuff_tmp;	// Save buffer pointer being sent
 145              		.loc 1 185 0
 146 0032 0A4B     		ldr	r3, .L14
 147 0034 1C60     		str	r4, [r3]
 186:Ourwares/cdc_txbuff.c **** 		pbuff_i->work = pbuff_i->begin;  // Reset char pointer for buffer just sent
 148              		.loc 1 186 0
 149 0036 2368     		ldr	r3, [r4]
 150 0038 A360     		str	r3, [r4, #8]
 187:Ourwares/cdc_txbuff.c **** 		if (pbuff_m == pbuff_i)
 151              		.loc 1 187 0
 152 003a 094B     		ldr	r3, .L14+4
 153 003c 1868     		ldr	r0, [r3]
 154 003e 8442     		cmp	r4, r0
 155 0040 09D1     		bne	.L12
 188:Ourwares/cdc_txbuff.c **** 		{
 189:Ourwares/cdc_txbuff.c **** 			pbuff_m = step_ptr(pbuff_m);
 156              		.loc 1 189 0
 157 0042 FFF7FEFF 		bl	step_ptr
 158              	.LVL11:
ARM GAS  /tmp/ccZIDsX1.s 			page 7


 159 0046 064B     		ldr	r3, .L14+4
 160 0048 1860     		str	r0, [r3]
 190:Ourwares/cdc_txbuff.c **** 		}
 191:Ourwares/cdc_txbuff.c **** 		return 1;
 161              		.loc 1 191 0
 162 004a 0120     		movs	r0, #1
 163 004c 10BD     		pop	{r4, pc}
 164              	.LVL12:
 165              	.L10:
 179:Ourwares/cdc_txbuff.c **** 
 166              		.loc 1 179 0
 167 004e 0220     		movs	r0, #2
 168              	.LVL13:
 169 0050 10BD     		pop	{r4, pc}
 170              	.LVL14:
 171              	.L11:
 192:Ourwares/cdc_txbuff.c **** 	}
 193:Ourwares/cdc_txbuff.c **** 	return 0;	
 172              		.loc 1 193 0
 173 0052 0020     		movs	r0, #0
 174 0054 10BD     		pop	{r4, pc}
 175              	.LVL15:
 176              	.L12:
 191:Ourwares/cdc_txbuff.c **** 	}
 177              		.loc 1 191 0
 178 0056 0120     		movs	r0, #1
 194:Ourwares/cdc_txbuff.c **** }
 179              		.loc 1 194 0
 180 0058 10BD     		pop	{r4, pc}
 181              	.LVL16:
 182              	.L15:
 183 005a 00BF     		.align	2
 184              	.L14:
 185 005c 00000000 		.word	.LANCHOR2
 186 0060 00000000 		.word	.LANCHOR3
 187 0064 00000000 		.word	cdcct5
 188              		.cfi_endproc
 189              	.LFE134:
 191              		.section	.text.cdc_txbuff_callback,"ax",%progbits
 192              		.align	2
 193              		.global	cdc_txbuff_callback
 194              		.thumb
 195              		.thumb_func
 197              	cdc_txbuff_callback:
 198              	.LFB137:
 195:Ourwares/cdc_txbuff.c **** /* *************************************************************************
 196:Ourwares/cdc_txbuff.c ****  * void StartSerialTaskSend(void const * argument);
 197:Ourwares/cdc_txbuff.c ****  *	@brief	: Task startup
 198:Ourwares/cdc_txbuff.c ****  * *************************************************************************/
 199:Ourwares/cdc_txbuff.c **** void StartCdcTxTaskSend(void const * argument)
 200:Ourwares/cdc_txbuff.c **** {
 201:Ourwares/cdc_txbuff.c **** 	BaseType_t Qret;	// queue receive return
 202:Ourwares/cdc_txbuff.c **** 	struct CDCTXTASKBCB   ssb; // Copied item from queue
 203:Ourwares/cdc_txbuff.c **** 
 204:Ourwares/cdc_txbuff.c ****   /* Infinite RTOS Task loop */
 205:Ourwares/cdc_txbuff.c ****   for(;;)
 206:Ourwares/cdc_txbuff.c ****   {
ARM GAS  /tmp/ccZIDsX1.s 			page 8


 207:Ourwares/cdc_txbuff.c **** 		do
 208:Ourwares/cdc_txbuff.c **** 		{
 209:Ourwares/cdc_txbuff.c **** 		/* Wait indefinitely for someone to load something into the queue */
 210:Ourwares/cdc_txbuff.c **** 		/* Skip over empty returns, and NULL pointers that would cause trouble */
 211:Ourwares/cdc_txbuff.c **** 			Qret = xQueueReceive(CdcTxTaskSendQHandle,&ssb,portMAX_DELAY);
 212:Ourwares/cdc_txbuff.c **** 			if (Qret == pdPASS) // Break loop if not empty
 213:Ourwares/cdc_txbuff.c **** 				break;
 214:Ourwares/cdc_txbuff.c **** 		} while ( (ssb.pbuf == NULL) || (ssb.size == 0));
 215:Ourwares/cdc_txbuff.c **** 	   cdc_txbuff_add(&ssb);  // Add data to local cdc tx buffer
 216:Ourwares/cdc_txbuff.c ****   }
 217:Ourwares/cdc_txbuff.c ****   return;
 218:Ourwares/cdc_txbuff.c **** }
 219:Ourwares/cdc_txbuff.c **** 		
 220:Ourwares/cdc_txbuff.c **** /** ****************************************************************************
 221:Ourwares/cdc_txbuff.c ****   * static uint32_t cdc_txbuff_add(struct CDCTXTASKBCB* p);
 222:Ourwares/cdc_txbuff.c ****   * @brief	: Add chars to buffer and start USBD TX if not busy
 223:Ourwares/cdc_txbuff.c ****   * @param	: p = pointer data/size to be added
 224:Ourwares/cdc_txbuff.c ****   * @return	: number chars added to buffer;
 225:Ourwares/cdc_txbuff.c ****   ******************************************************************************
 226:Ourwares/cdc_txbuff.c ****   */
 227:Ourwares/cdc_txbuff.c **** uint32_t cdcct3;
 228:Ourwares/cdc_txbuff.c **** uint32_t cdcct4;
 229:Ourwares/cdc_txbuff.c **** uint32_t cdcT0;
 230:Ourwares/cdc_txbuff.c **** uint32_t cdcMax;
 231:Ourwares/cdc_txbuff.c **** 
 232:Ourwares/cdc_txbuff.c **** static uint32_t cdc_txbuff_add(struct CDCTXTASKBCB* p)
 233:Ourwares/cdc_txbuff.c **** {
 234:Ourwares/cdc_txbuff.c **** 	cdcaddbusy = 1;	// Show callback that adding data is active
 235:Ourwares/cdc_txbuff.c **** 	uint16_t csize = 0;	// Count of chars added
 236:Ourwares/cdc_txbuff.c **** 
 237:Ourwares/cdc_txbuff.c **** 	/* Add data to current buffer */
 238:Ourwares/cdc_txbuff.c ****  	while (p->size > 0)
 239:Ourwares/cdc_txbuff.c ****    {
 240:Ourwares/cdc_txbuff.c **** 		// Copy into current "add-to" buffer
 241:Ourwares/cdc_txbuff.c **** 		*pbuff_m->work++ = *p->pbuf++;
 242:Ourwares/cdc_txbuff.c **** 		p->size -= 1;	// Count down chars copied
 243:Ourwares/cdc_txbuff.c **** 
 244:Ourwares/cdc_txbuff.c **** 		if (pbuff_m->work == pbuff_m->end) // End of local buffer?
 245:Ourwares/cdc_txbuff.c **** 		{ // Here, yes
 246:Ourwares/cdc_txbuff.c **** 			pbuff_m = step_ptr(pbuff_m);	// Advance ptr to next buff
 247:Ourwares/cdc_txbuff.c **** 			pbuff_m->work = pbuff_m->begin; // Start at beginning 
 248:Ourwares/cdc_txbuff.c **** 			if (pbuff_m == pbuff_i)
 249:Ourwares/cdc_txbuff.c **** 			{ // Here, we point to output buffer; about to OVERRUN
 250:Ourwares/cdc_txbuff.c **** cdcct4 += 1;	// DEBUG: Count number of instances
 251:Ourwares/cdc_txbuff.c **** #include "DTW_counter.h"
 252:Ourwares/cdc_txbuff.c **** cdcT0 = DTWTIME;	// DEBUG: Time wasted in loop
 253:Ourwares/cdc_txbuff.c **** 				while(poll() == 0)	// Loop until buffer is free   
 254:Ourwares/cdc_txbuff.c **** 				{
 255:Ourwares/cdc_txbuff.c **** cdcct3+=1;	// DEBUG: count loops
 256:Ourwares/cdc_txbuff.c **** 					
 257:Ourwares/cdc_txbuff.c **** 				}
 258:Ourwares/cdc_txbuff.c **** // DEBUG: time wasted in loop
 259:Ourwares/cdc_txbuff.c **** cdcT0 = DTWTIME - cdcT0;
 260:Ourwares/cdc_txbuff.c **** cdcMax += cdcT0;
 261:Ourwares/cdc_txbuff.c **** 			}
 262:Ourwares/cdc_txbuff.c **** 		}
 263:Ourwares/cdc_txbuff.c **** 		csize += 1;
ARM GAS  /tmp/ccZIDsX1.s 			page 9


 264:Ourwares/cdc_txbuff.c **** 	}
 265:Ourwares/cdc_txbuff.c **** 
 266:Ourwares/cdc_txbuff.c **** 	/* All chars in the input string were added to the buffer. */
 267:Ourwares/cdc_txbuff.c **** 	cdc_txbuff_poll();	// Start sending if not already sending   
 268:Ourwares/cdc_txbuff.c **** 
 269:Ourwares/cdc_txbuff.c **** 	cdcaddbusy = 0;	// Done adding	
 270:Ourwares/cdc_txbuff.c **** 	return csize;
 271:Ourwares/cdc_txbuff.c **** }
 272:Ourwares/cdc_txbuff.c **** /** ############################################################################
 273:Ourwares/cdc_txbuff.c ****   * void cdc_txbuff_callback(void const * argument);
 274:Ourwares/cdc_txbuff.c ****   * @brief	: Send next buffer, if available NOTE: routine is under CDC interrupt
 275:Ourwares/cdc_txbuff.c ****   ##############################################################################
 276:Ourwares/cdc_txbuff.c ****   */
 277:Ourwares/cdc_txbuff.c **** /*
 278:Ourwares/cdc_txbuff.c ****  For modified HAL:
 279:Ourwares/cdc_txbuff.c **** 	This routine is entered when the USB is complete and the busy has been set 
 280:Ourwares/cdc_txbuff.c ****    to zero. 
 281:Ourwares/cdc_txbuff.c **** 	Entry is from 'usbd_cdc.c'  See routine beginning at line 664.
 282:Ourwares/cdc_txbuff.c **** 
 283:Ourwares/cdc_txbuff.c ****  For unmodified HAL, use timer polling:
 284:Ourwares/cdc_txbuff.c **** 	Entry is from software timer callback (in 'main')
 285:Ourwares/cdc_txbuff.c **** */
 286:Ourwares/cdc_txbuff.c **** int cdcct1 = 0;
 287:Ourwares/cdc_txbuff.c **** int cdcct2 = 0;
 288:Ourwares/cdc_txbuff.c **** 
 289:Ourwares/cdc_txbuff.c **** void cdc_txbuff_callback(void const * argument)
 290:Ourwares/cdc_txbuff.c **** {
 199              		.loc 1 290 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL17:
 204 0000 08B5     		push	{r3, lr}
 205              	.LCFI2:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 291:Ourwares/cdc_txbuff.c **** 	if (cdcaddbusy != 0)
 209              		.loc 1 291 0
 210 0002 074B     		ldr	r3, .L20
 211 0004 1B68     		ldr	r3, [r3]
 212 0006 23B1     		cbz	r3, .L17
 292:Ourwares/cdc_txbuff.c **** 	{ // Here, 'cdc_txbuff_add' is busy adding chars to a buffer
 293:Ourwares/cdc_txbuff.c **** cdcct2 += 1;
 213              		.loc 1 293 0
 214 0008 064A     		ldr	r2, .L20+4
 215 000a 1368     		ldr	r3, [r2]
 216 000c 0133     		adds	r3, r3, #1
 217 000e 1360     		str	r3, [r2]
 294:Ourwares/cdc_txbuff.c **** 
 295:Ourwares/cdc_txbuff.c **** 		return;
 218              		.loc 1 295 0
 219 0010 08BD     		pop	{r3, pc}
 220              	.L17:
 296:Ourwares/cdc_txbuff.c **** 	}
 297:Ourwares/cdc_txbuff.c **** cdcct1 += 1;
 221              		.loc 1 297 0
ARM GAS  /tmp/ccZIDsX1.s 			page 10


 222 0012 054A     		ldr	r2, .L20+8
 223 0014 1368     		ldr	r3, [r2]
 224 0016 0133     		adds	r3, r3, #1
 225 0018 1360     		str	r3, [r2]
 298:Ourwares/cdc_txbuff.c **** 	poll();	// Send next buffer, if available
 226              		.loc 1 298 0
 227 001a FFF7FEFF 		bl	poll
 228              	.LVL18:
 229 001e 08BD     		pop	{r3, pc}
 230              	.L21:
 231              		.align	2
 232              	.L20:
 233 0020 00000000 		.word	.LANCHOR4
 234 0024 00000000 		.word	.LANCHOR5
 235 0028 00000000 		.word	.LANCHOR6
 236              		.cfi_endproc
 237              	.LFE137:
 239              		.section	.text.xCdcTxTaskSendCreate,"ax",%progbits
 240              		.align	2
 241              		.global	xCdcTxTaskSendCreate
 242              		.thumb
 243              		.thumb_func
 245              	xCdcTxTaskSendCreate:
 246              	.LFB129:
  72:Ourwares/cdc_txbuff.c **** 	/* definition and creation of task: CdcTxTaskSend */
 247              		.loc 1 72 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 56
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              	.LVL19:
 252 0000 70B5     		push	{r4, r5, r6, lr}
 253              	.LCFI3:
 254              		.cfi_def_cfa_offset 16
 255              		.cfi_offset 4, -16
 256              		.cfi_offset 5, -12
 257              		.cfi_offset 6, -8
 258              		.cfi_offset 14, -4
 259 0002 8EB0     		sub	sp, sp, #56
 260              	.LCFI4:
 261              		.cfi_def_cfa_offset 72
 262 0004 0646     		mov	r6, r0
  74:Ourwares/cdc_txbuff.c ****    CdcTxTaskSendHandle = osThreadCreate(osThread(CdcTxTaskSend), NULL);
 263              		.loc 1 74 0
 264 0006 07AC     		add	r4, sp, #28
 265 0008 164D     		ldr	r5, .L25
 266 000a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 267              	.LVL20:
 268 000c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 269 000e 95E80700 		ldmia	r5, {r0, r1, r2}
 270 0012 84E80700 		stmia	r4, {r0, r1, r2}
  75:Ourwares/cdc_txbuff.c **** 	vTaskPrioritySet( CdcTxTaskSendHandle, taskpriority );
 271              		.loc 1 75 0
 272 0016 0021     		movs	r1, #0
 273 0018 07A8     		add	r0, sp, #28
 274 001a FFF7FEFF 		bl	osThreadCreate
 275              	.LVL21:
 276 001e 124C     		ldr	r4, .L25+4
ARM GAS  /tmp/ccZIDsX1.s 			page 11


 277 0020 2060     		str	r0, [r4]
  76:Ourwares/cdc_txbuff.c **** 	if (CdcTxTaskSendHandle == NULL) return NULL;
 278              		.loc 1 76 0
 279 0022 3146     		mov	r1, r6
 280 0024 FFF7FEFF 		bl	vTaskPrioritySet
 281              	.LVL22:
  77:Ourwares/cdc_txbuff.c **** 
 282              		.loc 1 77 0
 283 0028 2068     		ldr	r0, [r4]
 284 002a C8B1     		cbz	r0, .L23
  80:Ourwares/cdc_txbuff.c ****   CdcTxTaskSendQHandle = osMessageCreate(osMessageQ(CdcTxSendQ), NULL);
 285              		.loc 1 80 0
 286 002c 03AC     		add	r4, sp, #12
 287 002e 05F10C03 		add	r3, r5, #12
 288 0032 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 289 0034 84E80F00 		stmia	r4, {r0, r1, r2, r3}
  81:Ourwares/cdc_txbuff.c **** 
 290              		.loc 1 81 0
 291 0038 0021     		movs	r1, #0
 292 003a 2046     		mov	r0, r4
 293 003c FFF7FEFF 		bl	osMessageCreate
 294              	.LVL23:
 295 0040 0A4C     		ldr	r4, .L25+8
 296 0042 2060     		str	r0, [r4]
  84:Ourwares/cdc_txbuff.c ****   CdcTxTimerHandle = osTimerCreate(osTimer(CdcTxTim), osTimerPeriodic, NULL);
 297              		.loc 1 84 0
 298 0044 0A4B     		ldr	r3, .L25+12
 299 0046 0193     		str	r3, [sp, #4]
 300 0048 0022     		movs	r2, #0
 301 004a 0292     		str	r2, [sp, #8]
  85:Ourwares/cdc_txbuff.c **** 
 302              		.loc 1 85 0
 303 004c 0121     		movs	r1, #1
 304 004e 01A8     		add	r0, sp, #4
 305 0050 FFF7FEFF 		bl	osTimerCreate
 306              	.LVL24:
 307 0054 074B     		ldr	r3, .L25+16
 308 0056 1860     		str	r0, [r3]
  88:Ourwares/cdc_txbuff.c **** 
 309              		.loc 1 88 0
 310 0058 0521     		movs	r1, #5
 311 005a FFF7FEFF 		bl	osTimerStart
 312              	.LVL25:
  90:Ourwares/cdc_txbuff.c **** }
 313              		.loc 1 90 0
 314 005e 2068     		ldr	r0, [r4]
 315              	.L23:
  91:Ourwares/cdc_txbuff.c **** /* *****************************************************************************
 316              		.loc 1 91 0
 317 0060 0EB0     		add	sp, sp, #56
 318              	.LCFI5:
 319              		.cfi_def_cfa_offset 16
 320              		@ sp needed
 321 0062 70BD     		pop	{r4, r5, r6, pc}
 322              	.LVL26:
 323              	.L26:
 324              		.align	2
ARM GAS  /tmp/ccZIDsX1.s 			page 12


 325              	.L25:
 326 0064 00000000 		.word	.LANCHOR7
 327 0068 00000000 		.word	.LANCHOR8
 328 006c 00000000 		.word	CdcTxTaskSendQHandle
 329 0070 00000000 		.word	cdc_txbuff_callback
 330 0074 00000000 		.word	CdcTxTimerHandle
 331              		.cfi_endproc
 332              	.LFE129:
 334              		.section	.text.cdc_txbuff_init,"ax",%progbits
 335              		.align	2
 336              		.global	cdc_txbuff_init
 337              		.thumb
 338              		.thumb_func
 340              	cdc_txbuff_init:
 341              	.LFB132:
 121:Ourwares/cdc_txbuff.c **** 	/* Minimum of 2 buffers required */
 342              		.loc 1 121 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              	.LVL27:
 347 0000 70B5     		push	{r4, r5, r6, lr}
 348              	.LCFI6:
 349              		.cfi_def_cfa_offset 16
 350              		.cfi_offset 4, -16
 351              		.cfi_offset 5, -12
 352              		.cfi_offset 6, -8
 353              		.cfi_offset 14, -4
 354 0002 0446     		mov	r4, r0
 355 0004 0D46     		mov	r5, r1
 123:Ourwares/cdc_txbuff.c **** 	{ // Here, we force 2, but we *could* just bomb, but what if the hapless Programmer
 356              		.loc 1 123 0
 357 0006 0128     		cmp	r0, #1
 358 0008 00D8     		bhi	.L28
 126:Ourwares/cdc_txbuff.c **** 	}
 359              		.loc 1 126 0
 360 000a 0224     		movs	r4, #2
 361              	.L28:
 362              	.LVL28:
 129:Ourwares/cdc_txbuff.c **** 	{
 363              		.loc 1 129 0
 364 000c 05B9     		cbnz	r5, .L29
 131:Ourwares/cdc_txbuff.c **** 	}
 365              		.loc 1 131 0
 366 000e 0125     		movs	r5, #1
 367              	.L29:
 368              	.LVL29:
 134:Ourwares/cdc_txbuff.c **** 	if (pb == NULL)  return NULL;
 369              		.loc 1 134 0
 370 0010 0C21     		movs	r1, #12
 371 0012 2046     		mov	r0, r4
 372 0014 FFF7FEFF 		bl	calloc
 373              	.LVL30:
 135:Ourwares/cdc_txbuff.c **** 	pbuff_begin = pb;
 374              		.loc 1 135 0
 375 0018 0346     		mov	r3, r0
 376 001a E0B1     		cbz	r0, .L35
ARM GAS  /tmp/ccZIDsX1.s 			page 13


 136:Ourwares/cdc_txbuff.c **** 	pbuff_end = pbuff_begin;
 377              		.loc 1 136 0
 378 001c 104A     		ldr	r2, .L38
 379 001e 1060     		str	r0, [r2]
 138:Ourwares/cdc_txbuff.c **** 
 380              		.loc 1 138 0
 381 0020 04EB4404 		add	r4, r4, r4, lsl #1
 382              	.LVL31:
 383 0024 A600     		lsls	r6, r4, #2
 384 0026 8119     		adds	r1, r0, r6
 385 0028 0E4A     		ldr	r2, .L38+4
 386 002a 1160     		str	r1, [r2]
 141:Ourwares/cdc_txbuff.c **** 	{
 387              		.loc 1 141 0
 388 002c 07E0     		b	.L31
 389              	.LVL32:
 390              	.L32:
 143:Ourwares/cdc_txbuff.c ****    }
 391              		.loc 1 143 0
 392 002e 03F10C04 		add	r4, r3, #12
 393              	.LVL33:
 394 0032 2946     		mov	r1, r5
 395 0034 1846     		mov	r0, r3
 396 0036 FFF7FEFF 		bl	pbuff_init
 397              	.LVL34:
 398 003a 70B1     		cbz	r0, .L36
 399 003c 2346     		mov	r3, r4
 400              	.LVL35:
 401              	.L31:
 141:Ourwares/cdc_txbuff.c **** 	{
 402              		.loc 1 141 0
 403 003e 094A     		ldr	r2, .L38+4
 404 0040 1268     		ldr	r2, [r2]
 405 0042 9342     		cmp	r3, r2
 406 0044 F3D1     		bne	.L32
 147:Ourwares/cdc_txbuff.c **** 	pbuff_i = pbuff_begin;	// Taking
 407              		.loc 1 147 0
 408 0046 064B     		ldr	r3, .L38
 409              	.LVL36:
 410 0048 1868     		ldr	r0, [r3]
 411 004a 074B     		ldr	r3, .L38+8
 412 004c 1860     		str	r0, [r3]
 149:Ourwares/cdc_txbuff.c **** 
 413              		.loc 1 149 0
 414 004e 0644     		add	r6, r6, r0
 415 0050 064B     		ldr	r3, .L38+12
 416 0052 1E60     		str	r6, [r3]
 151:Ourwares/cdc_txbuff.c **** }
 417              		.loc 1 151 0
 418 0054 70BD     		pop	{r4, r5, r6, pc}
 419              	.LVL37:
 420              	.L35:
 135:Ourwares/cdc_txbuff.c **** 	pbuff_begin = pb;
 421              		.loc 1 135 0
 422 0056 0020     		movs	r0, #0
 423              	.LVL38:
 424 0058 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccZIDsX1.s 			page 14


 425              	.LVL39:
 426              	.L36:
 143:Ourwares/cdc_txbuff.c ****    }
 427              		.loc 1 143 0
 428 005a 0020     		movs	r0, #0
 152:Ourwares/cdc_txbuff.c **** /** ****************************************************************************
 429              		.loc 1 152 0
 430 005c 70BD     		pop	{r4, r5, r6, pc}
 431              	.LVL40:
 432              	.L39:
 433 005e 00BF     		.align	2
 434              	.L38:
 435 0060 00000000 		.word	.LANCHOR1
 436 0064 00000000 		.word	.LANCHOR0
 437 0068 00000000 		.word	.LANCHOR3
 438 006c 00000000 		.word	.LANCHOR2
 439              		.cfi_endproc
 440              	.LFE132:
 442              		.section	.text.cdc_txbuff_poll,"ax",%progbits
 443              		.align	2
 444              		.global	cdc_txbuff_poll
 445              		.thumb
 446              		.thumb_func
 448              	cdc_txbuff_poll:
 449              	.LFB133:
 163:Ourwares/cdc_txbuff.c **** 	cdcaddbusy = 1;	// Show callback that adding data is active
 450              		.loc 1 163 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454 0000 10B5     		push	{r4, lr}
 455              	.LCFI7:
 456              		.cfi_def_cfa_offset 8
 457              		.cfi_offset 4, -8
 458              		.cfi_offset 14, -4
 164:Ourwares/cdc_txbuff.c **** 	uint32_t ret = poll();
 459              		.loc 1 164 0
 460 0002 044C     		ldr	r4, .L42
 461 0004 0123     		movs	r3, #1
 462 0006 2360     		str	r3, [r4]
 165:Ourwares/cdc_txbuff.c **** 	cdcaddbusy = 0;	// Done adding	
 463              		.loc 1 165 0
 464 0008 FFF7FEFF 		bl	poll
 465              	.LVL41:
 166:Ourwares/cdc_txbuff.c **** 	return ret;
 466              		.loc 1 166 0
 467 000c 0023     		movs	r3, #0
 468 000e 2360     		str	r3, [r4]
 168:Ourwares/cdc_txbuff.c **** 
 469              		.loc 1 168 0
 470 0010 10BD     		pop	{r4, pc}
 471              	.L43:
 472 0012 00BF     		.align	2
 473              	.L42:
 474 0014 00000000 		.word	.LANCHOR4
 475              		.cfi_endproc
 476              	.LFE133:
ARM GAS  /tmp/ccZIDsX1.s 			page 15


 478              		.section	.text.cdc_txbuff_add,"ax",%progbits
 479              		.align	2
 480              		.thumb
 481              		.thumb_func
 483              	cdc_txbuff_add:
 484              	.LFB136:
 233:Ourwares/cdc_txbuff.c **** 	cdcaddbusy = 1;	// Show callback that adding data is active
 485              		.loc 1 233 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              	.LVL42:
 490 0000 38B5     		push	{r3, r4, r5, lr}
 491              	.LCFI8:
 492              		.cfi_def_cfa_offset 16
 493              		.cfi_offset 3, -16
 494              		.cfi_offset 4, -12
 495              		.cfi_offset 5, -8
 496              		.cfi_offset 14, -4
 497 0002 0446     		mov	r4, r0
 234:Ourwares/cdc_txbuff.c **** 	uint16_t csize = 0;	// Count of chars added
 498              		.loc 1 234 0
 499 0004 0122     		movs	r2, #1
 500 0006 234B     		ldr	r3, .L51
 501 0008 1A60     		str	r2, [r3]
 502              	.LVL43:
 235:Ourwares/cdc_txbuff.c **** 
 503              		.loc 1 235 0
 504 000a 0025     		movs	r5, #0
 238:Ourwares/cdc_txbuff.c ****    {
 505              		.loc 1 238 0
 506 000c 37E0     		b	.L45
 507              	.LVL44:
 508              	.L49:
 241:Ourwares/cdc_txbuff.c **** 		p->size -= 1;	// Count down chars copied
 509              		.loc 1 241 0
 510 000e 224B     		ldr	r3, .L51+4
 511 0010 1868     		ldr	r0, [r3]
 512 0012 8368     		ldr	r3, [r0, #8]
 513 0014 5A1C     		adds	r2, r3, #1
 514 0016 8260     		str	r2, [r0, #8]
 515 0018 2268     		ldr	r2, [r4]
 516 001a 511C     		adds	r1, r2, #1
 517 001c 2160     		str	r1, [r4]
 518 001e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 519 0020 1A70     		strb	r2, [r3]
 242:Ourwares/cdc_txbuff.c **** 
 520              		.loc 1 242 0
 521 0022 6368     		ldr	r3, [r4, #4]
 522 0024 013B     		subs	r3, r3, #1
 523 0026 6360     		str	r3, [r4, #4]
 244:Ourwares/cdc_txbuff.c **** 		{ // Here, yes
 524              		.loc 1 244 0
 525 0028 8268     		ldr	r2, [r0, #8]
 526 002a 4368     		ldr	r3, [r0, #4]
 527 002c 9A42     		cmp	r2, r3
 528 002e 24D1     		bne	.L46
ARM GAS  /tmp/ccZIDsX1.s 			page 16


 246:Ourwares/cdc_txbuff.c **** 			pbuff_m->work = pbuff_m->begin; // Start at beginning 
 529              		.loc 1 246 0
 530 0030 FFF7FEFF 		bl	step_ptr
 531              	.LVL45:
 532 0034 184B     		ldr	r3, .L51+4
 533 0036 1860     		str	r0, [r3]
 247:Ourwares/cdc_txbuff.c **** 			if (pbuff_m == pbuff_i)
 534              		.loc 1 247 0
 535 0038 0368     		ldr	r3, [r0]
 536 003a 8360     		str	r3, [r0, #8]
 248:Ourwares/cdc_txbuff.c **** 			{ // Here, we point to output buffer; about to OVERRUN
 537              		.loc 1 248 0
 538 003c 174B     		ldr	r3, .L51+8
 539 003e 1B68     		ldr	r3, [r3]
 540 0040 9842     		cmp	r0, r3
 541 0042 1AD1     		bne	.L46
 542              	.LBB2:
 250:Ourwares/cdc_txbuff.c **** #include "DTW_counter.h"
 543              		.loc 1 250 0
 544 0044 164A     		ldr	r2, .L51+12
 545 0046 1368     		ldr	r3, [r2]
 546 0048 0133     		adds	r3, r3, #1
 547 004a 1360     		str	r3, [r2]
 252:Ourwares/cdc_txbuff.c **** 				while(poll() == 0)	// Loop until buffer is free   
 548              		.loc 1 252 0
 549 004c 154B     		ldr	r3, .L51+16
 550 004e 1A68     		ldr	r2, [r3]
 551 0050 154B     		ldr	r3, .L51+20
 552 0052 1A60     		str	r2, [r3]
 253:Ourwares/cdc_txbuff.c **** 				{
 553              		.loc 1 253 0
 554 0054 03E0     		b	.L47
 555              	.L48:
 255:Ourwares/cdc_txbuff.c **** 					
 556              		.loc 1 255 0
 557 0056 154A     		ldr	r2, .L51+24
 558 0058 1368     		ldr	r3, [r2]
 559 005a 0133     		adds	r3, r3, #1
 560 005c 1360     		str	r3, [r2]
 561              	.L47:
 253:Ourwares/cdc_txbuff.c **** 				{
 562              		.loc 1 253 0
 563 005e FFF7FEFF 		bl	poll
 564              	.LVL46:
 565 0062 0028     		cmp	r0, #0
 566 0064 F7D0     		beq	.L48
 259:Ourwares/cdc_txbuff.c **** cdcMax += cdcT0;
 567              		.loc 1 259 0
 568 0066 0F4B     		ldr	r3, .L51+16
 569 0068 1B68     		ldr	r3, [r3]
 570 006a 0F4A     		ldr	r2, .L51+20
 571 006c 1168     		ldr	r1, [r2]
 572 006e 5B1A     		subs	r3, r3, r1
 573 0070 1360     		str	r3, [r2]
 260:Ourwares/cdc_txbuff.c **** 			}
 574              		.loc 1 260 0
 575 0072 0F4A     		ldr	r2, .L51+28
ARM GAS  /tmp/ccZIDsX1.s 			page 17


 576 0074 1168     		ldr	r1, [r2]
 577 0076 0B44     		add	r3, r3, r1
 578 0078 1360     		str	r3, [r2]
 579              	.L46:
 580              	.LBE2:
 263:Ourwares/cdc_txbuff.c **** 	}
 581              		.loc 1 263 0
 582 007a 0135     		adds	r5, r5, #1
 583              	.LVL47:
 584 007c ADB2     		uxth	r5, r5
 585              	.LVL48:
 586              	.L45:
 238:Ourwares/cdc_txbuff.c ****    {
 587              		.loc 1 238 0
 588 007e 6368     		ldr	r3, [r4, #4]
 589 0080 002B     		cmp	r3, #0
 590 0082 C4D1     		bne	.L49
 267:Ourwares/cdc_txbuff.c **** 
 591              		.loc 1 267 0
 592 0084 FFF7FEFF 		bl	cdc_txbuff_poll
 593              	.LVL49:
 269:Ourwares/cdc_txbuff.c **** 	return csize;
 594              		.loc 1 269 0
 595 0088 0022     		movs	r2, #0
 596 008a 024B     		ldr	r3, .L51
 597 008c 1A60     		str	r2, [r3]
 271:Ourwares/cdc_txbuff.c **** /** ############################################################################
 598              		.loc 1 271 0
 599 008e 2846     		mov	r0, r5
 600 0090 38BD     		pop	{r3, r4, r5, pc}
 601              	.LVL50:
 602              	.L52:
 603 0092 00BF     		.align	2
 604              	.L51:
 605 0094 00000000 		.word	.LANCHOR4
 606 0098 00000000 		.word	.LANCHOR3
 607 009c 00000000 		.word	.LANCHOR2
 608 00a0 00000000 		.word	cdcct4
 609 00a4 041000E0 		.word	-536866812
 610 00a8 00000000 		.word	cdcT0
 611 00ac 00000000 		.word	cdcct3
 612 00b0 00000000 		.word	cdcMax
 613              		.cfi_endproc
 614              	.LFE136:
 616              		.section	.text.StartCdcTxTaskSend,"ax",%progbits
 617              		.align	2
 618              		.global	StartCdcTxTaskSend
 619              		.thumb
 620              		.thumb_func
 622              	StartCdcTxTaskSend:
 623              	.LFB135:
 200:Ourwares/cdc_txbuff.c **** 	BaseType_t Qret;	// queue receive return
 624              		.loc 1 200 0
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 8
 627              		@ frame_needed = 0, uses_anonymous_args = 0
 628              	.LVL51:
ARM GAS  /tmp/ccZIDsX1.s 			page 18


 629 0000 00B5     		push	{lr}
 630              	.LCFI9:
 631              		.cfi_def_cfa_offset 4
 632              		.cfi_offset 14, -4
 633 0002 83B0     		sub	sp, sp, #12
 634              	.LCFI10:
 635              		.cfi_def_cfa_offset 16
 636              	.LVL52:
 637              	.L54:
 211:Ourwares/cdc_txbuff.c **** 			if (Qret == pdPASS) // Break loop if not empty
 638              		.loc 1 211 0
 639 0004 0023     		movs	r3, #0
 640 0006 4FF0FF32 		mov	r2, #-1
 641 000a 6946     		mov	r1, sp
 642 000c 0748     		ldr	r0, .L58
 643 000e 0068     		ldr	r0, [r0]
 644 0010 FFF7FEFF 		bl	xQueueGenericReceive
 645              	.LVL53:
 212:Ourwares/cdc_txbuff.c **** 				break;
 646              		.loc 1 212 0
 647 0014 0128     		cmp	r0, #1
 648 0016 05D0     		beq	.L55
 214:Ourwares/cdc_txbuff.c **** 	   cdc_txbuff_add(&ssb);  // Add data to local cdc tx buffer
 649              		.loc 1 214 0
 650 0018 009B     		ldr	r3, [sp]
 651 001a 002B     		cmp	r3, #0
 652 001c F2D0     		beq	.L54
 214:Ourwares/cdc_txbuff.c **** 	   cdc_txbuff_add(&ssb);  // Add data to local cdc tx buffer
 653              		.loc 1 214 0 is_stmt 0 discriminator 1
 654 001e 019B     		ldr	r3, [sp, #4]
 655 0020 002B     		cmp	r3, #0
 656 0022 EFD0     		beq	.L54
 657              	.L55:
 215:Ourwares/cdc_txbuff.c ****   }
 658              		.loc 1 215 0 is_stmt 1
 659 0024 6846     		mov	r0, sp
 660              	.LVL54:
 661 0026 FFF7FEFF 		bl	cdc_txbuff_add
 662              	.LVL55:
 216:Ourwares/cdc_txbuff.c ****   return;
 663              		.loc 1 216 0
 664 002a EBE7     		b	.L54
 665              	.L59:
 666              		.align	2
 667              	.L58:
 668 002c 00000000 		.word	CdcTxTaskSendQHandle
 669              		.cfi_endproc
 670              	.LFE135:
 672              		.global	cdcct2
 673              		.global	cdcct1
 674              		.comm	cdcMax,4,4
 675              		.comm	cdcT0,4,4
 676              		.comm	cdcct4,4,4
 677              		.comm	cdcct3,4,4
 678              		.comm	cdcct5,4,4
 679              		.comm	CdcTxTaskSendQHandle,4,4
 680              		.comm	CdcTxTimerHandle,4,4
ARM GAS  /tmp/ccZIDsX1.s 			page 19


 681              		.global	CdcTxTaskSendHandle
 682              		.section	.bss.CdcTxTaskSendBuffer,"aw",%nobits
 683              		.align	2
 686              	CdcTxTaskSendBuffer:
 687 0000 00000000 		.space	256
 687      00000000 
 687      00000000 
 687      00000000 
 687      00000000 
 688              		.section	.rodata
 689              		.align	2
 690              		.set	.LANCHOR7,. + 0
 691              	.LC3:
 692 0000 00000000 		.word	.LC0
 693 0004 00000000 		.word	StartCdcTxTaskSend
 694 0008 0000     		.short	0
 695 000a 0000     		.space	2
 696 000c 00000000 		.word	0
 697 0010 40000000 		.word	64
 698 0014 00000000 		.word	CdcTxTaskSendBuffer
 699 0018 00000000 		.word	CdcTxTaskSendControlBlock
 700              	.LC4:
 701 001c 08000000 		.word	8
 702 0020 08000000 		.word	8
 703 0024 00000000 		.word	CdcTxTaskSendQBuffer
 704 0028 00000000 		.word	CdcTxTaskSendQCB
 705              		.section	.bss.pbuff_begin,"aw",%nobits
 706              		.align	2
 707              		.set	.LANCHOR1,. + 0
 710              	pbuff_begin:
 711 0000 00000000 		.space	4
 712              		.section	.bss.pbuff_end,"aw",%nobits
 713              		.align	2
 714              		.set	.LANCHOR0,. + 0
 717              	pbuff_end:
 718 0000 00000000 		.space	4
 719              		.section	.bss.CdcTxTaskSendQCB,"aw",%nobits
 720              		.align	2
 723              	CdcTxTaskSendQCB:
 724 0000 00000000 		.space	72
 724      00000000 
 724      00000000 
 724      00000000 
 724      00000000 
 725              		.section	.bss.CdcTxTaskSendControlBlock,"aw",%nobits
 726              		.align	2
 729              	CdcTxTaskSendControlBlock:
 730 0000 00000000 		.space	84
 730      00000000 
 730      00000000 
 730      00000000 
 730      00000000 
 731              		.section	.bss.cdcct2,"aw",%nobits
 732              		.align	2
 733              		.set	.LANCHOR5,. + 0
 736              	cdcct2:
 737 0000 00000000 		.space	4
ARM GAS  /tmp/ccZIDsX1.s 			page 20


 738              		.section	.bss.pbuff_i,"aw",%nobits
 739              		.align	2
 740              		.set	.LANCHOR2,. + 0
 743              	pbuff_i:
 744 0000 00000000 		.space	4
 745              		.section	.bss.CdcTxTaskSendHandle,"aw",%nobits
 746              		.align	2
 747              		.set	.LANCHOR8,. + 0
 750              	CdcTxTaskSendHandle:
 751 0000 00000000 		.space	4
 752              		.section	.bss.CdcTxTaskSendQBuffer,"aw",%nobits
 753              		.align	2
 756              	CdcTxTaskSendQBuffer:
 757 0000 00000000 		.space	64
 757      00000000 
 757      00000000 
 757      00000000 
 757      00000000 
 758              		.section	.bss.pbuff_m,"aw",%nobits
 759              		.align	2
 760              		.set	.LANCHOR3,. + 0
 763              	pbuff_m:
 764 0000 00000000 		.space	4
 765              		.section	.rodata.str1.4,"aMS",%progbits,1
 766              		.align	2
 767              	.LC0:
 768 0000 43646354 		.ascii	"CdcTxTaskSend\000"
 768      78546173 
 768      6B53656E 
 768      6400
 769              		.section	.bss.cdcaddbusy,"aw",%nobits
 770              		.align	2
 771              		.set	.LANCHOR4,. + 0
 774              	cdcaddbusy:
 775 0000 00000000 		.space	4
 776              		.section	.bss.cdcct1,"aw",%nobits
 777              		.align	2
 778              		.set	.LANCHOR6,. + 0
 781              	cdcct1:
 782 0000 00000000 		.space	4
 783              		.text
 784              	.Letext0:
 785              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 786              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 787              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 788              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 789              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 790              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 791              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 792              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 793              		.file 10 "Ourwares/cdc_txbuff.h"
 794              		.file 11 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 795              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 796              		.file 13 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/stdlib.h"
 797              		.file 14 "Inc/usbd_cdc_if.h"
 798              		.file 15 "Ourwares/DTW_counter.h"
ARM GAS  /tmp/ccZIDsX1.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 cdc_txbuff.c
     /tmp/ccZIDsX1.s:22     .text.step_ptr:00000000 $t
     /tmp/ccZIDsX1.s:26     .text.step_ptr:00000000 step_ptr
     /tmp/ccZIDsX1.s:53     .text.step_ptr:00000010 $d
     /tmp/ccZIDsX1.s:59     .text.pbuff_init:00000000 $t
     /tmp/ccZIDsX1.s:63     .text.pbuff_init:00000000 pbuff_init
     /tmp/ccZIDsX1.s:98     .text.poll:00000000 $t
     /tmp/ccZIDsX1.s:102    .text.poll:00000000 poll
     /tmp/ccZIDsX1.s:185    .text.poll:0000005c $d
                            *COM*:00000004 cdcct5
     /tmp/ccZIDsX1.s:192    .text.cdc_txbuff_callback:00000000 $t
     /tmp/ccZIDsX1.s:197    .text.cdc_txbuff_callback:00000000 cdc_txbuff_callback
     /tmp/ccZIDsX1.s:233    .text.cdc_txbuff_callback:00000020 $d
     /tmp/ccZIDsX1.s:240    .text.xCdcTxTaskSendCreate:00000000 $t
     /tmp/ccZIDsX1.s:245    .text.xCdcTxTaskSendCreate:00000000 xCdcTxTaskSendCreate
     /tmp/ccZIDsX1.s:326    .text.xCdcTxTaskSendCreate:00000064 $d
                            *COM*:00000004 CdcTxTaskSendQHandle
                            *COM*:00000004 CdcTxTimerHandle
     /tmp/ccZIDsX1.s:335    .text.cdc_txbuff_init:00000000 $t
     /tmp/ccZIDsX1.s:340    .text.cdc_txbuff_init:00000000 cdc_txbuff_init
     /tmp/ccZIDsX1.s:435    .text.cdc_txbuff_init:00000060 $d
     /tmp/ccZIDsX1.s:443    .text.cdc_txbuff_poll:00000000 $t
     /tmp/ccZIDsX1.s:448    .text.cdc_txbuff_poll:00000000 cdc_txbuff_poll
     /tmp/ccZIDsX1.s:474    .text.cdc_txbuff_poll:00000014 $d
     /tmp/ccZIDsX1.s:479    .text.cdc_txbuff_add:00000000 $t
     /tmp/ccZIDsX1.s:483    .text.cdc_txbuff_add:00000000 cdc_txbuff_add
     /tmp/ccZIDsX1.s:605    .text.cdc_txbuff_add:00000094 $d
                            *COM*:00000004 cdcct4
                            *COM*:00000004 cdcT0
                            *COM*:00000004 cdcct3
                            *COM*:00000004 cdcMax
     /tmp/ccZIDsX1.s:617    .text.StartCdcTxTaskSend:00000000 $t
     /tmp/ccZIDsX1.s:622    .text.StartCdcTxTaskSend:00000000 StartCdcTxTaskSend
     /tmp/ccZIDsX1.s:668    .text.StartCdcTxTaskSend:0000002c $d
     /tmp/ccZIDsX1.s:736    .bss.cdcct2:00000000 cdcct2
     /tmp/ccZIDsX1.s:781    .bss.cdcct1:00000000 cdcct1
     /tmp/ccZIDsX1.s:750    .bss.CdcTxTaskSendHandle:00000000 CdcTxTaskSendHandle
     /tmp/ccZIDsX1.s:683    .bss.CdcTxTaskSendBuffer:00000000 $d
     /tmp/ccZIDsX1.s:686    .bss.CdcTxTaskSendBuffer:00000000 CdcTxTaskSendBuffer
     /tmp/ccZIDsX1.s:689    .rodata:00000000 $d
     /tmp/ccZIDsX1.s:729    .bss.CdcTxTaskSendControlBlock:00000000 CdcTxTaskSendControlBlock
     /tmp/ccZIDsX1.s:756    .bss.CdcTxTaskSendQBuffer:00000000 CdcTxTaskSendQBuffer
     /tmp/ccZIDsX1.s:723    .bss.CdcTxTaskSendQCB:00000000 CdcTxTaskSendQCB
     /tmp/ccZIDsX1.s:706    .bss.pbuff_begin:00000000 $d
     /tmp/ccZIDsX1.s:710    .bss.pbuff_begin:00000000 pbuff_begin
     /tmp/ccZIDsX1.s:713    .bss.pbuff_end:00000000 $d
     /tmp/ccZIDsX1.s:717    .bss.pbuff_end:00000000 pbuff_end
     /tmp/ccZIDsX1.s:720    .bss.CdcTxTaskSendQCB:00000000 $d
     /tmp/ccZIDsX1.s:726    .bss.CdcTxTaskSendControlBlock:00000000 $d
     /tmp/ccZIDsX1.s:732    .bss.cdcct2:00000000 $d
     /tmp/ccZIDsX1.s:739    .bss.pbuff_i:00000000 $d
     /tmp/ccZIDsX1.s:743    .bss.pbuff_i:00000000 pbuff_i
     /tmp/ccZIDsX1.s:746    .bss.CdcTxTaskSendHandle:00000000 $d
     /tmp/ccZIDsX1.s:753    .bss.CdcTxTaskSendQBuffer:00000000 $d
     /tmp/ccZIDsX1.s:759    .bss.pbuff_m:00000000 $d
     /tmp/ccZIDsX1.s:763    .bss.pbuff_m:00000000 pbuff_m
ARM GAS  /tmp/ccZIDsX1.s 			page 22


     /tmp/ccZIDsX1.s:766    .rodata.str1.4:00000000 $d
     /tmp/ccZIDsX1.s:770    .bss.cdcaddbusy:00000000 $d
     /tmp/ccZIDsX1.s:774    .bss.cdcaddbusy:00000000 cdcaddbusy
     /tmp/ccZIDsX1.s:777    .bss.cdcct1:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
calloc
CDC_Transmit_FS
osThreadCreate
vTaskPrioritySet
osMessageCreate
osTimerCreate
osTimerStart
xQueueGenericReceive
