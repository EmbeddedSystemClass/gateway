
dynamometer.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000b08 	.word	0x20000b08
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800eac8 	.word	0x0800eac8

080001e4 <frame_dummy>:
 80001e4:	4b08      	ldr	r3, [pc, #32]	; (8000208 <frame_dummy+0x24>)
 80001e6:	b510      	push	{r4, lr}
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4908      	ldr	r1, [pc, #32]	; (800020c <frame_dummy+0x28>)
 80001ec:	4808      	ldr	r0, [pc, #32]	; (8000210 <frame_dummy+0x2c>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	4808      	ldr	r0, [pc, #32]	; (8000214 <frame_dummy+0x30>)
 80001f4:	6803      	ldr	r3, [r0, #0]
 80001f6:	b903      	cbnz	r3, 80001fa <frame_dummy+0x16>
 80001f8:	bd10      	pop	{r4, pc}
 80001fa:	4b07      	ldr	r3, [pc, #28]	; (8000218 <frame_dummy+0x34>)
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0fb      	beq.n	80001f8 <frame_dummy+0x14>
 8000200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000204:	4718      	bx	r3
 8000206:	bf00      	nop
 8000208:	00000000 	.word	0x00000000
 800020c:	20000b0c 	.word	0x20000b0c
 8000210:	0800eac8 	.word	0x0800eac8
 8000214:	20000b08 	.word	0x20000b08
 8000218:	00000000 	.word	0x00000000

0800021c <memcpy>:
 800021c:	4684      	mov	ip, r0
 800021e:	ea41 0300 	orr.w	r3, r1, r0
 8000222:	f013 0303 	ands.w	r3, r3, #3
 8000226:	d16d      	bne.n	8000304 <memcpy+0xe8>
 8000228:	3a40      	subs	r2, #64	; 0x40
 800022a:	d341      	bcc.n	80002b0 <memcpy+0x94>
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000270:	f840 3b04 	str.w	r3, [r0], #4
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	3a40      	subs	r2, #64	; 0x40
 80002ae:	d2bd      	bcs.n	800022c <memcpy+0x10>
 80002b0:	3230      	adds	r2, #48	; 0x30
 80002b2:	d311      	bcc.n	80002d8 <memcpy+0xbc>
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c0:	f840 3b04 	str.w	r3, [r0], #4
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	3a10      	subs	r2, #16
 80002d6:	d2ed      	bcs.n	80002b4 <memcpy+0x98>
 80002d8:	320c      	adds	r2, #12
 80002da:	d305      	bcc.n	80002e8 <memcpy+0xcc>
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	3a04      	subs	r2, #4
 80002e6:	d2f9      	bcs.n	80002dc <memcpy+0xc0>
 80002e8:	3204      	adds	r2, #4
 80002ea:	d008      	beq.n	80002fe <memcpy+0xe2>
 80002ec:	07d2      	lsls	r2, r2, #31
 80002ee:	bf1c      	itt	ne
 80002f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002f4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002f8:	d301      	bcc.n	80002fe <memcpy+0xe2>
 80002fa:	880b      	ldrh	r3, [r1, #0]
 80002fc:	8003      	strh	r3, [r0, #0]
 80002fe:	4660      	mov	r0, ip
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	2a08      	cmp	r2, #8
 8000306:	d313      	bcc.n	8000330 <memcpy+0x114>
 8000308:	078b      	lsls	r3, r1, #30
 800030a:	d08d      	beq.n	8000228 <memcpy+0xc>
 800030c:	f010 0303 	ands.w	r3, r0, #3
 8000310:	d08a      	beq.n	8000228 <memcpy+0xc>
 8000312:	f1c3 0304 	rsb	r3, r3, #4
 8000316:	1ad2      	subs	r2, r2, r3
 8000318:	07db      	lsls	r3, r3, #31
 800031a:	bf1c      	itt	ne
 800031c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000320:	f800 3b01 	strbne.w	r3, [r0], #1
 8000324:	d380      	bcc.n	8000228 <memcpy+0xc>
 8000326:	f831 3b02 	ldrh.w	r3, [r1], #2
 800032a:	f820 3b02 	strh.w	r3, [r0], #2
 800032e:	e77b      	b.n	8000228 <memcpy+0xc>
 8000330:	3a04      	subs	r2, #4
 8000332:	d3d9      	bcc.n	80002e8 <memcpy+0xcc>
 8000334:	3a01      	subs	r2, #1
 8000336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800033a:	f800 3b01 	strb.w	r3, [r0], #1
 800033e:	d2f9      	bcs.n	8000334 <memcpy+0x118>
 8000340:	780b      	ldrb	r3, [r1, #0]
 8000342:	7003      	strb	r3, [r0, #0]
 8000344:	784b      	ldrb	r3, [r1, #1]
 8000346:	7043      	strb	r3, [r0, #1]
 8000348:	788b      	ldrb	r3, [r1, #2]
 800034a:	7083      	strb	r3, [r0, #2]
 800034c:	4660      	mov	r0, ip
 800034e:	4770      	bx	lr
	...

08000380 <strlen>:
 8000380:	f890 f000 	pld	[r0]
 8000384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000388:	f020 0107 	bic.w	r1, r0, #7
 800038c:	f06f 0c00 	mvn.w	ip, #0
 8000390:	f010 0407 	ands.w	r4, r0, #7
 8000394:	f891 f020 	pld	[r1, #32]
 8000398:	f040 8049 	bne.w	800042e <strlen+0xae>
 800039c:	f04f 0400 	mov.w	r4, #0
 80003a0:	f06f 0007 	mvn.w	r0, #7
 80003a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80003a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80003ac:	f100 0008 	add.w	r0, r0, #8
 80003b0:	fa82 f24c 	uadd8	r2, r2, ip
 80003b4:	faa4 f28c 	sel	r2, r4, ip
 80003b8:	fa83 f34c 	uadd8	r3, r3, ip
 80003bc:	faa2 f38c 	sel	r3, r2, ip
 80003c0:	bb4b      	cbnz	r3, 8000416 <strlen+0x96>
 80003c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80003c6:	fa82 f24c 	uadd8	r2, r2, ip
 80003ca:	f100 0008 	add.w	r0, r0, #8
 80003ce:	faa4 f28c 	sel	r2, r4, ip
 80003d2:	fa83 f34c 	uadd8	r3, r3, ip
 80003d6:	faa2 f38c 	sel	r3, r2, ip
 80003da:	b9e3      	cbnz	r3, 8000416 <strlen+0x96>
 80003dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80003e0:	fa82 f24c 	uadd8	r2, r2, ip
 80003e4:	f100 0008 	add.w	r0, r0, #8
 80003e8:	faa4 f28c 	sel	r2, r4, ip
 80003ec:	fa83 f34c 	uadd8	r3, r3, ip
 80003f0:	faa2 f38c 	sel	r3, r2, ip
 80003f4:	b97b      	cbnz	r3, 8000416 <strlen+0x96>
 80003f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80003fa:	f101 0120 	add.w	r1, r1, #32
 80003fe:	fa82 f24c 	uadd8	r2, r2, ip
 8000402:	f100 0008 	add.w	r0, r0, #8
 8000406:	faa4 f28c 	sel	r2, r4, ip
 800040a:	fa83 f34c 	uadd8	r3, r3, ip
 800040e:	faa2 f38c 	sel	r3, r2, ip
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0c6      	beq.n	80003a4 <strlen+0x24>
 8000416:	2a00      	cmp	r2, #0
 8000418:	bf04      	itt	eq
 800041a:	3004      	addeq	r0, #4
 800041c:	461a      	moveq	r2, r3
 800041e:	ba12      	rev	r2, r2
 8000420:	fab2 f282 	clz	r2, r2
 8000424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800042c:	4770      	bx	lr
 800042e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000432:	f004 0503 	and.w	r5, r4, #3
 8000436:	f1c4 0000 	rsb	r0, r4, #0
 800043a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800043e:	f014 0f04 	tst.w	r4, #4
 8000442:	f891 f040 	pld	[r1, #64]	; 0x40
 8000446:	fa0c f505 	lsl.w	r5, ip, r5
 800044a:	ea62 0205 	orn	r2, r2, r5
 800044e:	bf1c      	itt	ne
 8000450:	ea63 0305 	ornne	r3, r3, r5
 8000454:	4662      	movne	r2, ip
 8000456:	f04f 0400 	mov.w	r4, #0
 800045a:	e7a9      	b.n	80003b0 <strlen+0x30>
 800045c:	0000      	movs	r0, r0
	...

08000460 <memchr>:
 8000460:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000464:	2a10      	cmp	r2, #16
 8000466:	db2b      	blt.n	80004c0 <memchr+0x60>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	d008      	beq.n	8000480 <memchr+0x20>
 800046e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000472:	3a01      	subs	r2, #1
 8000474:	428b      	cmp	r3, r1
 8000476:	d02d      	beq.n	80004d4 <memchr+0x74>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	b342      	cbz	r2, 80004d0 <memchr+0x70>
 800047e:	d1f6      	bne.n	800046e <memchr+0xe>
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800048a:	f022 0407 	bic.w	r4, r2, #7
 800048e:	f07f 0700 	mvns.w	r7, #0
 8000492:	2300      	movs	r3, #0
 8000494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000498:	3c08      	subs	r4, #8
 800049a:	ea85 0501 	eor.w	r5, r5, r1
 800049e:	ea86 0601 	eor.w	r6, r6, r1
 80004a2:	fa85 f547 	uadd8	r5, r5, r7
 80004a6:	faa3 f587 	sel	r5, r3, r7
 80004aa:	fa86 f647 	uadd8	r6, r6, r7
 80004ae:	faa5 f687 	sel	r6, r5, r7
 80004b2:	b98e      	cbnz	r6, 80004d8 <memchr+0x78>
 80004b4:	d1ee      	bne.n	8000494 <memchr+0x34>
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004bc:	f002 0207 	and.w	r2, r2, #7
 80004c0:	b132      	cbz	r2, 80004d0 <memchr+0x70>
 80004c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c6:	3a01      	subs	r2, #1
 80004c8:	ea83 0301 	eor.w	r3, r3, r1
 80004cc:	b113      	cbz	r3, 80004d4 <memchr+0x74>
 80004ce:	d1f8      	bne.n	80004c2 <memchr+0x62>
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr
 80004d8:	2d00      	cmp	r5, #0
 80004da:	bf06      	itte	eq
 80004dc:	4635      	moveq	r5, r6
 80004de:	3803      	subeq	r0, #3
 80004e0:	3807      	subne	r0, #7
 80004e2:	f015 0f01 	tst.w	r5, #1
 80004e6:	d107      	bne.n	80004f8 <memchr+0x98>
 80004e8:	3001      	adds	r0, #1
 80004ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ee:	bf02      	ittt	eq
 80004f0:	3001      	addeq	r0, #1
 80004f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004f6:	3001      	addeq	r0, #1
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__aeabi_drsub>:
 8000500:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e002      	b.n	800050c <__adddf3>
 8000506:	bf00      	nop

08000508 <__aeabi_dsub>:
 8000508:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800050c <__adddf3>:
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000512:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	bf1f      	itttt	ne
 8000522:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000526:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800052e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000532:	f000 80e2 	beq.w	80006fa <__adddf3+0x1ee>
 8000536:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800053e:	bfb8      	it	lt
 8000540:	426d      	neglt	r5, r5
 8000542:	dd0c      	ble.n	800055e <__adddf3+0x52>
 8000544:	442c      	add	r4, r5
 8000546:	ea80 0202 	eor.w	r2, r0, r2
 800054a:	ea81 0303 	eor.w	r3, r1, r3
 800054e:	ea82 0000 	eor.w	r0, r2, r0
 8000552:	ea83 0101 	eor.w	r1, r3, r1
 8000556:	ea80 0202 	eor.w	r2, r0, r2
 800055a:	ea81 0303 	eor.w	r3, r1, r3
 800055e:	2d36      	cmp	r5, #54	; 0x36
 8000560:	bf88      	it	hi
 8000562:	bd30      	pophi	{r4, r5, pc}
 8000564:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000568:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800056c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000570:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000574:	d002      	beq.n	800057c <__adddf3+0x70>
 8000576:	4240      	negs	r0, r0
 8000578:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000580:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000584:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x84>
 800058a:	4252      	negs	r2, r2
 800058c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000590:	ea94 0f05 	teq	r4, r5
 8000594:	f000 80a7 	beq.w	80006e6 <__adddf3+0x1da>
 8000598:	f1a4 0401 	sub.w	r4, r4, #1
 800059c:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a0:	db0d      	blt.n	80005be <__adddf3+0xb2>
 80005a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005a6:	fa22 f205 	lsr.w	r2, r2, r5
 80005aa:	1880      	adds	r0, r0, r2
 80005ac:	f141 0100 	adc.w	r1, r1, #0
 80005b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b4:	1880      	adds	r0, r0, r2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	4159      	adcs	r1, r3
 80005bc:	e00e      	b.n	80005dc <__adddf3+0xd0>
 80005be:	f1a5 0520 	sub.w	r5, r5, #32
 80005c2:	f10e 0e20 	add.w	lr, lr, #32
 80005c6:	2a01      	cmp	r2, #1
 80005c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005cc:	bf28      	it	cs
 80005ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	18c0      	adds	r0, r0, r3
 80005d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	d507      	bpl.n	80005f2 <__adddf3+0xe6>
 80005e2:	f04f 0e00 	mov.w	lr, #0
 80005e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005f6:	d31b      	bcc.n	8000630 <__adddf3+0x124>
 80005f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005fc:	d30c      	bcc.n	8000618 <__adddf3+0x10c>
 80005fe:	0849      	lsrs	r1, r1, #1
 8000600:	ea5f 0030 	movs.w	r0, r0, rrx
 8000604:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000608:	f104 0401 	add.w	r4, r4, #1
 800060c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000610:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000614:	f080 809a 	bcs.w	800074c <__adddf3+0x240>
 8000618:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	ea41 0105 	orr.w	r1, r1, r5
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000634:	4140      	adcs	r0, r0
 8000636:	eb41 0101 	adc.w	r1, r1, r1
 800063a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800063e:	f1a4 0401 	sub.w	r4, r4, #1
 8000642:	d1e9      	bne.n	8000618 <__adddf3+0x10c>
 8000644:	f091 0f00 	teq	r1, #0
 8000648:	bf04      	itt	eq
 800064a:	4601      	moveq	r1, r0
 800064c:	2000      	moveq	r0, #0
 800064e:	fab1 f381 	clz	r3, r1
 8000652:	bf08      	it	eq
 8000654:	3320      	addeq	r3, #32
 8000656:	f1a3 030b 	sub.w	r3, r3, #11
 800065a:	f1b3 0220 	subs.w	r2, r3, #32
 800065e:	da0c      	bge.n	800067a <__adddf3+0x16e>
 8000660:	320c      	adds	r2, #12
 8000662:	dd08      	ble.n	8000676 <__adddf3+0x16a>
 8000664:	f102 0c14 	add.w	ip, r2, #20
 8000668:	f1c2 020c 	rsb	r2, r2, #12
 800066c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000670:	fa21 f102 	lsr.w	r1, r1, r2
 8000674:	e00c      	b.n	8000690 <__adddf3+0x184>
 8000676:	f102 0214 	add.w	r2, r2, #20
 800067a:	bfd8      	it	le
 800067c:	f1c2 0c20 	rsble	ip, r2, #32
 8000680:	fa01 f102 	lsl.w	r1, r1, r2
 8000684:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000688:	bfdc      	itt	le
 800068a:	ea41 010c 	orrle.w	r1, r1, ip
 800068e:	4090      	lslle	r0, r2
 8000690:	1ae4      	subs	r4, r4, r3
 8000692:	bfa2      	ittt	ge
 8000694:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000698:	4329      	orrge	r1, r5
 800069a:	bd30      	popge	{r4, r5, pc}
 800069c:	ea6f 0404 	mvn.w	r4, r4
 80006a0:	3c1f      	subs	r4, #31
 80006a2:	da1c      	bge.n	80006de <__adddf3+0x1d2>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc0e      	bgt.n	80006c6 <__adddf3+0x1ba>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0220 	rsb	r2, r4, #32
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f302 	lsl.w	r3, r1, r2
 80006b8:	ea40 0003 	orr.w	r0, r0, r3
 80006bc:	fa21 f304 	lsr.w	r3, r1, r4
 80006c0:	ea45 0103 	orr.w	r1, r5, r3
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	f1c4 040c 	rsb	r4, r4, #12
 80006ca:	f1c4 0220 	rsb	r2, r4, #32
 80006ce:	fa20 f002 	lsr.w	r0, r0, r2
 80006d2:	fa01 f304 	lsl.w	r3, r1, r4
 80006d6:	ea40 0003 	orr.w	r0, r0, r3
 80006da:	4629      	mov	r1, r5
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	fa21 f004 	lsr.w	r0, r1, r4
 80006e2:	4629      	mov	r1, r5
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	f094 0f00 	teq	r4, #0
 80006ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ee:	bf06      	itte	eq
 80006f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f4:	3401      	addeq	r4, #1
 80006f6:	3d01      	subne	r5, #1
 80006f8:	e74e      	b.n	8000598 <__adddf3+0x8c>
 80006fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fe:	bf18      	it	ne
 8000700:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000704:	d029      	beq.n	800075a <__adddf3+0x24e>
 8000706:	ea94 0f05 	teq	r4, r5
 800070a:	bf08      	it	eq
 800070c:	ea90 0f02 	teqeq	r0, r2
 8000710:	d005      	beq.n	800071e <__adddf3+0x212>
 8000712:	ea54 0c00 	orrs.w	ip, r4, r0
 8000716:	bf04      	itt	eq
 8000718:	4619      	moveq	r1, r3
 800071a:	4610      	moveq	r0, r2
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea91 0f03 	teq	r1, r3
 8000722:	bf1e      	ittt	ne
 8000724:	2100      	movne	r1, #0
 8000726:	2000      	movne	r0, #0
 8000728:	bd30      	popne	{r4, r5, pc}
 800072a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800072e:	d105      	bne.n	800073c <__adddf3+0x230>
 8000730:	0040      	lsls	r0, r0, #1
 8000732:	4149      	adcs	r1, r1
 8000734:	bf28      	it	cs
 8000736:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd30      	pop	{r4, r5, pc}
 800073c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000740:	bf3c      	itt	cc
 8000742:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000746:	bd30      	popcc	{r4, r5, pc}
 8000748:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800074c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd30      	pop	{r4, r5, pc}
 800075a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800075e:	bf1a      	itte	ne
 8000760:	4619      	movne	r1, r3
 8000762:	4610      	movne	r0, r2
 8000764:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000768:	bf1c      	itt	ne
 800076a:	460b      	movne	r3, r1
 800076c:	4602      	movne	r2, r0
 800076e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000772:	bf06      	itte	eq
 8000774:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000778:	ea91 0f03 	teqeq	r1, r3
 800077c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000780:	bd30      	pop	{r4, r5, pc}
 8000782:	bf00      	nop

08000784 <__aeabi_ui2d>:
 8000784:	f090 0f00 	teq	r0, #0
 8000788:	bf04      	itt	eq
 800078a:	2100      	moveq	r1, #0
 800078c:	4770      	bxeq	lr
 800078e:	b530      	push	{r4, r5, lr}
 8000790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000798:	f04f 0500 	mov.w	r5, #0
 800079c:	f04f 0100 	mov.w	r1, #0
 80007a0:	e750      	b.n	8000644 <__adddf3+0x138>
 80007a2:	bf00      	nop

080007a4 <__aeabi_i2d>:
 80007a4:	f090 0f00 	teq	r0, #0
 80007a8:	bf04      	itt	eq
 80007aa:	2100      	moveq	r1, #0
 80007ac:	4770      	bxeq	lr
 80007ae:	b530      	push	{r4, r5, lr}
 80007b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007bc:	bf48      	it	mi
 80007be:	4240      	negmi	r0, r0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e73e      	b.n	8000644 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_f2d>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007d6:	bf1f      	itttt	ne
 80007d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e4:	4770      	bxne	lr
 80007e6:	f092 0f00 	teq	r2, #0
 80007ea:	bf14      	ite	ne
 80007ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f0:	4770      	bxeq	lr
 80007f2:	b530      	push	{r4, r5, lr}
 80007f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000800:	e720      	b.n	8000644 <__adddf3+0x138>
 8000802:	bf00      	nop

08000804 <__aeabi_ul2d>:
 8000804:	ea50 0201 	orrs.w	r2, r0, r1
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	f04f 0500 	mov.w	r5, #0
 8000812:	e00a      	b.n	800082a <__aeabi_l2d+0x16>

08000814 <__aeabi_l2d>:
 8000814:	ea50 0201 	orrs.w	r2, r0, r1
 8000818:	bf08      	it	eq
 800081a:	4770      	bxeq	lr
 800081c:	b530      	push	{r4, r5, lr}
 800081e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000822:	d502      	bpl.n	800082a <__aeabi_l2d+0x16>
 8000824:	4240      	negs	r0, r0
 8000826:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000832:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000836:	f43f aedc 	beq.w	80005f2 <__adddf3+0xe6>
 800083a:	f04f 0203 	mov.w	r2, #3
 800083e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000842:	bf18      	it	ne
 8000844:	3203      	addne	r2, #3
 8000846:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084a:	bf18      	it	ne
 800084c:	3203      	addne	r2, #3
 800084e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000852:	f1c2 0320 	rsb	r3, r2, #32
 8000856:	fa00 fc03 	lsl.w	ip, r0, r3
 800085a:	fa20 f002 	lsr.w	r0, r0, r2
 800085e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000862:	ea40 000e 	orr.w	r0, r0, lr
 8000866:	fa21 f102 	lsr.w	r1, r1, r2
 800086a:	4414      	add	r4, r2
 800086c:	e6c1      	b.n	80005f2 <__adddf3+0xe6>
 800086e:	bf00      	nop

08000870 <__aeabi_dmul>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000876:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087e:	bf1d      	ittte	ne
 8000880:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000884:	ea94 0f0c 	teqne	r4, ip
 8000888:	ea95 0f0c 	teqne	r5, ip
 800088c:	f000 f8de 	bleq	8000a4c <__aeabi_dmul+0x1dc>
 8000890:	442c      	add	r4, r5
 8000892:	ea81 0603 	eor.w	r6, r1, r3
 8000896:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800089a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800089e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008a2:	bf18      	it	ne
 80008a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b0:	d038      	beq.n	8000924 <__aeabi_dmul+0xb4>
 80008b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80008b6:	f04f 0500 	mov.w	r5, #0
 80008ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008c6:	f04f 0600 	mov.w	r6, #0
 80008ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008ce:	f09c 0f00 	teq	ip, #0
 80008d2:	bf18      	it	ne
 80008d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80008d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008e4:	d204      	bcs.n	80008f0 <__aeabi_dmul+0x80>
 80008e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008ea:	416d      	adcs	r5, r5
 80008ec:	eb46 0606 	adc.w	r6, r6, r6
 80008f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000900:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000904:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000908:	bf88      	it	hi
 800090a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090e:	d81e      	bhi.n	800094e <__aeabi_dmul+0xde>
 8000910:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000914:	bf08      	it	eq
 8000916:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800091a:	f150 0000 	adcs.w	r0, r0, #0
 800091e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000928:	ea46 0101 	orr.w	r1, r6, r1
 800092c:	ea40 0002 	orr.w	r0, r0, r2
 8000930:	ea81 0103 	eor.w	r1, r1, r3
 8000934:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000938:	bfc2      	ittt	gt
 800093a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000942:	bd70      	popgt	{r4, r5, r6, pc}
 8000944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000948:	f04f 0e00 	mov.w	lr, #0
 800094c:	3c01      	subs	r4, #1
 800094e:	f300 80ab 	bgt.w	8000aa8 <__aeabi_dmul+0x238>
 8000952:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000956:	bfde      	ittt	le
 8000958:	2000      	movle	r0, #0
 800095a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800095e:	bd70      	pople	{r4, r5, r6, pc}
 8000960:	f1c4 0400 	rsb	r4, r4, #0
 8000964:	3c20      	subs	r4, #32
 8000966:	da35      	bge.n	80009d4 <__aeabi_dmul+0x164>
 8000968:	340c      	adds	r4, #12
 800096a:	dc1b      	bgt.n	80009a4 <__aeabi_dmul+0x134>
 800096c:	f104 0414 	add.w	r4, r4, #20
 8000970:	f1c4 0520 	rsb	r5, r4, #32
 8000974:	fa00 f305 	lsl.w	r3, r0, r5
 8000978:	fa20 f004 	lsr.w	r0, r0, r4
 800097c:	fa01 f205 	lsl.w	r2, r1, r5
 8000980:	ea40 0002 	orr.w	r0, r0, r2
 8000984:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000988:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800098c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000990:	fa21 f604 	lsr.w	r6, r1, r4
 8000994:	eb42 0106 	adc.w	r1, r2, r6
 8000998:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800099c:	bf08      	it	eq
 800099e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f1c4 040c 	rsb	r4, r4, #12
 80009a8:	f1c4 0520 	rsb	r5, r4, #32
 80009ac:	fa00 f304 	lsl.w	r3, r0, r4
 80009b0:	fa20 f005 	lsr.w	r0, r0, r5
 80009b4:	fa01 f204 	lsl.w	r2, r1, r4
 80009b8:	ea40 0002 	orr.w	r0, r0, r2
 80009bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009c4:	f141 0100 	adc.w	r1, r1, #0
 80009c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009cc:	bf08      	it	eq
 80009ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f1c4 0520 	rsb	r5, r4, #32
 80009d8:	fa00 f205 	lsl.w	r2, r0, r5
 80009dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80009e0:	fa20 f304 	lsr.w	r3, r0, r4
 80009e4:	fa01 f205 	lsl.w	r2, r1, r5
 80009e8:	ea43 0302 	orr.w	r3, r3, r2
 80009ec:	fa21 f004 	lsr.w	r0, r1, r4
 80009f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009f4:	fa21 f204 	lsr.w	r2, r1, r4
 80009f8:	ea20 0002 	bic.w	r0, r0, r2
 80009fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a04:	bf08      	it	eq
 8000a06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	f094 0f00 	teq	r4, #0
 8000a10:	d10f      	bne.n	8000a32 <__aeabi_dmul+0x1c2>
 8000a12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a16:	0040      	lsls	r0, r0, #1
 8000a18:	eb41 0101 	adc.w	r1, r1, r1
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a20:	bf08      	it	eq
 8000a22:	3c01      	subeq	r4, #1
 8000a24:	d0f7      	beq.n	8000a16 <__aeabi_dmul+0x1a6>
 8000a26:	ea41 0106 	orr.w	r1, r1, r6
 8000a2a:	f095 0f00 	teq	r5, #0
 8000a2e:	bf18      	it	ne
 8000a30:	4770      	bxne	lr
 8000a32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a36:	0052      	lsls	r2, r2, #1
 8000a38:	eb43 0303 	adc.w	r3, r3, r3
 8000a3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a40:	bf08      	it	eq
 8000a42:	3d01      	subeq	r5, #1
 8000a44:	d0f7      	beq.n	8000a36 <__aeabi_dmul+0x1c6>
 8000a46:	ea43 0306 	orr.w	r3, r3, r6
 8000a4a:	4770      	bx	lr
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a54:	bf18      	it	ne
 8000a56:	ea95 0f0c 	teqne	r5, ip
 8000a5a:	d00c      	beq.n	8000a76 <__aeabi_dmul+0x206>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	d1d1      	bne.n	8000a0c <__aeabi_dmul+0x19c>
 8000a68:	ea81 0103 	eor.w	r1, r1, r3
 8000a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a7a:	bf06      	itte	eq
 8000a7c:	4610      	moveq	r0, r2
 8000a7e:	4619      	moveq	r1, r3
 8000a80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a84:	d019      	beq.n	8000aba <__aeabi_dmul+0x24a>
 8000a86:	ea94 0f0c 	teq	r4, ip
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dmul+0x222>
 8000a8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a90:	d113      	bne.n	8000aba <__aeabi_dmul+0x24a>
 8000a92:	ea95 0f0c 	teq	r5, ip
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_dmul+0x234>
 8000a98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a9c:	bf1c      	itt	ne
 8000a9e:	4610      	movne	r0, r2
 8000aa0:	4619      	movne	r1, r3
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dmul+0x24a>
 8000aa4:	ea81 0103 	eor.w	r1, r1, r3
 8000aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000aac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ab0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000abe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}

08000ac4 <__aeabi_ddiv>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ace:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ad2:	bf1d      	ittte	ne
 8000ad4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ad8:	ea94 0f0c 	teqne	r4, ip
 8000adc:	ea95 0f0c 	teqne	r5, ip
 8000ae0:	f000 f8a7 	bleq	8000c32 <__aeabi_ddiv+0x16e>
 8000ae4:	eba4 0405 	sub.w	r4, r4, r5
 8000ae8:	ea81 0e03 	eor.w	lr, r1, r3
 8000aec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000af4:	f000 8088 	beq.w	8000c08 <__aeabi_ddiv+0x144>
 8000af8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000afc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b1c:	429d      	cmp	r5, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4296      	cmpeq	r6, r2
 8000b22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b2a:	d202      	bcs.n	8000b32 <__aeabi_ddiv+0x6e>
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b32:	1ab6      	subs	r6, r6, r2
 8000b34:	eb65 0503 	sbc.w	r5, r5, r3
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b4e:	bf22      	ittt	cs
 8000b50:	1ab6      	subcs	r6, r6, r2
 8000b52:	4675      	movcs	r5, lr
 8000b54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b66:	bf22      	ittt	cs
 8000b68:	1ab6      	subcs	r6, r6, r2
 8000b6a:	4675      	movcs	r5, lr
 8000b6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b7e:	bf22      	ittt	cs
 8000b80:	1ab6      	subcs	r6, r6, r2
 8000b82:	4675      	movcs	r5, lr
 8000b84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b96:	bf22      	ittt	cs
 8000b98:	1ab6      	subcs	r6, r6, r2
 8000b9a:	4675      	movcs	r5, lr
 8000b9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ba0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ba4:	d018      	beq.n	8000bd8 <__aeabi_ddiv+0x114>
 8000ba6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000baa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bc2:	d1c0      	bne.n	8000b46 <__aeabi_ddiv+0x82>
 8000bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bc8:	d10b      	bne.n	8000be2 <__aeabi_ddiv+0x11e>
 8000bca:	ea41 0100 	orr.w	r1, r1, r0
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bd6:	e7b6      	b.n	8000b46 <__aeabi_ddiv+0x82>
 8000bd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bdc:	bf04      	itt	eq
 8000bde:	4301      	orreq	r1, r0
 8000be0:	2000      	moveq	r0, #0
 8000be2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000be6:	bf88      	it	hi
 8000be8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bec:	f63f aeaf 	bhi.w	800094e <__aeabi_dmul+0xde>
 8000bf0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bf4:	bf04      	itt	eq
 8000bf6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bfe:	f150 0000 	adcs.w	r0, r0, #0
 8000c02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c14:	bfc2      	ittt	gt
 8000c16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c24:	f04f 0e00 	mov.w	lr, #0
 8000c28:	3c01      	subs	r4, #1
 8000c2a:	e690      	b.n	800094e <__aeabi_dmul+0xde>
 8000c2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000c30:	e68d      	b.n	800094e <__aeabi_dmul+0xde>
 8000c32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c36:	ea94 0f0c 	teq	r4, ip
 8000c3a:	bf08      	it	eq
 8000c3c:	ea95 0f0c 	teqeq	r5, ip
 8000c40:	f43f af3b 	beq.w	8000aba <__aeabi_dmul+0x24a>
 8000c44:	ea94 0f0c 	teq	r4, ip
 8000c48:	d10a      	bne.n	8000c60 <__aeabi_ddiv+0x19c>
 8000c4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c4e:	f47f af34 	bne.w	8000aba <__aeabi_dmul+0x24a>
 8000c52:	ea95 0f0c 	teq	r5, ip
 8000c56:	f47f af25 	bne.w	8000aa4 <__aeabi_dmul+0x234>
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	e72c      	b.n	8000aba <__aeabi_dmul+0x24a>
 8000c60:	ea95 0f0c 	teq	r5, ip
 8000c64:	d106      	bne.n	8000c74 <__aeabi_ddiv+0x1b0>
 8000c66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c6a:	f43f aefd 	beq.w	8000a68 <__aeabi_dmul+0x1f8>
 8000c6e:	4610      	mov	r0, r2
 8000c70:	4619      	mov	r1, r3
 8000c72:	e722      	b.n	8000aba <__aeabi_dmul+0x24a>
 8000c74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c78:	bf18      	it	ne
 8000c7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c7e:	f47f aec5 	bne.w	8000a0c <__aeabi_dmul+0x19c>
 8000c82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c86:	f47f af0d 	bne.w	8000aa4 <__aeabi_dmul+0x234>
 8000c8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c8e:	f47f aeeb 	bne.w	8000a68 <__aeabi_dmul+0x1f8>
 8000c92:	e712      	b.n	8000aba <__aeabi_dmul+0x24a>

08000c94 <__gedf2>:
 8000c94:	f04f 3cff 	mov.w	ip, #4294967295
 8000c98:	e006      	b.n	8000ca8 <__cmpdf2+0x4>
 8000c9a:	bf00      	nop

08000c9c <__ledf2>:
 8000c9c:	f04f 0c01 	mov.w	ip, #1
 8000ca0:	e002      	b.n	8000ca8 <__cmpdf2+0x4>
 8000ca2:	bf00      	nop

08000ca4 <__cmpdf2>:
 8000ca4:	f04f 0c01 	mov.w	ip, #1
 8000ca8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cb8:	bf18      	it	ne
 8000cba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cbe:	d01b      	beq.n	8000cf8 <__cmpdf2+0x54>
 8000cc0:	b001      	add	sp, #4
 8000cc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cc6:	bf0c      	ite	eq
 8000cc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ccc:	ea91 0f03 	teqne	r1, r3
 8000cd0:	bf02      	ittt	eq
 8000cd2:	ea90 0f02 	teqeq	r0, r2
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	4770      	bxeq	lr
 8000cda:	f110 0f00 	cmn.w	r0, #0
 8000cde:	ea91 0f03 	teq	r1, r3
 8000ce2:	bf58      	it	pl
 8000ce4:	4299      	cmppl	r1, r3
 8000ce6:	bf08      	it	eq
 8000ce8:	4290      	cmpeq	r0, r2
 8000cea:	bf2c      	ite	cs
 8000cec:	17d8      	asrcs	r0, r3, #31
 8000cee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cf2:	f040 0001 	orr.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d00:	d102      	bne.n	8000d08 <__cmpdf2+0x64>
 8000d02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d06:	d107      	bne.n	8000d18 <__cmpdf2+0x74>
 8000d08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d10:	d1d6      	bne.n	8000cc0 <__cmpdf2+0x1c>
 8000d12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d16:	d0d3      	beq.n	8000cc0 <__cmpdf2+0x1c>
 8000d18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_cdrcmple>:
 8000d20:	4684      	mov	ip, r0
 8000d22:	4610      	mov	r0, r2
 8000d24:	4662      	mov	r2, ip
 8000d26:	468c      	mov	ip, r1
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	e000      	b.n	8000d30 <__aeabi_cdcmpeq>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_cdcmpeq>:
 8000d30:	b501      	push	{r0, lr}
 8000d32:	f7ff ffb7 	bl	8000ca4 <__cmpdf2>
 8000d36:	2800      	cmp	r0, #0
 8000d38:	bf48      	it	mi
 8000d3a:	f110 0f00 	cmnmi.w	r0, #0
 8000d3e:	bd01      	pop	{r0, pc}

08000d40 <__aeabi_dcmpeq>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff fff4 	bl	8000d30 <__aeabi_cdcmpeq>
 8000d48:	bf0c      	ite	eq
 8000d4a:	2001      	moveq	r0, #1
 8000d4c:	2000      	movne	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_dcmplt>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffea 	bl	8000d30 <__aeabi_cdcmpeq>
 8000d5c:	bf34      	ite	cc
 8000d5e:	2001      	movcc	r0, #1
 8000d60:	2000      	movcs	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_dcmple>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffe0 	bl	8000d30 <__aeabi_cdcmpeq>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_dcmpge>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffce 	bl	8000d20 <__aeabi_cdrcmple>
 8000d84:	bf94      	ite	ls
 8000d86:	2001      	movls	r0, #1
 8000d88:	2000      	movhi	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_dcmpgt>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff ffc4 	bl	8000d20 <__aeabi_cdrcmple>
 8000d98:	bf34      	ite	cc
 8000d9a:	2001      	movcc	r0, #1
 8000d9c:	2000      	movcs	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_dcmpun>:
 8000da4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000da8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dac:	d102      	bne.n	8000db4 <__aeabi_dcmpun+0x10>
 8000dae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000db2:	d10a      	bne.n	8000dca <__aeabi_dcmpun+0x26>
 8000db4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000db8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dbc:	d102      	bne.n	8000dc4 <__aeabi_dcmpun+0x20>
 8000dbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dc2:	d102      	bne.n	8000dca <__aeabi_dcmpun+0x26>
 8000dc4:	f04f 0000 	mov.w	r0, #0
 8000dc8:	4770      	bx	lr
 8000dca:	f04f 0001 	mov.w	r0, #1
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_d2iz>:
 8000dd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dd8:	d215      	bcs.n	8000e06 <__aeabi_d2iz+0x36>
 8000dda:	d511      	bpl.n	8000e00 <__aeabi_d2iz+0x30>
 8000ddc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000de0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000de4:	d912      	bls.n	8000e0c <__aeabi_d2iz+0x3c>
 8000de6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000df2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000df6:	fa23 f002 	lsr.w	r0, r3, r2
 8000dfa:	bf18      	it	ne
 8000dfc:	4240      	negne	r0, r0
 8000dfe:	4770      	bx	lr
 8000e00:	f04f 0000 	mov.w	r0, #0
 8000e04:	4770      	bx	lr
 8000e06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e0a:	d105      	bne.n	8000e18 <__aeabi_d2iz+0x48>
 8000e0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e10:	bf08      	it	eq
 8000e12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e16:	4770      	bx	lr
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <__aeabi_frsub>:
 8000e20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	e002      	b.n	8000e2c <__addsf3>
 8000e26:	bf00      	nop

08000e28 <__aeabi_fsub>:
 8000e28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000e2c <__addsf3>:
 8000e2c:	0042      	lsls	r2, r0, #1
 8000e2e:	bf1f      	itttt	ne
 8000e30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000e34:	ea92 0f03 	teqne	r2, r3
 8000e38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000e3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e40:	d06a      	beq.n	8000f18 <__addsf3+0xec>
 8000e42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000e46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000e4a:	bfc1      	itttt	gt
 8000e4c:	18d2      	addgt	r2, r2, r3
 8000e4e:	4041      	eorgt	r1, r0
 8000e50:	4048      	eorgt	r0, r1
 8000e52:	4041      	eorgt	r1, r0
 8000e54:	bfb8      	it	lt
 8000e56:	425b      	neglt	r3, r3
 8000e58:	2b19      	cmp	r3, #25
 8000e5a:	bf88      	it	hi
 8000e5c:	4770      	bxhi	lr
 8000e5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e6a:	bf18      	it	ne
 8000e6c:	4240      	negne	r0, r0
 8000e6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e7a:	bf18      	it	ne
 8000e7c:	4249      	negne	r1, r1
 8000e7e:	ea92 0f03 	teq	r2, r3
 8000e82:	d03f      	beq.n	8000f04 <__addsf3+0xd8>
 8000e84:	f1a2 0201 	sub.w	r2, r2, #1
 8000e88:	fa41 fc03 	asr.w	ip, r1, r3
 8000e8c:	eb10 000c 	adds.w	r0, r0, ip
 8000e90:	f1c3 0320 	rsb	r3, r3, #32
 8000e94:	fa01 f103 	lsl.w	r1, r1, r3
 8000e98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e9c:	d502      	bpl.n	8000ea4 <__addsf3+0x78>
 8000e9e:	4249      	negs	r1, r1
 8000ea0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ea4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ea8:	d313      	bcc.n	8000ed2 <__addsf3+0xa6>
 8000eaa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000eae:	d306      	bcc.n	8000ebe <__addsf3+0x92>
 8000eb0:	0840      	lsrs	r0, r0, #1
 8000eb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000eb6:	f102 0201 	add.w	r2, r2, #1
 8000eba:	2afe      	cmp	r2, #254	; 0xfe
 8000ebc:	d251      	bcs.n	8000f62 <__addsf3+0x136>
 8000ebe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ec2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec6:	bf08      	it	eq
 8000ec8:	f020 0001 	biceq.w	r0, r0, #1
 8000ecc:	ea40 0003 	orr.w	r0, r0, r3
 8000ed0:	4770      	bx	lr
 8000ed2:	0049      	lsls	r1, r1, #1
 8000ed4:	eb40 0000 	adc.w	r0, r0, r0
 8000ed8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000edc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ee0:	d1ed      	bne.n	8000ebe <__addsf3+0x92>
 8000ee2:	fab0 fc80 	clz	ip, r0
 8000ee6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000eea:	ebb2 020c 	subs.w	r2, r2, ip
 8000eee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ef2:	bfaa      	itet	ge
 8000ef4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ef8:	4252      	neglt	r2, r2
 8000efa:	4318      	orrge	r0, r3
 8000efc:	bfbc      	itt	lt
 8000efe:	40d0      	lsrlt	r0, r2
 8000f00:	4318      	orrlt	r0, r3
 8000f02:	4770      	bx	lr
 8000f04:	f092 0f00 	teq	r2, #0
 8000f08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000f0c:	bf06      	itte	eq
 8000f0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000f12:	3201      	addeq	r2, #1
 8000f14:	3b01      	subne	r3, #1
 8000f16:	e7b5      	b.n	8000e84 <__addsf3+0x58>
 8000f18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f20:	bf18      	it	ne
 8000f22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f26:	d021      	beq.n	8000f6c <__addsf3+0x140>
 8000f28:	ea92 0f03 	teq	r2, r3
 8000f2c:	d004      	beq.n	8000f38 <__addsf3+0x10c>
 8000f2e:	f092 0f00 	teq	r2, #0
 8000f32:	bf08      	it	eq
 8000f34:	4608      	moveq	r0, r1
 8000f36:	4770      	bx	lr
 8000f38:	ea90 0f01 	teq	r0, r1
 8000f3c:	bf1c      	itt	ne
 8000f3e:	2000      	movne	r0, #0
 8000f40:	4770      	bxne	lr
 8000f42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000f46:	d104      	bne.n	8000f52 <__addsf3+0x126>
 8000f48:	0040      	lsls	r0, r0, #1
 8000f4a:	bf28      	it	cs
 8000f4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000f50:	4770      	bx	lr
 8000f52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000f56:	bf3c      	itt	cc
 8000f58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000f5c:	4770      	bxcc	lr
 8000f5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000f62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6a:	4770      	bx	lr
 8000f6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f70:	bf16      	itet	ne
 8000f72:	4608      	movne	r0, r1
 8000f74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f78:	4601      	movne	r1, r0
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	bf06      	itte	eq
 8000f7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f82:	ea90 0f01 	teqeq	r0, r1
 8000f86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_ui2f>:
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	e004      	b.n	8000f9c <__aeabi_i2f+0x8>
 8000f92:	bf00      	nop

08000f94 <__aeabi_i2f>:
 8000f94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f98:	bf48      	it	mi
 8000f9a:	4240      	negmi	r0, r0
 8000f9c:	ea5f 0c00 	movs.w	ip, r0
 8000fa0:	bf08      	it	eq
 8000fa2:	4770      	bxeq	lr
 8000fa4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000fa8:	4601      	mov	r1, r0
 8000faa:	f04f 0000 	mov.w	r0, #0
 8000fae:	e01c      	b.n	8000fea <__aeabi_l2f+0x2a>

08000fb0 <__aeabi_ul2f>:
 8000fb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000fb4:	bf08      	it	eq
 8000fb6:	4770      	bxeq	lr
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e00a      	b.n	8000fd4 <__aeabi_l2f+0x14>
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_l2f>:
 8000fc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000fc4:	bf08      	it	eq
 8000fc6:	4770      	bxeq	lr
 8000fc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	d502      	bpl.n	8000fd4 <__aeabi_l2f+0x14>
 8000fce:	4240      	negs	r0, r0
 8000fd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd4:	ea5f 0c01 	movs.w	ip, r1
 8000fd8:	bf02      	ittt	eq
 8000fda:	4684      	moveq	ip, r0
 8000fdc:	4601      	moveq	r1, r0
 8000fde:	2000      	moveq	r0, #0
 8000fe0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000fe4:	bf08      	it	eq
 8000fe6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000fea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000fee:	fabc f28c 	clz	r2, ip
 8000ff2:	3a08      	subs	r2, #8
 8000ff4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ff8:	db10      	blt.n	800101c <__aeabi_l2f+0x5c>
 8000ffa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ffe:	4463      	add	r3, ip
 8001000:	fa00 fc02 	lsl.w	ip, r0, r2
 8001004:	f1c2 0220 	rsb	r2, r2, #32
 8001008:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800100c:	fa20 f202 	lsr.w	r2, r0, r2
 8001010:	eb43 0002 	adc.w	r0, r3, r2
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f102 0220 	add.w	r2, r2, #32
 8001020:	fa01 fc02 	lsl.w	ip, r1, r2
 8001024:	f1c2 0220 	rsb	r2, r2, #32
 8001028:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800102c:	fa21 f202 	lsr.w	r2, r1, r2
 8001030:	eb43 0002 	adc.w	r0, r3, r2
 8001034:	bf08      	it	eq
 8001036:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800103a:	4770      	bx	lr

0800103c <__aeabi_uldivmod>:
 800103c:	b953      	cbnz	r3, 8001054 <__aeabi_uldivmod+0x18>
 800103e:	b94a      	cbnz	r2, 8001054 <__aeabi_uldivmod+0x18>
 8001040:	2900      	cmp	r1, #0
 8001042:	bf08      	it	eq
 8001044:	2800      	cmpeq	r0, #0
 8001046:	bf1c      	itt	ne
 8001048:	f04f 31ff 	movne.w	r1, #4294967295
 800104c:	f04f 30ff 	movne.w	r0, #4294967295
 8001050:	f000 b97e 	b.w	8001350 <__aeabi_idiv0>
 8001054:	f1ad 0c08 	sub.w	ip, sp, #8
 8001058:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800105c:	f000 f806 	bl	800106c <__udivmoddi4>
 8001060:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001068:	b004      	add	sp, #16
 800106a:	4770      	bx	lr

0800106c <__udivmoddi4>:
 800106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001070:	468c      	mov	ip, r1
 8001072:	460e      	mov	r6, r1
 8001074:	4604      	mov	r4, r0
 8001076:	9d08      	ldr	r5, [sp, #32]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d150      	bne.n	800111e <__udivmoddi4+0xb2>
 800107c:	428a      	cmp	r2, r1
 800107e:	4617      	mov	r7, r2
 8001080:	d96c      	bls.n	800115c <__udivmoddi4+0xf0>
 8001082:	fab2 fe82 	clz	lr, r2
 8001086:	f1be 0f00 	cmp.w	lr, #0
 800108a:	d00b      	beq.n	80010a4 <__udivmoddi4+0x38>
 800108c:	f1ce 0420 	rsb	r4, lr, #32
 8001090:	fa20 f404 	lsr.w	r4, r0, r4
 8001094:	fa01 f60e 	lsl.w	r6, r1, lr
 8001098:	ea44 0c06 	orr.w	ip, r4, r6
 800109c:	fa02 f70e 	lsl.w	r7, r2, lr
 80010a0:	fa00 f40e 	lsl.w	r4, r0, lr
 80010a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010a8:	0c22      	lsrs	r2, r4, #16
 80010aa:	fbbc f0f9 	udiv	r0, ip, r9
 80010ae:	fa1f f887 	uxth.w	r8, r7
 80010b2:	fb09 c610 	mls	r6, r9, r0, ip
 80010b6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80010ba:	fb00 f308 	mul.w	r3, r0, r8
 80010be:	42b3      	cmp	r3, r6
 80010c0:	d909      	bls.n	80010d6 <__udivmoddi4+0x6a>
 80010c2:	19f6      	adds	r6, r6, r7
 80010c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80010c8:	f080 8122 	bcs.w	8001310 <__udivmoddi4+0x2a4>
 80010cc:	42b3      	cmp	r3, r6
 80010ce:	f240 811f 	bls.w	8001310 <__udivmoddi4+0x2a4>
 80010d2:	3802      	subs	r0, #2
 80010d4:	443e      	add	r6, r7
 80010d6:	1af6      	subs	r6, r6, r3
 80010d8:	b2a2      	uxth	r2, r4
 80010da:	fbb6 f3f9 	udiv	r3, r6, r9
 80010de:	fb09 6613 	mls	r6, r9, r3, r6
 80010e2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80010e6:	fb03 f808 	mul.w	r8, r3, r8
 80010ea:	45a0      	cmp	r8, r4
 80010ec:	d909      	bls.n	8001102 <__udivmoddi4+0x96>
 80010ee:	19e4      	adds	r4, r4, r7
 80010f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80010f4:	f080 810a 	bcs.w	800130c <__udivmoddi4+0x2a0>
 80010f8:	45a0      	cmp	r8, r4
 80010fa:	f240 8107 	bls.w	800130c <__udivmoddi4+0x2a0>
 80010fe:	3b02      	subs	r3, #2
 8001100:	443c      	add	r4, r7
 8001102:	ebc8 0404 	rsb	r4, r8, r4
 8001106:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800110a:	2100      	movs	r1, #0
 800110c:	2d00      	cmp	r5, #0
 800110e:	d062      	beq.n	80011d6 <__udivmoddi4+0x16a>
 8001110:	fa24 f40e 	lsr.w	r4, r4, lr
 8001114:	2300      	movs	r3, #0
 8001116:	602c      	str	r4, [r5, #0]
 8001118:	606b      	str	r3, [r5, #4]
 800111a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800111e:	428b      	cmp	r3, r1
 8001120:	d907      	bls.n	8001132 <__udivmoddi4+0xc6>
 8001122:	2d00      	cmp	r5, #0
 8001124:	d055      	beq.n	80011d2 <__udivmoddi4+0x166>
 8001126:	2100      	movs	r1, #0
 8001128:	e885 0041 	stmia.w	r5, {r0, r6}
 800112c:	4608      	mov	r0, r1
 800112e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001132:	fab3 f183 	clz	r1, r3
 8001136:	2900      	cmp	r1, #0
 8001138:	f040 8090 	bne.w	800125c <__udivmoddi4+0x1f0>
 800113c:	42b3      	cmp	r3, r6
 800113e:	d302      	bcc.n	8001146 <__udivmoddi4+0xda>
 8001140:	4282      	cmp	r2, r0
 8001142:	f200 80f8 	bhi.w	8001336 <__udivmoddi4+0x2ca>
 8001146:	1a84      	subs	r4, r0, r2
 8001148:	eb66 0603 	sbc.w	r6, r6, r3
 800114c:	2001      	movs	r0, #1
 800114e:	46b4      	mov	ip, r6
 8001150:	2d00      	cmp	r5, #0
 8001152:	d040      	beq.n	80011d6 <__udivmoddi4+0x16a>
 8001154:	e885 1010 	stmia.w	r5, {r4, ip}
 8001158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115c:	b912      	cbnz	r2, 8001164 <__udivmoddi4+0xf8>
 800115e:	2701      	movs	r7, #1
 8001160:	fbb7 f7f2 	udiv	r7, r7, r2
 8001164:	fab7 fe87 	clz	lr, r7
 8001168:	f1be 0f00 	cmp.w	lr, #0
 800116c:	d135      	bne.n	80011da <__udivmoddi4+0x16e>
 800116e:	1bf3      	subs	r3, r6, r7
 8001170:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001174:	fa1f fc87 	uxth.w	ip, r7
 8001178:	2101      	movs	r1, #1
 800117a:	fbb3 f0f8 	udiv	r0, r3, r8
 800117e:	0c22      	lsrs	r2, r4, #16
 8001180:	fb08 3610 	mls	r6, r8, r0, r3
 8001184:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8001188:	fb0c f300 	mul.w	r3, ip, r0
 800118c:	42b3      	cmp	r3, r6
 800118e:	d907      	bls.n	80011a0 <__udivmoddi4+0x134>
 8001190:	19f6      	adds	r6, r6, r7
 8001192:	f100 32ff 	add.w	r2, r0, #4294967295
 8001196:	d202      	bcs.n	800119e <__udivmoddi4+0x132>
 8001198:	42b3      	cmp	r3, r6
 800119a:	f200 80ce 	bhi.w	800133a <__udivmoddi4+0x2ce>
 800119e:	4610      	mov	r0, r2
 80011a0:	1af6      	subs	r6, r6, r3
 80011a2:	b2a2      	uxth	r2, r4
 80011a4:	fbb6 f3f8 	udiv	r3, r6, r8
 80011a8:	fb08 6613 	mls	r6, r8, r3, r6
 80011ac:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80011b0:	fb0c fc03 	mul.w	ip, ip, r3
 80011b4:	45a4      	cmp	ip, r4
 80011b6:	d907      	bls.n	80011c8 <__udivmoddi4+0x15c>
 80011b8:	19e4      	adds	r4, r4, r7
 80011ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80011be:	d202      	bcs.n	80011c6 <__udivmoddi4+0x15a>
 80011c0:	45a4      	cmp	ip, r4
 80011c2:	f200 80b5 	bhi.w	8001330 <__udivmoddi4+0x2c4>
 80011c6:	4613      	mov	r3, r2
 80011c8:	ebcc 0404 	rsb	r4, ip, r4
 80011cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011d0:	e79c      	b.n	800110c <__udivmoddi4+0xa0>
 80011d2:	4629      	mov	r1, r5
 80011d4:	4628      	mov	r0, r5
 80011d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011da:	f1ce 0120 	rsb	r1, lr, #32
 80011de:	fa06 f30e 	lsl.w	r3, r6, lr
 80011e2:	fa07 f70e 	lsl.w	r7, r7, lr
 80011e6:	fa20 f901 	lsr.w	r9, r0, r1
 80011ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011ee:	40ce      	lsrs	r6, r1
 80011f0:	ea49 0903 	orr.w	r9, r9, r3
 80011f4:	fbb6 faf8 	udiv	sl, r6, r8
 80011f8:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80011fc:	fb08 661a 	mls	r6, r8, sl, r6
 8001200:	fa1f fc87 	uxth.w	ip, r7
 8001204:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8001208:	fb0a f20c 	mul.w	r2, sl, ip
 800120c:	429a      	cmp	r2, r3
 800120e:	fa00 f40e 	lsl.w	r4, r0, lr
 8001212:	d90a      	bls.n	800122a <__udivmoddi4+0x1be>
 8001214:	19db      	adds	r3, r3, r7
 8001216:	f10a 31ff 	add.w	r1, sl, #4294967295
 800121a:	f080 8087 	bcs.w	800132c <__udivmoddi4+0x2c0>
 800121e:	429a      	cmp	r2, r3
 8001220:	f240 8084 	bls.w	800132c <__udivmoddi4+0x2c0>
 8001224:	f1aa 0a02 	sub.w	sl, sl, #2
 8001228:	443b      	add	r3, r7
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	fa1f f989 	uxth.w	r9, r9
 8001230:	fbb3 f1f8 	udiv	r1, r3, r8
 8001234:	fb08 3311 	mls	r3, r8, r1, r3
 8001238:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800123c:	fb01 f60c 	mul.w	r6, r1, ip
 8001240:	429e      	cmp	r6, r3
 8001242:	d907      	bls.n	8001254 <__udivmoddi4+0x1e8>
 8001244:	19db      	adds	r3, r3, r7
 8001246:	f101 32ff 	add.w	r2, r1, #4294967295
 800124a:	d26b      	bcs.n	8001324 <__udivmoddi4+0x2b8>
 800124c:	429e      	cmp	r6, r3
 800124e:	d969      	bls.n	8001324 <__udivmoddi4+0x2b8>
 8001250:	3902      	subs	r1, #2
 8001252:	443b      	add	r3, r7
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800125a:	e78e      	b.n	800117a <__udivmoddi4+0x10e>
 800125c:	f1c1 0e20 	rsb	lr, r1, #32
 8001260:	fa22 f40e 	lsr.w	r4, r2, lr
 8001264:	408b      	lsls	r3, r1
 8001266:	4323      	orrs	r3, r4
 8001268:	fa20 f70e 	lsr.w	r7, r0, lr
 800126c:	fa06 f401 	lsl.w	r4, r6, r1
 8001270:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8001274:	fa26 f60e 	lsr.w	r6, r6, lr
 8001278:	433c      	orrs	r4, r7
 800127a:	fbb6 f9fc 	udiv	r9, r6, ip
 800127e:	0c27      	lsrs	r7, r4, #16
 8001280:	fb0c 6619 	mls	r6, ip, r9, r6
 8001284:	fa1f f883 	uxth.w	r8, r3
 8001288:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800128c:	fb09 f708 	mul.w	r7, r9, r8
 8001290:	42b7      	cmp	r7, r6
 8001292:	fa02 f201 	lsl.w	r2, r2, r1
 8001296:	fa00 fa01 	lsl.w	sl, r0, r1
 800129a:	d908      	bls.n	80012ae <__udivmoddi4+0x242>
 800129c:	18f6      	adds	r6, r6, r3
 800129e:	f109 30ff 	add.w	r0, r9, #4294967295
 80012a2:	d241      	bcs.n	8001328 <__udivmoddi4+0x2bc>
 80012a4:	42b7      	cmp	r7, r6
 80012a6:	d93f      	bls.n	8001328 <__udivmoddi4+0x2bc>
 80012a8:	f1a9 0902 	sub.w	r9, r9, #2
 80012ac:	441e      	add	r6, r3
 80012ae:	1bf6      	subs	r6, r6, r7
 80012b0:	b2a0      	uxth	r0, r4
 80012b2:	fbb6 f4fc 	udiv	r4, r6, ip
 80012b6:	fb0c 6614 	mls	r6, ip, r4, r6
 80012ba:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 80012be:	fb04 f808 	mul.w	r8, r4, r8
 80012c2:	45b8      	cmp	r8, r7
 80012c4:	d907      	bls.n	80012d6 <__udivmoddi4+0x26a>
 80012c6:	18ff      	adds	r7, r7, r3
 80012c8:	f104 30ff 	add.w	r0, r4, #4294967295
 80012cc:	d228      	bcs.n	8001320 <__udivmoddi4+0x2b4>
 80012ce:	45b8      	cmp	r8, r7
 80012d0:	d926      	bls.n	8001320 <__udivmoddi4+0x2b4>
 80012d2:	3c02      	subs	r4, #2
 80012d4:	441f      	add	r7, r3
 80012d6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80012da:	ebc8 0707 	rsb	r7, r8, r7
 80012de:	fba0 8902 	umull	r8, r9, r0, r2
 80012e2:	454f      	cmp	r7, r9
 80012e4:	4644      	mov	r4, r8
 80012e6:	464e      	mov	r6, r9
 80012e8:	d314      	bcc.n	8001314 <__udivmoddi4+0x2a8>
 80012ea:	d029      	beq.n	8001340 <__udivmoddi4+0x2d4>
 80012ec:	b365      	cbz	r5, 8001348 <__udivmoddi4+0x2dc>
 80012ee:	ebba 0304 	subs.w	r3, sl, r4
 80012f2:	eb67 0706 	sbc.w	r7, r7, r6
 80012f6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80012fa:	40cb      	lsrs	r3, r1
 80012fc:	40cf      	lsrs	r7, r1
 80012fe:	ea4e 0303 	orr.w	r3, lr, r3
 8001302:	e885 0088 	stmia.w	r5, {r3, r7}
 8001306:	2100      	movs	r1, #0
 8001308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130c:	4613      	mov	r3, r2
 800130e:	e6f8      	b.n	8001102 <__udivmoddi4+0x96>
 8001310:	4610      	mov	r0, r2
 8001312:	e6e0      	b.n	80010d6 <__udivmoddi4+0x6a>
 8001314:	ebb8 0402 	subs.w	r4, r8, r2
 8001318:	eb69 0603 	sbc.w	r6, r9, r3
 800131c:	3801      	subs	r0, #1
 800131e:	e7e5      	b.n	80012ec <__udivmoddi4+0x280>
 8001320:	4604      	mov	r4, r0
 8001322:	e7d8      	b.n	80012d6 <__udivmoddi4+0x26a>
 8001324:	4611      	mov	r1, r2
 8001326:	e795      	b.n	8001254 <__udivmoddi4+0x1e8>
 8001328:	4681      	mov	r9, r0
 800132a:	e7c0      	b.n	80012ae <__udivmoddi4+0x242>
 800132c:	468a      	mov	sl, r1
 800132e:	e77c      	b.n	800122a <__udivmoddi4+0x1be>
 8001330:	3b02      	subs	r3, #2
 8001332:	443c      	add	r4, r7
 8001334:	e748      	b.n	80011c8 <__udivmoddi4+0x15c>
 8001336:	4608      	mov	r0, r1
 8001338:	e70a      	b.n	8001150 <__udivmoddi4+0xe4>
 800133a:	3802      	subs	r0, #2
 800133c:	443e      	add	r6, r7
 800133e:	e72f      	b.n	80011a0 <__udivmoddi4+0x134>
 8001340:	45c2      	cmp	sl, r8
 8001342:	d3e7      	bcc.n	8001314 <__udivmoddi4+0x2a8>
 8001344:	463e      	mov	r6, r7
 8001346:	e7d1      	b.n	80012ec <__udivmoddi4+0x280>
 8001348:	4629      	mov	r1, r5
 800134a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800134e:	bf00      	nop

08001350 <__aeabi_idiv0>:
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b530      	push	{r4, r5, lr}
 8001356:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	2400      	movs	r4, #0
 800135a:	9405      	str	r4, [sp, #20]
 800135c:	9406      	str	r4, [sp, #24]
 800135e:	9407      	str	r4, [sp, #28]
 8001360:	9408      	str	r4, [sp, #32]
 8001362:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001364:	9400      	str	r4, [sp, #0]
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_GPIO_Init+0xa0>)
 8001368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001376:	9200      	str	r2, [sp, #0]
 8001378:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	9401      	str	r4, [sp, #4]
 800137c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
 8001384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001386:	f002 0204 	and.w	r2, r2, #4
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	9402      	str	r4, [sp, #8]
 8001390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	631a      	str	r2, [r3, #48]	; 0x30
 8001398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139a:	f002 0201 	and.w	r2, r2, #1
 800139e:	9202      	str	r2, [sp, #8]
 80013a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	9403      	str	r4, [sp, #12]
 80013a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a6:	f042 0202 	orr.w	r2, r2, #2
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
 80013ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ae:	f002 0202 	and.w	r2, r2, #2
 80013b2:	9203      	str	r2, [sp, #12]
 80013b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	9404      	str	r4, [sp, #16]
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	f042 0208 	orr.w	r2, r2, #8
 80013be:	631a      	str	r2, [r3, #48]	; 0x30
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	9304      	str	r3, [sp, #16]
 80013c8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013ca:	4d0b      	ldr	r5, [pc, #44]	; (80013f8 <MX_GPIO_Init+0xa4>)
 80013cc:	4622      	mov	r2, r4
 80013ce:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80013d2:	4628      	mov	r0, r5
 80013d4:	f003 fd0c 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013d8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	a905      	add	r1, sp, #20
 80013e8:	4628      	mov	r0, r5
 80013ea:	f003 fc21 	bl	8004c30 <HAL_GPIO_Init>

}
 80013ee:	b00b      	add	sp, #44	; 0x2c
 80013f0:	bd30      	pop	{r4, r5, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020c00 	.word	0x40020c00

080013fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001400:	2400      	movs	r4, #0
 8001402:	9400      	str	r4, [sp, #0]
 8001404:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <MX_DMA_Init+0x84>)
 8001406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001408:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
 800140e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001410:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001418:	9401      	str	r4, [sp, #4]
 800141a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800141c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 800142c:	4622      	mov	r2, r4
 800142e:	2106      	movs	r1, #6
 8001430:	2010      	movs	r0, #16
 8001432:	f003 ff17 	bl	8005264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001436:	2010      	movs	r0, #16
 8001438:	f003 ff46 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 800143c:	4622      	mov	r2, r4
 800143e:	2106      	movs	r1, #6
 8001440:	2011      	movs	r0, #17
 8001442:	f003 ff0f 	bl	8005264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001446:	2011      	movs	r0, #17
 8001448:	f003 ff3e 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800144c:	4622      	mov	r2, r4
 800144e:	2105      	movs	r1, #5
 8001450:	2038      	movs	r0, #56	; 0x38
 8001452:	f003 ff07 	bl	8005264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001456:	2038      	movs	r0, #56	; 0x38
 8001458:	f003 ff36 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 7, 0);
 800145c:	4622      	mov	r2, r4
 800145e:	2107      	movs	r1, #7
 8001460:	2039      	movs	r0, #57	; 0x39
 8001462:	f003 feff 	bl	8005264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001466:	2039      	movs	r0, #57	; 0x39
 8001468:	f003 ff2e 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 7, 0);
 800146c:	4622      	mov	r2, r4
 800146e:	2107      	movs	r1, #7
 8001470:	2045      	movs	r0, #69	; 0x45
 8001472:	f003 fef7 	bl	8005264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001476:	2045      	movs	r0, #69	; 0x45
 8001478:	f003 ff26 	bl	80052c8 <HAL_NVIC_EnableIRQ>

}
 800147c:	b002      	add	sp, #8
 800147e:	bd10      	pop	{r4, pc}
 8001480:	40023800 	.word	0x40023800

08001484 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001484:	b508      	push	{r3, lr}
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <MX_USART6_UART_Init+0x24>)
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART6_UART_Init+0x28>)
 800148a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 800148c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001490:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	2300      	movs	r3, #0
 8001494:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001496:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001498:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800149a:	220c      	movs	r2, #12
 800149c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014a2:	f002 fe15 	bl	80040d0 <HAL_UART_Init>
 80014a6:	bd08      	pop	{r3, pc}
 80014a8:	20005290 	.word	0x20005290
 80014ac:	40011400 	.word	0x40011400

080014b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_USART2_UART_Init+0x24>)
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART2_UART_Init+0x28>)
 80014b6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 2000000;
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <MX_USART2_UART_Init+0x2c>)
 80014ba:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014bc:	2300      	movs	r3, #0
 80014be:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c0:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c2:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c4:	220c      	movs	r2, #12
 80014c6:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c8:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ca:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014cc:	f002 fe00 	bl	80040d0 <HAL_UART_Init>
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop
 80014d4:	200052f0 	.word	0x200052f0
 80014d8:	40004400 	.word	0x40004400
 80014dc:	001e8480 	.word	0x001e8480

080014e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014e0:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014e2:	480a      	ldr	r0, [pc, #40]	; (800150c <MX_CAN1_Init+0x2c>)
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_CAN1_Init+0x30>)
 80014e6:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 12;
 80014e8:	230c      	movs	r3, #12
 80014ea:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014f0:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80014f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014f6:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014f8:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014fa:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014fc:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014fe:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001500:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001502:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001504:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001506:	f006 fe77 	bl	80081f8 <HAL_CAN_Init>
 800150a:	bd08      	pop	{r3, pc}
 800150c:	20005330 	.word	0x20005330
 8001510:	40006400 	.word	0x40006400

08001514 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001514:	b508      	push	{r3, lr}
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001516:	480a      	ldr	r0, [pc, #40]	; (8001540 <MX_CAN2_Init+0x2c>)
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_CAN2_Init+0x30>)
 800151a:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = 12;
 800151c:	230c      	movs	r3, #12
 800151e:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001520:	2300      	movs	r3, #0
 8001522:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001524:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001526:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800152a:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800152c:	6143      	str	r3, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800152e:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001530:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001532:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001534:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001536:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001538:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800153a:	f006 fe5d 	bl	80081f8 <HAL_CAN_Init>
 800153e:	bd08      	pop	{r3, pc}
 8001540:	2000519c 	.word	0x2000519c
 8001544:	40006800 	.word	0x40006800

08001548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800154c:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001558:	4c34      	ldr	r4, [pc, #208]	; (800162c <MX_ADC1_Init+0xe4>)
 800155a:	4a35      	ldr	r2, [pc, #212]	; (8001630 <MX_ADC1_Init+0xe8>)
 800155c:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800155e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001562:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001564:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001566:	2501      	movs	r5, #1
 8001568:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800156a:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156c:	6223      	str	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001570:	4a30      	ldr	r2, [pc, #192]	; (8001634 <MX_ADC1_Init+0xec>)
 8001572:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 10;
 8001576:	260a      	movs	r6, #10
 8001578:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800157a:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800157c:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157e:	4620      	mov	r0, r4
 8001580:	f007 fad2 	bl	8008b28 <HAL_ADC_Init>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001584:	9500      	str	r5, [sp, #0]
  sConfig.Rank = 1;
 8001586:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001588:	2503      	movs	r5, #3
 800158a:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158c:	4669      	mov	r1, sp
 800158e:	4620      	mov	r0, r4
 8001590:	f007 fc82 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001594:	f04f 0905 	mov.w	r9, #5
 8001598:	f8cd 9000 	str.w	r9, [sp]
  sConfig.Rank = 2;
 800159c:	2302      	movs	r3, #2
 800159e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a0:	4669      	mov	r1, sp
 80015a2:	4620      	mov	r0, r4
 80015a4:	f007 fc78 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015a8:	f04f 0806 	mov.w	r8, #6
 80015ac:	f8cd 8000 	str.w	r8, [sp]
  sConfig.Rank = 3;
 80015b0:	9501      	str	r5, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	4669      	mov	r1, sp
 80015b4:	4620      	mov	r0, r4
 80015b6:	f007 fc6f 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015ba:	2507      	movs	r5, #7
 80015bc:	9500      	str	r5, [sp, #0]
  sConfig.Rank = 4;
 80015be:	2304      	movs	r3, #4
 80015c0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c2:	4669      	mov	r1, sp
 80015c4:	4620      	mov	r0, r4
 80015c6:	f007 fc67 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015ca:	2708      	movs	r7, #8
 80015cc:	9700      	str	r7, [sp, #0]
  sConfig.Rank = 5;
 80015ce:	f8cd 9004 	str.w	r9, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d2:	4669      	mov	r1, sp
 80015d4:	4620      	mov	r0, r4
 80015d6:	f007 fc5f 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80015da:	230b      	movs	r3, #11
 80015dc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 6;
 80015de:	f8cd 8004 	str.w	r8, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e2:	4669      	mov	r1, sp
 80015e4:	4620      	mov	r0, r4
 80015e6:	f007 fc57 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015ea:	230c      	movs	r3, #12
 80015ec:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 7;
 80015ee:	9501      	str	r5, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	4669      	mov	r1, sp
 80015f2:	4620      	mov	r0, r4
 80015f4:	f007 fc50 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80015f8:	230f      	movs	r3, #15
 80015fa:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 8;
 80015fc:	9701      	str	r7, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015fe:	4669      	mov	r1, sp
 8001600:	4620      	mov	r0, r4
 8001602:	f007 fc49 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001606:	2310      	movs	r3, #16
 8001608:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 9;
 800160a:	2309      	movs	r3, #9
 800160c:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800160e:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	4669      	mov	r1, sp
 8001612:	4620      	mov	r0, r4
 8001614:	f007 fc40 	bl	8008e98 <HAL_ADC_ConfigChannel>
  {
    Error_Handler();
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001618:	2311      	movs	r3, #17
 800161a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 10;
 800161c:	9601      	str	r6, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161e:	4669      	mov	r1, sp
 8001620:	4620      	mov	r0, r4
 8001622:	f007 fc39 	bl	8008e98 <HAL_ADC_ConfigChannel>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001626:	b005      	add	sp, #20
 8001628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800162c:	20005150 	.word	0x20005150
 8001630:	40012000 	.word	0x40012000
 8001634:	0f000001 	.word	0x0f000001

08001638 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800163c:	ed2d 8b02 	vpush	{d8}
 8001640:	b093      	sub	sp, #76	; 0x4c
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001642:	f000 fa7b 	bl	8001b3c <MX_USB_DEVICE_Init>

	#define DEFAULTTSKBIT00	(1 << 0)  // Task notification bit for sw timer: stackusage
	#define DEFAULTTSKBIT01	(1 << 1)  // Task notification bit for sw timer: something else

	/* A notification copies the internal notification word to this. */
	uint32_t noteval = 0;    // Receives notification word upon an API notify
 8001646:	2300      	movs	r3, #0
 8001648:	9311      	str	r3, [sp, #68]	; 0x44

	/* notification bits processed after a 'Wait. */
	uint32_t noteused = 0;

	struct SERIALSENDTASKBCB* pbuf1 = getserialbuf(&huart6,96);
 800164a:	2160      	movs	r1, #96	; 0x60
 800164c:	486b      	ldr	r0, [pc, #428]	; (80017fc <StartDefaultTask+0x1c4>)
 800164e:	f008 fa13 	bl	8009a78 <getserialbuf>
	if (pbuf1 == NULL) morse_trap(11);
 8001652:	4604      	mov	r4, r0
 8001654:	b910      	cbnz	r0, 800165c <StartDefaultTask+0x24>
 8001656:	200b      	movs	r0, #11
 8001658:	f008 fe04 	bl	800a264 <morse_trap>

	struct SERIALSENDTASKBCB* pbuf3 = getserialbuf(&huart6,96);
 800165c:	2160      	movs	r1, #96	; 0x60
 800165e:	4867      	ldr	r0, [pc, #412]	; (80017fc <StartDefaultTask+0x1c4>)
 8001660:	f008 fa0a 	bl	8009a78 <getserialbuf>
 8001664:	9010      	str	r0, [sp, #64]	; 0x40
	if (pbuf1 == NULL) morse_trap(111);
 8001666:	b914      	cbnz	r4, 800166e <StartDefaultTask+0x36>
 8001668:	206f      	movs	r0, #111	; 0x6f
 800166a:	f008 fdfb 	bl	800a264 <morse_trap>

	struct SERIALSENDTASKBCB* pbuf2 = getserialbuf(&huart6,96);
 800166e:	2160      	movs	r1, #96	; 0x60
 8001670:	4862      	ldr	r0, [pc, #392]	; (80017fc <StartDefaultTask+0x1c4>)
 8001672:	f008 fa01 	bl	8009a78 <getserialbuf>
 8001676:	900f      	str	r0, [sp, #60]	; 0x3c
	if (pbuf1 == NULL) morse_trap(12);
 8001678:	b914      	cbnz	r4, 8001680 <StartDefaultTask+0x48>
 800167a:	200c      	movs	r0, #12
 800167c:	f008 fdf2 	bl	800a264 <morse_trap>
	int ctr = 0; // Running count
	uint32_t heapsize;

	/* Test CAN msg */
	struct CANTXQMSG testtx;
	testtx.pctl = pctl1;
 8001680:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <StartDefaultTask+0x1c8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	9306      	str	r3, [sp, #24]
	testtx.can.id = 0xc2200000;
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <StartDefaultTask+0x1cc>)
 8001688:	9308      	str	r3, [sp, #32]
	testtx.can.dlc = 8;
 800168a:	2308      	movs	r3, #8
 800168c:	9309      	str	r3, [sp, #36]	; 0x24
	for (i = 0; i < 8; i++)
 800168e:	2300      	movs	r3, #0
 8001690:	e006      	b.n	80016a0 <StartDefaultTask+0x68>
		testtx.can.cd.uc[i] = 0x30 + i;
 8001692:	aa12      	add	r2, sp, #72	; 0x48
 8001694:	441a      	add	r2, r3
 8001696:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800169a:	f802 1c20 	strb.w	r1, [r2, #-32]
	/* Test CAN msg */
	struct CANTXQMSG testtx;
	testtx.pctl = pctl1;
	testtx.can.id = 0xc2200000;
	testtx.can.dlc = 8;
	for (i = 0; i < 8; i++)
 800169e:	3301      	adds	r3, #1
 80016a0:	2b07      	cmp	r3, #7
 80016a2:	ddf6      	ble.n	8001692 <StartDefaultTask+0x5a>
		testtx.can.cd.uc[i] = 0x30 + i;
	testtx.maxretryct = 8;
 80016a4:	2308      	movs	r3, #8
 80016a6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	testtx.bits = 0;
 80016aa:	2400      	movs	r4, #0
 80016ac:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31

HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15); // BLUE LED
 80016b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b4:	4854      	ldr	r0, [pc, #336]	; (8001808 <StartDefaultTask+0x1d0>)
 80016b6:	f003 fba1 	bl	8004dfc <HAL_GPIO_TogglePin>

	uint32_t dmact_prev = adcommon.dmact;
 80016ba:	4b54      	ldr	r3, [pc, #336]	; (800180c <StartDefaultTask+0x1d4>)
 80016bc:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	if (pbuf1 == NULL) morse_trap(111);

	struct SERIALSENDTASKBCB* pbuf2 = getserialbuf(&huart6,96);
	if (pbuf1 == NULL) morse_trap(12);

	int ctr = 0; // Running count
 80016be:	4627      	mov	r7, r4
extern volatile uint32_t adcdbg2;

#define LOOPDELAYTICKS ((64*8)*5)	// 5 sec Loop delay (512 Hz tick rate)
	for ( ;; )
	{
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	aa11      	add	r2, sp, #68	; 0x44
 80016c6:	2100      	movs	r1, #0
 80016c8:	4620      	mov	r0, r4
 80016ca:	f005 f8fd 	bl	80068c8 <xTaskNotifyWait>
		noteused = 0;
		if ((noteval & DEFAULTTSKBIT00) != 0)
 80016ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80016d0:	f013 0f01 	tst.w	r3, #1
 80016d4:	d058      	beq.n	8001788 <StartDefaultTask+0x150>
		{
			noteused |= DEFAULTTSKBIT00;

			/* Display the amount of unused stack space for tasks. */
			yprintf(&pbuf2,"\n\r%4i Unused Task stack space--", ctr++);
 80016d6:	1c7d      	adds	r5, r7, #1
 80016d8:	463a      	mov	r2, r7
 80016da:	494d      	ldr	r1, [pc, #308]	; (8001810 <StartDefaultTask+0x1d8>)
 80016dc:	a80f      	add	r0, sp, #60	; 0x3c
 80016de:	f008 fa1b 	bl	8009b18 <yprintf>
			stackwatermark_show(defaultTaskHandle,&pbuf2,"defaultTask--");
 80016e2:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <StartDefaultTask+0x1dc>)
 80016e4:	a90f      	add	r1, sp, #60	; 0x3c
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <StartDefaultTask+0x1e0>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f009 f97b 	bl	800a9e4 <stackwatermark_show>
			stackwatermark_show(SerialTaskHandle ,&pbuf2,"SerialTask---");
 80016ee:	4a4b      	ldr	r2, [pc, #300]	; (800181c <StartDefaultTask+0x1e4>)
 80016f0:	a90f      	add	r1, sp, #60	; 0x3c
 80016f2:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <StartDefaultTask+0x1e8>)
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	f009 f975 	bl	800a9e4 <stackwatermark_show>
			stackwatermark_show(CanTxTaskHandle  ,&pbuf2,"CanTxTask----");
 80016fa:	4a4a      	ldr	r2, [pc, #296]	; (8001824 <StartDefaultTask+0x1ec>)
 80016fc:	a90f      	add	r1, sp, #60	; 0x3c
 80016fe:	4b4a      	ldr	r3, [pc, #296]	; (8001828 <StartDefaultTask+0x1f0>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	f009 f96f 	bl	800a9e4 <stackwatermark_show>
	//		stackwatermark_show(CanRxTaskHandle  ,&pbuf2,"CanRxTask----");
			stackwatermark_show(MailboxTaskHandle,&pbuf2,"MailboxTask--");
 8001706:	4a49      	ldr	r2, [pc, #292]	; (800182c <StartDefaultTask+0x1f4>)
 8001708:	a90f      	add	r1, sp, #60	; 0x3c
 800170a:	4b49      	ldr	r3, [pc, #292]	; (8001830 <StartDefaultTask+0x1f8>)
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	f009 f969 	bl	800a9e4 <stackwatermark_show>
			stackwatermark_show(ADCTaskHandle    ,&pbuf2,"ADCTask------");
 8001712:	4a48      	ldr	r2, [pc, #288]	; (8001834 <StartDefaultTask+0x1fc>)
 8001714:	a90f      	add	r1, sp, #60	; 0x3c
 8001716:	4b48      	ldr	r3, [pc, #288]	; (8001838 <StartDefaultTask+0x200>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f009 f963 	bl	800a9e4 <stackwatermark_show>
			stackwatermark_show(SerialTaskReceiveHandle,&pbuf2,"SerialRcvTask");
 800171e:	4a47      	ldr	r2, [pc, #284]	; (800183c <StartDefaultTask+0x204>)
 8001720:	a90f      	add	r1, sp, #60	; 0x3c
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <StartDefaultTask+0x208>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	f009 f95d 	bl	800a9e4 <stackwatermark_show>

			/* Heap usage (and test fp woking. */
			heapsize = xPortGetFreeHeapSize();
 800172a:	f005 fe7f 	bl	800742c <xPortGetFreeHeapSize>
 800172e:	4604      	mov	r4, r0
			yprintf(&pbuf2,"\n\rGetFreeHeapSize: total: %i used %i %3.1f%% free: %i",configTOTAL_HEAP_SIZE, heapsize,\
				100.0*(float)heapsize/configTOTAL_HEAP_SIZE,(configTOTAL_HEAP_SIZE-heapsize));
 8001730:	ee07 0a90 	vmov	s15, r0
 8001734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001738:	ee17 0a90 	vmov	r0, s15
 800173c:	f7ff f844 	bl	80007c8 <__aeabi_f2d>
 8001740:	2200      	movs	r2, #0
 8001742:	4b40      	ldr	r3, [pc, #256]	; (8001844 <StartDefaultTask+0x20c>)
 8001744:	f7ff f894 	bl	8000870 <__aeabi_dmul>
			stackwatermark_show(ADCTaskHandle    ,&pbuf2,"ADCTask------");
			stackwatermark_show(SerialTaskReceiveHandle,&pbuf2,"SerialRcvTask");

			/* Heap usage (and test fp woking. */
			heapsize = xPortGetFreeHeapSize();
			yprintf(&pbuf2,"\n\rGetFreeHeapSize: total: %i used %i %3.1f%% free: %i",configTOTAL_HEAP_SIZE, heapsize,\
 8001748:	f5c4 5370 	rsb	r3, r4, #15360	; 0x3c00
 800174c:	9302      	str	r3, [sp, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <StartDefaultTask+0x210>)
 8001752:	f7ff f9b7 	bl	8000ac4 <__aeabi_ddiv>
 8001756:	e9cd 0100 	strd	r0, r1, [sp]
 800175a:	4623      	mov	r3, r4
 800175c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8001760:	493a      	ldr	r1, [pc, #232]	; (800184c <StartDefaultTask+0x214>)
 8001762:	a80f      	add	r0, sp, #60	; 0x3c
 8001764:	f008 f9d8 	bl	8009b18 <yprintf>
				100.0*(float)heapsize/configTOTAL_HEAP_SIZE,(configTOTAL_HEAP_SIZE-heapsize));

			/* ==== CAN MSG sending test ===== */
			/* Place test CAN msg to send on queue in a burst. */
			/* Note: an odd makes the LED flash since it toggles on each msg. */
			for (i = 0; i < 7; i++)
 8001768:	2400      	movs	r4, #0
 800176a:	e008      	b.n	800177e <StartDefaultTask+0x146>
				xQueueSendToBack(CanTxQHandle,&testtx,portMAX_DELAY);
 800176c:	2300      	movs	r3, #0
 800176e:	f04f 32ff 	mov.w	r2, #4294967295
 8001772:	a906      	add	r1, sp, #24
 8001774:	4836      	ldr	r0, [pc, #216]	; (8001850 <StartDefaultTask+0x218>)
 8001776:	6800      	ldr	r0, [r0, #0]
 8001778:	f003 ffcc 	bl	8005714 <xQueueGenericSend>
				100.0*(float)heapsize/configTOTAL_HEAP_SIZE,(configTOTAL_HEAP_SIZE-heapsize));

			/* ==== CAN MSG sending test ===== */
			/* Place test CAN msg to send on queue in a burst. */
			/* Note: an odd makes the LED flash since it toggles on each msg. */
			for (i = 0; i < 7; i++)
 800177c:	3401      	adds	r4, #1
 800177e:	2c06      	cmp	r4, #6
 8001780:	ddf4      	ble.n	800176c <StartDefaultTask+0x134>
		if ((noteval & DEFAULTTSKBIT00) != 0)
		{
			noteused |= DEFAULTTSKBIT00;

			/* Display the amount of unused stack space for tasks. */
			yprintf(&pbuf2,"\n\r%4i Unused Task stack space--", ctr++);
 8001782:	462f      	mov	r7, r5
	{
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
		noteused = 0;
		if ((noteval & DEFAULTTSKBIT00) != 0)
		{
			noteused |= DEFAULTTSKBIT00;
 8001784:	2401      	movs	r4, #1
 8001786:	e000      	b.n	800178a <StartDefaultTask+0x152>

#define LOOPDELAYTICKS ((64*8)*5)	// 5 sec Loop delay (512 Hz tick rate)
	for ( ;; )
	{
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
		noteused = 0;
 8001788:	2400      	movs	r4, #0
			/* Place test CAN msg to send on queue in a burst. */
			/* Note: an odd makes the LED flash since it toggles on each msg. */
			for (i = 0; i < 7; i++)
				xQueueSendToBack(CanTxQHandle,&testtx,portMAX_DELAY);
		}
		if ((noteval & DEFAULTTSKBIT01) != 0)
 800178a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800178c:	f013 0f02 	tst.w	r3, #2
 8001790:	d096      	beq.n	80016c0 <StartDefaultTask+0x88>
		{
			noteused |= DEFAULTTSKBIT01;
 8001792:	f044 0402 	orr.w	r4, r4, #2
		HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15); // BLUE LED
 8001796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800179a:	481b      	ldr	r0, [pc, #108]	; (8001808 <StartDefaultTask+0x1d0>)
 800179c:	f003 fb2e 	bl	8004dfc <HAL_GPIO_TogglePin>
			yprintf(&pbuf2,"\n\rADC: Vdd: %7.4f %8.4f   Temp: %6.1f  %i",adcommon.fvdd,adcommon.fvddfilt,adcommon.degC,(adcommon.dmact-dmact_prev));
 80017a0:	4d1a      	ldr	r5, [pc, #104]	; (800180c <StartDefaultTask+0x1d4>)
 80017a2:	f8d5 b010 	ldr.w	fp, [r5, #16]
 80017a6:	ed95 8a0d 	vldr	s16, [r5, #52]	; 0x34
 80017aa:	f8d5 a038 	ldr.w	sl, [r5, #56]	; 0x38
 80017ae:	68e8      	ldr	r0, [r5, #12]
 80017b0:	f7ff f80a 	bl	80007c8 <__aeabi_f2d>
 80017b4:	4680      	mov	r8, r0
 80017b6:	4689      	mov	r9, r1
 80017b8:	ebc6 060a 	rsb	r6, r6, sl
 80017bc:	9604      	str	r6, [sp, #16]
 80017be:	ee18 0a10 	vmov	r0, s16
 80017c2:	f7ff f801 	bl	80007c8 <__aeabi_f2d>
 80017c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017ca:	4658      	mov	r0, fp
 80017cc:	f7fe fffc 	bl	80007c8 <__aeabi_f2d>
 80017d0:	e9cd 0100 	strd	r0, r1, [sp]
 80017d4:	4642      	mov	r2, r8
 80017d6:	464b      	mov	r3, r9
 80017d8:	491e      	ldr	r1, [pc, #120]	; (8001854 <StartDefaultTask+0x21c>)
 80017da:	a80f      	add	r0, sp, #60	; 0x3c
 80017dc:	f008 f99c 	bl	8009b18 <yprintf>
			dmact_prev = adcommon.dmact;
 80017e0:	6bae      	ldr	r6, [r5, #56]	; 0x38

			yprintf(&pbuf3,"\n\r C:   %d %d %d",adc1data.adcs1sum[ADC1IDX_INTERNALVREF]/ADC1DMANUMSEQ, adcommon.ivdd,adcdbg2);	
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <StartDefaultTask+0x220>)
 80017e4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80017e6:	8aab      	ldrh	r3, [r5, #20]
 80017e8:	491c      	ldr	r1, [pc, #112]	; (800185c <StartDefaultTask+0x224>)
 80017ea:	6809      	ldr	r1, [r1, #0]
 80017ec:	9100      	str	r1, [sp, #0]
 80017ee:	0912      	lsrs	r2, r2, #4
 80017f0:	491b      	ldr	r1, [pc, #108]	; (8001860 <StartDefaultTask+0x228>)
 80017f2:	a810      	add	r0, sp, #64	; 0x40
 80017f4:	f008 f990 	bl	8009b18 <yprintf>
 80017f8:	e762      	b.n	80016c0 <StartDefaultTask+0x88>
 80017fa:	bf00      	nop
 80017fc:	20005290 	.word	0x20005290
 8001800:	20005198 	.word	0x20005198
 8001804:	c2200000 	.word	0xc2200000
 8001808:	40020c00 	.word	0x40020c00
 800180c:	20006e90 	.word	0x20006e90
 8001810:	0800ebb4 	.word	0x0800ebb4
 8001814:	0800ebd4 	.word	0x0800ebd4
 8001818:	20005010 	.word	0x20005010
 800181c:	0800ebe4 	.word	0x0800ebe4
 8001820:	20004d04 	.word	0x20004d04
 8001824:	0800ebf4 	.word	0x0800ebf4
 8001828:	20006c3c 	.word	0x20006c3c
 800182c:	0800ec04 	.word	0x0800ec04
 8001830:	20006c48 	.word	0x20006c48
 8001834:	0800ec14 	.word	0x0800ec14
 8001838:	20006cb0 	.word	0x20006cb0
 800183c:	0800ec24 	.word	0x0800ec24
 8001840:	20004fa4 	.word	0x20004fa4
 8001844:	40590000 	.word	0x40590000
 8001848:	40ce0000 	.word	0x40ce0000
 800184c:	0800ec34 	.word	0x0800ec34
 8001850:	20006c30 	.word	0x20006c30
 8001854:	0800ec6c 	.word	0x0800ec6c
 8001858:	20006e50 	.word	0x20006e50
 800185c:	20006e48 	.word	0x20006e48
 8001860:	0800ec98 	.word	0x0800ec98

08001864 <CallbackdefaultTaskTimer>:
  /* USER CODE END 5 */ 
}

/* CallbackdefaultTaskTimer function */
void CallbackdefaultTaskTimer(void const * argument)
{
 8001864:	b500      	push	{lr}
 8001866:	b085      	sub	sp, #20
  /* USER CODE BEGIN CallbackdefaultTaskTimer */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001868:	2300      	movs	r3, #0
 800186a:	aa04      	add	r2, sp, #16
 800186c:	f842 3d04 	str.w	r3, [r2, #-4]!
	xTaskNotifyFromISR(defaultTaskHandle, 
 8001870:	4904      	ldr	r1, [pc, #16]	; (8001884 <CallbackdefaultTaskTimer+0x20>)
 8001872:	6808      	ldr	r0, [r1, #0]
 8001874:	9200      	str	r2, [sp, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	4611      	mov	r1, r2
 800187a:	f005 f8e3 	bl	8006a44 <xTaskGenericNotifyFromISR>
		DEFAULTTSKBIT00,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken ); 

  /* USER CODE END CallbackdefaultTaskTimer */
}
 800187e:	b005      	add	sp, #20
 8001880:	f85d fb04 	ldr.w	pc, [sp], #4
 8001884:	20005010 	.word	0x20005010

08001888 <CallbackdefaultTaskTimer01>:

/* CallbackdefaultTaskTimer01 function */
void CallbackdefaultTaskTimer01(void const * argument)
{
 8001888:	b500      	push	{lr}
 800188a:	b085      	sub	sp, #20
  /* USER CODE BEGIN CallbackdefaultTaskTimer01 */
  	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800188c:	2300      	movs	r3, #0
 800188e:	aa04      	add	r2, sp, #16
 8001890:	f842 3d04 	str.w	r3, [r2, #-4]!
	xTaskNotifyFromISR(defaultTaskHandle, 
 8001894:	4904      	ldr	r1, [pc, #16]	; (80018a8 <CallbackdefaultTaskTimer01+0x20>)
 8001896:	6808      	ldr	r0, [r1, #0]
 8001898:	9200      	str	r2, [sp, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	2102      	movs	r1, #2
 800189e:	f005 f8d1 	bl	8006a44 <xTaskGenericNotifyFromISR>
		DEFAULTTSKBIT01,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken ); 
  /* USER CODE END CallbackdefaultTaskTimer01 */
}
 80018a2:	b005      	add	sp, #20
 80018a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80018a8:	20005010 	.word	0x20005010

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b530      	push	{r4, r5, lr}
 80018ae:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b0:	2230      	movs	r2, #48	; 0x30
 80018b2:	2100      	movs	r1, #0
 80018b4:	a808      	add	r0, sp, #32
 80018b6:	f009 fd67 	bl	800b388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ba:	2400      	movs	r4, #0
 80018bc:	9403      	str	r4, [sp, #12]
 80018be:	9404      	str	r4, [sp, #16]
 80018c0:	9405      	str	r4, [sp, #20]
 80018c2:	9406      	str	r4, [sp, #24]
 80018c4:	9407      	str	r4, [sp, #28]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	9401      	str	r4, [sp, #4]
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <SystemClock_Config+0x90>)
 80018ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018dc:	9402      	str	r4, [sp, #8]
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <SystemClock_Config+0x94>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f2:	2301      	movs	r3, #1
 80018f4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fc:	2502      	movs	r5, #2
 80018fe:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001904:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001906:	2308      	movs	r3, #8
 8001908:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800190a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800190e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001912:	2307      	movs	r3, #7
 8001914:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001916:	a808      	add	r0, sp, #32
 8001918:	f002 fe50 	bl	80045bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191c:	230f      	movs	r3, #15
 800191e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001920:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001922:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001924:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001928:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001930:	2105      	movs	r1, #5
 8001932:	a803      	add	r0, sp, #12
 8001934:	f003 f888 	bl	8004a48 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001938:	b015      	add	sp, #84	; 0x54
 800193a:	bd30      	pop	{r4, r5, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	b08e      	sub	sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001948:	f003 fcca 	bl	80052e0 <HAL_Init>

  /* USER CODE BEGIN Init */
	DTW_counter_init();
 800194c:	f007 fdb4 	bl	80094b8 <DTW_counter_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001950:	f7ff ffac 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001954:	f7ff fcfe 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8001958:	f7ff fd50 	bl	80013fc <MX_DMA_Init>
  MX_USART6_UART_Init();
 800195c:	f7ff fd92 	bl	8001484 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8001960:	f7ff fda6 	bl	80014b0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001964:	f7ff fdbc 	bl	80014e0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001968:	f7ff fdd4 	bl	8001514 <MX_CAN2_Init>
  MX_ADC1_Init();
 800196c:	f7ff fdec 	bl	8001548 <MX_ADC1_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of defaultTaskTimer */
  osTimerDef(defaultTaskTimer, CallbackdefaultTaskTimer);
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <main+0x17c>)
 8001972:	930c      	str	r3, [sp, #48]	; 0x30
 8001974:	2400      	movs	r4, #0
 8001976:	940d      	str	r4, [sp, #52]	; 0x34
  defaultTaskTimerHandle = osTimerCreate(osTimer(defaultTaskTimer), osTimerPeriodic, NULL);
 8001978:	4622      	mov	r2, r4
 800197a:	2101      	movs	r1, #1
 800197c:	a80c      	add	r0, sp, #48	; 0x30
 800197e:	f005 fba9 	bl	80070d4 <osTimerCreate>
 8001982:	4e50      	ldr	r6, [pc, #320]	; (8001ac4 <main+0x180>)
 8001984:	6030      	str	r0, [r6, #0]

  /* definition and creation of defautTaskTimer01 */
  osTimerDef(defautTaskTimer01, CallbackdefaultTaskTimer01);
 8001986:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <main+0x184>)
 8001988:	930a      	str	r3, [sp, #40]	; 0x28
 800198a:	940b      	str	r4, [sp, #44]	; 0x2c
  defautTaskTimer01Handle = osTimerCreate(osTimer(defautTaskTimer01), osTimerPeriodic, NULL);
 800198c:	4622      	mov	r2, r4
 800198e:	2101      	movs	r1, #1
 8001990:	a80a      	add	r0, sp, #40	; 0x28
 8001992:	f005 fb9f 	bl	80070d4 <osTimerCreate>
 8001996:	4d4d      	ldr	r5, [pc, #308]	; (8001acc <main+0x188>)
 8001998:	6028      	str	r0, [r5, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

	/* defaultTask timer for pacing display of stack usages. */
	ret = xTimerChangePeriod( defaultTaskTimerHandle  ,pdMS_TO_TICKS(5000),0);
 800199a:	6830      	ldr	r0, [r6, #0]
 800199c:	9400      	str	r4, [sp, #0]
 800199e:	4623      	mov	r3, r4
 80019a0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80019a4:	2104      	movs	r1, #4
 80019a6:	f005 f9e5 	bl	8006d74 <xTimerGenericCommand>
	/* defaultTask timer for pacing ADC monitoring. */
	ret = xTimerChangePeriod( defautTaskTimer01Handle,pdMS_TO_TICKS(1000),0);
 80019aa:	6828      	ldr	r0, [r5, #0]
 80019ac:	9400      	str	r4, [sp, #0]
 80019ae:	4623      	mov	r3, r4
 80019b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b4:	2104      	movs	r1, #4
 80019b6:	f005 f9dd 	bl	8006d74 <xTimerGenericCommand>

  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 384);
 80019ba:	ad03      	add	r5, sp, #12
 80019bc:	4e44      	ldr	r6, [pc, #272]	; (8001ad0 <main+0x18c>)
 80019be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80019c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80019ca:	4621      	mov	r1, r4
 80019cc:	a803      	add	r0, sp, #12
 80019ce:	f005 fb43 	bl	8007058 <osThreadCreate>
 80019d2:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <main+0x190>)
 80019d4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
/* =================================================== */
	/* Create serial task (priority) */
	// Task handle "osThreadId SerialTaskHandle" is global
	xSerialTaskSendCreate(0);	// Create task and set Task priority
 80019d6:	4620      	mov	r0, r4
 80019d8:	f007 fba6 	bl	8009128 <xSerialTaskSendCreate>

	/* Add bcb circular buffer to SerialTaskSend for usart6 */
	#define NUMCIRBCB6  16 // Size of circular buffer of BCB for usart6
	ret = xSerialTaskSendAdd(&huart6, NUMCIRBCB6, 0); // char-by-char
 80019dc:	4622      	mov	r2, r4
 80019de:	2110      	movs	r1, #16
 80019e0:	483d      	ldr	r0, [pc, #244]	; (8001ad8 <main+0x194>)
 80019e2:	f007 fb6b 	bl	80090bc <xSerialTaskSendAdd>
	if (ret < 0) morse_trap(1); // Panic LED flashing
 80019e6:	42a0      	cmp	r0, r4
 80019e8:	da02      	bge.n	80019f0 <main+0xac>
 80019ea:	2001      	movs	r0, #1
 80019ec:	f008 fc3a 	bl	800a264 <morse_trap>

	/* Add bcb circular buffer to SerialTaskSend for usart2 */
	#define NUMCIRBCB2  12 // Size of circular buffer of BCB for usart2
	ret = xSerialTaskSendAdd(&huart2, NUMCIRBCB2, 1); // dma
 80019f0:	2201      	movs	r2, #1
 80019f2:	210c      	movs	r1, #12
 80019f4:	4839      	ldr	r0, [pc, #228]	; (8001adc <main+0x198>)
 80019f6:	f007 fb61 	bl	80090bc <xSerialTaskSendAdd>
	if (ret < 0) morse_trap(2); // Panic LED flashing
 80019fa:	2800      	cmp	r0, #0
 80019fc:	da02      	bge.n	8001a04 <main+0xc0>
 80019fe:	2002      	movs	r0, #2
 8001a00:	f008 fc30 	bl	800a264 <morse_trap>

	/* Setup semaphore for yprint and sprintf et al. */
	yprintf_init();
 8001a04:	f008 f86a 	bl	8009adc <yprintf_init>

	/* Create serial receiving task of uart6 (char-by-char) */
	xSerialTaskReceiveCreate(0);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f008 fa3f 	bl	8009e8c <xSerialTaskReceiveCreate>

	/* USB-CDC buffering */
	#define NUMCDCBUFF 3	// Number of CDC task local buffers
	#define CDCBUFFSIZE 64*16	// Best buff size is multiples of usb packet size
	struct CDCBUFFPTR* pret;
	pret = cdc_txbuff_init(NUMCDCBUFF, CDCBUFFSIZE); // Setup local buffers
 8001a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a12:	2003      	movs	r0, #3
 8001a14:	f007 fc9a 	bl	800934c <cdc_txbuff_init>
	if (pret == NULL) morse_trap(3);
 8001a18:	b910      	cbnz	r0, 8001a20 <main+0xdc>
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f008 fc22 	bl	800a264 <morse_trap>
	
	/* USB-CDC queue and task creation */
	Qidret = xCdcTxTaskSendCreate(3);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f007 fc57 	bl	80092d4 <xCdcTxTaskSendCreate>
	if (Qidret < 0) morse_trap(4); // Maybe add panic led flashing here

  /* definition and creation of CanTxTask - CAN driver TX interface. */
  Qidret = xCanTxTaskCreate(0, 32); // CanTask priority, Number of msgs in queue
 8001a26:	2120      	movs	r1, #32
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f007 fd7d 	bl	8009528 <xCanTxTaskCreate>
//  Qidret = xCanRxTaskCreate(1, 32); // CanTask priority, Number of msgs in queue
//	if (Qidret < 0) morse_trap(6); // Panic LED flashing

	/* Setup TX linked list for CAN  */
   // CAN1 (CAN_HandleTypeDef *phcan, uint8_t canidx, uint16_t numtx, uint16_t numrx);
	pctl1 = can_iface_init(&hcan1, 1, 32, 64);
 8001a2e:	2340      	movs	r3, #64	; 0x40
 8001a30:	2220      	movs	r2, #32
 8001a32:	2101      	movs	r1, #1
 8001a34:	482a      	ldr	r0, [pc, #168]	; (8001ae0 <main+0x19c>)
 8001a36:	f007 fe31 	bl	800969c <can_iface_init>
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <main+0x1a0>)
 8001a3c:	6018      	str	r0, [r3, #0]
	if (pctl1 == NULL) morse_trap(7); // Panic LED flashing
 8001a3e:	b910      	cbnz	r0, 8001a46 <main+0x102>
 8001a40:	2007      	movs	r0, #7
 8001a42:	f008 fc0f 	bl	800a264 <morse_trap>
	if (pctl1->ret < 0) morse_trap(77);
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <main+0x1a0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f993 30b0 	ldrsb.w	r3, [r3, #176]	; 0xb0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da02      	bge.n	8001a58 <main+0x114>
 8001a52:	204d      	movs	r0, #77	; 0x4d
 8001a54:	f008 fc06 	bl	800a264 <morse_trap>

	// CAN 2
	pctl2 = can_iface_init(&hcan2, 2, 8, 16);
 8001a58:	2310      	movs	r3, #16
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4822      	ldr	r0, [pc, #136]	; (8001ae8 <main+0x1a4>)
 8001a60:	f007 fe1c 	bl	800969c <can_iface_init>
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <main+0x1a8>)
 8001a66:	6018      	str	r0, [r3, #0]
	if (pctl2 == NULL) morse_trap(8); // Panic LED flashing
 8001a68:	b910      	cbnz	r0, 8001a70 <main+0x12c>
 8001a6a:	2008      	movs	r0, #8
 8001a6c:	f008 fbfa 	bl	800a264 <morse_trap>

	/* Setup CAN hardware filters to default to accept all ids. */
	HAL_StatusTypeDef Cret;
	Cret = canfilter_setup_first(1, &hcan1, 15); // CAN1
 8001a70:	220f      	movs	r2, #15
 8001a72:	491b      	ldr	r1, [pc, #108]	; (8001ae0 <main+0x19c>)
 8001a74:	2001      	movs	r0, #1
 8001a76:	f007 ffcf 	bl	8009a18 <canfilter_setup_first>
	if (Cret == HAL_ERROR) morse_trap(9);
 8001a7a:	2801      	cmp	r0, #1
 8001a7c:	d102      	bne.n	8001a84 <main+0x140>
 8001a7e:	2009      	movs	r0, #9
 8001a80:	f008 fbf0 	bl	800a264 <morse_trap>

	/* Remove "accept all" CAN msgs and add specific id & mask, or id here. */
	// See canfilter_setup.h

	/* Create MailboxTask */
	xMailboxTaskCreate(1);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f008 fd7d 	bl	800a584 <xMailboxTaskCreate>

	/* Create GatewayTask */
	xGatewayTaskCreate(0);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f008 fe4c 	bl	800a728 <xGatewayTaskCreate>

	/* Create Mailbox control block w 'take' pointer for each CAN module. */
	struct MAILBOXCANNUM* pmbxret;
	// (CAN1 control block pointer, size of circular buffer)
	pmbxret = MailboxTask_add_CANlist(pctl1, 48);
 8001a90:	2130      	movs	r1, #48	; 0x30
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <main+0x1a0>)
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	f008 fd23 	bl	800a4e0 <MailboxTask_add_CANlist>
	if (pmbxret == NULL) morse_trap(16);
 8001a9a:	b910      	cbnz	r0, 8001aa2 <main+0x15e>
 8001a9c:	2010      	movs	r0, #16
 8001a9e:	f008 fbe1 	bl	800a264 <morse_trap>
//	if (pmbxret == NULL) morse_trap(17);

	/* Further initialization of mailboxes takes place when tasks start */

	/* Select interrupts for CAN1 */
	HAL_CAN_ActivateNotification(&hcan1, \
 8001aa2:	4c0f      	ldr	r4, [pc, #60]	; (8001ae0 <main+0x19c>)
 8001aa4:	2113      	movs	r1, #19
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f006 fe5a 	bl	8008760 <HAL_CAN_ActivateNotification>
		CAN_IT_TX_MAILBOX_EMPTY     |  \
		CAN_IT_RX_FIFO0_MSG_PENDING |  \
		CAN_IT_RX_FIFO1_MSG_PENDING    );

	/* Start CANs */
	HAL_CAN_Start(&hcan1); // CAN1
 8001aac:	4620      	mov	r0, r4
 8001aae:	f006 fce3 	bl	8008478 <HAL_CAN_Start>
//	HAL_CAN_Start(&hcan2); // CAN2

	/* ADC summing, calibration, etc. */
	xADCTaskCreate(2);
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f008 ff12 	bl	800a8dc <xADCTaskCreate>

  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8001ab8:	f005 fac8 	bl	800704c <osKernelStart>
 8001abc:	e7fe      	b.n	8001abc <main+0x178>
 8001abe:	bf00      	nop
 8001ac0:	08001865 	.word	0x08001865
 8001ac4:	200050e8 	.word	0x200050e8
 8001ac8:	08001889 	.word	0x08001889
 8001acc:	200050e0 	.word	0x200050e0
 8001ad0:	0800eae0 	.word	0x0800eae0
 8001ad4:	20005010 	.word	0x20005010
 8001ad8:	20005290 	.word	0x20005290
 8001adc:	200052f0 	.word	0x200052f0
 8001ae0:	20005330 	.word	0x20005330
 8001ae4:	20005198 	.word	0x20005198
 8001ae8:	2000519c 	.word	0x2000519c
 8001aec:	20005288 	.word	0x20005288

08001af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001af2:	6802      	ldr	r2, [r0, #0]
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8001afa:	f003 fc0b 	bl	8005314 <HAL_IncTick>
 8001afe:	bd08      	pop	{r3, pc}
 8001b00:	40000c00 	.word	0x40000c00

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop

08001b0c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <vApplicationGetIdleTaskMemory+0x10>)
 8001b0e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <vApplicationGetIdleTaskMemory+0x14>)
 8001b12:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000e24 	.word	0x20000e24
 8001b20:	20000b24 	.word	0x20000b24

08001b24 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <vApplicationGetTimerTaskMemory+0x10>)
 8001b26:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <vApplicationGetTimerTaskMemory+0x14>)
 8001b2a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000e78 	.word	0x20000e78
 8001b38:	20000c24 	.word	0x20000c24

08001b3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001b3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8001b3e:	4c09      	ldr	r4, [pc, #36]	; (8001b64 <MX_USB_DEVICE_Init+0x28>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	4909      	ldr	r1, [pc, #36]	; (8001b68 <MX_USB_DEVICE_Init+0x2c>)
 8001b44:	4620      	mov	r0, r4
 8001b46:	f005 fe0f 	bl	8007768 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <MX_USB_DEVICE_Init+0x30>)
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f005 fe23 	bl	8007798 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8001b52:	4907      	ldr	r1, [pc, #28]	; (8001b70 <MX_USB_DEVICE_Init+0x34>)
 8001b54:	4620      	mov	r0, r4
 8001b56:	f006 fb07 	bl	8008168 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f005 fe24 	bl	80077a8 <USBD_Start>
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	bf00      	nop
 8001b64:	2000535c 	.word	0x2000535c
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000094 	.word	0x20000094
 8001b70:	20000034 	.word	0x20000034

08001b74 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8001b74:	6803      	ldr	r3, [r0, #0]
 8001b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b7a:	d129      	bne.n	8001bd0 <HAL_PCD_MspInit+0x5c>
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	b086      	sub	sp, #24
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b84:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2400      	movs	r4, #0
 8001b8c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b92:	230a      	movs	r3, #10
 8001b94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	a901      	add	r1, sp, #4
 8001b98:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <HAL_PCD_MspInit+0x60>)
 8001b9a:	f003 f849 	bl	8004c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_PCD_MspInit+0x64>)
 8001ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba8:	9400      	str	r4, [sp, #0]
 8001baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	9b00      	ldr	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	2105      	movs	r1, #5
 8001bc0:	2043      	movs	r0, #67	; 0x43
 8001bc2:	f003 fb4f 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001bc6:	2043      	movs	r0, #67	; 0x43
 8001bc8:	f003 fb7e 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001bcc:	b006      	add	sp, #24
 8001bce:	bd10      	pop	{r4, pc}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001bdc:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001bde:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8001be2:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001be6:	f005 fdfb 	bl	80077e0 <USBD_LL_SetupStage>
 8001bea:	bd08      	pop	{r3, pc}

08001bec <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001bec:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001bee:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001bf2:	0093      	lsls	r3, r2, #2
 8001bf4:	4403      	add	r3, r0
 8001bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bfa:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001bfe:	f005 fe1d 	bl	800783c <USBD_LL_DataOutStage>
 8001c02:	bd08      	pop	{r3, pc}

08001c04 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001c04:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001c06:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001c0a:	0093      	lsls	r3, r2, #2
 8001c0c:	4403      	add	r3, r0
 8001c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c10:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001c14:	f005 fe46 	bl	80078a4 <USBD_LL_DataInStage>
 8001c18:	bd08      	pop	{r3, pc}
 8001c1a:	bf00      	nop

08001c1c <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001c1c:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001c1e:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001c22:	f005 fec9 	bl	80079b8 <USBD_LL_SOF>
 8001c26:	bd08      	pop	{r3, pc}

08001c28 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8001c2c:	68c3      	ldr	r3, [r0, #12]
 8001c2e:	b90b      	cbnz	r3, 8001c34 <HAL_PCD_ResetCallback+0xc>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8001c30:	2100      	movs	r1, #0
 8001c32:	e000      	b.n	8001c36 <HAL_PCD_ResetCallback+0xe>
    break;
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8001c34:	2101      	movs	r1, #1
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001c36:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
 8001c3a:	f005 fea9 	bl	8007990 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001c3e:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
 8001c42:	f005 fe85 	bl	8007950 <USBD_LL_Reset>
 8001c46:	bd10      	pop	{r4, pc}

08001c48 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001c4c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001c50:	f005 fea2 	bl	8007998 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001c62:	6a23      	ldr	r3, [r4, #32]
 8001c64:	b123      	cbz	r3, 8001c70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001c66:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <HAL_PCD_SuspendCallback+0x2c>)
 8001c68:	6913      	ldr	r3, [r2, #16]
 8001c6a:	f043 0306 	orr.w	r3, r3, #6
 8001c6e:	6113      	str	r3, [r2, #16]
 8001c70:	bd10      	pop	{r4, pc}
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001c78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001c7a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001c7e:	f005 fe95 	bl	80079ac <USBD_LL_Resume>
 8001c82:	bd08      	pop	{r3, pc}

08001c84 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001c84:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001c86:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001c8a:	f005 fea3 	bl	80079d4 <USBD_LL_IsoOUTIncomplete>
 8001c8e:	bd08      	pop	{r3, pc}

08001c90 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001c90:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001c92:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001c96:	f005 fe9b 	bl	80079d0 <USBD_LL_IsoINIncomplete>
 8001c9a:	bd08      	pop	{r3, pc}

08001c9c <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001c9c:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001c9e:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001ca2:	f005 fe99 	bl	80079d8 <USBD_LL_DevConnected>
 8001ca6:	bd08      	pop	{r3, pc}

08001ca8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001ca8:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001caa:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8001cae:	f005 fe95 	bl	80079dc <USBD_LL_DevDisconnected>
 8001cb2:	bd08      	pop	{r3, pc}

08001cb4 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8001cb4:	7803      	ldrb	r3, [r0, #0]
 8001cb6:	bb63      	cbnz	r3, 8001d12 <USBD_LL_Init+0x5e>
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	4603      	mov	r3, r0
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001cbc:	4816      	ldr	r0, [pc, #88]	; (8001d18 <USBD_LL_Init+0x64>)
 8001cbe:	f8c0 33ec 	str.w	r3, [r0, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 8001cc2:	f8c3 0220 	str.w	r0, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001cc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cca:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8001cd8:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cda:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001cdc:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001cde:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ce0:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001ce2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ce4:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ce6:	f000 fcbb 	bl	8002660 <HAL_PCD_Init>
 8001cea:	b108      	cbz	r0, 8001cf0 <USBD_LL_Init+0x3c>
  {
    Error_Handler( );
 8001cec:	f7ff ff0a 	bl	8001b04 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8001cf0:	4c09      	ldr	r4, [pc, #36]	; (8001d18 <USBD_LL_Init+0x64>)
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f001 f94b 	bl	8002f90 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001cfa:	2240      	movs	r2, #64	; 0x40
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f001 f922 	bl	8002f48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	2101      	movs	r1, #1
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f001 f91d 	bl	8002f48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8001d0e:	2000      	movs	r0, #0
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	2000      	movs	r0, #0
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20005580 	.word	0x20005580

08001d1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001d1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8001d1e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001d22:	f000 fd0f 	bl	8002744 <HAL_PCD_Start>
     
  switch (hal_status) {
 8001d26:	b110      	cbz	r0, 8001d2e <USBD_LL_Start+0x12>
 8001d28:	2802      	cmp	r0, #2
 8001d2a:	d002      	beq.n	8001d32 <USBD_LL_Start+0x16>
 8001d2c:	e003      	b.n	8001d36 <USBD_LL_Start+0x1a>
    case HAL_OK :
      usb_status = USBD_OK;
 8001d2e:	2000      	movs	r0, #0
 8001d30:	bd08      	pop	{r3, pc}
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001d32:	2001      	movs	r0, #1
    break;
 8001d34:	bd08      	pop	{r3, pc}
  switch (hal_status) {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001d36:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8001d38:	bd08      	pop	{r3, pc}
 8001d3a:	bf00      	nop

08001d3c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001d40:	4613      	mov	r3, r2
 8001d42:	4622      	mov	r2, r4
 8001d44:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001d48:	f000 ffe2 	bl	8002d10 <HAL_PCD_EP_Open>

  switch (hal_status) {
 8001d4c:	b110      	cbz	r0, 8001d54 <USBD_LL_OpenEP+0x18>
 8001d4e:	2802      	cmp	r0, #2
 8001d50:	d002      	beq.n	8001d58 <USBD_LL_OpenEP+0x1c>
 8001d52:	e003      	b.n	8001d5c <USBD_LL_OpenEP+0x20>
    case HAL_OK :
      usb_status = USBD_OK;
 8001d54:	2000      	movs	r0, #0
 8001d56:	bd10      	pop	{r4, pc}
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001d58:	2001      	movs	r0, #1
    break;
 8001d5a:	bd10      	pop	{r4, pc}
  switch (hal_status) {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001d5c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8001d5e:	bd10      	pop	{r4, pc}

08001d60 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001d60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001d62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001d66:	f001 f807 	bl	8002d78 <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8001d6a:	b110      	cbz	r0, 8001d72 <USBD_LL_CloseEP+0x12>
 8001d6c:	2802      	cmp	r0, #2
 8001d6e:	d002      	beq.n	8001d76 <USBD_LL_CloseEP+0x16>
 8001d70:	e003      	b.n	8001d7a <USBD_LL_CloseEP+0x1a>
    case HAL_OK :
      usb_status = USBD_OK;
 8001d72:	2000      	movs	r0, #0
 8001d74:	bd08      	pop	{r3, pc}
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001d76:	2001      	movs	r0, #1
    break;
 8001d78:	bd08      	pop	{r3, pc}
  switch (hal_status) {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001d7a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8001d7c:	bd08      	pop	{r3, pc}
 8001d7e:	bf00      	nop

08001d80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001d80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001d82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001d86:	f001 f881 	bl	8002e8c <HAL_PCD_EP_SetStall>

  switch (hal_status) {
 8001d8a:	b110      	cbz	r0, 8001d92 <USBD_LL_StallEP+0x12>
 8001d8c:	2802      	cmp	r0, #2
 8001d8e:	d002      	beq.n	8001d96 <USBD_LL_StallEP+0x16>
 8001d90:	e003      	b.n	8001d9a <USBD_LL_StallEP+0x1a>
    case HAL_OK :
      usb_status = USBD_OK;
 8001d92:	2000      	movs	r0, #0
 8001d94:	bd08      	pop	{r3, pc}
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001d96:	2001      	movs	r0, #1
    break;
 8001d98:	bd08      	pop	{r3, pc}
  switch (hal_status) {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001d9a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8001d9c:	bd08      	pop	{r3, pc}
 8001d9e:	bf00      	nop

08001da0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001da0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8001da2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001da6:	f001 f8a3 	bl	8002ef0 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8001daa:	b110      	cbz	r0, 8001db2 <USBD_LL_ClearStallEP+0x12>
 8001dac:	2802      	cmp	r0, #2
 8001dae:	d002      	beq.n	8001db6 <USBD_LL_ClearStallEP+0x16>
 8001db0:	e003      	b.n	8001dba <USBD_LL_ClearStallEP+0x1a>
    case HAL_OK :
      usb_status = USBD_OK;
 8001db2:	2000      	movs	r0, #0
 8001db4:	bd08      	pop	{r3, pc}
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001db6:	2001      	movs	r0, #1
    break;
 8001db8:	bd08      	pop	{r3, pc}
  switch (hal_status) {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001dba:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8001dbc:	bd08      	pop	{r3, pc}
 8001dbe:	bf00      	nop

08001dc0 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001dc0:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 8001dc4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001dc8:	d008      	beq.n	8001ddc <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001dca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001dce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001dd2:	008b      	lsls	r3, r1, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 8001dda:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001ddc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001de0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001de4:	008b      	lsls	r3, r1, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	f893 01fa 	ldrb.w	r0, [r3, #506]	; 0x1fa
  }
}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001df0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001df2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001df6:	f000 ff79 	bl	8002cec <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8001dfa:	b110      	cbz	r0, 8001e02 <USBD_LL_SetUSBAddress+0x12>
 8001dfc:	2802      	cmp	r0, #2
 8001dfe:	d002      	beq.n	8001e06 <USBD_LL_SetUSBAddress+0x16>
 8001e00:	e003      	b.n	8001e0a <USBD_LL_SetUSBAddress+0x1a>
    case HAL_OK :
      usb_status = USBD_OK;
 8001e02:	2000      	movs	r0, #0
 8001e04:	bd08      	pop	{r3, pc}
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001e06:	2001      	movs	r0, #1
    break;
 8001e08:	bd08      	pop	{r3, pc}
  switch (hal_status) {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001e0a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8001e0c:	bd08      	pop	{r3, pc}
 8001e0e:	bf00      	nop

08001e10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8001e10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001e12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001e16:	f001 f811 	bl	8002e3c <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8001e1a:	b110      	cbz	r0, 8001e22 <USBD_LL_Transmit+0x12>
 8001e1c:	2802      	cmp	r0, #2
 8001e1e:	d002      	beq.n	8001e26 <USBD_LL_Transmit+0x16>
 8001e20:	e003      	b.n	8001e2a <USBD_LL_Transmit+0x1a>
    case HAL_OK :
      usb_status = USBD_OK;
 8001e22:	2000      	movs	r0, #0
 8001e24:	bd08      	pop	{r3, pc}
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001e26:	2001      	movs	r0, #1
    break;
 8001e28:	bd08      	pop	{r3, pc}
  switch (hal_status) {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001e2a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8001e2c:	bd08      	pop	{r3, pc}
 8001e2e:	bf00      	nop

08001e30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8001e30:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001e32:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001e36:	f000 ffcb 	bl	8002dd0 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8001e3a:	b110      	cbz	r0, 8001e42 <USBD_LL_PrepareReceive+0x12>
 8001e3c:	2802      	cmp	r0, #2
 8001e3e:	d002      	beq.n	8001e46 <USBD_LL_PrepareReceive+0x16>
 8001e40:	e003      	b.n	8001e4a <USBD_LL_PrepareReceive+0x1a>
    case HAL_OK :
      usb_status = USBD_OK;
 8001e42:	2000      	movs	r0, #0
 8001e44:	bd08      	pop	{r3, pc}
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001e46:	2001      	movs	r0, #1
    break;
 8001e48:	bd08      	pop	{r3, pc}
  switch (hal_status) {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001e4a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8001e4c:	bd08      	pop	{r3, pc}
 8001e4e:	bf00      	nop

08001e50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001e50:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001e52:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8001e56:	f000 ffe7 	bl	8002e28 <HAL_PCD_EP_GetRxCount>
}
 8001e5a:	bd08      	pop	{r3, pc}

08001e5c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8001e5c:	2312      	movs	r3, #18
 8001e5e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8001e60:	4800      	ldr	r0, [pc, #0]	; (8001e64 <USBD_FS_DeviceDescriptor+0x8>)
 8001e62:	4770      	bx	lr
 8001e64:	20000020 	.word	0x20000020

08001e68 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8001e68:	2304      	movs	r3, #4
 8001e6a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8001e6c:	4800      	ldr	r0, [pc, #0]	; (8001e70 <USBD_FS_LangIDStrDescriptor+0x8>)
 8001e6e:	4770      	bx	lr
 8001e70:	2000001c 	.word	0x2000001c

08001e74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001e74:	b508      	push	{r3, lr}
 8001e76:	460a      	mov	r2, r1
  if(speed == 0)
 8001e78:	b920      	cbnz	r0, 8001e84 <USBD_FS_ProductStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001e7a:	4905      	ldr	r1, [pc, #20]	; (8001e90 <USBD_FS_ProductStrDescriptor+0x1c>)
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <USBD_FS_ProductStrDescriptor+0x20>)
 8001e7e:	f006 f81d 	bl	8007ebc <USBD_GetString>
 8001e82:	e003      	b.n	8001e8c <USBD_FS_ProductStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001e84:	4902      	ldr	r1, [pc, #8]	; (8001e90 <USBD_FS_ProductStrDescriptor+0x1c>)
 8001e86:	4803      	ldr	r0, [pc, #12]	; (8001e94 <USBD_FS_ProductStrDescriptor+0x20>)
 8001e88:	f006 f818 	bl	8007ebc <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8001e8c:	4800      	ldr	r0, [pc, #0]	; (8001e90 <USBD_FS_ProductStrDescriptor+0x1c>)
 8001e8e:	bd08      	pop	{r3, pc}
 8001e90:	20005970 	.word	0x20005970
 8001e94:	0800ecb8 	.word	0x0800ecb8

08001e98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001e98:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001e9a:	4c04      	ldr	r4, [pc, #16]	; (8001eac <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8001ea2:	f006 f80b 	bl	8007ebc <USBD_GetString>
  return USBD_StrDesc;
}
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	bd10      	pop	{r4, pc}
 8001eaa:	bf00      	nop
 8001eac:	20005970 	.word	0x20005970
 8001eb0:	0800ecd0 	.word	0x0800ecd0

08001eb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001eb4:	b508      	push	{r3, lr}
 8001eb6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8001eb8:	b920      	cbnz	r0, 8001ec4 <USBD_FS_SerialStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8001eba:	4905      	ldr	r1, [pc, #20]	; (8001ed0 <USBD_FS_SerialStrDescriptor+0x1c>)
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <USBD_FS_SerialStrDescriptor+0x20>)
 8001ebe:	f005 fffd 	bl	8007ebc <USBD_GetString>
 8001ec2:	e003      	b.n	8001ecc <USBD_FS_SerialStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8001ec4:	4902      	ldr	r1, [pc, #8]	; (8001ed0 <USBD_FS_SerialStrDescriptor+0x1c>)
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <USBD_FS_SerialStrDescriptor+0x20>)
 8001ec8:	f005 fff8 	bl	8007ebc <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8001ecc:	4800      	ldr	r0, [pc, #0]	; (8001ed0 <USBD_FS_SerialStrDescriptor+0x1c>)
 8001ece:	bd08      	pop	{r3, pc}
 8001ed0:	20005970 	.word	0x20005970
 8001ed4:	0800ece4 	.word	0x0800ece4

08001ed8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001ed8:	b508      	push	{r3, lr}
 8001eda:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8001edc:	b920      	cbnz	r0, 8001ee8 <USBD_FS_ConfigStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001ede:	4905      	ldr	r1, [pc, #20]	; (8001ef4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <USBD_FS_ConfigStrDescriptor+0x20>)
 8001ee2:	f005 ffeb 	bl	8007ebc <USBD_GetString>
 8001ee6:	e003      	b.n	8001ef0 <USBD_FS_ConfigStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001ee8:	4902      	ldr	r1, [pc, #8]	; (8001ef4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8001eea:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <USBD_FS_ConfigStrDescriptor+0x20>)
 8001eec:	f005 ffe6 	bl	8007ebc <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8001ef0:	4800      	ldr	r0, [pc, #0]	; (8001ef4 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8001ef2:	bd08      	pop	{r3, pc}
 8001ef4:	20005970 	.word	0x20005970
 8001ef8:	0800ecf4 	.word	0x0800ecf4

08001efc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001efc:	b508      	push	{r3, lr}
 8001efe:	460a      	mov	r2, r1
  if(speed == 0)
 8001f00:	b920      	cbnz	r0, 8001f0c <USBD_FS_InterfaceStrDescriptor+0x10>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001f02:	4905      	ldr	r1, [pc, #20]	; (8001f18 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8001f06:	f005 ffd9 	bl	8007ebc <USBD_GetString>
 8001f0a:	e003      	b.n	8001f14 <USBD_FS_InterfaceStrDescriptor+0x18>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001f0c:	4902      	ldr	r1, [pc, #8]	; (8001f18 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8001f10:	f005 ffd4 	bl	8007ebc <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8001f14:	4800      	ldr	r0, [pc, #0]	; (8001f18 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8001f16:	bd08      	pop	{r3, pc}
 8001f18:	20005970 	.word	0x20005970
 8001f1c:	0800ed00 	.word	0x0800ed00

08001f20 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8001f20:	2000      	movs	r0, #0
 8001f22:	4770      	bx	lr

08001f24 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8001f24:	2000      	movs	r0, #0
 8001f26:	4770      	bx	lr

08001f28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8001f28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001f2a:	4c05      	ldr	r4, [pc, #20]	; (8001f40 <CDC_Receive_FS+0x18>)
 8001f2c:	4601      	mov	r1, r0
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f006 f92a 	bl	8008188 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8001f34:	4620      	mov	r0, r4
 8001f36:	f006 f945 	bl	80081c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	bf00      	nop
 8001f40:	2000535c 	.word	0x2000535c

08001f44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8001f44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8001f46:	4c06      	ldr	r4, [pc, #24]	; (8001f60 <CDC_Init_FS+0x1c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4906      	ldr	r1, [pc, #24]	; (8001f64 <CDC_Init_FS+0x20>)
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f006 f913 	bl	8008178 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8001f52:	4905      	ldr	r1, [pc, #20]	; (8001f68 <CDC_Init_FS+0x24>)
 8001f54:	4620      	mov	r0, r4
 8001f56:	f006 f917 	bl	8008188 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */
}
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000535c 	.word	0x2000535c
 8001f64:	20006370 	.word	0x20006370
 8001f68:	20005b70 	.word	0x20005b70

08001f6c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <CDC_Transmit_FS+0x28>)
 8001f6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if (hcdc->TxState != 0){
 8001f72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001f76:	b953      	cbnz	r3, 8001f8e <CDC_Transmit_FS+0x22>
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	460a      	mov	r2, r1
 8001f7c:	4601      	mov	r1, r0
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  if (hcdc->TxState != 0){
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8001f7e:	4c05      	ldr	r4, [pc, #20]	; (8001f94 <CDC_Transmit_FS+0x28>)
 8001f80:	4620      	mov	r0, r4
 8001f82:	f006 f8f9 	bl	8008178 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001f86:	4620      	mov	r0, r4
 8001f88:	f006 f904 	bl	8008194 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
 8001f8c:	bd10      	pop	{r4, pc}
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
  if (hcdc->TxState != 0){
    return USBD_BUSY;
 8001f8e:	2001      	movs	r0, #1
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000535c 	.word	0x2000535c

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9c:	e7fe      	b.n	8001f9c <HardFault_Handler>
 8001f9e:	bf00      	nop

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler>
 8001fa2:	bf00      	nop

08001fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa4:	e7fe      	b.n	8001fa4 <BusFault_Handler>
 8001fa6:	bf00      	nop

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler>
 8001faa:	bf00      	nop

08001fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fb2:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA1_Stream5_IRQHandler+0xc>)
 8001fb4:	f003 f858 	bl	8005068 <HAL_DMA_IRQHandler>
 8001fb8:	bd08      	pop	{r3, pc}
 8001fba:	bf00      	nop
 8001fbc:	20005014 	.word	0x20005014

08001fc0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001fc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fc2:	4802      	ldr	r0, [pc, #8]	; (8001fcc <DMA1_Stream6_IRQHandler+0xc>)
 8001fc4:	f003 f850 	bl	8005068 <HAL_DMA_IRQHandler>
 8001fc8:	bd08      	pop	{r3, pc}
 8001fca:	bf00      	nop
 8001fcc:	200051c4 	.word	0x200051c4

08001fd0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001fd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fd2:	4802      	ldr	r0, [pc, #8]	; (8001fdc <ADC_IRQHandler+0xc>)
 8001fd4:	f006 feae 	bl	8008d34 <HAL_ADC_IRQHandler>
 8001fd8:	bd08      	pop	{r3, pc}
 8001fda:	bf00      	nop
 8001fdc:	20005150 	.word	0x20005150

08001fe0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001fe0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fe2:	4802      	ldr	r0, [pc, #8]	; (8001fec <CAN1_TX_IRQHandler+0xc>)
 8001fe4:	f006 fbe2 	bl	80087ac <HAL_CAN_IRQHandler>
 8001fe8:	bd08      	pop	{r3, pc}
 8001fea:	bf00      	nop
 8001fec:	20005330 	.word	0x20005330

08001ff0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ff2:	4802      	ldr	r0, [pc, #8]	; (8001ffc <CAN1_RX0_IRQHandler+0xc>)
 8001ff4:	f006 fbda 	bl	80087ac <HAL_CAN_IRQHandler>
 8001ff8:	bd08      	pop	{r3, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20005330 	.word	0x20005330

08002000 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002000:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002002:	4802      	ldr	r0, [pc, #8]	; (800200c <CAN1_RX1_IRQHandler+0xc>)
 8002004:	f006 fbd2 	bl	80087ac <HAL_CAN_IRQHandler>
 8002008:	bd08      	pop	{r3, pc}
 800200a:	bf00      	nop
 800200c:	20005330 	.word	0x20005330

08002010 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002012:	4802      	ldr	r0, [pc, #8]	; (800201c <USART2_IRQHandler+0xc>)
 8002014:	f002 fa3c 	bl	8004490 <HAL_UART_IRQHandler>
 8002018:	bd08      	pop	{r3, pc}
 800201a:	bf00      	nop
 800201c:	200052f0 	.word	0x200052f0

08002020 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002020:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002022:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM5_IRQHandler+0xc>)
 8002024:	f001 fd08 	bl	8003a38 <HAL_TIM_IRQHandler>
 8002028:	bd08      	pop	{r3, pc}
 800202a:	bf00      	nop
 800202c:	20006b70 	.word	0x20006b70

08002030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002030:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002032:	4802      	ldr	r0, [pc, #8]	; (800203c <DMA2_Stream0_IRQHandler+0xc>)
 8002034:	f003 f818 	bl	8005068 <HAL_DMA_IRQHandler>
 8002038:	bd08      	pop	{r3, pc}
 800203a:	bf00      	nop
 800203c:	20005228 	.word	0x20005228

08002040 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002040:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002042:	4802      	ldr	r0, [pc, #8]	; (800204c <DMA2_Stream1_IRQHandler+0xc>)
 8002044:	f003 f810 	bl	8005068 <HAL_DMA_IRQHandler>
 8002048:	bd08      	pop	{r3, pc}
 800204a:	bf00      	nop
 800204c:	20005074 	.word	0x20005074

08002050 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002050:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002052:	4802      	ldr	r0, [pc, #8]	; (800205c <CAN2_TX_IRQHandler+0xc>)
 8002054:	f006 fbaa 	bl	80087ac <HAL_CAN_IRQHandler>
 8002058:	bd08      	pop	{r3, pc}
 800205a:	bf00      	nop
 800205c:	2000519c 	.word	0x2000519c

08002060 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002060:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002062:	4802      	ldr	r0, [pc, #8]	; (800206c <CAN2_RX0_IRQHandler+0xc>)
 8002064:	f006 fba2 	bl	80087ac <HAL_CAN_IRQHandler>
 8002068:	bd08      	pop	{r3, pc}
 800206a:	bf00      	nop
 800206c:	2000519c 	.word	0x2000519c

08002070 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002070:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002072:	4802      	ldr	r0, [pc, #8]	; (800207c <CAN2_RX1_IRQHandler+0xc>)
 8002074:	f006 fb9a 	bl	80087ac <HAL_CAN_IRQHandler>
 8002078:	bd08      	pop	{r3, pc}
 800207a:	bf00      	nop
 800207c:	2000519c 	.word	0x2000519c

08002080 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002082:	4802      	ldr	r0, [pc, #8]	; (800208c <OTG_FS_IRQHandler+0xc>)
 8002084:	f000 fb74 	bl	8002770 <HAL_PCD_IRQHandler>
 8002088:	bd08      	pop	{r3, pc}
 800208a:	bf00      	nop
 800208c:	20005580 	.word	0x20005580

08002090 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002090:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002092:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA2_Stream6_IRQHandler+0xc>)
 8002094:	f002 ffe8 	bl	8005068 <HAL_DMA_IRQHandler>
 8002098:	bd08      	pop	{r3, pc}
 800209a:	bf00      	nop
 800209c:	200050f0 	.word	0x200050f0

080020a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020a2:	4802      	ldr	r0, [pc, #8]	; (80020ac <USART6_IRQHandler+0xc>)
 80020a4:	f002 f9f4 	bl	8004490 <HAL_UART_IRQHandler>
 80020a8:	bd08      	pop	{r3, pc}
 80020aa:	bf00      	nop
 80020ac:	20005290 	.word	0x20005290

080020b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b0:	b500      	push	{lr}
 80020b2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b4:	2200      	movs	r2, #0
 80020b6:	9200      	str	r2, [sp, #0]
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_MspInit+0x40>)
 80020ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80020bc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80020c0:	6459      	str	r1, [r3, #68]	; 0x44
 80020c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80020c4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80020c8:	9100      	str	r1, [sp, #0]
 80020ca:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	9201      	str	r2, [sp, #4]
 80020ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020d0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80020d4:	6419      	str	r1, [r3, #64]	; 0x40
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020e0:	210f      	movs	r1, #15
 80020e2:	f06f 0001 	mvn.w	r0, #1
 80020e6:	f003 f8bd 	bl	8005264 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	b003      	add	sp, #12
 80020ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80020f0:	40023800 	.word	0x40023800

080020f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	2300      	movs	r3, #0
 80020fa:	9305      	str	r3, [sp, #20]
 80020fc:	9306      	str	r3, [sp, #24]
 80020fe:	9307      	str	r3, [sp, #28]
 8002100:	9308      	str	r3, [sp, #32]
 8002102:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8002104:	6802      	ldr	r2, [r0, #0]
 8002106:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800210a:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800210e:	429a      	cmp	r2, r3
 8002110:	d167      	bne.n	80021e2 <HAL_ADC_MspInit+0xee>
 8002112:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002114:	2500      	movs	r5, #0
 8002116:	9501      	str	r5, [sp, #4]
 8002118:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800211c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800211e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002122:	645a      	str	r2, [r3, #68]	; 0x44
 8002124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002126:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800212a:	9201      	str	r2, [sp, #4]
 800212c:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	9502      	str	r5, [sp, #8]
 8002130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002132:	f042 0204 	orr.w	r2, r2, #4
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
 8002138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213a:	f002 0204 	and.w	r2, r2, #4
 800213e:	9202      	str	r2, [sp, #8]
 8002140:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	9503      	str	r5, [sp, #12]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
 800214c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214e:	f002 0201 	and.w	r2, r2, #1
 8002152:	9203      	str	r2, [sp, #12]
 8002154:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	9504      	str	r5, [sp, #16]
 8002158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215a:	f042 0202 	orr.w	r2, r2, #2
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	9304      	str	r3, [sp, #16]
 8002168:	9b04      	ldr	r3, [sp, #16]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_5;
 800216a:	2326      	movs	r3, #38	; 0x26
 800216c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216e:	2603      	movs	r6, #3
 8002170:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	a905      	add	r1, sp, #20
 8002174:	481c      	ldr	r0, [pc, #112]	; (80021e8 <HAL_ADC_MspInit+0xf4>)
 8002176:	f002 fd5b 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800217a:	23e2      	movs	r3, #226	; 0xe2
 800217c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	a905      	add	r1, sp, #20
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <HAL_ADC_MspInit+0xf8>)
 8002186:	f002 fd53 	bl	8004c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800218a:	2301      	movs	r3, #1
 800218c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	a905      	add	r1, sp, #20
 8002194:	4816      	ldr	r0, [pc, #88]	; (80021f0 <HAL_ADC_MspInit+0xfc>)
 8002196:	f002 fd4b 	bl	8004c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800219a:	4816      	ldr	r0, [pc, #88]	; (80021f4 <HAL_ADC_MspInit+0x100>)
 800219c:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_ADC_MspInit+0x104>)
 800219e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021a0:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021a2:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a4:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021aa:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b0:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021bc:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021be:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021c0:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021c2:	f002 fe9b 	bl	8004efc <HAL_DMA_Init>
 80021c6:	b108      	cbz	r0, 80021cc <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 80021c8:	f7ff fc9c 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_ADC_MspInit+0x100>)
 80021ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80021d0:	639c      	str	r4, [r3, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2106      	movs	r1, #6
 80021d6:	2012      	movs	r0, #18
 80021d8:	f003 f844 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80021dc:	2012      	movs	r0, #18
 80021de:	f003 f873 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021e2:	b00a      	add	sp, #40	; 0x28
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	bf00      	nop
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	20005228 	.word	0x20005228
 80021f8:	40026410 	.word	0x40026410

080021fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021fc:	b510      	push	{r4, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	2300      	movs	r3, #0
 8002202:	9305      	str	r3, [sp, #20]
 8002204:	9306      	str	r3, [sp, #24]
 8002206:	9307      	str	r3, [sp, #28]
 8002208:	9308      	str	r3, [sp, #32]
 800220a:	9309      	str	r3, [sp, #36]	; 0x24
  if(hcan->Instance==CAN1)
 800220c:	6803      	ldr	r3, [r0, #0]
 800220e:	4a4c      	ldr	r2, [pc, #304]	; (8002340 <HAL_CAN_MspInit+0x144>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d141      	bne.n	8002298 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_CAN_MspInit+0x148>)
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10b      	bne.n	8002238 <HAL_CAN_MspInit+0x3c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <HAL_CAN_MspInit+0x14c>)
 8002226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002228:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	9b00      	ldr	r3, [sp, #0]
    }
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002238:	2400      	movs	r4, #0
 800223a:	9401      	str	r4, [sp, #4]
 800223c:	4b42      	ldr	r3, [pc, #264]	; (8002348 <HAL_CAN_MspInit+0x14c>)
 800223e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002240:	f042 0208 	orr.w	r2, r2, #8
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	9b01      	ldr	r3, [sp, #4]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002250:	2303      	movs	r3, #3
 8002252:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2202      	movs	r2, #2
 8002256:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800225a:	2309      	movs	r3, #9
 800225c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225e:	a905      	add	r1, sp, #20
 8002260:	483a      	ldr	r0, [pc, #232]	; (800234c <HAL_CAN_MspInit+0x150>)
 8002262:	f002 fce5 	bl	8004c30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002266:	4622      	mov	r2, r4
 8002268:	2105      	movs	r1, #5
 800226a:	2013      	movs	r0, #19
 800226c:	f002 fffa 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002270:	2013      	movs	r0, #19
 8002272:	f003 f829 	bl	80052c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 7, 0);
 8002276:	4622      	mov	r2, r4
 8002278:	2107      	movs	r1, #7
 800227a:	2014      	movs	r0, #20
 800227c:	f002 fff2 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002280:	2014      	movs	r0, #20
 8002282:	f003 f821 	bl	80052c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 7, 0);
 8002286:	4622      	mov	r2, r4
 8002288:	2107      	movs	r1, #7
 800228a:	2015      	movs	r0, #21
 800228c:	f002 ffea 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002290:	2015      	movs	r0, #21
 8002292:	f003 f819 	bl	80052c8 <HAL_NVIC_EnableIRQ>
 8002296:	e051      	b.n	800233c <HAL_CAN_MspInit+0x140>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(hcan->Instance==CAN2)
 8002298:	4a2d      	ldr	r2, [pc, #180]	; (8002350 <HAL_CAN_MspInit+0x154>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d14e      	bne.n	800233c <HAL_CAN_MspInit+0x140>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	9302      	str	r3, [sp, #8]
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_CAN_MspInit+0x14c>)
 80022a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	9b02      	ldr	r3, [sp, #8]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80022b6:	4a23      	ldr	r2, [pc, #140]	; (8002344 <HAL_CAN_MspInit+0x148>)
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10b      	bne.n	80022da <HAL_CAN_MspInit+0xde>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	9303      	str	r3, [sp, #12]
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <HAL_CAN_MspInit+0x14c>)
 80022c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	9b03      	ldr	r3, [sp, #12]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	2400      	movs	r4, #0
 80022dc:	9404      	str	r4, [sp, #16]
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_CAN_MspInit+0x14c>)
 80022e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e2:	f042 0202 	orr.w	r2, r2, #2
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	9304      	str	r3, [sp, #16]
 80022f0:	9b04      	ldr	r3, [sp, #16]
    /**CAN2 GPIO Configuration    
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002300:	2309      	movs	r3, #9
 8002302:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	a905      	add	r1, sp, #20
 8002306:	4813      	ldr	r0, [pc, #76]	; (8002354 <HAL_CAN_MspInit+0x158>)
 8002308:	f002 fc92 	bl	8004c30 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800230c:	4622      	mov	r2, r4
 800230e:	2105      	movs	r1, #5
 8002310:	203f      	movs	r0, #63	; 0x3f
 8002312:	f002 ffa7 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002316:	203f      	movs	r0, #63	; 0x3f
 8002318:	f002 ffd6 	bl	80052c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 7, 0);
 800231c:	4622      	mov	r2, r4
 800231e:	2107      	movs	r1, #7
 8002320:	2040      	movs	r0, #64	; 0x40
 8002322:	f002 ff9f 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002326:	2040      	movs	r0, #64	; 0x40
 8002328:	f002 ffce 	bl	80052c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 7, 0);
 800232c:	4622      	mov	r2, r4
 800232e:	2107      	movs	r1, #7
 8002330:	2041      	movs	r0, #65	; 0x41
 8002332:	f002 ff97 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002336:	2041      	movs	r0, #65	; 0x41
 8002338:	f002 ffc6 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800233c:	b00a      	add	sp, #40	; 0x28
 800233e:	bd10      	pop	{r4, pc}
 8002340:	40006400 	.word	0x40006400
 8002344:	20000ecc 	.word	0x20000ecc
 8002348:	40023800 	.word	0x40023800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40006800 	.word	0x40006800
 8002354:	40020400 	.word	0x40020400

08002358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002358:	b530      	push	{r4, r5, lr}
 800235a:	b08b      	sub	sp, #44	; 0x2c
 800235c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235e:	2300      	movs	r3, #0
 8002360:	9305      	str	r3, [sp, #20]
 8002362:	9306      	str	r3, [sp, #24]
 8002364:	9307      	str	r3, [sp, #28]
 8002366:	9308      	str	r3, [sp, #32]
 8002368:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 800236a:	6803      	ldr	r3, [r0, #0]
 800236c:	4a64      	ldr	r2, [pc, #400]	; (8002500 <HAL_UART_MspInit+0x1a8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d160      	bne.n	8002434 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002372:	2500      	movs	r5, #0
 8002374:	9501      	str	r5, [sp, #4]
 8002376:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_UART_MspInit+0x1ac>)
 8002378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
 8002380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002382:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002386:	9201      	str	r2, [sp, #4]
 8002388:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	9502      	str	r5, [sp, #8]
 800238c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800239e:	230c      	movs	r3, #12
 80023a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	a905      	add	r1, sp, #20
 80023b4:	4854      	ldr	r0, [pc, #336]	; (8002508 <HAL_UART_MspInit+0x1b0>)
 80023b6:	f002 fc3b 	bl	8004c30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023ba:	4854      	ldr	r0, [pc, #336]	; (800250c <HAL_UART_MspInit+0x1b4>)
 80023bc:	4b54      	ldr	r3, [pc, #336]	; (8002510 <HAL_UART_MspInit+0x1b8>)
 80023be:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023c4:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c6:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c8:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ce:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d0:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d2:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80023d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d8:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023da:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023dc:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023de:	f002 fd8d 	bl	8004efc <HAL_DMA_Init>
 80023e2:	b108      	cbz	r0, 80023e8 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 80023e4:	f7ff fb8e 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80023e8:	4b48      	ldr	r3, [pc, #288]	; (800250c <HAL_UART_MspInit+0x1b4>)
 80023ea:	6363      	str	r3, [r4, #52]	; 0x34
 80023ec:	639c      	str	r4, [r3, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023ee:	4849      	ldr	r0, [pc, #292]	; (8002514 <HAL_UART_MspInit+0x1bc>)
 80023f0:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_UART_MspInit+0x1c0>)
 80023f2:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80023f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023f8:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023fa:	2340      	movs	r3, #64	; 0x40
 80023fc:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002406:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002408:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800240a:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800240c:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800240e:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002410:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002412:	f002 fd73 	bl	8004efc <HAL_DMA_Init>
 8002416:	b108      	cbz	r0, 800241c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002418:	f7ff fb74 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800241c:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_UART_MspInit+0x1bc>)
 800241e:	6323      	str	r3, [r4, #48]	; 0x30
 8002420:	639c      	str	r4, [r3, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2106      	movs	r1, #6
 8002426:	2026      	movs	r0, #38	; 0x26
 8002428:	f002 ff1c 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800242c:	2026      	movs	r0, #38	; 0x26
 800242e:	f002 ff4b 	bl	80052c8 <HAL_NVIC_EnableIRQ>
 8002432:	e062      	b.n	80024fa <HAL_UART_MspInit+0x1a2>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002434:	4a39      	ldr	r2, [pc, #228]	; (800251c <HAL_UART_MspInit+0x1c4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d15f      	bne.n	80024fa <HAL_UART_MspInit+0x1a2>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800243a:	2500      	movs	r5, #0
 800243c:	9503      	str	r5, [sp, #12]
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_UART_MspInit+0x1ac>)
 8002440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002442:	f042 0220 	orr.w	r2, r2, #32
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
 8002448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800244a:	f002 0220 	and.w	r2, r2, #32
 800244e:	9203      	str	r2, [sp, #12]
 8002450:	9a03      	ldr	r2, [sp, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002452:	9504      	str	r5, [sp, #16]
 8002454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002456:	f042 0204 	orr.w	r2, r2, #4
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	9304      	str	r3, [sp, #16]
 8002464:	9b04      	ldr	r3, [sp, #16]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002466:	23c0      	movs	r3, #192	; 0xc0
 8002468:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246e:	2301      	movs	r3, #1
 8002470:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002476:	2308      	movs	r3, #8
 8002478:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247a:	a905      	add	r1, sp, #20
 800247c:	4828      	ldr	r0, [pc, #160]	; (8002520 <HAL_UART_MspInit+0x1c8>)
 800247e:	f002 fbd7 	bl	8004c30 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002482:	4828      	ldr	r0, [pc, #160]	; (8002524 <HAL_UART_MspInit+0x1cc>)
 8002484:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_UART_MspInit+0x1d0>)
 8002486:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002488:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 800248c:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248e:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002490:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002496:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002498:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249a:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800249c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a0:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a2:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a4:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80024a6:	f002 fd29 	bl	8004efc <HAL_DMA_Init>
 80024aa:	b108      	cbz	r0, 80024b0 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 80024ac:	f7ff fb2a 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <HAL_UART_MspInit+0x1cc>)
 80024b2:	6363      	str	r3, [r4, #52]	; 0x34
 80024b4:	639c      	str	r4, [r3, #56]	; 0x38

    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80024b6:	481d      	ldr	r0, [pc, #116]	; (800252c <HAL_UART_MspInit+0x1d4>)
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_UART_MspInit+0x1d8>)
 80024ba:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80024bc:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80024c0:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c2:	2340      	movs	r3, #64	; 0x40
 80024c4:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60c3      	str	r3, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ce:	6102      	str	r2, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d0:	6143      	str	r3, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d2:	6183      	str	r3, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80024d4:	61c3      	str	r3, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024d6:	6203      	str	r3, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d8:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80024da:	f002 fd0f 	bl	8004efc <HAL_DMA_Init>
 80024de:	b108      	cbz	r0, 80024e4 <HAL_UART_MspInit+0x18c>
    {
      Error_Handler();
 80024e0:	f7ff fb10 	bl	8001b04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_UART_MspInit+0x1d4>)
 80024e6:	6323      	str	r3, [r4, #48]	; 0x30
 80024e8:	639c      	str	r4, [r3, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2108      	movs	r1, #8
 80024ee:	2047      	movs	r0, #71	; 0x47
 80024f0:	f002 feb8 	bl	8005264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024f4:	2047      	movs	r0, #71	; 0x47
 80024f6:	f002 fee7 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024fa:	b00b      	add	sp, #44	; 0x2c
 80024fc:	bd30      	pop	{r4, r5, pc}
 80024fe:	bf00      	nop
 8002500:	40004400 	.word	0x40004400
 8002504:	40023800 	.word	0x40023800
 8002508:	40020000 	.word	0x40020000
 800250c:	20005014 	.word	0x20005014
 8002510:	40026088 	.word	0x40026088
 8002514:	200051c4 	.word	0x200051c4
 8002518:	400260a0 	.word	0x400260a0
 800251c:	40011400 	.word	0x40011400
 8002520:	40020800 	.word	0x40020800
 8002524:	20005074 	.word	0x20005074
 8002528:	40026428 	.word	0x40026428
 800252c:	200050f0 	.word	0x200050f0
 8002530:	400264a0 	.word	0x400264a0

08002534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b510      	push	{r4, lr}
 8002536:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8002538:	2200      	movs	r2, #0
 800253a:	4601      	mov	r1, r0
 800253c:	2032      	movs	r0, #50	; 0x32
 800253e:	f002 fe91 	bl	8005264 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f002 fec0 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002548:	2400      	movs	r4, #0
 800254a:	9401      	str	r4, [sp, #4]
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_InitTick+0x6c>)
 800254e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002550:	f042 0208 	orr.w	r2, r2, #8
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002560:	a902      	add	r1, sp, #8
 8002562:	a803      	add	r0, sp, #12
 8002564:	f002 fb46 	bl	8004bf4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002568:	f002 fb24 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 800256c:	0040      	lsls	r0, r0, #1
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_InitTick+0x70>)
 8002570:	fba3 2300 	umull	r2, r3, r3, r0
 8002574:	0c9b      	lsrs	r3, r3, #18
 8002576:	3b01      	subs	r3, #1
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002578:	480b      	ldr	r0, [pc, #44]	; (80025a8 <HAL_InitTick+0x74>)
 800257a:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <HAL_InitTick+0x78>)
 800257c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800257e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002582:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002584:	6043      	str	r3, [r0, #4]
  htim5.Init.ClockDivision = 0;
 8002586:	6104      	str	r4, [r0, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002588:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800258a:	f001 fb9d 	bl	8003cc8 <HAL_TIM_Base_Init>
 800258e:	b918      	cbnz	r0, 8002598 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <HAL_InitTick+0x74>)
 8002592:	f001 fa3d 	bl	8003a10 <HAL_TIM_Base_Start_IT>
 8002596:	e000      	b.n	800259a <HAL_InitTick+0x66>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002598:	2001      	movs	r0, #1
}
 800259a:	b008      	add	sp, #32
 800259c:	bd10      	pop	{r4, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	431bde83 	.word	0x431bde83
 80025a8:	20006b70 	.word	0x20006b70
 80025ac:	40000c00 	.word	0x40000c00

080025b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025b4:	b083      	sub	sp, #12
 80025b6:	4607      	mov	r7, r0
 80025b8:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80025ba:	f8d0 8000 	ldr.w	r8, [r0]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80025be:	00ca      	lsls	r2, r1, #3
 80025c0:	1a52      	subs	r2, r2, r1
 80025c2:	0093      	lsls	r3, r2, #2
 80025c4:	4403      	add	r3, r0
 80025c6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80025c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025ca:	1ab6      	subs	r6, r6, r2
  
  if (len > ep->maxpacket)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	429e      	cmp	r6, r3
 80025d0:	d900      	bls.n	80025d4 <PCD_WriteEmptyTxFifo+0x24>
  {
    len = ep->maxpacket;
 80025d2:	461e      	mov	r6, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 80025d4:	f106 0903 	add.w	r9, r6, #3
 80025d8:	ea4f 0999 	mov.w	r9, r9, lsr #2
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80025dc:	e01e      	b.n	800261c <PCD_WriteEmptyTxFifo+0x6c>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025de:	1a9e      	subs	r6, r3, r2
    
    if (len > ep->maxpacket)
 80025e0:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80025e4:	0093      	lsls	r3, r2, #2
 80025e6:	443b      	add	r3, r7
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	429e      	cmp	r6, r3
 80025ec:	d900      	bls.n	80025f0 <PCD_WriteEmptyTxFifo+0x40>
    {
      len = ep->maxpacket;
 80025ee:	461e      	mov	r6, r3
    }
    len32b = (len + 3U) / 4U;
 80025f0:	f106 0903 	add.w	r9, r6, #3
 80025f4:	ea4f 0999 	mov.w	r9, r9, lsr #2
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80025f8:	00eb      	lsls	r3, r5, #3
 80025fa:	1b5b      	subs	r3, r3, r5
 80025fc:	009c      	lsls	r4, r3, #2
 80025fe:	443c      	add	r4, r7
 8002600:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002602:	7c3b      	ldrb	r3, [r7, #16]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	b2b3      	uxth	r3, r6
 8002608:	b2ea      	uxtb	r2, r5
 800260a:	4640      	mov	r0, r8
 800260c:	f001 f8b8 	bl	8003780 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8002610:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002612:	4433      	add	r3, r6
 8002614:	6463      	str	r3, [r4, #68]	; 0x44
    ep->xfer_count += len;
 8002616:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002618:	4433      	add	r3, r6
 800261a:	6523      	str	r3, [r4, #80]	; 0x50
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800261c:	4641      	mov	r1, r8
 800261e:	eb08 1345 	add.w	r3, r8, r5, lsl #5
 8002622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4599      	cmp	r9, r3
 800262c:	d209      	bcs.n	8002642 <PCD_WriteEmptyTxFifo+0x92>
          (ep->xfer_count < ep->xfer_len) &&
 800262e:	00ea      	lsls	r2, r5, #3
 8002630:	1b52      	subs	r2, r2, r5
 8002632:	0093      	lsls	r3, r2, #2
 8002634:	443b      	add	r3, r7
 8002636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800263a:	429a      	cmp	r2, r3
 800263c:	d201      	bcs.n	8002642 <PCD_WriteEmptyTxFifo+0x92>
          (ep->xfer_count < ep->xfer_len) &&
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1cd      	bne.n	80025de <PCD_WriteEmptyTxFifo+0x2e>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8002642:	b946      	cbnz	r6, 8002656 <PCD_WriteEmptyTxFifo+0xa6>
  {
    fifoemptymsk = 0x1U << epnum;
 8002644:	2301      	movs	r3, #1
 8002646:	fa03 f505 	lsl.w	r5, r3, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800264a:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800264e:	ea23 0505 	bic.w	r5, r3, r5
 8002652:	f8c1 5834 	str.w	r5, [r1, #2100]	; 0x834
    
  }
  
  return HAL_OK;  
}
 8002656:	2000      	movs	r0, #0
 8002658:	b003      	add	sp, #12
 800265a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800265e:	bf00      	nop

08002660 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002660:	2800      	cmp	r0, #0
 8002662:	d06a      	beq.n	800273a <HAL_PCD_Init+0xda>
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8002664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002666:	b08b      	sub	sp, #44	; 0x2c
 8002668:	4604      	mov	r4, r0
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800266a:	2303      	movs	r3, #3
 800266c:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8002670:	f7ff fa80 	bl	8001b74 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8002674:	6820      	ldr	r0, [r4, #0]
 8002676:	f000 fcd1 	bl	800301c <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 800267a:	4625      	mov	r5, r4
 800267c:	f855 7b10 	ldr.w	r7, [r5], #16
 8002680:	466e      	mov	r6, sp
 8002682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002684:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002688:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800268a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800268e:	e886 0003 	stmia.w	r6, {r0, r1}
 8002692:	1d23      	adds	r3, r4, #4
 8002694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002696:	4638      	mov	r0, r7
 8002698:	f000 fc7e 	bl	8002f98 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800269c:	2100      	movs	r1, #0
 800269e:	6820      	ldr	r0, [r4, #0]
 80026a0:	f000 fcc2 	bl	8003028 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80026a4:	2200      	movs	r2, #0
 80026a6:	e010      	b.n	80026ca <HAL_PCD_Init+0x6a>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80026a8:	00d1      	lsls	r1, r2, #3
 80026aa:	1a89      	subs	r1, r1, r2
 80026ac:	008b      	lsls	r3, r1, #2
 80026ae:	4423      	add	r3, r4
 80026b0:	2101      	movs	r1, #1
 80026b2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
 80026b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80026ba:	87da      	strh	r2, [r3, #62]	; 0x3e
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026bc:	2100      	movs	r1, #0
 80026be:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 80026c2:	6419      	str	r1, [r3, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 80026c4:	6459      	str	r1, [r3, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 80026c6:	64d9      	str	r1, [r3, #76]	; 0x4c
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80026c8:	3201      	adds	r2, #1
 80026ca:	2a0e      	cmp	r2, #14
 80026cc:	d9ec      	bls.n	80026a8 <HAL_PCD_Init+0x48>
 80026ce:	2200      	movs	r2, #0
 80026d0:	e018      	b.n	8002704 <HAL_PCD_Init+0xa4>
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80026d2:	00d1      	lsls	r1, r2, #3
 80026d4:	1a89      	subs	r1, r1, r2
 80026d6:	008b      	lsls	r3, r1, #2
 80026d8:	4423      	add	r3, r4
 80026da:	2100      	movs	r1, #0
 80026dc:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
 80026e0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80026e4:	87da      	strh	r2, [r3, #62]	; 0x3e
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e6:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 80026ea:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ee:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 80026f2:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80026fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002700:	6059      	str	r1, [r3, #4]
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 8002702:	3201      	adds	r2, #1
 8002704:	2a0e      	cmp	r2, #14
 8002706:	d9e4      	bls.n	80026d2 <HAL_PCD_Init+0x72>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8002708:	4625      	mov	r5, r4
 800270a:	f855 7b10 	ldr.w	r7, [r5], #16
 800270e:	466e      	mov	r6, sp
 8002710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002712:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002718:	e895 0003 	ldmia.w	r5, {r0, r1}
 800271c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002720:	1d23      	adds	r3, r4, #4
 8002722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002724:	4638      	mov	r0, r7
 8002726:	f000 fc95 	bl	8003054 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 800272a:	2301      	movs	r3, #1
 800272c:	f884 33b9 	strb.w	r3, [r4, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8002730:	6820      	ldr	r0, [r4, #0]
 8002732:	f001 f8cf 	bl	80038d4 <USB_DevDisconnect>
 return HAL_OK;
 8002736:	2000      	movs	r0, #0
 8002738:	e001      	b.n	800273e <HAL_PCD_Init+0xde>
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 800273a:	2001      	movs	r0, #1
 800273c:	4770      	bx	lr
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 return HAL_OK;
}
 800273e:	b00b      	add	sp, #44	; 0x2c
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002742:	bf00      	nop

08002744 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8002744:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002748:	2b01      	cmp	r3, #1
 800274a:	d00e      	beq.n	800276a <HAL_PCD_Start+0x26>
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800274c:	b510      	push	{r4, lr}
 800274e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8002750:	2301      	movs	r3, #1
 8002752:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8002756:	6800      	ldr	r0, [r0, #0]
 8002758:	f001 f8b0 	bl	80038bc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	f000 fc57 	bl	8003010 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8002762:	2000      	movs	r0, #0
 8002764:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002768:	bd10      	pop	{r4, pc}
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 800276a:	2002      	movs	r0, #2
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002774:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002776:	6806      	ldr	r6, [r0, #0]
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002778:	4630      	mov	r0, r6
 800277a:	f001 f8e7 	bl	800394c <USB_GetMode>
 800277e:	2800      	cmp	r0, #0
 8002780:	f040 8293 	bne.w	8002caa <HAL_PCD_IRQHandler+0x53a>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8002784:	6820      	ldr	r0, [r4, #0]
 8002786:	f001 f8b1 	bl	80038ec <USB_ReadInterrupts>
 800278a:	2800      	cmp	r0, #0
 800278c:	f000 828d 	beq.w	8002caa <HAL_PCD_IRQHandler+0x53a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002790:	6820      	ldr	r0, [r4, #0]
 8002792:	f001 f8ab 	bl	80038ec <USB_ReadInterrupts>
 8002796:	f010 0f02 	tst.w	r0, #2
 800279a:	d004      	beq.n	80027a6 <HAL_PCD_IRQHandler+0x36>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800279c:	6822      	ldr	r2, [r4, #0]
 800279e:	6953      	ldr	r3, [r2, #20]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	6153      	str	r3, [r2, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027a6:	6820      	ldr	r0, [r4, #0]
 80027a8:	f001 f8a0 	bl	80038ec <USB_ReadInterrupts>
 80027ac:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80027b0:	d05c      	beq.n	800286c <HAL_PCD_IRQHandler+0xfc>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027b2:	6820      	ldr	r0, [r4, #0]
 80027b4:	f001 f89e 	bl	80038f4 <USB_ReadDevAllOutEpInterrupt>
 80027b8:	4607      	mov	r7, r0
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 80027ba:	2500      	movs	r5, #0
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 80027bc:	e053      	b.n	8002866 <HAL_PCD_IRQHandler+0xf6>
      {
        if (ep_intr & 0x1U)
 80027be:	f017 0f01 	tst.w	r7, #1
 80027c2:	d04e      	beq.n	8002862 <HAL_PCD_IRQHandler+0xf2>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80027c4:	fa5f f985 	uxtb.w	r9, r5
 80027c8:	4649      	mov	r1, r9
 80027ca:	6820      	ldr	r0, [r4, #0]
 80027cc:	f001 f8a2 	bl	8003914 <USB_ReadDevOutEPInterrupt>
 80027d0:	4680      	mov	r8, r0
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027d2:	f010 0f01 	tst.w	r0, #1
 80027d6:	d031      	beq.n	800283c <HAL_PCD_IRQHandler+0xcc>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027d8:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 80027dc:	2201      	movs	r2, #1
 80027de:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 80027e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
            
            if(hpcd->Init.dma_enable == 1U)
 80027e6:	6922      	ldr	r2, [r4, #16]
 80027e8:	2a01      	cmp	r2, #1
 80027ea:	d112      	bne.n	8002812 <HAL_PCD_IRQHandler+0xa2>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 80027ec:	00e9      	lsls	r1, r5, #3
 80027ee:	1b49      	subs	r1, r1, r5
 80027f0:	008a      	lsls	r2, r1, #2
 80027f2:	4422      	add	r2, r4
 80027f4:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	1ac9      	subs	r1, r1, r3
 8002800:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8002804:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8002808:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800280c:	440b      	add	r3, r1
 800280e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8002812:	4649      	mov	r1, r9
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff f9e9 	bl	8001bec <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 800281a:	6923      	ldr	r3, [r4, #16]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10d      	bne.n	800283c <HAL_PCD_IRQHandler+0xcc>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002820:	b965      	cbnz	r5, 800283c <HAL_PCD_IRQHandler+0xcc>
 8002822:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002826:	0093      	lsls	r3, r2, #2
 8002828:	4423      	add	r3, r4
 800282a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800282e:	b92b      	cbnz	r3, 800283c <HAL_PCD_IRQHandler+0xcc>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002830:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002834:	2101      	movs	r1, #1
 8002836:	6820      	ldr	r0, [r4, #0]
 8002838:	f001 f8a8 	bl	800398c <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800283c:	f018 0f08 	tst.w	r8, #8
 8002840:	d007      	beq.n	8002852 <HAL_PCD_IRQHandler+0xe2>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff f9ca 	bl	8001bdc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002848:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 800284c:	2208      	movs	r2, #8
 800284e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002852:	f018 0f10 	tst.w	r8, #16
 8002856:	d004      	beq.n	8002862 <HAL_PCD_IRQHandler+0xf2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002858:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 800285c:	2210      	movs	r2, #16
 800285e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8002862:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8002864:	087f      	lsrs	r7, r7, #1
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 8002866:	2f00      	cmp	r7, #0
 8002868:	d1a9      	bne.n	80027be <HAL_PCD_IRQHandler+0x4e>
 800286a:	e000      	b.n	800286e <HAL_PCD_IRQHandler+0xfe>
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 800286c:	2500      	movs	r5, #0
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	f001 f83c 	bl	80038ec <USB_ReadInterrupts>
 8002874:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002878:	d069      	beq.n	800294e <HAL_PCD_IRQHandler+0x1de>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800287a:	6820      	ldr	r0, [r4, #0]
 800287c:	f001 f842 	bl	8003904 <USB_ReadDevAllInEpInterrupt>
 8002880:	4607      	mov	r7, r0
      
      epnum = 0U;
 8002882:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8002884:	e061      	b.n	800294a <HAL_PCD_IRQHandler+0x1da>
      {
        if (ep_intr & 0x1U) /* In ITR */
 8002886:	f017 0f01 	tst.w	r7, #1
 800288a:	d05c      	beq.n	8002946 <HAL_PCD_IRQHandler+0x1d6>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 800288c:	fa5f f985 	uxtb.w	r9, r5
 8002890:	4649      	mov	r1, r9
 8002892:	6820      	ldr	r0, [r4, #0]
 8002894:	f001 f848 	bl	8003928 <USB_ReadDevInEPInterrupt>
 8002898:	4680      	mov	r8, r0

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800289a:	f010 0f01 	tst.w	r0, #1
 800289e:	d02b      	beq.n	80028f8 <HAL_PCD_IRQHandler+0x188>
          {
            fifoemptymsk = 0x1U << epnum;
 80028a0:	2201      	movs	r2, #1
 80028a2:	fa02 f005 	lsl.w	r0, r2, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028a6:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
 80028aa:	ea23 0300 	bic.w	r3, r3, r0
 80028ae:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028b2:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 80028b6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            
            if (hpcd->Init.dma_enable == 1U)
 80028ba:	6923      	ldr	r3, [r4, #16]
 80028bc:	4293      	cmp	r3, r2
 80028be:	d107      	bne.n	80028d0 <HAL_PCD_IRQHandler+0x160>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 80028c0:	00ea      	lsls	r2, r5, #3
 80028c2:	1b52      	subs	r2, r2, r5
 80028c4:	0093      	lsls	r3, r2, #2
 80028c6:	4423      	add	r3, r4
 80028c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80028ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028cc:	440a      	add	r2, r1
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80028d0:	4649      	mov	r1, r9
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff f996 	bl	8001c04 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 80028d8:	6923      	ldr	r3, [r4, #16]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10c      	bne.n	80028f8 <HAL_PCD_IRQHandler+0x188>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028de:	b95d      	cbnz	r5, 80028f8 <HAL_PCD_IRQHandler+0x188>
 80028e0:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80028e4:	0093      	lsls	r3, r2, #2
 80028e6:	4423      	add	r3, r4
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	b92b      	cbnz	r3, 80028f8 <HAL_PCD_IRQHandler+0x188>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ec:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80028f0:	2101      	movs	r1, #1
 80028f2:	6820      	ldr	r0, [r4, #0]
 80028f4:	f001 f84a 	bl	800398c <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028f8:	f018 0f08 	tst.w	r8, #8
 80028fc:	d004      	beq.n	8002908 <HAL_PCD_IRQHandler+0x198>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028fe:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002902:	2208      	movs	r2, #8
 8002904:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002908:	f018 0f10 	tst.w	r8, #16
 800290c:	d004      	beq.n	8002918 <HAL_PCD_IRQHandler+0x1a8>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800290e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002912:	2210      	movs	r2, #16
 8002914:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002918:	f018 0f40 	tst.w	r8, #64	; 0x40
 800291c:	d004      	beq.n	8002928 <HAL_PCD_IRQHandler+0x1b8>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800291e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002928:	f018 0f02 	tst.w	r8, #2
 800292c:	d004      	beq.n	8002938 <HAL_PCD_IRQHandler+0x1c8>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800292e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8002932:	2202      	movs	r2, #2
 8002934:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002938:	f018 0f80 	tst.w	r8, #128	; 0x80
 800293c:	d003      	beq.n	8002946 <HAL_PCD_IRQHandler+0x1d6>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 800293e:	4629      	mov	r1, r5
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff fe35 	bl	80025b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002946:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8002948:	087f      	lsrs	r7, r7, #1
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
      
      epnum = 0U;
      
      while ( ep_intr )
 800294a:	2f00      	cmp	r7, #0
 800294c:	d19b      	bne.n	8002886 <HAL_PCD_IRQHandler+0x116>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	f000 ffcc 	bl	80038ec <USB_ReadInterrupts>
 8002954:	2800      	cmp	r0, #0
 8002956:	da0d      	bge.n	8002974 <HAL_PCD_IRQHandler+0x204>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002958:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8002964:	4620      	mov	r0, r4
 8002966:	f7ff f987 	bl	8001c78 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6953      	ldr	r3, [r2, #20]
 800296e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002972:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002974:	6820      	ldr	r0, [r4, #0]
 8002976:	f000 ffb9 	bl	80038ec <USB_ReadInterrupts>
 800297a:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800297e:	d00c      	beq.n	800299a <HAL_PCD_IRQHandler+0x22a>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002980:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8002984:	f013 0f01 	tst.w	r3, #1
 8002988:	d002      	beq.n	8002990 <HAL_PCD_IRQHandler+0x220>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff f95c 	bl	8001c48 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	6953      	ldr	r3, [r2, #20]
 8002994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002998:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800299a:	6820      	ldr	r0, [r4, #0]
 800299c:	f000 ffa6 	bl	80038ec <USB_ReadInterrupts>
 80029a0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80029a4:	d04f      	beq.n	8002a46 <HAL_PCD_IRQHandler+0x2d6>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80029a6:	4637      	mov	r7, r6
 80029a8:	f506 6800 	add.w	r8, r6, #2048	; 0x800
 80029ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	f8c8 3004 	str.w	r3, [r8, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80029b8:	2110      	movs	r1, #16
 80029ba:	6820      	ldr	r0, [r4, #0]
 80029bc:	f000 fbf0 	bl	80031a0 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c0:	2200      	movs	r2, #0
 80029c2:	e007      	b.n	80029d4 <HAL_PCD_IRQHandler+0x264>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 80029c4:	eb07 1342 	add.w	r3, r7, r2, lsl #5
 80029c8:	21ff      	movs	r1, #255	; 0xff
 80029ca:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 80029ce:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	3201      	adds	r2, #1
 80029d4:	6863      	ldr	r3, [r4, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d3f4      	bcc.n	80029c4 <HAL_PCD_IRQHandler+0x254>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	f8c8 3018 	str.w	r3, [r8, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029e2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80029e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029ea:	f8c8 301c 	str.w	r3, [r8, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 80029ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029f0:	b163      	cbz	r3, 8002a0c <HAL_PCD_IRQHandler+0x29c>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 80029f2:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 80029f6:	f043 030b 	orr.w	r3, r3, #11
 80029fa:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80029fe:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002a02:	f043 030b 	orr.w	r3, r3, #11
 8002a06:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8002a0a:	e00b      	b.n	8002a24 <HAL_PCD_IRQHandler+0x2b4>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8002a0c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8002a10:	f043 030b 	orr.w	r3, r3, #11
 8002a14:	f8c8 3014 	str.w	r3, [r8, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8002a18:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002a1c:	f043 030b 	orr.w	r3, r3, #11
 8002a20:	f8c8 3010 	str.w	r3, [r8, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a24:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
 8002a28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a2c:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a30:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8002a34:	7c21      	ldrb	r1, [r4, #16]
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	f000 ffa8 	bl	800398c <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a3c:	6822      	ldr	r2, [r4, #0]
 8002a3e:	6953      	ldr	r3, [r2, #20]
 8002a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a44:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a46:	6820      	ldr	r0, [r4, #0]
 8002a48:	f000 ff50 	bl	80038ec <USB_ReadInterrupts>
 8002a4c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002a50:	f000 8093 	beq.w	8002b7a <HAL_PCD_IRQHandler+0x40a>
    {
      USB_ActivateSetup(hpcd->Instance);
 8002a54:	6820      	ldr	r0, [r4, #0]
 8002a56:	f000 ff7d 	bl	8003954 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002a5a:	6822      	ldr	r2, [r4, #0]
 8002a5c:	68d3      	ldr	r3, [r2, #12]
 8002a5e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002a62:	60d3      	str	r3, [r2, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002a64:	6820      	ldr	r0, [r4, #0]
 8002a66:	f000 fbc9 	bl	80031fc <USB_GetDevSpeed>
 8002a6a:	b950      	cbnz	r0, 8002a82 <HAL_PCD_IRQHandler+0x312>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8002a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a74:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002a76:	6822      	ldr	r2, [r4, #0]
 8002a78:	68d3      	ldr	r3, [r2, #12]
 8002a7a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002a7e:	60d3      	str	r3, [r2, #12]
 8002a80:	e073      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002a82:	2303      	movs	r3, #3
 8002a84:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8002a86:	2340      	movs	r3, #64	; 0x40
 8002a88:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8002a8a:	f002 f88d 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8002a8e:	4b88      	ldr	r3, [pc, #544]	; (8002cb0 <HAL_PCD_IRQHandler+0x540>)
 8002a90:	4403      	add	r3, r0
 8002a92:	4a88      	ldr	r2, [pc, #544]	; (8002cb4 <HAL_PCD_IRQHandler+0x544>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d805      	bhi.n	8002aa4 <HAL_PCD_IRQHandler+0x334>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002a98:	6822      	ldr	r2, [r4, #0]
 8002a9a:	68d3      	ldr	r3, [r2, #12]
 8002a9c:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8002aa0:	60d3      	str	r3, [r2, #12]
 8002aa2:	e062      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8002aa4:	4b84      	ldr	r3, [pc, #528]	; (8002cb8 <HAL_PCD_IRQHandler+0x548>)
 8002aa6:	4403      	add	r3, r0
 8002aa8:	4a84      	ldr	r2, [pc, #528]	; (8002cbc <HAL_PCD_IRQHandler+0x54c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d805      	bhi.n	8002aba <HAL_PCD_IRQHandler+0x34a>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	68d3      	ldr	r3, [r2, #12]
 8002ab2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ab6:	60d3      	str	r3, [r2, #12]
 8002ab8:	e057      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8002aba:	f5a0 0374 	sub.w	r3, r0, #15990784	; 0xf40000
 8002abe:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002ac2:	4a7f      	ldr	r2, [pc, #508]	; (8002cc0 <HAL_PCD_IRQHandler+0x550>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d805      	bhi.n	8002ad4 <HAL_PCD_IRQHandler+0x364>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002ac8:	6822      	ldr	r2, [r4, #0]
 8002aca:	68d3      	ldr	r3, [r2, #12]
 8002acc:	f443 5350 	orr.w	r3, r3, #13312	; 0x3400
 8002ad0:	60d3      	str	r3, [r2, #12]
 8002ad2:	e04a      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8002ad4:	f1a0 7383 	sub.w	r3, r0, #17170432	; 0x1060000
 8002ad8:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8002adc:	4a79      	ldr	r2, [pc, #484]	; (8002cc4 <HAL_PCD_IRQHandler+0x554>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d805      	bhi.n	8002aee <HAL_PCD_IRQHandler+0x37e>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002ae2:	6822      	ldr	r2, [r4, #0]
 8002ae4:	68d3      	ldr	r3, [r2, #12]
 8002ae6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002aea:	60d3      	str	r3, [r2, #12]
 8002aec:	e03d      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_PCD_IRQHandler+0x558>)
 8002af0:	4403      	add	r3, r0
 8002af2:	4a76      	ldr	r2, [pc, #472]	; (8002ccc <HAL_PCD_IRQHandler+0x55c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d805      	bhi.n	8002b04 <HAL_PCD_IRQHandler+0x394>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002af8:	6822      	ldr	r2, [r4, #0]
 8002afa:	68d3      	ldr	r3, [r2, #12]
 8002afc:	f443 5330 	orr.w	r3, r3, #11264	; 0x2c00
 8002b00:	60d3      	str	r3, [r2, #12]
 8002b02:	e032      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8002b04:	4b72      	ldr	r3, [pc, #456]	; (8002cd0 <HAL_PCD_IRQHandler+0x560>)
 8002b06:	4403      	add	r3, r0
 8002b08:	4a72      	ldr	r2, [pc, #456]	; (8002cd4 <HAL_PCD_IRQHandler+0x564>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d805      	bhi.n	8002b1a <HAL_PCD_IRQHandler+0x3aa>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	68d3      	ldr	r3, [r2, #12]
 8002b12:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002b16:	60d3      	str	r3, [r2, #12]
 8002b18:	e027      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8002b1a:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <HAL_PCD_IRQHandler+0x568>)
 8002b1c:	4403      	add	r3, r0
 8002b1e:	4a6f      	ldr	r2, [pc, #444]	; (8002cdc <HAL_PCD_IRQHandler+0x56c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d805      	bhi.n	8002b30 <HAL_PCD_IRQHandler+0x3c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002b24:	6822      	ldr	r2, [r4, #0]
 8002b26:	68d3      	ldr	r3, [r2, #12]
 8002b28:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8002b2c:	60d3      	str	r3, [r2, #12]
 8002b2e:	e01c      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8002b30:	f1a0 73b7 	sub.w	r3, r0, #23986176	; 0x16e0000
 8002b34:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002b38:	4a69      	ldr	r2, [pc, #420]	; (8002ce0 <HAL_PCD_IRQHandler+0x570>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d805      	bhi.n	8002b4a <HAL_PCD_IRQHandler+0x3da>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	68d3      	ldr	r3, [r2, #12]
 8002b42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b46:	60d3      	str	r3, [r2, #12]
 8002b48:	e00f      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8002b4a:	4b66      	ldr	r3, [pc, #408]	; (8002ce4 <HAL_PCD_IRQHandler+0x574>)
 8002b4c:	4403      	add	r3, r0
 8002b4e:	4a66      	ldr	r2, [pc, #408]	; (8002ce8 <HAL_PCD_IRQHandler+0x578>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d805      	bhi.n	8002b60 <HAL_PCD_IRQHandler+0x3f0>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	68d3      	ldr	r3, [r2, #12]
 8002b58:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5c:	60d3      	str	r3, [r2, #12]
 8002b5e:	e004      	b.n	8002b6a <HAL_PCD_IRQHandler+0x3fa>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002b60:	6822      	ldr	r2, [r4, #0]
 8002b62:	68d3      	ldr	r3, [r2, #12]
 8002b64:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8002b68:	60d3      	str	r3, [r2, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f7ff f85c 	bl	8001c28 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b70:	6822      	ldr	r2, [r4, #0]
 8002b72:	6953      	ldr	r3, [r2, #20]
 8002b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b78:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b7a:	6820      	ldr	r0, [r4, #0]
 8002b7c:	f000 feb6 	bl	80038ec <USB_ReadInterrupts>
 8002b80:	f010 0f10 	tst.w	r0, #16
 8002b84:	d045      	beq.n	8002c12 <HAL_PCD_IRQHandler+0x4a2>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	6993      	ldr	r3, [r2, #24]
 8002b8a:	f023 0310 	bic.w	r3, r3, #16
 8002b8e:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8002b90:	6a37      	ldr	r7, [r6, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002b92:	f007 080f 	and.w	r8, r7, #15
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8002b96:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d11f      	bne.n	8002bde <HAL_PCD_IRQHandler+0x46e>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ba2:	421f      	tst	r7, r3
 8002ba4:	d030      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x498>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8002ba6:	093f      	lsrs	r7, r7, #4
 8002ba8:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 8002bac:	ebc8 030a 	rsb	r3, r8, sl
 8002bb0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8002bb4:	44a1      	add	r9, r4
 8002bb6:	f3c7 020a 	ubfx	r2, r7, #0, #11
 8002bba:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f000 fdf4 	bl	80037ac <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002bc4:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8002bc8:	f8d9 3204 	ldr.w	r3, [r9, #516]	; 0x204
 8002bcc:	443b      	add	r3, r7
 8002bce:	f8c9 3204 	str.w	r3, [r9, #516]	; 0x204
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002bd2:	f8d9 3210 	ldr.w	r3, [r9, #528]	; 0x210
 8002bd6:	441f      	add	r7, r3
 8002bd8:	f8c9 7210 	str.w	r7, [r9, #528]	; 0x210
 8002bdc:	e014      	b.n	8002c08 <HAL_PCD_IRQHandler+0x498>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d112      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x498>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002be2:	2208      	movs	r2, #8
 8002be4:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8002be8:	4630      	mov	r0, r6
 8002bea:	f000 fddf 	bl	80037ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8002bee:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8002bf2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002bf6:	ebc8 0103 	rsb	r1, r8, r3
 8002bfa:	008a      	lsls	r2, r1, #2
 8002bfc:	4422      	add	r2, r4
 8002bfe:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8002c02:	443b      	add	r3, r7
 8002c04:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c08:	6822      	ldr	r2, [r4, #0]
 8002c0a:	6993      	ldr	r3, [r2, #24]
 8002c0c:	f043 0310 	orr.w	r3, r3, #16
 8002c10:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c12:	6820      	ldr	r0, [r4, #0]
 8002c14:	f000 fe6a 	bl	80038ec <USB_ReadInterrupts>
 8002c18:	f010 0f08 	tst.w	r0, #8
 8002c1c:	d007      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x4be>
    {
      HAL_PCD_SOFCallback(hpcd);
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7fe fffc 	bl	8001c1c <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	6953      	ldr	r3, [r2, #20]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	f000 fe5c 	bl	80038ec <USB_ReadInterrupts>
 8002c34:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002c38:	d008      	beq.n	8002c4c <HAL_PCD_IRQHandler+0x4dc>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8002c3a:	b2e9      	uxtb	r1, r5
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff f827 	bl	8001c90 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	6953      	ldr	r3, [r2, #20]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	f000 fe4d 	bl	80038ec <USB_ReadInterrupts>
 8002c52:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002c56:	d008      	beq.n	8002c6a <HAL_PCD_IRQHandler+0x4fa>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8002c58:	b2e9      	uxtb	r1, r5
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff f812 	bl	8001c84 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c60:	6822      	ldr	r2, [r4, #0]
 8002c62:	6953      	ldr	r3, [r2, #20]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c68:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c6a:	6820      	ldr	r0, [r4, #0]
 8002c6c:	f000 fe3e 	bl	80038ec <USB_ReadInterrupts>
 8002c70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002c74:	d007      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x516>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7ff f810 	bl	8001c9c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c7c:	6822      	ldr	r2, [r4, #0]
 8002c7e:	6953      	ldr	r3, [r2, #20]
 8002c80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c84:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c86:	6820      	ldr	r0, [r4, #0]
 8002c88:	f000 fe30 	bl	80038ec <USB_ReadInterrupts>
 8002c8c:	f010 0f04 	tst.w	r0, #4
 8002c90:	d00b      	beq.n	8002caa <HAL_PCD_IRQHandler+0x53a>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c96:	f015 0f04 	tst.w	r5, #4
 8002c9a:	d002      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x532>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f7ff f803 	bl	8001ca8 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	6853      	ldr	r3, [r2, #4]
 8002ca6:	432b      	orrs	r3, r5
 8002ca8:	6053      	str	r3, [r2, #4]
 8002caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cae:	bf00      	nop
 8002cb0:	ff275340 	.word	0xff275340
 8002cb4:	000c34ff 	.word	0x000c34ff
 8002cb8:	ff1b1e40 	.word	0xff1b1e40
 8002cbc:	000f423f 	.word	0x000f423f
 8002cc0:	00124f7f 	.word	0x00124f7f
 8002cc4:	0013d61f 	.word	0x0013d61f
 8002cc8:	fee5b660 	.word	0xfee5b660
 8002ccc:	0016e35f 	.word	0x0016e35f
 8002cd0:	feced300 	.word	0xfeced300
 8002cd4:	001b773f 	.word	0x001b773f
 8002cd8:	feb35bc0 	.word	0xfeb35bc0
 8002cdc:	002191bf 	.word	0x002191bf
 8002ce0:	0038751f 	.word	0x0038751f
 8002ce4:	fe5954e0 	.word	0xfe5954e0
 8002ce8:	00419cdf 	.word	0x00419cdf

08002cec <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8002cec:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d00b      	beq.n	8002d0c <HAL_PCD_SetAddress+0x20>
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002cfe:	6800      	ldr	r0, [r0, #0]
 8002d00:	f000 fdcc 	bl	800389c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8002d04:	2000      	movs	r0, #0
 8002d06:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002d0a:	bd10      	pop	{r4, pc}
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	4770      	bx	lr

08002d10 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d10:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002d12:	b24d      	sxtb	r5, r1
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	da07      	bge.n	8002d28 <HAL_PCD_EP_Open+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002d18:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8002d1c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8002d20:	00b4      	lsls	r4, r6, #2
 8002d22:	3438      	adds	r4, #56	; 0x38
 8002d24:	4404      	add	r4, r0
 8002d26:	e007      	b.n	8002d38 <HAL_PCD_EP_Open+0x28>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002d28:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8002d2c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8002d30:	00b4      	lsls	r4, r6, #2
 8002d32:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8002d36:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7F;
 8002d38:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002d3c:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002d3e:	0fed      	lsrs	r5, r5, #31
 8002d40:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 8002d42:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8002d44:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in)
 8002d46:	b105      	cbz	r5, 8002d4a <HAL_PCD_EP_Open+0x3a>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d48:	80e1      	strh	r1, [r4, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d101      	bne.n	8002d52 <HAL_PCD_EP_Open+0x42>
  {
    ep->data_pid_start = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	7123      	strb	r3, [r4, #4]
  }
  
  __HAL_LOCK(hpcd); 
 8002d52:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d00b      	beq.n	8002d72 <HAL_PCD_EP_Open+0x62>
 8002d5a:	4605      	mov	r5, r0
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8002d62:	4621      	mov	r1, r4
 8002d64:	6800      	ldr	r0, [r0, #0]
 8002d66:	f000 fa69 	bl	800323c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f885 03b8 	strb.w	r0, [r5, #952]	; 0x3b8
  return ret;
 8002d70:	bd70      	pop	{r4, r5, r6, pc}
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8002d72:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8002d74:	bd70      	pop	{r4, r5, r6, pc}
 8002d76:	bf00      	nop

08002d78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8002d78:	b510      	push	{r4, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002d7a:	b24a      	sxtb	r2, r1
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	da07      	bge.n	8002d90 <HAL_PCD_EP_Close+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002d80:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002d84:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002d88:	00a3      	lsls	r3, r4, #2
 8002d8a:	3338      	adds	r3, #56	; 0x38
 8002d8c:	4403      	add	r3, r0
 8002d8e:	e007      	b.n	8002da0 <HAL_PCD_EP_Close+0x28>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002d90:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002d94:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002d98:	00a3      	lsls	r3, r4, #2
 8002d9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d9e:	4403      	add	r3, r0
  }
  ep->num   = ep_addr & 0x7F;
 8002da0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002da4:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002da6:	0fd2      	lsrs	r2, r2, #31
 8002da8:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002daa:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 8002dae:	2a01      	cmp	r2, #1
 8002db0:	d00b      	beq.n	8002dca <HAL_PCD_EP_Close+0x52>
 8002db2:	4604      	mov	r4, r0
 8002db4:	2201      	movs	r2, #1
 8002db6:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6800      	ldr	r0, [r0, #0]
 8002dbe:	f000 fa89 	bl	80032d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8002dc8:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8002dca:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8002dcc:	bd10      	pop	{r4, pc}
 8002dce:	bf00      	nop

08002dd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002dd6:	00f5      	lsls	r5, r6, #3
 8002dd8:	1ba9      	subs	r1, r5, r6
 8002dda:	008c      	lsls	r4, r1, #2
 8002ddc:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8002de0:	1901      	adds	r1, r0, r4
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002de2:	1bad      	subs	r5, r5, r6
 8002de4:	00ac      	lsls	r4, r5, #2
 8002de6:	4404      	add	r4, r0
 8002de8:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_len = len;
 8002dec:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 8002df6:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8002dfa:	f884 61f8 	strb.w	r6, [r4, #504]	; 0x1f8
  
  if (hpcd->Init.dma_enable == 1U)
 8002dfe:	6903      	ldr	r3, [r0, #16]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_PCD_EP_Receive+0x40>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8002e04:	ebc6 05c6 	rsb	r5, r6, r6, lsl #3
 8002e08:	00ac      	lsls	r4, r5, #2
 8002e0a:	4404      	add	r4, r0
 8002e0c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  }
  
  if ((ep_addr & 0x7F) == 0)
 8002e10:	b926      	cbnz	r6, 8002e1c <HAL_PCD_EP_Receive+0x4c>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	6800      	ldr	r0, [r0, #0]
 8002e16:	f000 fc03 	bl	8003620 <USB_EP0StartXfer>
 8002e1a:	e003      	b.n	8002e24 <HAL_PCD_EP_Receive+0x54>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	6800      	ldr	r0, [r0, #0]
 8002e20:	f000 fad2 	bl	80033c8 <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 8002e24:	2000      	movs	r0, #0
 8002e26:	bd70      	pop	{r4, r5, r6, pc}

08002e28 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8002e28:	f001 010f 	and.w	r1, r1, #15
 8002e2c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002e30:	008b      	lsls	r3, r1, #2
 8002e32:	4418      	add	r0, r3
}
 8002e34:	f8b0 0210 	ldrh.w	r0, [r0, #528]	; 0x210
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop

08002e3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002e42:	00f5      	lsls	r5, r6, #3
 8002e44:	1ba9      	subs	r1, r5, r6
 8002e46:	008c      	lsls	r4, r1, #2
 8002e48:	3438      	adds	r4, #56	; 0x38
 8002e4a:	1901      	adds	r1, r0, r4
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002e4c:	1bad      	subs	r5, r5, r6
 8002e4e:	00ac      	lsls	r4, r5, #2
 8002e50:	4404      	add	r4, r0
 8002e52:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_len = len;
 8002e54:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8002e60:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
  
  if (hpcd->Init.dma_enable == 1U)
 8002e64:	6903      	ldr	r3, [r0, #16]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d104      	bne.n	8002e74 <HAL_PCD_EP_Transmit+0x38>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8002e6a:	ebc6 05c6 	rsb	r5, r6, r6, lsl #3
 8002e6e:	00ac      	lsls	r4, r5, #2
 8002e70:	4404      	add	r4, r0
 8002e72:	64a2      	str	r2, [r4, #72]	; 0x48
  }
  
  if ((ep_addr & 0x7F) == 0)
 8002e74:	b926      	cbnz	r6, 8002e80 <HAL_PCD_EP_Transmit+0x44>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	6800      	ldr	r0, [r0, #0]
 8002e7a:	f000 fbd1 	bl	8003620 <USB_EP0StartXfer>
 8002e7e:	e003      	b.n	8002e88 <HAL_PCD_EP_Transmit+0x4c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6800      	ldr	r0, [r0, #0]
 8002e84:	f000 faa0 	bl	80033c8 <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 8002e88:	2000      	movs	r0, #0
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}

08002e8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e8c:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8002e8e:	b24a      	sxtb	r2, r1
 8002e90:	2a00      	cmp	r2, #0
 8002e92:	da07      	bge.n	8002ea4 <HAL_PCD_EP_SetStall+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002e94:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002e98:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002e9c:	00a3      	lsls	r3, r4, #2
 8002e9e:	3338      	adds	r3, #56	; 0x38
 8002ea0:	4403      	add	r3, r0
 8002ea2:	e005      	b.n	8002eb0 <HAL_PCD_EP_SetStall+0x24>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ea4:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8002ea8:	00a3      	lsls	r3, r4, #2
 8002eaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eae:	4403      	add	r3, r0
  }
  
  ep->is_stall = 1U;
 8002eb0:	2401      	movs	r4, #1
 8002eb2:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8002eb4:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002eb8:	701c      	strb	r4, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002eba:	0fd2      	lsrs	r2, r2, #31
 8002ebc:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 8002ebe:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 8002ec2:	2a01      	cmp	r2, #1
 8002ec4:	d012      	beq.n	8002eec <HAL_PCD_EP_SetStall+0x60>
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6800      	ldr	r0, [r0, #0]
 8002ed2:	f000 fc7d 	bl	80037d0 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8002ed6:	b92c      	cbnz	r4, 8002ee4 <HAL_PCD_EP_SetStall+0x58>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ed8:	f505 726f 	add.w	r2, r5, #956	; 0x3bc
 8002edc:	7c29      	ldrb	r1, [r5, #16]
 8002ede:	6828      	ldr	r0, [r5, #0]
 8002ee0:	f000 fd54 	bl	800398c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f885 03b8 	strb.w	r0, [r5, #952]	; 0x3b8
  
  return HAL_OK;
 8002eea:	bd38      	pop	{r3, r4, r5, pc}
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  
  __HAL_LOCK(hpcd); 
 8002eec:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8002eee:	bd38      	pop	{r3, r4, r5, pc}

08002ef0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef0:	b510      	push	{r4, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8002ef2:	b24a      	sxtb	r2, r1
 8002ef4:	2a00      	cmp	r2, #0
 8002ef6:	da07      	bge.n	8002f08 <HAL_PCD_EP_ClrStall+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002ef8:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002efc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8002f00:	00a3      	lsls	r3, r4, #2
 8002f02:	3338      	adds	r3, #56	; 0x38
 8002f04:	4403      	add	r3, r0
 8002f06:	e005      	b.n	8002f14 <HAL_PCD_EP_ClrStall+0x24>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f08:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8002f0c:	00a3      	lsls	r3, r4, #2
 8002f0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f12:	4403      	add	r3, r0
  }
  
  ep->is_stall = 0U;
 8002f14:	2400      	movs	r4, #0
 8002f16:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8002f18:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002f1c:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002f1e:	0fd2      	lsrs	r2, r2, #31
 8002f20:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002f22:	f890 23b8 	ldrb.w	r2, [r0, #952]	; 0x3b8
 8002f26:	2a01      	cmp	r2, #1
 8002f28:	d00b      	beq.n	8002f42 <HAL_PCD_EP_ClrStall+0x52>
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8002f32:	4619      	mov	r1, r3
 8002f34:	6800      	ldr	r0, [r0, #0]
 8002f36:	f000 fc7d 	bl	8003834 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
    
  return HAL_OK;
 8002f40:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 8002f42:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	bf00      	nop

08002f48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f48:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f4a:	6804      	ldr	r4, [r0, #0]
 8002f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  
  if(fifo == 0)
 8002f4e:	b919      	cbnz	r1, 8002f58 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8002f50:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 8002f54:	62a0      	str	r0, [r4, #40]	; 0x28
 8002f56:	e018      	b.n	8002f8a <HAL_PCDEx_SetTxFiFo+0x42>
 8002f58:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8002f5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002f5c:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	e008      	b.n	8002f76 <HAL_PCDEx_SetTxFiFo+0x2e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8002f64:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002f68:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002f6c:	6849      	ldr	r1, [r1, #4]
 8002f6e:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
    for (i = 0; i < (fifo - 1); i++)
 8002f72:	3301      	adds	r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	1e69      	subs	r1, r5, #1
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	dbf3      	blt.n	8002f64 <HAL_PCDEx_SetTxFiFo+0x1c>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8002f7c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002f80:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8002f84:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002f88:	6048      	str	r0, [r1, #4]
  }
  
  return HAL_OK;
}
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	bc30      	pop	{r4, r5}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002f90:	6803      	ldr	r3, [r0, #0]
 8002f92:	6259      	str	r1, [r3, #36]	; 0x24
  
  return HAL_OK;
}
 8002f94:	2000      	movs	r0, #0
 8002f96:	4770      	bx	lr

08002f98 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f98:	b084      	sub	sp, #16
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	a803      	add	r0, sp, #12
 8002fa0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fa4:	9b08      	ldr	r3, [sp, #32]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d118      	bne.n	8002fdc <USB_CoreInit+0x44>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002faa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb0:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fb2:	68e3      	ldr	r3, [r4, #12]
 8002fb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fbc:	60e3      	str	r3, [r4, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fbe:	68e3      	ldr	r3, [r4, #12]
 8002fc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002fc4:	60e3      	str	r3, [r4, #12]
    if(cfg.use_external_vbus == 1U)
 8002fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d103      	bne.n	8002fd4 <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fcc:	68e3      	ldr	r3, [r4, #12]
 8002fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd2:	60e3      	str	r3, [r4, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f000 fcfb 	bl	80039d0 <USB_CoreReset>
 8002fda:	e009      	b.n	8002ff0 <USB_CoreInit+0x58>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fdc:	68e3      	ldr	r3, [r4, #12]
 8002fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe2:	60e3      	str	r3, [r4, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f000 fcf3 	bl	80039d0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fee:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8002ff0:	9b06      	ldr	r3, [sp, #24]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <USB_CoreInit+0x6e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ff6:	68a3      	ldr	r3, [r4, #8]
 8002ff8:	f043 0306 	orr.w	r3, r3, #6
 8002ffc:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ffe:	68a3      	ldr	r3, [r4, #8]
 8003000:	f043 0320 	orr.w	r3, r3, #32
 8003004:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8003006:	2000      	movs	r0, #0
 8003008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800300c:	b004      	add	sp, #16
 800300e:	4770      	bx	lr

08003010 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003010:	6883      	ldr	r3, [r0, #8]
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003018:	2000      	movs	r0, #0
 800301a:	4770      	bx	lr

0800301c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800301c:	6883      	ldr	r3, [r0, #8]
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003024:	2000      	movs	r0, #0
 8003026:	4770      	bx	lr

08003028 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8003028:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800302a:	68c3      	ldr	r3, [r0, #12]
 800302c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003030:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8003032:	2901      	cmp	r1, #1
 8003034:	d104      	bne.n	8003040 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8003036:	68c3      	ldr	r3, [r0, #12]
 8003038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800303c:	60c3      	str	r3, [r0, #12]
 800303e:	e004      	b.n	800304a <USB_SetCurrentMode+0x22>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8003040:	b919      	cbnz	r1, 800304a <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8003042:	68c3      	ldr	r3, [r0, #12]
 8003044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003048:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 800304a:	2032      	movs	r0, #50	; 0x32
 800304c:	f002 f974 	bl	8005338 <HAL_Delay>
  
  return HAL_OK;
}
 8003050:	2000      	movs	r0, #0
 8003052:	bd08      	pop	{r3, pc}

08003054 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003054:	b084      	sub	sp, #16
 8003056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003058:	4605      	mov	r5, r0
 800305a:	a807      	add	r0, sp, #28
 800305c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8003060:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8003062:	b927      	cbnz	r7, 800306e <USB_DevInit+0x1a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003064:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800306a:	63ab      	str	r3, [r5, #56]	; 0x38
 800306c:	e003      	b.n	8003076 <USB_DevInit+0x22>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800306e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003070:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003074:	63ab      	str	r3, [r5, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003076:	462c      	mov	r4, r5
 8003078:	2300      	movs	r3, #0
 800307a:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800307e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
 8003082:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8003086:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 800308a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10b      	bne.n	80030a8 <USB_DevInit+0x54>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8003090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003092:	b923      	cbnz	r3, 800309e <USB_DevInit+0x4a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8003094:	2100      	movs	r1, #0
 8003096:	4628      	mov	r0, r5
 8003098:	f000 f8a8 	bl	80031ec <USB_SetDevSpeed>
 800309c:	e008      	b.n	80030b0 <USB_DevInit+0x5c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800309e:	2101      	movs	r1, #1
 80030a0:	4628      	mov	r0, r5
 80030a2:	f000 f8a3 	bl	80031ec <USB_SetDevSpeed>
 80030a6:	e003      	b.n	80030b0 <USB_DevInit+0x5c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80030a8:	2103      	movs	r1, #3
 80030aa:	4628      	mov	r0, r5
 80030ac:	f000 f89e 	bl	80031ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 80030b0:	2110      	movs	r1, #16
 80030b2:	4628      	mov	r0, r5
 80030b4:	f000 f874 	bl	80031a0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 f885 	bl	80031c8 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030c2:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	61b2      	str	r2, [r6, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 80030ca:	61f3      	str	r3, [r6, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030cc:	e014      	b.n	80030f8 <USB_DevInit+0xa4>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030ce:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80030d2:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80030d6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80030da:	2800      	cmp	r0, #0
 80030dc:	da04      	bge.n	80030e8 <USB_DevInit+0x94>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80030de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e2:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80030e6:	e002      	b.n	80030ee <USB_DevInit+0x9a>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030e8:	2000      	movs	r0, #0
 80030ea:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030ee:	2200      	movs	r2, #0
 80030f0:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	608a      	str	r2, [r1, #8]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030f6:	3301      	adds	r3, #1
 80030f8:	9907      	ldr	r1, [sp, #28]
 80030fa:	428b      	cmp	r3, r1
 80030fc:	d3e7      	bcc.n	80030ce <USB_DevInit+0x7a>
 80030fe:	2300      	movs	r3, #0
 8003100:	e016      	b.n	8003130 <USB_DevInit+0xdc>
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003102:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003106:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800310a:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
 800310e:	f1be 0f00 	cmp.w	lr, #0
 8003112:	da04      	bge.n	800311e <USB_DevInit+0xca>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003114:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
 8003118:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
 800311c:	e003      	b.n	8003126 <USB_DevInit+0xd2>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800311e:	f04f 0e00 	mov.w	lr, #0
 8003122:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003126:	2200      	movs	r2, #0
 8003128:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 800312a:	22ff      	movs	r2, #255	; 0xff
 800312c:	6082      	str	r2, [r0, #8]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800312e:	3301      	adds	r3, #1
 8003130:	428b      	cmp	r3, r1
 8003132:	d3e6      	bcc.n	8003102 <USB_DevInit+0xae>
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003134:	6933      	ldr	r3, [r6, #16]
 8003136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313a:	6133      	str	r3, [r6, #16]
  
  if (cfg.dma_enable == 1U)
 800313c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800313e:	2b01      	cmp	r3, #1
 8003140:	d108      	bne.n	8003154 <USB_DevInit+0x100>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003142:	4a15      	ldr	r2, [pc, #84]	; (8003198 <USB_DevInit+0x144>)
 8003144:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003146:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8003148:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800314c:	f042 0203 	orr.w	r2, r2, #3
 8003150:	6332      	str	r2, [r6, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8003152:	6b32      	ldr	r2, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003154:	2200      	movs	r2, #0
 8003156:	61aa      	str	r2, [r5, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003158:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800315c:	616a      	str	r2, [r5, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800315e:	b91b      	cbnz	r3, 8003168 <USB_DevInit+0x114>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003160:	69ab      	ldr	r3, [r5, #24]
 8003162:	f043 0310 	orr.w	r3, r3, #16
 8003166:	61ab      	str	r3, [r5, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003168:	69aa      	ldr	r2, [r5, #24]
 800316a:	4b0c      	ldr	r3, [pc, #48]	; (800319c <USB_DevInit+0x148>)
 800316c:	4313      	orrs	r3, r2
 800316e:	61ab      	str	r3, [r5, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8003170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003172:	b11b      	cbz	r3, 800317c <USB_DevInit+0x128>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003174:	69ab      	ldr	r3, [r5, #24]
 8003176:	f043 0308 	orr.w	r3, r3, #8
 800317a:	61ab      	str	r3, [r5, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800317c:	2f01      	cmp	r7, #1
 800317e:	d105      	bne.n	800318c <USB_DevInit+0x138>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8003180:	69ab      	ldr	r3, [r5, #24]
 8003182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	61ab      	str	r3, [r5, #24]
  }
  
  return HAL_OK;
}
 800318c:	2000      	movs	r0, #0
 800318e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003192:	b004      	add	sp, #16
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	00800100 	.word	0x00800100
 800319c:	803c3800 	.word	0x803c3800

080031a0 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80031a0:	0189      	lsls	r1, r1, #6
 80031a2:	f041 0120 	orr.w	r1, r1, #32
 80031a6:	6101      	str	r1, [r0, #16]
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
 80031a8:	2300      	movs	r3, #0
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
  
  do
  {
    if (++count > 200000)
 80031aa:	3301      	adds	r3, #1
 80031ac:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <USB_FlushTxFifo+0x24>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d805      	bhi.n	80031be <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031b2:	6902      	ldr	r2, [r0, #16]
 80031b4:	f012 0f20 	tst.w	r2, #32
 80031b8:	d1f7      	bne.n	80031aa <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80031ba:	2000      	movs	r0, #0
 80031bc:	4770      	bx	lr
  
  do
  {
    if (++count > 200000)
    {
      return HAL_TIMEOUT;
 80031be:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
  
  return HAL_OK;
}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	00030d40 	.word	0x00030d40

080031c8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031c8:	2310      	movs	r3, #16
 80031ca:	6103      	str	r3, [r0, #16]
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
 80031cc:	2300      	movs	r3, #0
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
  
  do
  {
    if (++count > 200000)
 80031ce:	3301      	adds	r3, #1
 80031d0:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <USB_FlushRxFifo+0x20>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d805      	bhi.n	80031e2 <USB_FlushRxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031d6:	6902      	ldr	r2, [r0, #16]
 80031d8:	f012 0f10 	tst.w	r2, #16
 80031dc:	d1f7      	bne.n	80031ce <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80031de:	2000      	movs	r0, #0
 80031e0:	4770      	bx	lr
  
  do
  {
    if (++count > 200000)
    {
      return HAL_TIMEOUT;
 80031e2:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
  
  return HAL_OK;
}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	00030d40 	.word	0x00030d40

080031ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 80031ec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80031f0:	4319      	orrs	r1, r3
 80031f2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 80031f6:	2000      	movs	r0, #0
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop

080031fc <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80031fc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003200:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003204:	f013 0f06 	tst.w	r3, #6
 8003208:	d010      	beq.n	800322c <USB_GetDevSpeed+0x30>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800320a:	6883      	ldr	r3, [r0, #8]
 800320c:	f003 0306 	and.w	r3, r3, #6
 8003210:	2b02      	cmp	r3, #2
 8003212:	d00d      	beq.n	8003230 <USB_GetDevSpeed+0x34>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8003214:	6883      	ldr	r3, [r0, #8]
 8003216:	f003 0306 	and.w	r3, r3, #6
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800321a:	2b06      	cmp	r3, #6
 800321c:	d00a      	beq.n	8003234 <USB_GetDevSpeed+0x38>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800321e:	6883      	ldr	r3, [r0, #8]
 8003220:	f003 0306 	and.w	r3, r3, #6
 8003224:	2b04      	cmp	r3, #4
 8003226:	d007      	beq.n	8003238 <USB_GetDevSpeed+0x3c>
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
 8003228:	2000      	movs	r0, #0
 800322a:	4770      	bx	lr
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
 800322c:	2000      	movs	r0, #0
 800322e:	4770      	bx	lr
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8003230:	2003      	movs	r0, #3
 8003232:	4770      	bx	lr
 8003234:	2003      	movs	r0, #3
 8003236:	4770      	bx	lr
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
  {
    speed = USB_OTG_SPEED_LOW;
 8003238:	2002      	movs	r0, #2
  }
  
  return speed;
}
 800323a:	4770      	bx	lr

0800323c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800323c:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 800323e:	784b      	ldrb	r3, [r1, #1]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d123      	bne.n	800328c <USB_ActivateEndpoint+0x50>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003244:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8003248:	780b      	ldrb	r3, [r1, #0]
 800324a:	2201      	movs	r2, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	b29b      	uxth	r3, r3
 8003252:	4323      	orrs	r3, r4
 8003254:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003258:	780d      	ldrb	r5, [r1, #0]
 800325a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 800325e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003262:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003266:	d131      	bne.n	80032cc <USB_ActivateEndpoint+0x90>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003268:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800326c:	688a      	ldr	r2, [r1, #8]
 800326e:	f3c2 040a 	ubfx	r4, r2, #0, #11
 8003272:	78ca      	ldrb	r2, [r1, #3]
 8003274:	ea44 4282 	orr.w	r2, r4, r2, lsl #18
 8003278:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 800327c:	4313      	orrs	r3, r2
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003286:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800328a:	e01f      	b.n	80032cc <USB_ActivateEndpoint+0x90>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 800328c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003290:	780d      	ldrb	r5, [r1, #0]
 8003292:	2301      	movs	r3, #1
 8003294:	40ab      	lsls	r3, r5
 8003296:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800329a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800329e:	780b      	ldrb	r3, [r1, #0]
 80032a0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80032a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80032a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80032ac:	d10e      	bne.n	80032cc <USB_ActivateEndpoint+0x90>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80032ae:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80032b2:	688a      	ldr	r2, [r1, #8]
 80032b4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80032b8:	78c9      	ldrb	r1, [r1, #3]
 80032ba:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80032be:	4313      	orrs	r3, r2
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80032cc:	2000      	movs	r0, #0
 80032ce:	bc30      	pop	{r4, r5}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop

080032d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 80032d6:	784b      	ldrb	r3, [r1, #1]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d137      	bne.n	800334c <USB_DeactivateEndpoint+0x78>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 80032dc:	780b      	ldrb	r3, [r1, #0]
 80032de:	4604      	mov	r4, r0
 80032e0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80032e4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80032e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ec:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032f0:	780b      	ldrb	r3, [r1, #0]
 80032f2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80032f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032fa:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80032fe:	780b      	ldrb	r3, [r1, #0]
 8003300:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003308:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t count = 0U;
 800330c:	2200      	movs	r2, #0
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
    
    do
    {
      if (++count > 200000U)
 800330e:	3201      	adds	r2, #1
 8003310:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <USB_DeactivateEndpoint+0xf0>)
 8003312:	429a      	cmp	r2, r3
 8003314:	d851      	bhi.n	80033ba <USB_DeactivateEndpoint+0xe6>
        return HAL_TIMEOUT;
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8003316:	780b      	ldrb	r3, [r1, #0]
 8003318:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 800331c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003326:	d1f2      	bne.n	800330e <USB_DeactivateEndpoint+0x3a>
 8003328:	460d      	mov	r5, r1
 800332a:	4604      	mov	r4, r0
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 800332c:	2110      	movs	r1, #16
 800332e:	f7ff ff37 	bl	80031a0 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003332:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8003336:	782b      	ldrb	r3, [r5, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	ea21 0303 	bic.w	r3, r1, r3
 8003344:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8003348:	2000      	movs	r0, #0
 800334a:	bd38      	pop	{r3, r4, r5, pc}
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 800334c:	780b      	ldrb	r3, [r1, #0]
 800334e:	4604      	mov	r4, r0
 8003350:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003354:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003360:	780b      	ldrb	r3, [r1, #0]
 8003362:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800336a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 800336e:	780b      	ldrb	r3, [r1, #0]
 8003370:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003378:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t count = 0U;
 800337c:	2200      	movs	r2, #0
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
    
    do
    {
      if (++count > 200000U)
 800337e:	3201      	adds	r2, #1
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <USB_DeactivateEndpoint+0xf0>)
 8003382:	429a      	cmp	r2, r3
 8003384:	d81b      	bhi.n	80033be <USB_DeactivateEndpoint+0xea>
        return HAL_TIMEOUT;
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8003386:	780b      	ldrb	r3, [r1, #0]
 8003388:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f013 0f10 	tst.w	r3, #16
 8003396:	d1f2      	bne.n	800337e <USB_DeactivateEndpoint+0xaa>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003398:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800339c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80033a4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80033a8:	7809      	ldrb	r1, [r1, #0]
 80033aa:	2301      	movs	r3, #1
 80033ac:	408b      	lsls	r3, r1
 80033ae:	ea22 4303 	bic.w	r3, r2, r3, lsl #16
 80033b2:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
  }
  return HAL_OK;
 80033b6:	2000      	movs	r0, #0
 80033b8:	bd38      	pop	{r3, r4, r5, pc}
    
    do
    {
      if (++count > 200000U)
      {
        return HAL_TIMEOUT;
 80033ba:	2003      	movs	r0, #3
 80033bc:	bd38      	pop	{r3, r4, r5, pc}
    
    do
    {
      if (++count > 200000U)
      {
        return HAL_TIMEOUT;
 80033be:	2003      	movs	r0, #3
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
}
 80033c0:	bd38      	pop	{r3, r4, r5, pc}
 80033c2:	bf00      	nop
 80033c4:	00030d40 	.word	0x00030d40

080033c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	b082      	sub	sp, #8
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 80033cc:	784b      	ldrb	r3, [r1, #1]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 80ab 	bne.w	800352a <USB_EPStartXfer+0x162>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80033d4:	694b      	ldr	r3, [r1, #20]
 80033d6:	b9eb      	cbnz	r3, 8003414 <USB_EPStartXfer+0x4c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80033d8:	780b      	ldrb	r3, [r1, #0]
 80033da:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80033de:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80033e2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80033e6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80033ea:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 80033ee:	780b      	ldrb	r3, [r1, #0]
 80033f0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80033f4:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80033f8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80033fc:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003400:	780b      	ldrb	r3, [r1, #0]
 8003402:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003406:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800340a:	0ce4      	lsrs	r4, r4, #19
 800340c:	04e4      	lsls	r4, r4, #19
 800340e:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8003412:	e044      	b.n	800349e <USB_EPStartXfer+0xd6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003414:	780b      	ldrb	r3, [r1, #0]
 8003416:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800341a:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800341e:	0ce4      	lsrs	r4, r4, #19
 8003420:	04e4      	lsls	r4, r4, #19
 8003422:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003426:	780b      	ldrb	r3, [r1, #0]
 8003428:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800342c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003430:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003434:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003438:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 800343c:	780c      	ldrb	r4, [r1, #0]
 800343e:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003442:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8003446:	694b      	ldr	r3, [r1, #20]
 8003448:	688d      	ldr	r5, [r1, #8]
 800344a:	442b      	add	r3, r5
 800344c:	3b01      	subs	r3, #1
 800344e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003452:	4d72      	ldr	r5, [pc, #456]	; (800361c <USB_EPStartXfer+0x254>)
 8003454:	ea05 43c3 	and.w	r3, r5, r3, lsl #19
 8003458:	4333      	orrs	r3, r6
 800345a:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800345e:	780b      	ldrb	r3, [r1, #0]
 8003460:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003464:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 8003468:	694c      	ldr	r4, [r1, #20]
 800346a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800346e:	432c      	orrs	r4, r5
 8003470:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      
      if (ep->type == EP_TYPE_ISOC)
 8003474:	78cb      	ldrb	r3, [r1, #3]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d111      	bne.n	800349e <USB_EPStartXfer+0xd6>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800347a:	780b      	ldrb	r3, [r1, #0]
 800347c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003480:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003484:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8003488:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800348c:	780b      	ldrb	r3, [r1, #0]
 800348e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003492:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003496:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800349a:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      }       
    }

    if (dma == 1U)
 800349e:	2a01      	cmp	r2, #1
 80034a0:	d106      	bne.n	80034b0 <USB_EPStartXfer+0xe8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80034a2:	780b      	ldrb	r3, [r1, #0]
 80034a4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80034a8:	690c      	ldr	r4, [r1, #16]
 80034aa:	f8c3 4914 	str.w	r4, [r3, #2324]	; 0x914
 80034ae:	e00d      	b.n	80034cc <USB_EPStartXfer+0x104>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80034b0:	78cb      	ldrb	r3, [r1, #3]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d00a      	beq.n	80034cc <USB_EPStartXfer+0x104>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80034b6:	694b      	ldr	r3, [r1, #20]
 80034b8:	b143      	cbz	r3, 80034cc <USB_EPStartXfer+0x104>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80034ba:	f8d0 6834 	ldr.w	r6, [r0, #2100]	; 0x834
 80034be:	780b      	ldrb	r3, [r1, #0]
 80034c0:	2401      	movs	r4, #1
 80034c2:	fa04 f303 	lsl.w	r3, r4, r3
 80034c6:	4333      	orrs	r3, r6
 80034c8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80034cc:	78cb      	ldrb	r3, [r1, #3]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d117      	bne.n	8003502 <USB_EPStartXfer+0x13a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80034d2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80034d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034da:	d109      	bne.n	80034f0 <USB_EPStartXfer+0x128>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034dc:	780b      	ldrb	r3, [r1, #0]
 80034de:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80034e2:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80034e6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80034ea:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80034ee:	e008      	b.n	8003502 <USB_EPStartXfer+0x13a>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034f0:	780b      	ldrb	r3, [r1, #0]
 80034f2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80034f6:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80034fa:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80034fe:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003502:	780b      	ldrb	r3, [r1, #0]
 8003504:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003508:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800350c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003510:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
    
    if (ep->type == EP_TYPE_ISOC)
 8003514:	78cb      	ldrb	r3, [r1, #3]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d17c      	bne.n	8003614 <USB_EPStartXfer+0x24c>
 800351a:	4614      	mov	r4, r2
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800351c:	8a8b      	ldrh	r3, [r1, #20]
 800351e:	780a      	ldrb	r2, [r1, #0]
 8003520:	68c9      	ldr	r1, [r1, #12]
 8003522:	9400      	str	r4, [sp, #0]
 8003524:	f000 f92c 	bl	8003780 <USB_WritePacket>
 8003528:	e074      	b.n	8003614 <USB_EPStartXfer+0x24c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800352a:	780b      	ldrb	r3, [r1, #0]
 800352c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003530:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8003534:	0ce4      	lsrs	r4, r4, #19
 8003536:	04e4      	lsls	r4, r4, #19
 8003538:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800353c:	780b      	ldrb	r3, [r1, #0]
 800353e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003542:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8003546:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800354a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800354e:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10

    if (ep->xfer_len == 0U)
 8003552:	694b      	ldr	r3, [r1, #20]
 8003554:	b9a3      	cbnz	r3, 8003580 <USB_EPStartXfer+0x1b8>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003556:	780b      	ldrb	r3, [r1, #0]
 8003558:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800355c:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 8003560:	688c      	ldr	r4, [r1, #8]
 8003562:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003566:	432c      	orrs	r4, r5
 8003568:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 800356c:	780b      	ldrb	r3, [r1, #0]
 800356e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003572:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 8003576:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800357a:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
 800357e:	e01d      	b.n	80035bc <USB_EPStartXfer+0x1f4>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003580:	688c      	ldr	r4, [r1, #8]
 8003582:	4423      	add	r3, r4
 8003584:	3b01      	subs	r3, #1
 8003586:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 800358a:	780c      	ldrb	r4, [r1, #0]
 800358c:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003590:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 8003594:	4d21      	ldr	r5, [pc, #132]	; (800361c <USB_EPStartXfer+0x254>)
 8003596:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 800359a:	4335      	orrs	r5, r6
 800359c:	f8c4 5b10 	str.w	r5, [r4, #2832]	; 0xb10
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80035a0:	780d      	ldrb	r5, [r1, #0]
 80035a2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
 80035a6:	f8d5 6b10 	ldr.w	r6, [r5, #2832]	; 0xb10
 80035aa:	688c      	ldr	r4, [r1, #8]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	fb04 f403 	mul.w	r4, r4, r3
 80035b2:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80035b6:	4334      	orrs	r4, r6
 80035b8:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
    }

    if (dma == 1U)
 80035bc:	2a01      	cmp	r2, #1
 80035be:	d105      	bne.n	80035cc <USB_EPStartXfer+0x204>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80035c0:	780b      	ldrb	r3, [r1, #0]
 80035c2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80035c6:	68ca      	ldr	r2, [r1, #12]
 80035c8:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
    }
    
    if (ep->type == EP_TYPE_ISOC)
 80035cc:	78cb      	ldrb	r3, [r1, #3]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d117      	bne.n	8003602 <USB_EPStartXfer+0x23a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80035d2:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80035d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035da:	d109      	bne.n	80035f0 <USB_EPStartXfer+0x228>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80035dc:	780b      	ldrb	r3, [r1, #0]
 80035de:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80035e2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80035e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80035ea:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80035ee:	e008      	b.n	8003602 <USB_EPStartXfer+0x23a>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80035f0:	780b      	ldrb	r3, [r1, #0]
 80035f2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80035f6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80035fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035fe:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003602:	780b      	ldrb	r3, [r1, #0]
 8003604:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003608:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800360c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003610:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }
  return HAL_OK;
}
 8003614:	2000      	movs	r0, #0
 8003616:	b002      	add	sp, #8
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	bf00      	nop
 800361c:	1ff80000 	.word	0x1ff80000

08003620 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003620:	b430      	push	{r4, r5}
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003622:	784b      	ldrb	r3, [r1, #1]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d16b      	bne.n	8003700 <USB_EP0StartXfer+0xe0>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003628:	694b      	ldr	r3, [r1, #20]
 800362a:	b9eb      	cbnz	r3, 8003668 <USB_EP0StartXfer+0x48>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800362c:	780b      	ldrb	r3, [r1, #0]
 800362e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003632:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003636:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800363a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800363e:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003642:	780b      	ldrb	r3, [r1, #0]
 8003644:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003648:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800364c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003650:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003654:	780b      	ldrb	r3, [r1, #0]
 8003656:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800365a:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800365e:	0ce4      	lsrs	r4, r4, #19
 8003660:	04e4      	lsls	r4, r4, #19
 8003662:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
 8003666:	e02c      	b.n	80036c2 <USB_EP0StartXfer+0xa2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003668:	780b      	ldrb	r3, [r1, #0]
 800366a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800366e:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003672:	0ce4      	lsrs	r4, r4, #19
 8003674:	04e4      	lsls	r4, r4, #19
 8003676:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800367a:	780b      	ldrb	r3, [r1, #0]
 800367c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003680:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8003684:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003688:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800368c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      
      if(ep->xfer_len > ep->maxpacket)
 8003690:	694c      	ldr	r4, [r1, #20]
 8003692:	688b      	ldr	r3, [r1, #8]
 8003694:	429c      	cmp	r4, r3
 8003696:	d900      	bls.n	800369a <USB_EP0StartXfer+0x7a>
      {
        ep->xfer_len = ep->maxpacket;
 8003698:	614b      	str	r3, [r1, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 800369a:	780b      	ldrb	r3, [r1, #0]
 800369c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80036a0:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 80036a4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80036a8:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80036ac:	780b      	ldrb	r3, [r1, #0]
 80036ae:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80036b2:	f8d3 5910 	ldr.w	r5, [r3, #2320]	; 0x910
 80036b6:	694c      	ldr	r4, [r1, #20]
 80036b8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80036bc:	432c      	orrs	r4, r5
 80036be:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 80036c2:	780b      	ldrb	r3, [r1, #0]
 80036c4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80036c8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80036cc:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80036d0:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
    
    if (dma == 1)
 80036d4:	2a01      	cmp	r2, #1
 80036d6:	d106      	bne.n	80036e6 <USB_EP0StartXfer+0xc6>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036d8:	780b      	ldrb	r3, [r1, #0]
 80036da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80036de:	690b      	ldr	r3, [r1, #16]
 80036e0:	f8c0 3914 	str.w	r3, [r0, #2324]	; 0x914
 80036e4:	e049      	b.n	800377a <USB_EP0StartXfer+0x15a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80036e6:	694b      	ldr	r3, [r1, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d046      	beq.n	800377a <USB_EP0StartXfer+0x15a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 80036ec:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80036f0:	780b      	ldrb	r3, [r1, #0]
 80036f2:	2201      	movs	r2, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	4323      	orrs	r3, r4
 80036fa:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80036fe:	e03c      	b.n	800377a <USB_EP0StartXfer+0x15a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003700:	780b      	ldrb	r3, [r1, #0]
 8003702:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003706:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 800370a:	0ce4      	lsrs	r4, r4, #19
 800370c:	04e4      	lsls	r4, r4, #19
 800370e:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003712:	780b      	ldrb	r3, [r1, #0]
 8003714:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003718:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 800371c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003720:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003724:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
      
    if (ep->xfer_len > 0U)
 8003728:	694b      	ldr	r3, [r1, #20]
 800372a:	b10b      	cbz	r3, 8003730 <USB_EP0StartXfer+0x110>
    {
      ep->xfer_len = ep->maxpacket;
 800372c:	688b      	ldr	r3, [r1, #8]
 800372e:	614b      	str	r3, [r1, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003730:	780b      	ldrb	r3, [r1, #0]
 8003732:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003736:	f8d3 4b10 	ldr.w	r4, [r3, #2832]	; 0xb10
 800373a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800373e:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003742:	780b      	ldrb	r3, [r1, #0]
 8003744:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003748:	f8d3 5b10 	ldr.w	r5, [r3, #2832]	; 0xb10
 800374c:	688c      	ldr	r4, [r1, #8]
 800374e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003752:	432c      	orrs	r4, r5
 8003754:	f8c3 4b10 	str.w	r4, [r3, #2832]	; 0xb10
    

    if (dma == 1U)
 8003758:	2a01      	cmp	r2, #1
 800375a:	d105      	bne.n	8003768 <USB_EP0StartXfer+0x148>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800375c:	780b      	ldrb	r3, [r1, #0]
 800375e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003762:	68ca      	ldr	r2, [r1, #12]
 8003764:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003768:	780b      	ldrb	r3, [r1, #0]
 800376a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800376e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003772:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003776:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }
  return HAL_OK;
}
 800377a:	2000      	movs	r0, #0
 800377c:	bc30      	pop	{r4, r5}
 800377e:	4770      	bx	lr

08003780 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003780:	b470      	push	{r4, r5, r6}
 8003782:	f89d 400c 	ldrb.w	r4, [sp, #12]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8003786:	b96c      	cbnz	r4, 80037a4 <USB_WritePacket+0x24>
  {
    count32b =  (len + 3U) / 4U;
 8003788:	3303      	adds	r3, #3
 800378a:	089b      	lsrs	r3, r3, #2
    for (i = 0U; i < count32b; i++, src += 4U)
 800378c:	2500      	movs	r5, #0
 800378e:	e007      	b.n	80037a0 <USB_WritePacket+0x20>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003790:	eb00 3402 	add.w	r4, r0, r2, lsl #12
 8003794:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8003798:	f851 6b04 	ldr.w	r6, [r1], #4
 800379c:	6026      	str	r6, [r4, #0]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 800379e:	3501      	adds	r5, #1
 80037a0:	429d      	cmp	r5, r3
 80037a2:	d3f5      	bcc.n	8003790 <USB_WritePacket+0x10>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
    }
  }
  return HAL_OK;
}
 80037a4:	2000      	movs	r0, #0
 80037a6:	bc70      	pop	{r4, r5, r6}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop

080037ac <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80037ac:	b410      	push	{r4}
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 80037ae:	3203      	adds	r2, #3
 80037b0:	0892      	lsrs	r2, r2, #2
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80037b2:	2300      	movs	r3, #0
 80037b4:	e005      	b.n	80037c2 <USB_ReadPacket+0x16>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80037b6:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80037ba:	6824      	ldr	r4, [r4, #0]
 80037bc:	f841 4b04 	str.w	r4, [r1], #4
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80037c0:	3301      	adds	r3, #1
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d3f7      	bcc.n	80037b6 <USB_ReadPacket+0xa>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
    
  }
  return ((void *)dest);
}
 80037c6:	4608      	mov	r0, r1
 80037c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop

080037d0 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 80037d0:	784b      	ldrb	r3, [r1, #1]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d116      	bne.n	8003804 <USB_EPSetStall+0x34>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 80037d6:	780b      	ldrb	r3, [r1, #0]
 80037d8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80037dc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80037e0:	2a00      	cmp	r2, #0
 80037e2:	db05      	blt.n	80037f0 <USB_EPSetStall+0x20>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 80037e4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80037e8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80037ec:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80037f0:	780b      	ldrb	r3, [r1, #0]
 80037f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80037f6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80037fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037fe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003802:	e015      	b.n	8003830 <USB_EPSetStall+0x60>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003804:	780b      	ldrb	r3, [r1, #0]
 8003806:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800380a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800380e:	2a00      	cmp	r2, #0
 8003810:	db05      	blt.n	800381e <USB_EPSetStall+0x4e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003812:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003816:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800381a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800381e:	780b      	ldrb	r3, [r1, #0]
 8003820:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003824:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800382c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }
  return HAL_OK;
}
 8003830:	2000      	movs	r0, #0
 8003832:	4770      	bx	lr

08003834 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003834:	784b      	ldrb	r3, [r1, #1]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d117      	bne.n	800386a <USB_EPClearStall+0x36>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800383a:	780b      	ldrb	r3, [r1, #0]
 800383c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003840:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003844:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003848:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800384c:	78cb      	ldrb	r3, [r1, #3]
 800384e:	3b02      	subs	r3, #2
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d820      	bhi.n	8003898 <USB_EPClearStall+0x64>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003856:	780b      	ldrb	r3, [r1, #0]
 8003858:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800385c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003868:	e016      	b.n	8003898 <USB_EPClearStall+0x64>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800386a:	780b      	ldrb	r3, [r1, #0]
 800386c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003870:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003874:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003878:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800387c:	78cb      	ldrb	r3, [r1, #3]
 800387e:	3b02      	subs	r3, #2
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d808      	bhi.n	8003898 <USB_EPClearStall+0x64>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003886:	780b      	ldrb	r3, [r1, #0]
 8003888:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800388c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003894:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }    
  }
  return HAL_OK;
}
 8003898:	2000      	movs	r0, #0
 800389a:	4770      	bx	lr

0800389c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800389c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80038a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038a4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80038a8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80038ac:	0109      	lsls	r1, r1, #4
 80038ae:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80038b2:	430b      	orrs	r3, r1
 80038b4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80038b8:	2000      	movs	r0, #0
 80038ba:	4770      	bx	lr

080038bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80038bc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80038be:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80038c2:	f023 0302 	bic.w	r3, r3, #2
 80038c6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80038ca:	2003      	movs	r0, #3
 80038cc:	f001 fd34 	bl	8005338 <HAL_Delay>
  
  return HAL_OK;  
}
 80038d0:	2000      	movs	r0, #0
 80038d2:	bd08      	pop	{r3, pc}

080038d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80038d4:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80038d6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80038da:	f043 0302 	orr.w	r3, r3, #2
 80038de:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80038e2:	2003      	movs	r0, #3
 80038e4:	f001 fd28 	bl	8005338 <HAL_Delay>
  
  return HAL_OK;  
}
 80038e8:	2000      	movs	r0, #0
 80038ea:	bd08      	pop	{r3, pc}

080038ec <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80038ec:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80038ee:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80038f0:	4010      	ands	r0, r2
 80038f2:	4770      	bx	lr

080038f4 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80038f4:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80038f8:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8003900:	0c00      	lsrs	r0, r0, #16
 8003902:	4770      	bx	lr

08003904 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003904:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003908:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8003910:	b280      	uxth	r0, r0
 8003912:	4770      	bx	lr

08003914 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003914:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003918:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  v &= USBx_DEVICE->DOEPMSK;
 800391c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8003920:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8003922:	4010      	ands	r0, r2
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop

08003928 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003928:	b410      	push	{r4}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 800392a:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800392e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003932:	40cb      	lsrs	r3, r1
 8003934:	01db      	lsls	r3, r3, #7
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4323      	orrs	r3, r4
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800393a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800393e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003942:	6880      	ldr	r0, [r0, #8]
  return v;
}
 8003944:	4018      	ands	r0, r3
 8003946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800394a:	4770      	bx	lr

0800394c <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 800394c:	6940      	ldr	r0, [r0, #20]
}
 800394e:	f000 0001 	and.w	r0, r0, #1
 8003952:	4770      	bx	lr

08003954 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003954:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003958:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800395c:	f023 0307 	bic.w	r3, r3, #7
 8003960:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003964:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	f002 0206 	and.w	r2, r2, #6
 800396e:	2a04      	cmp	r2, #4
 8003970:	d105      	bne.n	800397e <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003972:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003976:	f042 0203 	orr.w	r2, r2, #3
 800397a:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003984:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8003986:	2000      	movs	r0, #0
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop

0800398c <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800398c:	b410      	push	{r4}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800398e:	2400      	movs	r4, #0
 8003990:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003994:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003998:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800399c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80039a0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80039a4:	f044 0418 	orr.w	r4, r4, #24
 80039a8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80039ac:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80039b0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80039b4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 80039b8:	2901      	cmp	r1, #1
 80039ba:	d105      	bne.n	80039c8 <USB_EP0_OutStart+0x3c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80039bc:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80039c0:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80039c4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 80039c8:	2000      	movs	r0, #0
 80039ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80039d0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80039d2:	3301      	adds	r3, #1
 80039d4:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <USB_CoreReset+0x38>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d811      	bhi.n	80039fe <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039da:	6902      	ldr	r2, [r0, #16]
 80039dc:	2a00      	cmp	r2, #0
 80039de:	daf8      	bge.n	80039d2 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039e0:	6903      	ldr	r3, [r0, #16]
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6103      	str	r3, [r0, #16]
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
  
  /* Core Soft Reset */
  count = 0U;
 80039e8:	2300      	movs	r3, #0
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;

  do
  {
    if (++count > 200000U)
 80039ea:	3301      	adds	r3, #1
 80039ec:	4a06      	ldr	r2, [pc, #24]	; (8003a08 <USB_CoreReset+0x38>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d807      	bhi.n	8003a02 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039f2:	6902      	ldr	r2, [r0, #16]
 80039f4:	f012 0f01 	tst.w	r2, #1
 80039f8:	d1f7      	bne.n	80039ea <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80039fa:	2000      	movs	r0, #0
 80039fc:	4770      	bx	lr
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 80039fe:	2003      	movs	r0, #3
 8003a00:	4770      	bx	lr

  do
  {
    if (++count > 200000U)
    {
      return HAL_TIMEOUT;
 8003a02:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
  
  return HAL_OK;
}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	00030d40 	.word	0x00030d40

08003a0c <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop

08003a10 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a10:	6802      	ldr	r2, [r0, #0]
 8003a12:	68d3      	ldr	r3, [r2, #12]
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	60d3      	str	r3, [r2, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a1a:	6802      	ldr	r2, [r0, #0]
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6013      	str	r3, [r2, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003a24:	2000      	movs	r0, #0
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop

08003a2c <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop

08003a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop

08003a38 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a3c:	6803      	ldr	r3, [r0, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	f012 0f02 	tst.w	r2, #2
 8003a44:	d017      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x3e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	f012 0f02 	tst.w	r2, #2
 8003a4c:	d013      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x3e>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a4e:	f06f 0202 	mvn.w	r2, #2
 8003a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a54:	2301      	movs	r3, #1
 8003a56:	7603      	strb	r3, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a58:	6803      	ldr	r3, [r0, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f013 0f03 	tst.w	r3, #3
 8003a60:	d002      	beq.n	8003a68 <HAL_TIM_IRQHandler+0x30>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	f7ff ffe3 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003a66:	e004      	b.n	8003a72 <HAL_TIM_IRQHandler+0x3a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a68:	f7ff ffde 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7ff ffdf 	bl	8003a30 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	2300      	movs	r3, #0
 8003a74:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	f012 0f04 	tst.w	r2, #4
 8003a7e:	d019      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	f012 0f04 	tst.w	r2, #4
 8003a86:	d015      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a88:	f06f 0204 	mvn.w	r2, #4
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	7623      	strb	r3, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003a9a:	d003      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x6c>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7ff ffc5 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003aa2:	e005      	b.n	8003ab0 <HAL_TIM_IRQHandler+0x78>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff ffbf 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7ff ffc0 	bl	8003a30 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	f012 0f08 	tst.w	r2, #8
 8003abc:	d019      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	f012 0f08 	tst.w	r2, #8
 8003ac4:	d015      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ac6:	f06f 0208 	mvn.w	r2, #8
 8003aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003acc:	2304      	movs	r3, #4
 8003ace:	7623      	strb	r3, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f013 0f03 	tst.w	r3, #3
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0xaa>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	4620      	mov	r0, r4
 8003adc:	f7ff ffa6 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0xb6>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7ff ffa0 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f7ff ffa1 	bl	8003a30 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	2300      	movs	r3, #0
 8003af0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	f012 0f10 	tst.w	r2, #16
 8003afa:	d019      	beq.n	8003b30 <HAL_TIM_IRQHandler+0xf8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	f012 0f10 	tst.w	r2, #16
 8003b02:	d015      	beq.n	8003b30 <HAL_TIM_IRQHandler+0xf8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b04:	f06f 0210 	mvn.w	r2, #16
 8003b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	7623      	strb	r3, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b16:	d003      	beq.n	8003b20 <HAL_TIM_IRQHandler+0xe8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7ff ff87 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003b1e:	e005      	b.n	8003b2c <HAL_TIM_IRQHandler+0xf4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff ff81 	bl	8003a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b26:	4620      	mov	r0, r4
 8003b28:	f7ff ff82 	bl	8003a30 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	f012 0f01 	tst.w	r2, #1
 8003b38:	d009      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	f012 0f01 	tst.w	r2, #1
 8003b40:	d005      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b42:	f06f 0201 	mvn.w	r2, #1
 8003b46:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7fd ffd1 	bl	8001af0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b56:	d009      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x134>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b5e:	d005      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x134>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003b66:	4620      	mov	r0, r4
 8003b68:	f000 f8cc 	bl	8003d04 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b74:	d009      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x152>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b7c:	d005      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x152>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b82:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7ff ff55 	bl	8003a34 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	f012 0f20 	tst.w	r2, #32
 8003b92:	d009      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x170>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	f012 0f20 	tst.w	r2, #32
 8003b9a:	d005      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x170>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b9c:	f06f 0220 	mvn.w	r2, #32
 8003ba0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f000 f8ac 	bl	8003d00 <HAL_TIMEx_CommutationCallback>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop

08003bac <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8003bac:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003bae:	4a45      	ldr	r2, [pc, #276]	; (8003cc4 <TIM_Base_SetConfig+0x118>)
 8003bb0:	4290      	cmp	r0, r2
 8003bb2:	d014      	beq.n	8003bde <TIM_Base_SetConfig+0x32>
 8003bb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003bb8:	d013      	beq.n	8003be2 <TIM_Base_SetConfig+0x36>
 8003bba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003bbe:	4290      	cmp	r0, r2
 8003bc0:	d011      	beq.n	8003be6 <TIM_Base_SetConfig+0x3a>
 8003bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bc6:	4290      	cmp	r0, r2
 8003bc8:	d00f      	beq.n	8003bea <TIM_Base_SetConfig+0x3e>
 8003bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bce:	4290      	cmp	r0, r2
 8003bd0:	d00d      	beq.n	8003bee <TIM_Base_SetConfig+0x42>
 8003bd2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003bd6:	4290      	cmp	r0, r2
 8003bd8:	d10b      	bne.n	8003bf2 <TIM_Base_SetConfig+0x46>
 8003bda:	2201      	movs	r2, #1
 8003bdc:	e00a      	b.n	8003bf4 <TIM_Base_SetConfig+0x48>
 8003bde:	2201      	movs	r2, #1
 8003be0:	e008      	b.n	8003bf4 <TIM_Base_SetConfig+0x48>
 8003be2:	2201      	movs	r2, #1
 8003be4:	e006      	b.n	8003bf4 <TIM_Base_SetConfig+0x48>
 8003be6:	2201      	movs	r2, #1
 8003be8:	e004      	b.n	8003bf4 <TIM_Base_SetConfig+0x48>
 8003bea:	2201      	movs	r2, #1
 8003bec:	e002      	b.n	8003bf4 <TIM_Base_SetConfig+0x48>
 8003bee:	2201      	movs	r2, #1
 8003bf0:	e000      	b.n	8003bf4 <TIM_Base_SetConfig+0x48>
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	b11a      	cbz	r2, 8003bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003bfa:	684a      	ldr	r2, [r1, #4]
 8003bfc:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003bfe:	4a31      	ldr	r2, [pc, #196]	; (8003cc4 <TIM_Base_SetConfig+0x118>)
 8003c00:	4290      	cmp	r0, r2
 8003c02:	d02c      	beq.n	8003c5e <TIM_Base_SetConfig+0xb2>
 8003c04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c08:	d02b      	beq.n	8003c62 <TIM_Base_SetConfig+0xb6>
 8003c0a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003c0e:	4290      	cmp	r0, r2
 8003c10:	d029      	beq.n	8003c66 <TIM_Base_SetConfig+0xba>
 8003c12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c16:	4290      	cmp	r0, r2
 8003c18:	d027      	beq.n	8003c6a <TIM_Base_SetConfig+0xbe>
 8003c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c1e:	4290      	cmp	r0, r2
 8003c20:	d025      	beq.n	8003c6e <TIM_Base_SetConfig+0xc2>
 8003c22:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003c26:	4290      	cmp	r0, r2
 8003c28:	d023      	beq.n	8003c72 <TIM_Base_SetConfig+0xc6>
 8003c2a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003c2e:	4290      	cmp	r0, r2
 8003c30:	d021      	beq.n	8003c76 <TIM_Base_SetConfig+0xca>
 8003c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c36:	4290      	cmp	r0, r2
 8003c38:	d01f      	beq.n	8003c7a <TIM_Base_SetConfig+0xce>
 8003c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c3e:	4290      	cmp	r0, r2
 8003c40:	d01d      	beq.n	8003c7e <TIM_Base_SetConfig+0xd2>
 8003c42:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003c46:	4290      	cmp	r0, r2
 8003c48:	d01b      	beq.n	8003c82 <TIM_Base_SetConfig+0xd6>
 8003c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c4e:	4290      	cmp	r0, r2
 8003c50:	d019      	beq.n	8003c86 <TIM_Base_SetConfig+0xda>
 8003c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c56:	4290      	cmp	r0, r2
 8003c58:	d117      	bne.n	8003c8a <TIM_Base_SetConfig+0xde>
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	e016      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c5e:	2201      	movs	r2, #1
 8003c60:	e014      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c62:	2201      	movs	r2, #1
 8003c64:	e012      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c66:	2201      	movs	r2, #1
 8003c68:	e010      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	e00e      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c6e:	2201      	movs	r2, #1
 8003c70:	e00c      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c72:	2201      	movs	r2, #1
 8003c74:	e00a      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c76:	2201      	movs	r2, #1
 8003c78:	e008      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	e006      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c7e:	2201      	movs	r2, #1
 8003c80:	e004      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c82:	2201      	movs	r2, #1
 8003c84:	e002      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c86:	2201      	movs	r2, #1
 8003c88:	e000      	b.n	8003c8c <TIM_Base_SetConfig+0xe0>
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	b11a      	cbz	r2, 8003c96 <TIM_Base_SetConfig+0xea>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c92:	68ca      	ldr	r2, [r1, #12]
 8003c94:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8003c96:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c98:	688b      	ldr	r3, [r1, #8]
 8003c9a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003c9c:	680b      	ldr	r3, [r1, #0]
 8003c9e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003ca0:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <TIM_Base_SetConfig+0x118>)
 8003ca2:	4298      	cmp	r0, r3
 8003ca4:	d005      	beq.n	8003cb2 <TIM_Base_SetConfig+0x106>
 8003ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003caa:	4298      	cmp	r0, r3
 8003cac:	d103      	bne.n	8003cb6 <TIM_Base_SetConfig+0x10a>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e002      	b.n	8003cb8 <TIM_Base_SetConfig+0x10c>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <TIM_Base_SetConfig+0x10c>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	b10b      	cbz	r3, 8003cbe <TIM_Base_SetConfig+0x112>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cba:	690b      	ldr	r3, [r1, #16]
 8003cbc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	6143      	str	r3, [r0, #20]
 8003cc2:	4770      	bx	lr
 8003cc4:	40010000 	.word	0x40010000

08003cc8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003cc8:	b1b8      	cbz	r0, 8003cfa <HAL_TIM_Base_Init+0x32>
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8003cca:	b510      	push	{r4, lr}
 8003ccc:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8003cce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003cd2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_Base_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cde:	f7ff fe95 	bl	8003a0c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003ce8:	1d21      	adds	r1, r4, #4
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	f7ff ff5e 	bl	8003bac <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop

08003d00 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop

08003d04 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop

08003d08 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d08:	6802      	ldr	r2, [r0, #0]
 8003d0a:	68d3      	ldr	r3, [r2, #12]
 8003d0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d10:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d12:	2320      	movs	r3, #32
 8003d14:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1c:	6802      	ldr	r2, [r0, #0]
 8003d1e:	68d3      	ldr	r3, [r2, #12]
 8003d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d24:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	6802      	ldr	r2, [r0, #0]
 8003d28:	6953      	ldr	r3, [r2, #20]
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d30:	2320      	movs	r3, #32
 8003d32:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003d36:	4770      	bx	lr

08003d38 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d38:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b21      	cmp	r3, #33	; 0x21
 8003d40:	d12b      	bne.n	8003d9a <UART_Transmit_IT+0x62>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d42:	6883      	ldr	r3, [r0, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d10f      	bne.n	8003d6a <UART_Transmit_IT+0x32>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8003d4a:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d4c:	6802      	ldr	r2, [r0, #0]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d54:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003d56:	6903      	ldr	r3, [r0, #16]
 8003d58:	b91b      	cbnz	r3, 8003d62 <UART_Transmit_IT+0x2a>
      {
        huart->pTxBuffPtr += 2U;
 8003d5a:	6a03      	ldr	r3, [r0, #32]
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	6203      	str	r3, [r0, #32]
 8003d60:	e009      	b.n	8003d76 <UART_Transmit_IT+0x3e>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d62:	6a03      	ldr	r3, [r0, #32]
 8003d64:	3301      	adds	r3, #1
 8003d66:	6203      	str	r3, [r0, #32]
 8003d68:	e005      	b.n	8003d76 <UART_Transmit_IT+0x3e>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d6a:	6802      	ldr	r2, [r0, #0]
 8003d6c:	6a03      	ldr	r3, [r0, #32]
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	6201      	str	r1, [r0, #32]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8003d76:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003d80:	b96b      	cbnz	r3, 8003d9e <UART_Transmit_IT+0x66>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d82:	6802      	ldr	r2, [r0, #0]
 8003d84:	68d3      	ldr	r3, [r2, #12]
 8003d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d8a:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d8c:	6802      	ldr	r2, [r0, #0]
 8003d8e:	68d3      	ldr	r3, [r2, #12]
 8003d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d94:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8003d96:	2000      	movs	r0, #0
 8003d98:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    return HAL_OK;
 8003d9e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop

08003da4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da8:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003daa:	6801      	ldr	r1, [r0, #0]
 8003dac:	690b      	ldr	r3, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003dae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003db2:	68c3      	ldr	r3, [r0, #12]
 8003db4:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003db6:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003db8:	6800      	ldr	r0, [r0, #0]
 8003dba:	68c3      	ldr	r3, [r0, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003dbc:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8003dc0:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc4:	68a1      	ldr	r1, [r4, #8]
 8003dc6:	6923      	ldr	r3, [r4, #16]
 8003dc8:	4319      	orrs	r1, r3
 8003dca:	6963      	ldr	r3, [r4, #20]
 8003dcc:	4319      	orrs	r1, r3
 8003dce:	69e3      	ldr	r3, [r4, #28]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003dd4:	60c3      	str	r3, [r0, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003dd6:	6821      	ldr	r1, [r4, #0]
 8003dd8:	694b      	ldr	r3, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003dde:	69a3      	ldr	r3, [r4, #24]
 8003de0:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003de2:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de4:	69e3      	ldr	r3, [r4, #28]
 8003de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dea:	f040 80bb 	bne.w	8003f64 <UART_SetConfig+0x1c0>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dee:	6827      	ldr	r7, [r4, #0]
 8003df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003df4:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8003df8:	429f      	cmp	r7, r3
 8003dfa:	d003      	beq.n	8003e04 <UART_SetConfig+0x60>
 8003dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e00:	429f      	cmp	r7, r3
 8003e02:	d157      	bne.n	8003eb4 <UART_SetConfig+0x110>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003e04:	f000 fee6 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003e08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e10:	6865      	ldr	r5, [r4, #4]
 8003e12:	006d      	lsls	r5, r5, #1
 8003e14:	fbb0 f5f5 	udiv	r5, r0, r5
 8003e18:	4eab      	ldr	r6, [pc, #684]	; (80040c8 <UART_SetConfig+0x324>)
 8003e1a:	fba6 3505 	umull	r3, r5, r6, r5
 8003e1e:	096d      	lsrs	r5, r5, #5
 8003e20:	012d      	lsls	r5, r5, #4
 8003e22:	f000 fed7 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003e26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e2e:	6863      	ldr	r3, [r4, #4]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fbb0 f9f3 	udiv	r9, r0, r3
 8003e36:	f000 fecd 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003e3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e42:	6863      	ldr	r3, [r4, #4]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e4a:	fba6 2303 	umull	r2, r3, r6, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003e54:	fb08 9313 	mls	r3, r8, r3, r9
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	3332      	adds	r3, #50	; 0x32
 8003e5c:	fba6 2303 	umull	r2, r3, r6, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e68:	441d      	add	r5, r3
 8003e6a:	f000 feb3 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003e6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e76:	6863      	ldr	r3, [r4, #4]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fbb0 f9f3 	udiv	r9, r0, r3
 8003e7e:	f000 fea9 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003e82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e92:	fba6 2303 	umull	r2, r3, r6, r3
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	fb08 9813 	mls	r8, r8, r3, r9
 8003e9c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8003ea0:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8003ea4:	fba6 3608 	umull	r3, r6, r6, r8
 8003ea8:	f3c6 1642 	ubfx	r6, r6, #5, #3
 8003eac:	4435      	add	r5, r6
 8003eae:	60bd      	str	r5, [r7, #8]
 8003eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003eb4:	f000 fe7e 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ebc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ec0:	6865      	ldr	r5, [r4, #4]
 8003ec2:	006d      	lsls	r5, r5, #1
 8003ec4:	fbb0 f5f5 	udiv	r5, r0, r5
 8003ec8:	4e7f      	ldr	r6, [pc, #508]	; (80040c8 <UART_SetConfig+0x324>)
 8003eca:	fba6 3505 	umull	r3, r5, r6, r5
 8003ece:	096d      	lsrs	r5, r5, #5
 8003ed0:	012d      	lsls	r5, r5, #4
 8003ed2:	f000 fe6f 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8003ed6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003eda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ede:	6863      	ldr	r3, [r4, #4]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fbb0 f9f3 	udiv	r9, r0, r3
 8003ee6:	f000 fe65 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8003eea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003eee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ef2:	6863      	ldr	r3, [r4, #4]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	fba6 2303 	umull	r2, r3, r6, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003f04:	fb08 9313 	mls	r3, r8, r3, r9
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	fba6 2303 	umull	r2, r3, r6, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f18:	441d      	add	r5, r3
 8003f1a:	f000 fe4b 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f26:	6863      	ldr	r3, [r4, #4]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	fbb0 f9f3 	udiv	r9, r0, r3
 8003f2e:	f000 fe41 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8003f32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f3a:	6863      	ldr	r3, [r4, #4]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f42:	fba6 2303 	umull	r2, r3, r6, r3
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	fb08 9813 	mls	r8, r8, r3, r9
 8003f4c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8003f50:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8003f54:	fba6 3608 	umull	r3, r6, r6, r8
 8003f58:	f3c6 1642 	ubfx	r6, r6, #5, #3
 8003f5c:	4435      	add	r5, r6
 8003f5e:	60bd      	str	r5, [r7, #8]
 8003f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f64:	6826      	ldr	r6, [r4, #0]
 8003f66:	4b59      	ldr	r3, [pc, #356]	; (80040cc <UART_SetConfig+0x328>)
 8003f68:	429e      	cmp	r6, r3
 8003f6a:	d003      	beq.n	8003f74 <UART_SetConfig+0x1d0>
 8003f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f70:	429e      	cmp	r6, r3
 8003f72:	d154      	bne.n	800401e <UART_SetConfig+0x27a>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f74:	f000 fe2e 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003f78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f80:	6865      	ldr	r5, [r4, #4]
 8003f82:	00ad      	lsls	r5, r5, #2
 8003f84:	fbb0 f5f5 	udiv	r5, r0, r5
 8003f88:	4f4f      	ldr	r7, [pc, #316]	; (80040c8 <UART_SetConfig+0x324>)
 8003f8a:	fba7 3505 	umull	r3, r5, r7, r5
 8003f8e:	096d      	lsrs	r5, r5, #5
 8003f90:	012d      	lsls	r5, r5, #4
 8003f92:	f000 fe1f 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003f96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003f9e:	6863      	ldr	r3, [r4, #4]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	fbb0 f8f3 	udiv	r8, r0, r3
 8003fa6:	f000 fe15 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003faa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003fae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003fb2:	6863      	ldr	r3, [r4, #4]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fba:	fba7 2303 	umull	r2, r3, r7, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003fc4:	fb09 8313 	mls	r3, r9, r3, r8
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	fba7 2303 	umull	r2, r3, r7, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd6:	441d      	add	r5, r3
 8003fd8:	f000 fdfc 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003fdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003fe4:	6863      	ldr	r3, [r4, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	fbb0 f8f3 	udiv	r8, r0, r3
 8003fec:	f000 fdf2 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8003ff0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ff4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004000:	fba7 2303 	umull	r2, r3, r7, r3
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	fb09 8313 	mls	r3, r9, r3, r8
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	3332      	adds	r3, #50	; 0x32
 800400e:	fba7 2303 	umull	r2, r3, r7, r3
 8004012:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8004016:	441d      	add	r5, r3
 8004018:	60b5      	str	r5, [r6, #8]
 800401a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800401e:	f000 fdc9 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8004022:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004026:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800402a:	6865      	ldr	r5, [r4, #4]
 800402c:	00ad      	lsls	r5, r5, #2
 800402e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004032:	4f25      	ldr	r7, [pc, #148]	; (80040c8 <UART_SetConfig+0x324>)
 8004034:	fba7 3505 	umull	r3, r5, r7, r5
 8004038:	096d      	lsrs	r5, r5, #5
 800403a:	012d      	lsls	r5, r5, #4
 800403c:	f000 fdba 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8004040:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004044:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004048:	6863      	ldr	r3, [r4, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	fbb0 f8f3 	udiv	r8, r0, r3
 8004050:	f000 fdb0 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8004054:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004058:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800405c:	6863      	ldr	r3, [r4, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	fbb0 f3f3 	udiv	r3, r0, r3
 8004064:	fba7 2303 	umull	r2, r3, r7, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800406e:	fb09 8313 	mls	r3, r9, r3, r8
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	3332      	adds	r3, #50	; 0x32
 8004076:	fba7 2303 	umull	r2, r3, r7, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004080:	441d      	add	r5, r3
 8004082:	f000 fd97 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 8004086:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800408a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800408e:	6863      	ldr	r3, [r4, #4]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	fbb0 f8f3 	udiv	r8, r0, r3
 8004096:	f000 fd8d 	bl	8004bb4 <HAL_RCC_GetPCLK1Freq>
 800409a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800409e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040a2:	6863      	ldr	r3, [r4, #4]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040aa:	fba7 2303 	umull	r2, r3, r7, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	fb09 8313 	mls	r3, r9, r3, r8
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	; 0x32
 80040b8:	fba7 2303 	umull	r2, r3, r7, r3
 80040bc:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80040c0:	441d      	add	r5, r3
 80040c2:	60b5      	str	r5, [r6, #8]
 80040c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040c8:	51eb851f 	.word	0x51eb851f
 80040cc:	40011000 	.word	0x40011000

080040d0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 80040d0:	b368      	cbz	r0, 800412e <HAL_UART_Init+0x5e>
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d2:	b510      	push	{r4, lr}
 80040d4:	4604      	mov	r4, r0
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80040d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80040da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80040de:	d104      	bne.n	80040ea <HAL_UART_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80040e6:	f7fe f937 	bl	8002358 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ea:	2324      	movs	r3, #36	; 0x24
 80040ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040f0:	6822      	ldr	r2, [r4, #0]
 80040f2:	68d3      	ldr	r3, [r2, #12]
 80040f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f8:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7ff fe52 	bl	8003da4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004100:	6822      	ldr	r2, [r4, #0]
 8004102:	6913      	ldr	r3, [r2, #16]
 8004104:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004108:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	6953      	ldr	r3, [r2, #20]
 800410e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004112:	6153      	str	r3, [r2, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	68d3      	ldr	r3, [r2, #12]
 8004118:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800411c:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411e:	2000      	movs	r0, #0
 8004120:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004122:	2320      	movs	r3, #32
 8004124:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004128:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 800412c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 800412e:	2001      	movs	r0, #1
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop

08004134 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004134:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d116      	bne.n	800416c <HAL_UART_Transmit_IT+0x38>
  {
    if((pData == NULL ) || (Size == 0)) 
 800413e:	b1b9      	cbz	r1, 8004170 <HAL_UART_Transmit_IT+0x3c>
 8004140:	b1c2      	cbz	r2, 8004174 <HAL_UART_Transmit_IT+0x40>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8004142:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004146:	2b01      	cmp	r3, #1
 8004148:	d016      	beq.n	8004178 <HAL_UART_Transmit_IT+0x44>
    
    huart->pTxBuffPtr = pData;
 800414a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800414c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800414e:	84c2      	strh	r2, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	2300      	movs	r3, #0
 8004152:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004154:	2221      	movs	r2, #33	; 0x21
 8004156:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800415a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800415e:	6801      	ldr	r1, [r0, #0]
 8004160:	68ca      	ldr	r2, [r1, #12]
 8004162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004166:	60ca      	str	r2, [r1, #12]
    
    return HAL_OK;
 8004168:	4618      	mov	r0, r3
 800416a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;   
 800416c:	2002      	movs	r0, #2
 800416e:	4770      	bx	lr
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 8004170:	2001      	movs	r0, #1
 8004172:	4770      	bx	lr
 8004174:	2001      	movs	r0, #1
 8004176:	4770      	bx	lr
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8004178:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;   
  }
}
 800417a:	4770      	bx	lr

0800417c <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 800417c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b20      	cmp	r3, #32
 8004184:	d11b      	bne.n	80041be <HAL_UART_Receive_IT+0x42>
  {
    if((pData == NULL ) || (Size == 0)) 
 8004186:	b1e1      	cbz	r1, 80041c2 <HAL_UART_Receive_IT+0x46>
 8004188:	b1ea      	cbz	r2, 80041c6 <HAL_UART_Receive_IT+0x4a>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800418a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800418e:	2b01      	cmp	r3, #1
 8004190:	d01b      	beq.n	80041ca <HAL_UART_Receive_IT+0x4e>
    
    huart->pRxBuffPtr = pData;
 8004192:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8004194:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004196:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004198:	2300      	movs	r3, #0
 800419a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800419c:	2222      	movs	r2, #34	; 0x22
 800419e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041a2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a6:	6801      	ldr	r1, [r0, #0]
 80041a8:	694a      	ldr	r2, [r1, #20]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	614a      	str	r2, [r1, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041b0:	6801      	ldr	r1, [r0, #0]
 80041b2:	68ca      	ldr	r2, [r1, #12]
 80041b4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80041b8:	60ca      	str	r2, [r1, #12]
    
    return HAL_OK;
 80041ba:	4618      	mov	r0, r3
 80041bc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY; 
 80041be:	2002      	movs	r0, #2
 80041c0:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 80041c2:	2001      	movs	r0, #1
 80041c4:	4770      	bx	lr
 80041c6:	2001      	movs	r0, #1
 80041c8:	4770      	bx	lr
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80041ca:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY; 
  }
}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop

080041d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80041d2:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80041d6:	b2e4      	uxtb	r4, r4
 80041d8:	2c20      	cmp	r4, #32
 80041da:	d131      	bne.n	8004240 <HAL_UART_Transmit_DMA+0x70>
  {
    if((pData == NULL ) || (Size == 0))
 80041dc:	2900      	cmp	r1, #0
 80041de:	d031      	beq.n	8004244 <HAL_UART_Transmit_DMA+0x74>
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	d031      	beq.n	8004248 <HAL_UART_Transmit_DMA+0x78>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d02f      	beq.n	800424c <HAL_UART_Transmit_DMA+0x7c>
 80041ec:	4613      	mov	r3, r2
 80041ee:	4604      	mov	r4, r0
 80041f0:	2201      	movs	r2, #1
 80041f2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80041f6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80041f8:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80041fa:	84c3      	strh	r3, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	2500      	movs	r5, #0
 80041fe:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004200:	2221      	movs	r2, #33	; 0x21
 8004202:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004206:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004208:	4811      	ldr	r0, [pc, #68]	; (8004250 <HAL_UART_Transmit_DMA+0x80>)
 800420a:	63d0      	str	r0, [r2, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800420c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800420e:	4811      	ldr	r0, [pc, #68]	; (8004254 <HAL_UART_Transmit_DMA+0x84>)
 8004210:	6410      	str	r0, [r2, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004212:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004214:	4810      	ldr	r0, [pc, #64]	; (8004258 <HAL_UART_Transmit_DMA+0x88>)
 8004216:	64d0      	str	r0, [r2, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004218:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800421a:	6515      	str	r5, [r2, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	3204      	adds	r2, #4
 8004220:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004222:	f000 fed3 	bl	8004fcc <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800422c:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800422e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	6953      	ldr	r3, [r2, #20]
 8004236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423a:	6153      	str	r3, [r2, #20]
    
    return HAL_OK;
 800423c:	4628      	mov	r0, r5
 800423e:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8004240:	2002      	movs	r0, #2
 8004242:	bd38      	pop	{r3, r4, r5, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0))
    {
      return HAL_ERROR;
 8004244:	2001      	movs	r0, #1
 8004246:	bd38      	pop	{r3, r4, r5, pc}
 8004248:	2001      	movs	r0, #1
 800424a:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800424c:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY;
  }
}
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	08004305 	.word	0x08004305
 8004254:	08004355 	.word	0x08004355
 8004258:	08004441 	.word	0x08004441

0800425c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 800425c:	b530      	push	{r4, r5, lr}
 800425e:	b083      	sub	sp, #12
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8004260:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8004264:	b2e4      	uxtb	r4, r4
 8004266:	2c20      	cmp	r4, #32
 8004268:	d13d      	bne.n	80042e6 <HAL_UART_Receive_DMA+0x8a>
  {
    if((pData == NULL ) || (Size == 0)) 
 800426a:	2900      	cmp	r1, #0
 800426c:	d03d      	beq.n	80042ea <HAL_UART_Receive_DMA+0x8e>
 800426e:	2a00      	cmp	r2, #0
 8004270:	d03d      	beq.n	80042ee <HAL_UART_Receive_DMA+0x92>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8004272:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004276:	2b01      	cmp	r3, #1
 8004278:	d03b      	beq.n	80042f2 <HAL_UART_Receive_DMA+0x96>
 800427a:	4613      	mov	r3, r2
 800427c:	460a      	mov	r2, r1
 800427e:	4604      	mov	r4, r0
 8004280:	2101      	movs	r1, #1
 8004282:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8004286:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8004288:	8583      	strh	r3, [r0, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428a:	2500      	movs	r5, #0
 800428c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800428e:	2122      	movs	r1, #34	; 0x22
 8004290:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004294:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004296:	4818      	ldr	r0, [pc, #96]	; (80042f8 <HAL_UART_Receive_DMA+0x9c>)
 8004298:	63c8      	str	r0, [r1, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800429a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800429c:	4817      	ldr	r0, [pc, #92]	; (80042fc <HAL_UART_Receive_DMA+0xa0>)
 800429e:	6408      	str	r0, [r1, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042a2:	4817      	ldr	r0, [pc, #92]	; (8004300 <HAL_UART_Receive_DMA+0xa4>)
 80042a4:	64c8      	str	r0, [r1, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80042a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042a8:	650d      	str	r5, [r1, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	3104      	adds	r1, #4
 80042ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80042b0:	f000 fe8c 	bl	8004fcc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80042b4:	9501      	str	r5, [sp, #4]
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	9201      	str	r2, [sp, #4]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	9201      	str	r2, [sp, #4]
 80042c0:	9a01      	ldr	r2, [sp, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042c2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042cc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	6953      	ldr	r3, [r2, #20]
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6153      	str	r3, [r2, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042d8:	6822      	ldr	r2, [r4, #0]
 80042da:	6953      	ldr	r3, [r2, #20]
 80042dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042e0:	6153      	str	r3, [r2, #20]

    return HAL_OK;
 80042e2:	4628      	mov	r0, r5
 80042e4:	e006      	b.n	80042f4 <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY; 
 80042e6:	2002      	movs	r0, #2
 80042e8:	e004      	b.n	80042f4 <HAL_UART_Receive_DMA+0x98>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 80042ea:	2001      	movs	r0, #1
 80042ec:	e002      	b.n	80042f4 <HAL_UART_Receive_DMA+0x98>
 80042ee:	2001      	movs	r0, #1
 80042f0:	e000      	b.n	80042f4 <HAL_UART_Receive_DMA+0x98>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80042f2:	2002      	movs	r0, #2
  }
  else
  {
    return HAL_BUSY; 
  }
}
 80042f4:	b003      	add	sp, #12
 80042f6:	bd30      	pop	{r4, r5, pc}
 80042f8:	08004361 	.word	0x08004361
 80042fc:	08004435 	.word	0x08004435
 8004300:	08004441 	.word	0x08004441

08004304 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004304:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004306:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004308:	6802      	ldr	r2, [r0, #0]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004310:	d10c      	bne.n	800432c <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8004312:	2200      	movs	r2, #0
 8004314:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	694a      	ldr	r2, [r1, #20]
 800431a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431e:	614a      	str	r2, [r1, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68d3      	ldr	r3, [r2, #12]
 8004324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004328:	60d3      	str	r3, [r2, #12]
 800432a:	bd08      	pop	{r3, pc}

  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 800432c:	4618      	mov	r0, r3
 800432e:	f004 ff1f 	bl	8009170 <HAL_UART_TxCpltCallback>
 8004332:	bd08      	pop	{r3, pc}

08004334 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004334:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004336:	6801      	ldr	r1, [r0, #0]
 8004338:	68cb      	ldr	r3, [r1, #12]
 800433a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433e:	60cb      	str	r3, [r1, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004340:	2320      	movs	r3, #32
 8004342:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8004346:	f004 ff13 	bl	8009170 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
}
 800434a:	2000      	movs	r0, #0
 800434c:	bd08      	pop	{r3, pc}
 800434e:	bf00      	nop

08004350 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop

08004354 <UART_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004354:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8004356:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004358:	f7ff fffa 	bl	8004350 <HAL_UART_TxHalfCpltCallback>
 800435c:	bd08      	pop	{r3, pc}
 800435e:	bf00      	nop

08004360 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004360:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004362:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004364:	6802      	ldr	r2, [r0, #0]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	f412 7f80 	tst.w	r2, #256	; 0x100
 800436c:	d113      	bne.n	8004396 <UART_DMAReceiveCplt+0x36>
  {
    huart->RxXferCount = 0U;
 800436e:	2200      	movs	r2, #0
 8004370:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	68ca      	ldr	r2, [r1, #12]
 8004376:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800437a:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	694a      	ldr	r2, [r1, #20]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	614a      	str	r2, [r1, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004386:	6819      	ldr	r1, [r3, #0]
 8004388:	694a      	ldr	r2, [r1, #20]
 800438a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438e:	614a      	str	r2, [r1, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8004396:	4618      	mov	r0, r3
 8004398:	f005 fd8c 	bl	8009eb4 <HAL_UART_RxCpltCallback>
 800439c:	bd08      	pop	{r3, pc}
 800439e:	bf00      	nop

080043a0 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043a0:	b508      	push	{r3, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80043a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b22      	cmp	r3, #34	; 0x22
 80043aa:	d13f      	bne.n	800442c <UART_Receive_IT+0x8c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043ac:	6883      	ldr	r3, [r0, #8]
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d113      	bne.n	80043dc <UART_Receive_IT+0x3c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80043b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 80043b6:	6903      	ldr	r3, [r0, #16]
 80043b8:	b943      	cbnz	r3, 80043cc <UART_Receive_IT+0x2c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043ba:	6803      	ldr	r3, [r0, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 80043c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043c6:	3302      	adds	r3, #2
 80043c8:	6283      	str	r3, [r0, #40]	; 0x28
 80043ca:	e018      	b.n	80043fe <UART_Receive_IT+0x5e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80043cc:	6803      	ldr	r3, [r0, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80043d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043d6:	3301      	adds	r3, #1
 80043d8:	6283      	str	r3, [r0, #40]	; 0x28
 80043da:	e010      	b.n	80043fe <UART_Receive_IT+0x5e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80043dc:	6903      	ldr	r3, [r0, #16]
 80043de:	b933      	cbnz	r3, 80043ee <UART_Receive_IT+0x4e>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	6282      	str	r2, [r0, #40]	; 0x28
 80043e6:	6802      	ldr	r2, [r0, #0]
 80043e8:	6852      	ldr	r2, [r2, #4]
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <UART_Receive_IT+0x5e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ee:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80043f0:	1c53      	adds	r3, r2, #1
 80043f2:	6283      	str	r3, [r0, #40]	; 0x28
 80043f4:	6803      	ldr	r3, [r0, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fc:	7013      	strb	r3, [r2, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80043fe:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29b      	uxth	r3, r3
 8004406:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004408:	b993      	cbnz	r3, 8004430 <UART_Receive_IT+0x90>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440a:	6802      	ldr	r2, [r0, #0]
 800440c:	68d3      	ldr	r3, [r2, #12]
 800440e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004412:	60d3      	str	r3, [r2, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004414:	6802      	ldr	r2, [r0, #0]
 8004416:	6953      	ldr	r3, [r2, #20]
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6153      	str	r3, [r2, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800441e:	2320      	movs	r3, #32
 8004420:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8004424:	f005 fd46 	bl	8009eb4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004428:	2000      	movs	r0, #0
 800442a:	bd08      	pop	{r3, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800442c:	2002      	movs	r0, #2
 800442e:	bd08      	pop	{r3, pc}
     
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }
    return HAL_OK;
 8004430:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004432:	bd08      	pop	{r3, pc}

08004434 <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004434:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart); 
 8004436:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004438:	f005 fd72 	bl	8009f20 <HAL_UART_RxHalfCpltCallback>
 800443c:	bd08      	pop	{r3, pc}
 800443e:	bf00      	nop

08004440 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004440:	b510      	push	{r4, lr}
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004442:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f003 0280 	and.w	r2, r3, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800444c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b21      	cmp	r3, #33	; 0x21
 8004454:	d105      	bne.n	8004462 <UART_DMAError+0x22>
 8004456:	b122      	cbz	r2, 8004462 <UART_DMAError+0x22>
  {
    huart->TxXferCount = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800445c:	4620      	mov	r0, r4
 800445e:	f7ff fc53 	bl	8003d08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0240 	and.w	r2, r3, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800446a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b22      	cmp	r3, #34	; 0x22
 8004472:	d105      	bne.n	8004480 <UART_DMAError+0x40>
 8004474:	b122      	cbz	r2, 8004480 <UART_DMAError+0x40>
  {
    huart->RxXferCount = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800447a:	4620      	mov	r0, r4
 800447c:	f7ff fc4e 	bl	8003d1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004482:	f043 0310 	orr.w	r3, r3, #16
 8004486:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8004488:	4620      	mov	r0, r4
 800448a:	f005 fd4d 	bl	8009f28 <HAL_UART_ErrorCallback>
 800448e:	bd10      	pop	{r4, pc}

08004490 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004490:	b510      	push	{r4, lr}
 8004492:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004494:	6802      	ldr	r2, [r0, #0]
 8004496:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004498:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800449a:	6952      	ldr	r2, [r2, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 800449c:	f013 000f 	ands.w	r0, r3, #15
 80044a0:	d109      	bne.n	80044b6 <HAL_UART_IRQHandler+0x26>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a2:	f013 0f20 	tst.w	r3, #32
 80044a6:	d006      	beq.n	80044b6 <HAL_UART_IRQHandler+0x26>
 80044a8:	f011 0f20 	tst.w	r1, #32
 80044ac:	d003      	beq.n	80044b6 <HAL_UART_IRQHandler+0x26>
    {
      UART_Receive_IT(huart);
 80044ae:	4620      	mov	r0, r4
 80044b0:	f7ff ff76 	bl	80043a0 <UART_Receive_IT>
      return;
 80044b4:	bd10      	pop	{r4, pc}
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d062      	beq.n	8004580 <HAL_UART_IRQHandler+0xf0>
 80044ba:	f012 0201 	ands.w	r2, r2, #1
 80044be:	d102      	bne.n	80044c6 <HAL_UART_IRQHandler+0x36>
 80044c0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80044c4:	d05c      	beq.n	8004580 <HAL_UART_IRQHandler+0xf0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044c6:	f013 0f01 	tst.w	r3, #1
 80044ca:	d006      	beq.n	80044da <HAL_UART_IRQHandler+0x4a>
 80044cc:	f411 7f80 	tst.w	r1, #256	; 0x100
 80044d0:	d003      	beq.n	80044da <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044d4:	f040 0001 	orr.w	r0, r0, #1
 80044d8:	63e0      	str	r0, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044da:	f013 0f04 	tst.w	r3, #4
 80044de:	d004      	beq.n	80044ea <HAL_UART_IRQHandler+0x5a>
 80044e0:	b11a      	cbz	r2, 80044ea <HAL_UART_IRQHandler+0x5a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044e4:	f040 0002 	orr.w	r0, r0, #2
 80044e8:	63e0      	str	r0, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ea:	f013 0f02 	tst.w	r3, #2
 80044ee:	d004      	beq.n	80044fa <HAL_UART_IRQHandler+0x6a>
 80044f0:	b11a      	cbz	r2, 80044fa <HAL_UART_IRQHandler+0x6a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044f4:	f040 0004 	orr.w	r0, r0, #4
 80044f8:	63e0      	str	r0, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fa:	f013 0f08 	tst.w	r3, #8
 80044fe:	d004      	beq.n	800450a <HAL_UART_IRQHandler+0x7a>
 8004500:	b11a      	cbz	r2, 800450a <HAL_UART_IRQHandler+0x7a>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004502:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004504:	f042 0208 	orr.w	r2, r2, #8
 8004508:	63e2      	str	r2, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800450a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800450c:	2a00      	cmp	r2, #0
 800450e:	d04a      	beq.n	80045a6 <HAL_UART_IRQHandler+0x116>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004510:	f013 0f20 	tst.w	r3, #32
 8004514:	d005      	beq.n	8004522 <HAL_UART_IRQHandler+0x92>
 8004516:	f011 0f20 	tst.w	r1, #32
 800451a:	d002      	beq.n	8004522 <HAL_UART_IRQHandler+0x92>
      {
        UART_Receive_IT(huart);
 800451c:	4620      	mov	r0, r4
 800451e:	f7ff ff3f 	bl	80043a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800452a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800452c:	f012 0f08 	tst.w	r2, #8
 8004530:	d100      	bne.n	8004534 <HAL_UART_IRQHandler+0xa4>
 8004532:	b1fb      	cbz	r3, 8004574 <HAL_UART_IRQHandler+0xe4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004534:	4620      	mov	r0, r4
 8004536:	f7ff fbf1 	bl	8003d1c <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004542:	d013      	beq.n	800456c <HAL_UART_IRQHandler+0xdc>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800454c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800454e:	b14b      	cbz	r3, 8004564 <HAL_UART_IRQHandler+0xd4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004550:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <HAL_UART_IRQHandler+0x118>)
 8004552:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004554:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004556:	f000 fd73 	bl	8005040 <HAL_DMA_Abort_IT>
 800455a:	b320      	cbz	r0, 80045a6 <HAL_UART_IRQHandler+0x116>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800455c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800455e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004560:	4798      	blx	r3
 8004562:	bd10      	pop	{r4, pc}
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8004564:	4620      	mov	r0, r4
 8004566:	f005 fcdf 	bl	8009f28 <HAL_UART_ErrorCallback>
 800456a:	bd10      	pop	{r4, pc}
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800456c:	4620      	mov	r0, r4
 800456e:	f005 fcdb 	bl	8009f28 <HAL_UART_ErrorCallback>
 8004572:	bd10      	pop	{r4, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8004574:	4620      	mov	r0, r4
 8004576:	f005 fcd7 	bl	8009f28 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457a:	2300      	movs	r3, #0
 800457c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800457e:	bd10      	pop	{r4, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004580:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004584:	d006      	beq.n	8004594 <HAL_UART_IRQHandler+0x104>
 8004586:	f011 0f80 	tst.w	r1, #128	; 0x80
 800458a:	d003      	beq.n	8004594 <HAL_UART_IRQHandler+0x104>
  {
    UART_Transmit_IT(huart);
 800458c:	4620      	mov	r0, r4
 800458e:	f7ff fbd3 	bl	8003d38 <UART_Transmit_IT>
    return;
 8004592:	bd10      	pop	{r4, pc}
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004594:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004598:	d005      	beq.n	80045a6 <HAL_UART_IRQHandler+0x116>
 800459a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800459e:	d002      	beq.n	80045a6 <HAL_UART_IRQHandler+0x116>
  {
    UART_EndTransmit_IT(huart);
 80045a0:	4620      	mov	r0, r4
 80045a2:	f7ff fec7 	bl	8004334 <UART_EndTransmit_IT>
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	080045ad 	.word	0x080045ad

080045ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80045b4:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80045b6:	f005 fcb7 	bl	8009f28 <HAL_UART_ErrorCallback>
 80045ba:	bd08      	pop	{r3, pc}

080045bc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045bc:	2800      	cmp	r0, #0
 80045be:	f000 81b5 	beq.w	800492c <HAL_RCC_OscConfig+0x370>
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c8:	6803      	ldr	r3, [r0, #0]
 80045ca:	f013 0f01 	tst.w	r3, #1
 80045ce:	d05a      	beq.n	8004686 <HAL_RCC_OscConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045d0:	4ba0      	ldr	r3, [pc, #640]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d00a      	beq.n	80045f2 <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045dc:	4b9d      	ldr	r3, [pc, #628]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d10d      	bne.n	8004604 <HAL_RCC_OscConfig+0x48>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e8:	4b9a      	ldr	r3, [pc, #616]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80045f0:	d008      	beq.n	8004604 <HAL_RCC_OscConfig+0x48>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f2:	4b98      	ldr	r3, [pc, #608]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045fa:	d044      	beq.n	8004686 <HAL_RCC_OscConfig+0xca>
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d141      	bne.n	8004686 <HAL_RCC_OscConfig+0xca>
 8004602:	e195      	b.n	8004930 <HAL_RCC_OscConfig+0x374>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460a:	d105      	bne.n	8004618 <HAL_RCC_OscConfig+0x5c>
 800460c:	4a91      	ldr	r2, [pc, #580]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e015      	b.n	8004644 <HAL_RCC_OscConfig+0x88>
 8004618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800461c:	d109      	bne.n	8004632 <HAL_RCC_OscConfig+0x76>
 800461e:	4b8d      	ldr	r3, [pc, #564]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x88>
 8004632:	4b88      	ldr	r3, [pc, #544]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004642:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004644:	6863      	ldr	r3, [r4, #4]
 8004646:	b17b      	cbz	r3, 8004668 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f000 fe70 	bl	800532c <HAL_GetTick>
 800464c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	e005      	b.n	800465c <HAL_RCC_OscConfig+0xa0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004650:	f000 fe6c 	bl	800532c <HAL_GetTick>
 8004654:	1b40      	subs	r0, r0, r5
 8004656:	2864      	cmp	r0, #100	; 0x64
 8004658:	f200 816c 	bhi.w	8004934 <HAL_RCC_OscConfig+0x378>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465c:	4b7d      	ldr	r3, [pc, #500]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004664:	d0f4      	beq.n	8004650 <HAL_RCC_OscConfig+0x94>
 8004666:	e00e      	b.n	8004686 <HAL_RCC_OscConfig+0xca>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f000 fe60 	bl	800532c <HAL_GetTick>
 800466c:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	e005      	b.n	800467c <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004670:	f000 fe5c 	bl	800532c <HAL_GetTick>
 8004674:	1b40      	subs	r0, r0, r5
 8004676:	2864      	cmp	r0, #100	; 0x64
 8004678:	f200 815e 	bhi.w	8004938 <HAL_RCC_OscConfig+0x37c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467c:	4b75      	ldr	r3, [pc, #468]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004684:	d1f4      	bne.n	8004670 <HAL_RCC_OscConfig+0xb4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	f013 0f02 	tst.w	r3, #2
 800468c:	d050      	beq.n	8004730 <HAL_RCC_OscConfig+0x174>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468e:	4b71      	ldr	r3, [pc, #452]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f013 0f0c 	tst.w	r3, #12
 8004696:	d00a      	beq.n	80046ae <HAL_RCC_OscConfig+0xf2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004698:	4b6e      	ldr	r3, [pc, #440]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 030c 	and.w	r3, r3, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d116      	bne.n	80046d2 <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a4:	4b6b      	ldr	r3, [pc, #428]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80046ac:	d111      	bne.n	80046d2 <HAL_RCC_OscConfig+0x116>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	4b69      	ldr	r3, [pc, #420]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f013 0f02 	tst.w	r3, #2
 80046b6:	d003      	beq.n	80046c0 <HAL_RCC_OscConfig+0x104>
 80046b8:	68e3      	ldr	r3, [r4, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	f040 813e 	bne.w	800493c <HAL_RCC_OscConfig+0x380>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c0:	4a64      	ldr	r2, [pc, #400]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80046c8:	6921      	ldr	r1, [r4, #16]
 80046ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80046ce:	6013      	str	r3, [r2, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d0:	e02e      	b.n	8004730 <HAL_RCC_OscConfig+0x174>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d2:	68e3      	ldr	r3, [r4, #12]
 80046d4:	b1d3      	cbz	r3, 800470c <HAL_RCC_OscConfig+0x150>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d6:	2201      	movs	r2, #1
 80046d8:	4b5f      	ldr	r3, [pc, #380]	; (8004858 <HAL_RCC_OscConfig+0x29c>)
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f000 fe26 	bl	800532c <HAL_GetTick>
 80046e0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e2:	e005      	b.n	80046f0 <HAL_RCC_OscConfig+0x134>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e4:	f000 fe22 	bl	800532c <HAL_GetTick>
 80046e8:	1b40      	subs	r0, r0, r5
 80046ea:	2802      	cmp	r0, #2
 80046ec:	f200 8128 	bhi.w	8004940 <HAL_RCC_OscConfig+0x384>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f013 0f02 	tst.w	r3, #2
 80046f8:	d0f4      	beq.n	80046e4 <HAL_RCC_OscConfig+0x128>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fa:	4a56      	ldr	r2, [pc, #344]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80046fc:	6813      	ldr	r3, [r2, #0]
 80046fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004702:	6921      	ldr	r1, [r4, #16]
 8004704:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e011      	b.n	8004730 <HAL_RCC_OscConfig+0x174>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470c:	2200      	movs	r2, #0
 800470e:	4b52      	ldr	r3, [pc, #328]	; (8004858 <HAL_RCC_OscConfig+0x29c>)
 8004710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004712:	f000 fe0b 	bl	800532c <HAL_GetTick>
 8004716:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004718:	e005      	b.n	8004726 <HAL_RCC_OscConfig+0x16a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471a:	f000 fe07 	bl	800532c <HAL_GetTick>
 800471e:	1b40      	subs	r0, r0, r5
 8004720:	2802      	cmp	r0, #2
 8004722:	f200 810f 	bhi.w	8004944 <HAL_RCC_OscConfig+0x388>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004726:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f013 0f02 	tst.w	r3, #2
 800472e:	d1f4      	bne.n	800471a <HAL_RCC_OscConfig+0x15e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	f013 0f08 	tst.w	r3, #8
 8004736:	d026      	beq.n	8004786 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004738:	6963      	ldr	r3, [r4, #20]
 800473a:	b193      	cbz	r3, 8004762 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473c:	2201      	movs	r2, #1
 800473e:	4b47      	ldr	r3, [pc, #284]	; (800485c <HAL_RCC_OscConfig+0x2a0>)
 8004740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004742:	f000 fdf3 	bl	800532c <HAL_GetTick>
 8004746:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004748:	e005      	b.n	8004756 <HAL_RCC_OscConfig+0x19a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474a:	f000 fdef 	bl	800532c <HAL_GetTick>
 800474e:	1b40      	subs	r0, r0, r5
 8004750:	2802      	cmp	r0, #2
 8004752:	f200 80f9 	bhi.w	8004948 <HAL_RCC_OscConfig+0x38c>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004756:	4b3f      	ldr	r3, [pc, #252]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	f013 0f02 	tst.w	r3, #2
 800475e:	d0f4      	beq.n	800474a <HAL_RCC_OscConfig+0x18e>
 8004760:	e011      	b.n	8004786 <HAL_RCC_OscConfig+0x1ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004762:	2200      	movs	r2, #0
 8004764:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCC_OscConfig+0x2a0>)
 8004766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004768:	f000 fde0 	bl	800532c <HAL_GetTick>
 800476c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800476e:	e005      	b.n	800477c <HAL_RCC_OscConfig+0x1c0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004770:	f000 fddc 	bl	800532c <HAL_GetTick>
 8004774:	1b40      	subs	r0, r0, r5
 8004776:	2802      	cmp	r0, #2
 8004778:	f200 80e8 	bhi.w	800494c <HAL_RCC_OscConfig+0x390>

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	4b35      	ldr	r3, [pc, #212]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	f013 0f02 	tst.w	r3, #2
 8004784:	d1f4      	bne.n	8004770 <HAL_RCC_OscConfig+0x1b4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	f013 0f04 	tst.w	r3, #4
 800478c:	d07c      	beq.n	8004888 <HAL_RCC_OscConfig+0x2cc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800478e:	4b31      	ldr	r3, [pc, #196]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004796:	d10d      	bne.n	80047b4 <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	2300      	movs	r3, #0
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 800479e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	9301      	str	r3, [sp, #4]
 80047ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80047b0:	2501      	movs	r5, #1
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x1fa>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b4:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b6:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <HAL_RCC_OscConfig+0x2a4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047be:	d113      	bne.n	80047e8 <HAL_RCC_OscConfig+0x22c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047c0:	4a27      	ldr	r2, [pc, #156]	; (8004860 <HAL_RCC_OscConfig+0x2a4>)
 80047c2:	6813      	ldr	r3, [r2, #0]
 80047c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ca:	f000 fdaf 	bl	800532c <HAL_GetTick>
 80047ce:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d0:	e005      	b.n	80047de <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d2:	f000 fdab 	bl	800532c <HAL_GetTick>
 80047d6:	1b80      	subs	r0, r0, r6
 80047d8:	2802      	cmp	r0, #2
 80047da:	f200 80b9 	bhi.w	8004950 <HAL_RCC_OscConfig+0x394>
      SET_BIT(PWR->CR, PWR_CR_DBP);

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_OscConfig+0x2a4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047e6:	d0f4      	beq.n	80047d2 <HAL_RCC_OscConfig+0x216>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	68a3      	ldr	r3, [r4, #8]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <HAL_RCC_OscConfig+0x23e>
 80047ee:	4a19      	ldr	r2, [pc, #100]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 80047f0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
 80047f8:	e014      	b.n	8004824 <HAL_RCC_OscConfig+0x268>
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d109      	bne.n	8004812 <HAL_RCC_OscConfig+0x256>
 80047fe:	4b15      	ldr	r3, [pc, #84]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004800:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004802:	f042 0204 	orr.w	r2, r2, #4
 8004806:	671a      	str	r2, [r3, #112]	; 0x70
 8004808:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	671a      	str	r2, [r3, #112]	; 0x70
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x268>
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004814:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	671a      	str	r2, [r3, #112]	; 0x70
 800481c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004824:	68a3      	ldr	r3, [r4, #8]
 8004826:	b18b      	cbz	r3, 800484c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004828:	f000 fd80 	bl	800532c <HAL_GetTick>
 800482c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482e:	e007      	b.n	8004840 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004830:	f000 fd7c 	bl	800532c <HAL_GetTick>
 8004834:	1b80      	subs	r0, r0, r6
 8004836:	f241 3388 	movw	r3, #5000	; 0x1388
 800483a:	4298      	cmp	r0, r3
 800483c:	f200 808a 	bhi.w	8004954 <HAL_RCC_OscConfig+0x398>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <HAL_RCC_OscConfig+0x298>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f013 0f02 	tst.w	r3, #2
 8004848:	d0f2      	beq.n	8004830 <HAL_RCC_OscConfig+0x274>
 800484a:	e017      	b.n	800487c <HAL_RCC_OscConfig+0x2c0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484c:	f000 fd6e 	bl	800532c <HAL_GetTick>
 8004850:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004852:	e00e      	b.n	8004872 <HAL_RCC_OscConfig+0x2b6>
 8004854:	40023800 	.word	0x40023800
 8004858:	42470000 	.word	0x42470000
 800485c:	42470e80 	.word	0x42470e80
 8004860:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f000 fd62 	bl	800532c <HAL_GetTick>
 8004868:	1b80      	subs	r0, r0, r6
 800486a:	f241 3388 	movw	r3, #5000	; 0x1388
 800486e:	4298      	cmp	r0, r3
 8004870:	d872      	bhi.n	8004958 <HAL_RCC_OscConfig+0x39c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004872:	4b40      	ldr	r3, [pc, #256]	; (8004974 <HAL_RCC_OscConfig+0x3b8>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	f013 0f02 	tst.w	r3, #2
 800487a:	d1f3      	bne.n	8004864 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487c:	b125      	cbz	r5, 8004888 <HAL_RCC_OscConfig+0x2cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4a3d      	ldr	r2, [pc, #244]	; (8004974 <HAL_RCC_OscConfig+0x3b8>)
 8004880:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004888:	69a3      	ldr	r3, [r4, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d066      	beq.n	800495c <HAL_RCC_OscConfig+0x3a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800488e:	4a39      	ldr	r2, [pc, #228]	; (8004974 <HAL_RCC_OscConfig+0x3b8>)
 8004890:	6892      	ldr	r2, [r2, #8]
 8004892:	f002 020c 	and.w	r2, r2, #12
 8004896:	2a08      	cmp	r2, #8
 8004898:	d062      	beq.n	8004960 <HAL_RCC_OscConfig+0x3a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800489a:	2b02      	cmp	r3, #2
 800489c:	d133      	bne.n	8004906 <HAL_RCC_OscConfig+0x34a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489e:	2200      	movs	r2, #0
 80048a0:	4b35      	ldr	r3, [pc, #212]	; (8004978 <HAL_RCC_OscConfig+0x3bc>)
 80048a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a4:	f000 fd42 	bl	800532c <HAL_GetTick>
 80048a8:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	e004      	b.n	80048b6 <HAL_RCC_OscConfig+0x2fa>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ac:	f000 fd3e 	bl	800532c <HAL_GetTick>
 80048b0:	1b40      	subs	r0, r0, r5
 80048b2:	2802      	cmp	r0, #2
 80048b4:	d856      	bhi.n	8004964 <HAL_RCC_OscConfig+0x3a8>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <HAL_RCC_OscConfig+0x3b8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80048be:	d1f5      	bne.n	80048ac <HAL_RCC_OscConfig+0x2f0>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048c0:	69e2      	ldr	r2, [r4, #28]
 80048c2:	6a23      	ldr	r3, [r4, #32]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80048c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80048cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80048ce:	0852      	lsrs	r2, r2, #1
 80048d0:	3a01      	subs	r2, #1
 80048d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80048d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80048dc:	4a25      	ldr	r2, [pc, #148]	; (8004974 <HAL_RCC_OscConfig+0x3b8>)
 80048de:	6053      	str	r3, [r2, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e0:	2201      	movs	r2, #1
 80048e2:	4b25      	ldr	r3, [pc, #148]	; (8004978 <HAL_RCC_OscConfig+0x3bc>)
 80048e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e6:	f000 fd21 	bl	800532c <HAL_GetTick>
 80048ea:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ec:	e004      	b.n	80048f8 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ee:	f000 fd1d 	bl	800532c <HAL_GetTick>
 80048f2:	1b00      	subs	r0, r0, r4
 80048f4:	2802      	cmp	r0, #2
 80048f6:	d837      	bhi.n	8004968 <HAL_RCC_OscConfig+0x3ac>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <HAL_RCC_OscConfig+0x3b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004900:	d0f5      	beq.n	80048ee <HAL_RCC_OscConfig+0x332>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004902:	2000      	movs	r0, #0
 8004904:	e033      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	2200      	movs	r2, #0
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCC_OscConfig+0x3bc>)
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f000 fd0e 	bl	800532c <HAL_GetTick>
 8004910:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	e004      	b.n	800491e <HAL_RCC_OscConfig+0x362>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004914:	f000 fd0a 	bl	800532c <HAL_GetTick>
 8004918:	1b00      	subs	r0, r0, r4
 800491a:	2802      	cmp	r0, #2
 800491c:	d826      	bhi.n	800496c <HAL_RCC_OscConfig+0x3b0>

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <HAL_RCC_OscConfig+0x3b8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004926:	d1f5      	bne.n	8004914 <HAL_RCC_OscConfig+0x358>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004928:	2000      	movs	r0, #0
 800492a:	e020      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800492e:	4770      	bx	lr
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8004930:	2001      	movs	r0, #1
 8004932:	e01c      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8004934:	2003      	movs	r0, #3
 8004936:	e01a      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8004938:	2003      	movs	r0, #3
 800493a:	e018      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 800493c:	2001      	movs	r0, #1
 800493e:	e016      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8004940:	2003      	movs	r0, #3
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8004944:	2003      	movs	r0, #3
 8004946:	e012      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8004948:	2003      	movs	r0, #3
 800494a:	e010      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800494c:	2003      	movs	r0, #3
 800494e:	e00e      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8004950:	2003      	movs	r0, #3
 8004952:	e00c      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8004954:	2003      	movs	r0, #3
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8004958:	2003      	movs	r0, #3
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800495c:	2000      	movs	r0, #0
 800495e:	e006      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004960:	2001      	movs	r0, #1
 8004962:	e004      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8004964:	2003      	movs	r0, #3
 8004966:	e002      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8004968:	2003      	movs	r0, #3
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x3b2>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800496c:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800496e:	b002      	add	sp, #8
 8004970:	bd70      	pop	{r4, r5, r6, pc}
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	42470060 	.word	0x42470060

0800497c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	b538      	push	{r3, r4, r5, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497e:	4b2f      	ldr	r3, [pc, #188]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b04      	cmp	r3, #4
 8004988:	d055      	beq.n	8004a36 <HAL_RCC_GetSysClockFreq+0xba>
 800498a:	2b08      	cmp	r3, #8
 800498c:	d001      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800498e:	482c      	ldr	r0, [pc, #176]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004990:	bd38      	pop	{r3, r4, r5, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004992:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80049a0:	d020      	beq.n	80049e4 <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a2:	4b26      	ldr	r3, [pc, #152]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80049aa:	00dc      	lsls	r4, r3, #3
 80049ac:	2500      	movs	r5, #0
 80049ae:	0169      	lsls	r1, r5, #5
 80049b0:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 80049b4:	0160      	lsls	r0, r4, #5
 80049b6:	1b04      	subs	r4, r0, r4
 80049b8:	eb61 0505 	sbc.w	r5, r1, r5
 80049bc:	01a9      	lsls	r1, r5, #6
 80049be:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80049c2:	01a0      	lsls	r0, r4, #6
 80049c4:	1b00      	subs	r0, r0, r4
 80049c6:	eb61 0105 	sbc.w	r1, r1, r5
 80049ca:	18c0      	adds	r0, r0, r3
 80049cc:	f141 0100 	adc.w	r1, r1, #0
 80049d0:	024b      	lsls	r3, r1, #9
 80049d2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80049d6:	0244      	lsls	r4, r0, #9
 80049d8:	4620      	mov	r0, r4
 80049da:	4619      	mov	r1, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	f7fc fb2d 	bl	800103c <__aeabi_uldivmod>
 80049e2:	e01f      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80049ec:	00dc      	lsls	r4, r3, #3
 80049ee:	2500      	movs	r5, #0
 80049f0:	0169      	lsls	r1, r5, #5
 80049f2:	ea41 61d4 	orr.w	r1, r1, r4, lsr #27
 80049f6:	0160      	lsls	r0, r4, #5
 80049f8:	1b04      	subs	r4, r0, r4
 80049fa:	eb61 0505 	sbc.w	r5, r1, r5
 80049fe:	01a9      	lsls	r1, r5, #6
 8004a00:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004a04:	01a0      	lsls	r0, r4, #6
 8004a06:	1b00      	subs	r0, r0, r4
 8004a08:	eb61 0105 	sbc.w	r1, r1, r5
 8004a0c:	18c0      	adds	r0, r0, r3
 8004a0e:	f141 0100 	adc.w	r1, r1, #0
 8004a12:	028b      	lsls	r3, r1, #10
 8004a14:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004a18:	0284      	lsls	r4, r0, #10
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f7fc fb0c 	bl	800103c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004a30:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a36:	4803      	ldr	r0, [pc, #12]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004a38:	bd38      	pop	{r3, r4, r5, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	00f42400 	.word	0x00f42400
 8004a44:	007a1200 	.word	0x007a1200

08004a48 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	f000 8097 	beq.w	8004b7c <HAL_RCC_ClockConfig+0x134>
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a4e:	b570      	push	{r4, r5, r6, lr}
 8004a50:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a52:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_RCC_ClockConfig+0x150>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	428b      	cmp	r3, r1
 8004a5c:	d208      	bcs.n	8004a70 <HAL_RCC_ClockConfig+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	b2cb      	uxtb	r3, r1
 8004a60:	4a4d      	ldr	r2, [pc, #308]	; (8004b98 <HAL_RCC_ClockConfig+0x150>)
 8004a62:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a64:	6813      	ldr	r3, [r2, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	f040 8088 	bne.w	8004b80 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	f013 0f02 	tst.w	r3, #2
 8004a76:	d017      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	f013 0f04 	tst.w	r3, #4
 8004a7c:	d004      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7e:	4a47      	ldr	r2, [pc, #284]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004a80:	6893      	ldr	r3, [r2, #8]
 8004a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	f013 0f08 	tst.w	r3, #8
 8004a8e:	d004      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x52>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a90:	4a42      	ldr	r2, [pc, #264]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004a92:	6893      	ldr	r3, [r2, #8]
 8004a94:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a98:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9a:	4840      	ldr	r0, [pc, #256]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004a9c:	6883      	ldr	r3, [r0, #8]
 8004a9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa2:	68a3      	ldr	r3, [r4, #8]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	6083      	str	r3, [r0, #8]
 8004aa8:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	f013 0f01 	tst.w	r3, #1
 8004ab0:	d02f      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	2a01      	cmp	r2, #1
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x7c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab8:	4b38      	ldr	r3, [pc, #224]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x98>
 8004ac2:	e05f      	b.n	8004b84 <HAL_RCC_ClockConfig+0x13c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac4:	1e93      	subs	r3, r2, #2
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d805      	bhi.n	8004ad6 <HAL_RCC_ClockConfig+0x8e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aca:	4b34      	ldr	r3, [pc, #208]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0x98>
 8004ad4:	e058      	b.n	8004b88 <HAL_RCC_ClockConfig+0x140>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f013 0f02 	tst.w	r3, #2
 8004ade:	d055      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae0:	492e      	ldr	r1, [pc, #184]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004ae2:	688b      	ldr	r3, [r1, #8]
 8004ae4:	f023 0303 	bic.w	r3, r3, #3
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aec:	f000 fc1e 	bl	800532c <HAL_GetTick>
 8004af0:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af2:	e006      	b.n	8004b02 <HAL_RCC_ClockConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af4:	f000 fc1a 	bl	800532c <HAL_GetTick>
 8004af8:	1b80      	subs	r0, r0, r6
 8004afa:	f241 3388 	movw	r3, #5000	; 0x1388
 8004afe:	4298      	cmp	r0, r3
 8004b00:	d846      	bhi.n	8004b90 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b26      	ldr	r3, [pc, #152]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	6862      	ldr	r2, [r4, #4]
 8004b0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCC_ClockConfig+0x150>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	429d      	cmp	r5, r3
 8004b1c:	d207      	bcs.n	8004b2e <HAL_RCC_ClockConfig+0xe6>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	b2ea      	uxtb	r2, r5
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCC_ClockConfig+0x150>)
 8004b22:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	429d      	cmp	r5, r3
 8004b2c:	d132      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x14c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f013 0f04 	tst.w	r3, #4
 8004b34:	d006      	beq.n	8004b44 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b36:	4919      	ldr	r1, [pc, #100]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004b38:	688b      	ldr	r3, [r1, #8]
 8004b3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b3e:	68e3      	ldr	r3, [r4, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	f013 0f08 	tst.w	r3, #8
 8004b4a:	d007      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b4c:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004b4e:	6893      	ldr	r3, [r2, #8]
 8004b50:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b54:	6921      	ldr	r1, [r4, #16]
 8004b56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b5a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b5c:	f7ff ff0e 	bl	800497c <HAL_RCC_GetSysClockFreq>
 8004b60:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <HAL_RCC_ClockConfig+0x154>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <HAL_RCC_ClockConfig+0x158>)
 8004b6a:	5cd3      	ldrb	r3, [r2, r3]
 8004b6c:	40d8      	lsrs	r0, r3
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_RCC_ClockConfig+0x15c>)
 8004b70:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b72:	2000      	movs	r0, #0
 8004b74:	f7fd fcde 	bl	8002534 <HAL_InitTick>

  return HAL_OK;
 8004b78:	2000      	movs	r0, #0
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 8004b7c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8004b7e:	4770      	bx	lr

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8004b80:	2001      	movs	r0, #1
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8004b84:	2001      	movs	r0, #1
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 8004b88:	2001      	movs	r0, #1
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8004b90:	2003      	movs	r0, #3
 8004b92:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8004b94:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	40023c00 	.word	0x40023c00
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	0800ed18 	.word	0x0800ed18
 8004ba4:	20000048 	.word	0x20000048

08004ba8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004ba8:	4b01      	ldr	r3, [pc, #4]	; (8004bb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	20000048 	.word	0x20000048

08004bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb6:	f7ff fff7 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bba:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <HAL_RCC_GetPCLK1Freq+0x18>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004bc2:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
}
 8004bc6:	40d8      	lsrs	r0, r3
 8004bc8:	bd08      	pop	{r3, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	0800ed28 	.word	0x0800ed28

08004bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bd6:	f7ff ffe7 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bda:	4b04      	ldr	r3, [pc, #16]	; (8004bec <HAL_RCC_GetPCLK2Freq+0x18>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004be2:	4a03      	ldr	r2, [pc, #12]	; (8004bf0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004be4:	5cd3      	ldrb	r3, [r2, r3]
}
 8004be6:	40d8      	lsrs	r0, r3
 8004be8:	bd08      	pop	{r3, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	0800ed28 	.word	0x0800ed28

08004bf4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bf4:	230f      	movs	r3, #15
 8004bf6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_GetClockConfig+0x34>)
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	f002 0203 	and.w	r2, r2, #3
 8004c00:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004c08:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004c10:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	08db      	lsrs	r3, r3, #3
 8004c16:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004c1a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c1c:	4b03      	ldr	r3, [pc, #12]	; (8004c2c <HAL_RCC_GetClockConfig+0x38>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	600b      	str	r3, [r1, #0]
 8004c26:	4770      	bx	lr
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40023c00 	.word	0x40023c00

08004c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c32:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c34:	2400      	movs	r4, #0
 8004c36:	e0cd      	b.n	8004dd4 <HAL_GPIO_Init+0x1a4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	40a3      	lsls	r3, r4
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3c:	680a      	ldr	r2, [r1, #0]
 8004c3e:	ea03 0502 	and.w	r5, r3, r2

    if(iocurrent == ioposition)
 8004c42:	42ab      	cmp	r3, r5
 8004c44:	f040 80c5 	bne.w	8004dd2 <HAL_GPIO_Init+0x1a2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c48:	684a      	ldr	r2, [r1, #4]
 8004c4a:	2a02      	cmp	r2, #2
 8004c4c:	d001      	beq.n	8004c52 <HAL_GPIO_Init+0x22>
 8004c4e:	2a12      	cmp	r2, #18
 8004c50:	d110      	bne.n	8004c74 <HAL_GPIO_Init+0x44>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c52:	08e6      	lsrs	r6, r4, #3
 8004c54:	3608      	adds	r6, #8
 8004c56:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c5a:	f004 0207 	and.w	r2, r4, #7
 8004c5e:	0097      	lsls	r7, r2, #2
 8004c60:	220f      	movs	r2, #15
 8004c62:	40ba      	lsls	r2, r7
 8004c64:	ea2c 0e02 	bic.w	lr, ip, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c68:	690a      	ldr	r2, [r1, #16]
 8004c6a:	40ba      	lsls	r2, r7
 8004c6c:	ea4e 0202 	orr.w	r2, lr, r2
        GPIOx->AFR[position >> 3U] = temp;
 8004c70:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c74:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c76:	0067      	lsls	r7, r4, #1
 8004c78:	2603      	movs	r6, #3
 8004c7a:	40be      	lsls	r6, r7
 8004c7c:	43f6      	mvns	r6, r6
 8004c7e:	ea02 0e06 	and.w	lr, r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c82:	684a      	ldr	r2, [r1, #4]
 8004c84:	f002 0203 	and.w	r2, r2, #3
 8004c88:	40ba      	lsls	r2, r7
 8004c8a:	ea4e 0202 	orr.w	r2, lr, r2
      GPIOx->MODER = temp;
 8004c8e:	6002      	str	r2, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c90:	684a      	ldr	r2, [r1, #4]
 8004c92:	f102 3eff 	add.w	lr, r2, #4294967295
 8004c96:	f1be 0f01 	cmp.w	lr, #1
 8004c9a:	d903      	bls.n	8004ca4 <HAL_GPIO_Init+0x74>
 8004c9c:	2a11      	cmp	r2, #17
 8004c9e:	d001      	beq.n	8004ca4 <HAL_GPIO_Init+0x74>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ca0:	2a12      	cmp	r2, #18
 8004ca2:	d110      	bne.n	8004cc6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ca4:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ca6:	ea06 0e02 	and.w	lr, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004caa:	68ca      	ldr	r2, [r1, #12]
 8004cac:	40ba      	lsls	r2, r7
 8004cae:	ea4e 0202 	orr.w	r2, lr, r2
        GPIOx->OSPEEDR = temp;
 8004cb2:	6082      	str	r2, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb4:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cb6:	ea22 0303 	bic.w	r3, r2, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004cba:	684a      	ldr	r2, [r1, #4]
 8004cbc:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004cc0:	40a2      	lsls	r2, r4
 8004cc2:	431a      	orrs	r2, r3
        GPIOx->OTYPER = temp;
 8004cc4:	6042      	str	r2, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cc6:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cc8:	401e      	ands	r6, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cca:	688b      	ldr	r3, [r1, #8]
 8004ccc:	40bb      	lsls	r3, r7
 8004cce:	4333      	orrs	r3, r6
      GPIOx->PUPDR = temp;
 8004cd0:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cd2:	684b      	ldr	r3, [r1, #4]
 8004cd4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004cd8:	d07b      	beq.n	8004dd2 <HAL_GPIO_Init+0x1a2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	4b40      	ldr	r3, [pc, #256]	; (8004de0 <HAL_GPIO_Init+0x1b0>)
 8004ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cf2:	08a6      	lsrs	r6, r4, #2
 8004cf4:	1cb2      	adds	r2, r6, #2
 8004cf6:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_GPIO_Init+0x1b4>)
 8004cf8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cfc:	f004 0303 	and.w	r3, r4, #3
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	220f      	movs	r2, #15
 8004d04:	409a      	lsls	r2, r3
 8004d06:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d0a:	4a37      	ldr	r2, [pc, #220]	; (8004de8 <HAL_GPIO_Init+0x1b8>)
 8004d0c:	4290      	cmp	r0, r2
 8004d0e:	d01d      	beq.n	8004d4c <HAL_GPIO_Init+0x11c>
 8004d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d14:	4290      	cmp	r0, r2
 8004d16:	d01b      	beq.n	8004d50 <HAL_GPIO_Init+0x120>
 8004d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d1c:	4290      	cmp	r0, r2
 8004d1e:	d019      	beq.n	8004d54 <HAL_GPIO_Init+0x124>
 8004d20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d24:	4290      	cmp	r0, r2
 8004d26:	d017      	beq.n	8004d58 <HAL_GPIO_Init+0x128>
 8004d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d2c:	4290      	cmp	r0, r2
 8004d2e:	d015      	beq.n	8004d5c <HAL_GPIO_Init+0x12c>
 8004d30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d34:	4290      	cmp	r0, r2
 8004d36:	d013      	beq.n	8004d60 <HAL_GPIO_Init+0x130>
 8004d38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d3c:	4290      	cmp	r0, r2
 8004d3e:	d011      	beq.n	8004d64 <HAL_GPIO_Init+0x134>
 8004d40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d44:	4290      	cmp	r0, r2
 8004d46:	d10f      	bne.n	8004d68 <HAL_GPIO_Init+0x138>
 8004d48:	2207      	movs	r2, #7
 8004d4a:	e00e      	b.n	8004d6a <HAL_GPIO_Init+0x13a>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	e00c      	b.n	8004d6a <HAL_GPIO_Init+0x13a>
 8004d50:	2201      	movs	r2, #1
 8004d52:	e00a      	b.n	8004d6a <HAL_GPIO_Init+0x13a>
 8004d54:	2202      	movs	r2, #2
 8004d56:	e008      	b.n	8004d6a <HAL_GPIO_Init+0x13a>
 8004d58:	2203      	movs	r2, #3
 8004d5a:	e006      	b.n	8004d6a <HAL_GPIO_Init+0x13a>
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	e004      	b.n	8004d6a <HAL_GPIO_Init+0x13a>
 8004d60:	2205      	movs	r2, #5
 8004d62:	e002      	b.n	8004d6a <HAL_GPIO_Init+0x13a>
 8004d64:	2206      	movs	r2, #6
 8004d66:	e000      	b.n	8004d6a <HAL_GPIO_Init+0x13a>
 8004d68:	2208      	movs	r2, #8
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	433b      	orrs	r3, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d70:	3602      	adds	r6, #2
 8004d72:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <HAL_GPIO_Init+0x1b4>)
 8004d74:	f842 3026 	str.w	r3, [r2, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d78:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <HAL_GPIO_Init+0x1bc>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8004d7c:	43eb      	mvns	r3, r5
 8004d7e:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d82:	684f      	ldr	r7, [r1, #4]
 8004d84:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004d88:	d001      	beq.n	8004d8e <HAL_GPIO_Init+0x15e>
        {
          temp |= iocurrent;
 8004d8a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8004d8e:	4a17      	ldr	r2, [pc, #92]	; (8004dec <HAL_GPIO_Init+0x1bc>)
 8004d90:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8004d92:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004d94:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d98:	684f      	ldr	r7, [r1, #4]
 8004d9a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004d9e:	d001      	beq.n	8004da4 <HAL_GPIO_Init+0x174>
        {
          temp |= iocurrent;
 8004da0:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8004da4:	4a11      	ldr	r2, [pc, #68]	; (8004dec <HAL_GPIO_Init+0x1bc>)
 8004da6:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004da8:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004daa:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004dae:	684f      	ldr	r7, [r1, #4]
 8004db0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004db4:	d001      	beq.n	8004dba <HAL_GPIO_Init+0x18a>
        {
          temp |= iocurrent;
 8004db6:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <HAL_GPIO_Init+0x1bc>)
 8004dbc:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8004dbe:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004dc0:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dc2:	684e      	ldr	r6, [r1, #4]
 8004dc4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8004dc8:	d001      	beq.n	8004dce <HAL_GPIO_Init+0x19e>
        {
          temp |= iocurrent;
 8004dca:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8004dce:	4a07      	ldr	r2, [pc, #28]	; (8004dec <HAL_GPIO_Init+0x1bc>)
 8004dd0:	60d3      	str	r3, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dd2:	3401      	adds	r4, #1
 8004dd4:	2c0f      	cmp	r4, #15
 8004dd6:	f67f af2f 	bls.w	8004c38 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8004dda:	b003      	add	sp, #12
 8004ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40013800 	.word	0x40013800
 8004de8:	40020000 	.word	0x40020000
 8004dec:	40013c00 	.word	0x40013c00

08004df0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004df0:	b10a      	cbz	r2, 8004df6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004df2:	6181      	str	r1, [r0, #24]
 8004df4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004df6:	0409      	lsls	r1, r1, #16
 8004df8:	6181      	str	r1, [r0, #24]
 8004dfa:	4770      	bx	lr

08004dfc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004dfc:	6943      	ldr	r3, [r0, #20]
 8004dfe:	4059      	eors	r1, r3
 8004e00:	6141      	str	r1, [r0, #20]
 8004e02:	4770      	bx	lr

08004e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e04:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e06:	6805      	ldr	r5, [r0, #0]
 8004e08:	682c      	ldr	r4, [r5, #0]
 8004e0a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8004e0e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e10:	6804      	ldr	r4, [r0, #0]
 8004e12:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e14:	6883      	ldr	r3, [r0, #8]
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d104      	bne.n	8004e24 <DMA_SetConfig+0x20>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e1a:	6803      	ldr	r3, [r0, #0]
 8004e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e1e:	6803      	ldr	r3, [r0, #0]
 8004e20:	60d9      	str	r1, [r3, #12]
 8004e22:	e003      	b.n	8004e2c <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8004e24:	6803      	ldr	r3, [r0, #0]
 8004e26:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004e28:	6803      	ldr	r3, [r0, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
  }
}
 8004e2c:	bc30      	pop	{r4, r5}
 8004e2e:	4770      	bx	lr

08004e30 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e30:	6802      	ldr	r2, [r0, #0]
 8004e32:	b2d3      	uxtb	r3, r2
 8004e34:	3b10      	subs	r3, #16
 8004e36:	490b      	ldr	r1, [pc, #44]	; (8004e64 <DMA_CalcBaseAndBitshift+0x34>)
 8004e38:	fba1 1303 	umull	r1, r3, r1, r3
 8004e3c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e3e:	490a      	ldr	r1, [pc, #40]	; (8004e68 <DMA_CalcBaseAndBitshift+0x38>)
 8004e40:	5cc9      	ldrb	r1, [r1, r3]
 8004e42:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d906      	bls.n	8004e56 <DMA_CalcBaseAndBitshift+0x26>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e48:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004e4c:	f022 0203 	bic.w	r2, r2, #3
 8004e50:	3204      	adds	r2, #4
 8004e52:	6582      	str	r2, [r0, #88]	; 0x58
 8004e54:	e004      	b.n	8004e60 <DMA_CalcBaseAndBitshift+0x30>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e56:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004e5a:	f022 0203 	bic.w	r2, r2, #3
 8004e5e:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8004e60:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004e62:	4770      	bx	lr
 8004e64:	aaaaaaab 	.word	0xaaaaaaab
 8004e68:	0800ed10 	.word	0x0800ed10

08004e6c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e6e:	6982      	ldr	r2, [r0, #24]
 8004e70:	b982      	cbnz	r2, 8004e94 <DMA_CheckFifoParam+0x28>
  {
    switch (tmp)
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d008      	beq.n	8004e88 <DMA_CheckFifoParam+0x1c>
 8004e76:	b10b      	cbz	r3, 8004e7c <DMA_CheckFifoParam+0x10>
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d12e      	bne.n	8004eda <DMA_CheckFifoParam+0x6e>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004e7e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004e82:	d12c      	bne.n	8004ede <DMA_CheckFifoParam+0x72>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004e84:	2000      	movs	r0, #0
 8004e86:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e8e:	d028      	beq.n	8004ee2 <DMA_CheckFifoParam+0x76>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004e90:	2000      	movs	r0, #0
 8004e92:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e94:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004e98:	d113      	bne.n	8004ec2 <DMA_CheckFifoParam+0x56>
  {
    switch (tmp)
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d803      	bhi.n	8004ea6 <DMA_CheckFifoParam+0x3a>
 8004e9e:	e8df f003 	tbb	[pc, r3]
 8004ea2:	0422      	.short	0x0422
 8004ea4:	0a22      	.short	0x0a22
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eaa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004eac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004eb0:	d11b      	bne.n	8004eea <DMA_CheckFifoParam+0x7e>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ebc:	d017      	beq.n	8004eee <DMA_CheckFifoParam+0x82>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	4770      	bx	lr
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d915      	bls.n	8004ef2 <DMA_CheckFifoParam+0x86>
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d001      	beq.n	8004ece <DMA_CheckFifoParam+0x62>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2000      	movs	r0, #0
 8004ecc:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ece:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004ed0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004ed4:	d10f      	bne.n	8004ef6 <DMA_CheckFifoParam+0x8a>
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	4770      	bx	lr
 8004eda:	2000      	movs	r0, #0
 8004edc:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8004ede:	2001      	movs	r0, #1
 8004ee0:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	4770      	bx	lr
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8004eea:	2001      	movs	r0, #1
 8004eec:	4770      	bx	lr
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
      {
        status = HAL_ERROR;
 8004eee:	2001      	movs	r0, #1
 8004ef0:	4770      	bx	lr
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	4770      	bx	lr
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
      {
        status = HAL_ERROR;
 8004ef6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop

08004efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004f00:	f000 fa14 	bl	800532c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f04:	2c00      	cmp	r4, #0
 8004f06:	d05c      	beq.n	8004fc2 <HAL_DMA_Init+0xc6>
 8004f08:	4605      	mov	r5, r0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f10:	2302      	movs	r3, #2
 8004f12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f16:	6822      	ldr	r2, [r4, #0]
 8004f18:	6813      	ldr	r3, [r2, #0]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f20:	e00a      	b.n	8004f38 <HAL_DMA_Init+0x3c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f22:	f000 fa03 	bl	800532c <HAL_GetTick>
 8004f26:	1b40      	subs	r0, r0, r5
 8004f28:	2805      	cmp	r0, #5
 8004f2a:	d905      	bls.n	8004f38 <HAL_DMA_Init+0x3c>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f30:	2003      	movs	r0, #3
 8004f32:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	f012 0f01 	tst.w	r2, #1
 8004f40:	d1ef      	bne.n	8004f22 <HAL_DMA_Init+0x26>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f42:	681a      	ldr	r2, [r3, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f44:	4820      	ldr	r0, [pc, #128]	; (8004fc8 <HAL_DMA_Init+0xcc>)
 8004f46:	4010      	ands	r0, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f48:	6861      	ldr	r1, [r4, #4]
 8004f4a:	68a2      	ldr	r2, [r4, #8]
 8004f4c:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f4e:	68e2      	ldr	r2, [r4, #12]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f50:	4311      	orrs	r1, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f52:	6922      	ldr	r2, [r4, #16]
 8004f54:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f56:	6962      	ldr	r2, [r4, #20]
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f58:	4311      	orrs	r1, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5a:	69a2      	ldr	r2, [r4, #24]
 8004f5c:	4311      	orrs	r1, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f5e:	69e2      	ldr	r2, [r4, #28]
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f60:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f62:	6a21      	ldr	r1, [r4, #32]
 8004f64:	4311      	orrs	r1, r2
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f66:	ea40 0201 	orr.w	r2, r0, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f6c:	2904      	cmp	r1, #4
 8004f6e:	d103      	bne.n	8004f78 <HAL_DMA_Init+0x7c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f74:	4301      	orrs	r1, r0
 8004f76:	430a      	orrs	r2, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f78:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f7a:	6826      	ldr	r6, [r4, #0]
 8004f7c:	6975      	ldr	r5, [r6, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f7e:	f025 0507 	bic.w	r5, r5, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f84:	431d      	orrs	r5, r3

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d10d      	bne.n	8004fa6 <HAL_DMA_Init+0xaa>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f8c:	431d      	orrs	r5, r3
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f90:	b14b      	cbz	r3, 8004fa6 <HAL_DMA_Init+0xaa>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7ff ff6a 	bl	8004e6c <DMA_CheckFifoParam>
 8004f98:	b128      	cbz	r0, 8004fa6 <HAL_DMA_Init+0xaa>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        
        return HAL_ERROR; 
 8004fa4:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004fa6:	6175      	str	r5, [r6, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f7ff ff41 	bl	8004e30 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004fb0:	233f      	movs	r3, #63	; 0x3f
 8004fb2:	4093      	lsls	r3, r2
 8004fb4:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004fc2:	2001      	movs	r0, #1
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
 8004fc6:	bf00      	nop
 8004fc8:	f010803f 	.word	0xf010803f

08004fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fcc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fce:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fd0:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8004fd4:	2c01      	cmp	r4, #1
 8004fd6:	d031      	beq.n	800503c <HAL_DMA_Start_IT+0x70>
 8004fd8:	2401      	movs	r4, #1
 8004fda:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fde:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004fe2:	b2e4      	uxtb	r4, r4
 8004fe4:	2c01      	cmp	r4, #1
 8004fe6:	d124      	bne.n	8005032 <HAL_DMA_Start_IT+0x66>
 8004fe8:	4604      	mov	r4, r0
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fea:	2002      	movs	r0, #2
 8004fec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	6560      	str	r0, [r4, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7ff ff05 	bl	8004e04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ffa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ffc:	233f      	movs	r3, #63	; 0x3f
 8004ffe:	4093      	lsls	r3, r2
 8005000:	60ab      	str	r3, [r5, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	6813      	ldr	r3, [r2, #0]
 8005006:	f043 0316 	orr.w	r3, r3, #22
 800500a:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800500c:	6822      	ldr	r2, [r4, #0]
 800500e:	6953      	ldr	r3, [r2, #20]
 8005010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005014:	6153      	str	r3, [r2, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005018:	b123      	cbz	r3, 8005024 <HAL_DMA_Start_IT+0x58>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	6813      	ldr	r3, [r2, #0]
 800501e:	f043 0308 	orr.w	r3, r3, #8
 8005022:	6013      	str	r3, [r2, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	6013      	str	r3, [r2, #0]
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2000      	movs	r0, #0
 8005030:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005032:	2300      	movs	r3, #0
 8005034:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005038:	2002      	movs	r0, #2
 800503a:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800503c:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 800503e:	bd38      	pop	{r3, r4, r5, pc}

08005040 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005040:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d003      	beq.n	8005052 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800504e:	2001      	movs	r0, #1
 8005050:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005052:	2305      	movs	r3, #5
 8005054:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005058:	6802      	ldr	r2, [r0, #0]
 800505a:	6813      	ldr	r3, [r2, #0]
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005062:	2000      	movs	r0, #0
}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800506a:	b083      	sub	sp, #12
 800506c:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005072:	4b71      	ldr	r3, [pc, #452]	; (8005238 <HAL_DMA_IRQHandler+0x1d0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4d71      	ldr	r5, [pc, #452]	; (800523c <HAL_DMA_IRQHandler+0x1d4>)
 8005078:	fba5 3503 	umull	r3, r5, r5, r3
 800507c:	0aad      	lsrs	r5, r5, #10

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800507e:	6d87      	ldr	r7, [r0, #88]	; 0x58

  tmpisr = regs->ISR;
 8005080:	683e      	ldr	r6, [r7, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005082:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005084:	2308      	movs	r3, #8
 8005086:	4093      	lsls	r3, r2
 8005088:	421e      	tst	r6, r3
 800508a:	d010      	beq.n	80050ae <HAL_DMA_IRQHandler+0x46>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800508c:	6803      	ldr	r3, [r0, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	f012 0f04 	tst.w	r2, #4
 8005094:	d00b      	beq.n	80050ae <HAL_DMA_IRQHandler+0x46>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	f022 0204 	bic.w	r2, r2, #4
 800509c:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800509e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80050a0:	2308      	movs	r3, #8
 80050a2:	4093      	lsls	r3, r2
 80050a4:	60bb      	str	r3, [r7, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050a6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6543      	str	r3, [r0, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80050b0:	2301      	movs	r3, #1
 80050b2:	4093      	lsls	r3, r2
 80050b4:	421e      	tst	r6, r3
 80050b6:	d009      	beq.n	80050cc <HAL_DMA_IRQHandler+0x64>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	6952      	ldr	r2, [r2, #20]
 80050bc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80050c0:	d004      	beq.n	80050cc <HAL_DMA_IRQHandler+0x64>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050c2:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050c6:	f043 0302 	orr.w	r3, r3, #2
 80050ca:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80050ce:	2304      	movs	r3, #4
 80050d0:	4093      	lsls	r3, r2
 80050d2:	421e      	tst	r6, r3
 80050d4:	d009      	beq.n	80050ea <HAL_DMA_IRQHandler+0x82>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050d6:	6822      	ldr	r2, [r4, #0]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	f012 0f02 	tst.w	r2, #2
 80050de:	d004      	beq.n	80050ea <HAL_DMA_IRQHandler+0x82>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050e0:	60bb      	str	r3, [r7, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80050e4:	f043 0304 	orr.w	r3, r3, #4
 80050e8:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80050ec:	2310      	movs	r3, #16
 80050ee:	4093      	lsls	r3, r2
 80050f0:	421e      	tst	r6, r3
 80050f2:	d024      	beq.n	800513e <HAL_DMA_IRQHandler+0xd6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050f4:	6822      	ldr	r2, [r4, #0]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	f012 0f08 	tst.w	r2, #8
 80050fc:	d01f      	beq.n	800513e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050fe:	60bb      	str	r3, [r7, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005108:	d00d      	beq.n	8005126 <HAL_DMA_IRQHandler+0xbe>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8005110:	d104      	bne.n	800511c <HAL_DMA_IRQHandler+0xb4>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005114:	b19b      	cbz	r3, 800513e <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005116:	4620      	mov	r0, r4
 8005118:	4798      	blx	r3
 800511a:	e010      	b.n	800513e <HAL_DMA_IRQHandler+0xd6>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800511c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800511e:	b173      	cbz	r3, 800513e <HAL_DMA_IRQHandler+0xd6>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005120:	4620      	mov	r0, r4
 8005122:	4798      	blx	r3
 8005124:	e00b      	b.n	800513e <HAL_DMA_IRQHandler+0xd6>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	f412 7f80 	tst.w	r2, #256	; 0x100
 800512c:	d103      	bne.n	8005136 <HAL_DMA_IRQHandler+0xce>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	f022 0208 	bic.w	r2, r2, #8
 8005134:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005136:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005138:	b10b      	cbz	r3, 800513e <HAL_DMA_IRQHandler+0xd6>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800513a:	4620      	mov	r0, r4
 800513c:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800513e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005140:	2320      	movs	r3, #32
 8005142:	4093      	lsls	r3, r2
 8005144:	421e      	tst	r6, r3
 8005146:	d052      	beq.n	80051ee <HAL_DMA_IRQHandler+0x186>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	f012 0f10 	tst.w	r2, #16
 8005150:	d04d      	beq.n	80051ee <HAL_DMA_IRQHandler+0x186>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005152:	60bb      	str	r3, [r7, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005154:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b05      	cmp	r3, #5
 800515c:	d122      	bne.n	80051a4 <HAL_DMA_IRQHandler+0x13c>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	6813      	ldr	r3, [r2, #0]
 8005162:	f023 0316 	bic.w	r3, r3, #22
 8005166:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	6953      	ldr	r3, [r2, #20]
 800516c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005170:	6153      	str	r3, [r2, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005174:	b90b      	cbnz	r3, 800517a <HAL_DMA_IRQHandler+0x112>
 8005176:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005178:	b123      	cbz	r3, 8005184 <HAL_DMA_IRQHandler+0x11c>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	6813      	ldr	r3, [r2, #0]
 800517e:	f023 0308 	bic.w	r3, r3, #8
 8005182:	6013      	str	r3, [r2, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005184:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005186:	233f      	movs	r3, #63	; 0x3f
 8005188:	4093      	lsls	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800518c:	2300      	movs	r3, #0
 800518e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005192:	2301      	movs	r3, #1
 8005194:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005198:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800519a:	2b00      	cmp	r3, #0
 800519c:	d049      	beq.n	8005232 <HAL_DMA_IRQHandler+0x1ca>
        {
          hdma->XferAbortCallback(hdma);
 800519e:	4620      	mov	r0, r4
 80051a0:	4798      	blx	r3
 80051a2:	e046      	b.n	8005232 <HAL_DMA_IRQHandler+0x1ca>
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80051ac:	d00d      	beq.n	80051ca <HAL_DMA_IRQHandler+0x162>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80051b4:	d104      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x158>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051b8:	b1cb      	cbz	r3, 80051ee <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051ba:	4620      	mov	r0, r4
 80051bc:	4798      	blx	r3
 80051be:	e016      	b.n	80051ee <HAL_DMA_IRQHandler+0x186>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051c2:	b1a3      	cbz	r3, 80051ee <HAL_DMA_IRQHandler+0x186>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051c4:	4620      	mov	r0, r4
 80051c6:	4798      	blx	r3
 80051c8:	e011      	b.n	80051ee <HAL_DMA_IRQHandler+0x186>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80051d0:	d109      	bne.n	80051e6 <HAL_DMA_IRQHandler+0x17e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	f022 0210 	bic.w	r2, r2, #16
 80051d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051da:	2300      	movs	r3, #0
 80051dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051e8:	b10b      	cbz	r3, 80051ee <HAL_DMA_IRQHandler+0x186>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051ea:	4620      	mov	r0, r4
 80051ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051f0:	b1fb      	cbz	r3, 8005232 <HAL_DMA_IRQHandler+0x1ca>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051f4:	f013 0f01 	tst.w	r3, #1
 80051f8:	d017      	beq.n	800522a <HAL_DMA_IRQHandler+0x1c2>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051fa:	2305      	movs	r3, #5
 80051fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	6813      	ldr	r3, [r2, #0]
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6013      	str	r3, [r2, #0]

      do
      {
        if (++count > timeout)
 800520a:	9b01      	ldr	r3, [sp, #4]
 800520c:	3301      	adds	r3, #1
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	429d      	cmp	r5, r3
 8005212:	d304      	bcc.n	800521e <HAL_DMA_IRQHandler+0x1b6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f013 0f01 	tst.w	r3, #1
 800521c:	d1f5      	bne.n	800520a <HAL_DMA_IRQHandler+0x1a2>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800521e:	2300      	movs	r3, #0
 8005220:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005224:	2301      	movs	r3, #1
 8005226:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800522a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800522c:	b10b      	cbz	r3, 8005232 <HAL_DMA_IRQHandler+0x1ca>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800522e:	4620      	mov	r0, r4
 8005230:	4798      	blx	r3
    }
  }
}
 8005232:	b003      	add	sp, #12
 8005234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005236:	bf00      	nop
 8005238:	20000048 	.word	0x20000048
 800523c:	1b4e81b5 	.word	0x1b4e81b5

08005240 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005240:	4a07      	ldr	r2, [pc, #28]	; (8005260 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005242:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005244:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005248:	041b      	lsls	r3, r3, #16
 800524a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800524c:	0200      	lsls	r0, r0, #8
 800524e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005252:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8005254:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8005258:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800525c:	60d0      	str	r0, [r2, #12]
 800525e:	4770      	bx	lr
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005264:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005266:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <HAL_NVIC_SetPriority+0x5c>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800526e:	f1c3 0407 	rsb	r4, r3, #7
 8005272:	2c04      	cmp	r4, #4
 8005274:	bf28      	it	cs
 8005276:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005278:	1d1d      	adds	r5, r3, #4
 800527a:	2d06      	cmp	r5, #6
 800527c:	d901      	bls.n	8005282 <HAL_NVIC_SetPriority+0x1e>
 800527e:	1edd      	subs	r5, r3, #3
 8005280:	e000      	b.n	8005284 <HAL_NVIC_SetPriority+0x20>
 8005282:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005284:	2301      	movs	r3, #1
 8005286:	fa03 f404 	lsl.w	r4, r3, r4
 800528a:	3c01      	subs	r4, #1
 800528c:	4021      	ands	r1, r4
 800528e:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005290:	40ab      	lsls	r3, r5
 8005292:	3b01      	subs	r3, #1
 8005294:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8005296:	430a      	orrs	r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8005298:	2800      	cmp	r0, #0
 800529a:	da06      	bge.n	80052aa <HAL_NVIC_SetPriority+0x46>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529c:	f000 000f 	and.w	r0, r0, #15
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <HAL_NVIC_SetPriority+0x60>)
 80052a6:	541a      	strb	r2, [r3, r0]
 80052a8:	e007      	b.n	80052ba <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052aa:	0112      	lsls	r2, r2, #4
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80052b2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80052b6:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80052ba:	bc30      	pop	{r4, r5}
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000ed00 	.word	0xe000ed00
 80052c4:	e000ed14 	.word	0xe000ed14

080052c8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80052c8:	0942      	lsrs	r2, r0, #5
 80052ca:	f000 001f 	and.w	r0, r0, #31
 80052ce:	2301      	movs	r3, #1
 80052d0:	fa03 f000 	lsl.w	r0, r3, r0
 80052d4:	4b01      	ldr	r3, [pc, #4]	; (80052dc <HAL_NVIC_EnableIRQ+0x14>)
 80052d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80052da:	4770      	bx	lr
 80052dc:	e000e100 	.word	0xe000e100

080052e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052e2:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_Init+0x30>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052fc:	2003      	movs	r0, #3
 80052fe:	f7ff ff9f 	bl	8005240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005302:	2000      	movs	r0, #0
 8005304:	f7fd f916 	bl	8002534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005308:	f7fc fed2 	bl	80020b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800530c:	2000      	movs	r0, #0
 800530e:	bd08      	pop	{r3, pc}
 8005310:	40023c00 	.word	0x40023c00

08005314 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005314:	4a03      	ldr	r2, [pc, #12]	; (8005324 <HAL_IncTick+0x10>)
 8005316:	6813      	ldr	r3, [r2, #0]
 8005318:	4903      	ldr	r1, [pc, #12]	; (8005328 <HAL_IncTick+0x14>)
 800531a:	7809      	ldrb	r1, [r1, #0]
 800531c:	440b      	add	r3, r1
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20006bac 	.word	0x20006bac
 8005328:	20000044 	.word	0x20000044

0800532c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800532c:	4b01      	ldr	r3, [pc, #4]	; (8005334 <HAL_GetTick+0x8>)
 800532e:	6818      	ldr	r0, [r3, #0]
}
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20006bac 	.word	0x20006bac

08005338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800533c:	f7ff fff6 	bl	800532c <HAL_GetTick>
 8005340:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005342:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005346:	d002      	beq.n	800534e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8005348:	4b04      	ldr	r3, [pc, #16]	; (800535c <HAL_Delay+0x24>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800534e:	f7ff ffed 	bl	800532c <HAL_GetTick>
 8005352:	1b40      	subs	r0, r0, r5
 8005354:	4284      	cmp	r4, r0
 8005356:	d8fa      	bhi.n	800534e <HAL_Delay+0x16>
  {
  }
}
 8005358:	bd38      	pop	{r3, r4, r5, pc}
 800535a:	bf00      	nop
 800535c:	20000044 	.word	0x20000044

08005360 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005360:	490f      	ldr	r1, [pc, #60]	; (80053a0 <SystemInit+0x40>)
 8005362:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800536a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800536e:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <SystemInit+0x44>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005378:	2000      	movs	r0, #0
 800537a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005382:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005386:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005388:	4a07      	ldr	r2, [pc, #28]	; (80053a8 <SystemInit+0x48>)
 800538a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005392:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005394:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800539a:	608b      	str	r3, [r1, #8]
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	e000ed00 	.word	0xe000ed00
 80053a4:	40023800 	.word	0x40023800
 80053a8:	24003010 	.word	0x24003010

080053ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ac:	f100 0308 	add.w	r3, r0, #8
 80053b0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053b2:	f04f 32ff 	mov.w	r2, #4294967295
 80053b6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	6003      	str	r3, [r0, #0]
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop

080053c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	6103      	str	r3, [r0, #16]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop

080053cc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80053cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053da:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80053dc:	6803      	ldr	r3, [r0, #0]
 80053de:	3301      	adds	r3, #1
 80053e0:	6003      	str	r3, [r0, #0]
 80053e2:	4770      	bx	lr

080053e4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053e4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053e6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053e8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80053ec:	d101      	bne.n	80053f2 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ee:	6902      	ldr	r2, [r0, #16]
 80053f0:	e007      	b.n	8005402 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f2:	f100 0208 	add.w	r2, r0, #8
 80053f6:	e000      	b.n	80053fa <vListInsert+0x16>
 80053f8:	461a      	mov	r2, r3
 80053fa:	6853      	ldr	r3, [r2, #4]
 80053fc:	681c      	ldr	r4, [r3, #0]
 80053fe:	42a5      	cmp	r5, r4
 8005400:	d2fa      	bcs.n	80053f8 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005402:	6853      	ldr	r3, [r2, #4]
 8005404:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005406:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005408:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800540a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800540c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800540e:	6803      	ldr	r3, [r0, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	6003      	str	r3, [r0, #0]
}
 8005414:	bc30      	pop	{r4, r5}
 8005416:	4770      	bx	lr

08005418 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005418:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800541a:	6842      	ldr	r2, [r0, #4]
 800541c:	6881      	ldr	r1, [r0, #8]
 800541e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005420:	6882      	ldr	r2, [r0, #8]
 8005422:	6841      	ldr	r1, [r0, #4]
 8005424:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	4290      	cmp	r0, r2
 800542a:	d101      	bne.n	8005430 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800542c:	6882      	ldr	r2, [r0, #8]
 800542e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005430:	2200      	movs	r2, #0
 8005432:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	3801      	subs	r0, #1
 8005438:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800543a:	4770      	bx	lr

0800543c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800543c:	b510      	push	{r4, lr}
 800543e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005440:	f002 f858 	bl	80074f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005444:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005446:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005448:	429a      	cmp	r2, r3
 800544a:	d101      	bne.n	8005450 <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
 800544c:	2401      	movs	r4, #1
 800544e:	e000      	b.n	8005452 <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
 8005450:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8005452:	f002 f871 	bl	8007538 <vPortExitCritical>

	return xReturn;
}
 8005456:	4620      	mov	r0, r4
 8005458:	bd10      	pop	{r4, pc}
 800545a:	bf00      	nop

0800545c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800545c:	b510      	push	{r4, lr}
 800545e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005460:	f002 f848 	bl	80074f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005466:	b90b      	cbnz	r3, 800546c <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
 8005468:	2401      	movs	r4, #1
 800546a:	e000      	b.n	800546e <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
 800546c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800546e:	f002 f863 	bl	8007538 <vPortExitCritical>

	return xReturn;
}
 8005472:	4620      	mov	r0, r4
 8005474:	bd10      	pop	{r4, pc}
 8005476:	bf00      	nop

08005478 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	4604      	mov	r4, r0
 800547c:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547e:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005480:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005482:	b93a      	cbnz	r2, 8005494 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005484:	6803      	ldr	r3, [r0, #0]
 8005486:	bb43      	cbnz	r3, 80054da <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005488:	6840      	ldr	r0, [r0, #4]
 800548a:	f001 f9b5 	bl	80067f8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	6063      	str	r3, [r4, #4]
 8005492:	e029      	b.n	80054e8 <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005494:	b96e      	cbnz	r6, 80054b2 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005496:	6880      	ldr	r0, [r0, #8]
 8005498:	f7fa fec0 	bl	800021c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800549c:	68a2      	ldr	r2, [r4, #8]
 800549e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054a0:	4413      	add	r3, r2
 80054a2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054a4:	6862      	ldr	r2, [r4, #4]
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d319      	bcc.n	80054de <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80054ae:	2000      	movs	r0, #0
 80054b0:	e01a      	b.n	80054e8 <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054b2:	68c0      	ldr	r0, [r0, #12]
 80054b4:	f7fa feb2 	bl	800021c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80054b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ba:	425b      	negs	r3, r3
 80054bc:	68e2      	ldr	r2, [r4, #12]
 80054be:	441a      	add	r2, r3
 80054c0:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054c2:	6821      	ldr	r1, [r4, #0]
 80054c4:	428a      	cmp	r2, r1
 80054c6:	d202      	bcs.n	80054ce <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80054c8:	6862      	ldr	r2, [r4, #4]
 80054ca:	4413      	add	r3, r2
 80054cc:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054ce:	2e02      	cmp	r6, #2
 80054d0:	d107      	bne.n	80054e2 <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054d2:	b145      	cbz	r5, 80054e6 <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054d4:	3d01      	subs	r5, #1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80054d6:	2000      	movs	r0, #0
 80054d8:	e006      	b.n	80054e8 <prvCopyDataToQueue+0x70>
 80054da:	2000      	movs	r0, #0
 80054dc:	e004      	b.n	80054e8 <prvCopyDataToQueue+0x70>
 80054de:	2000      	movs	r0, #0
 80054e0:	e002      	b.n	80054e8 <prvCopyDataToQueue+0x70>
 80054e2:	2000      	movs	r0, #0
 80054e4:	e000      	b.n	80054e8 <prvCopyDataToQueue+0x70>
 80054e6:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80054e8:	3501      	adds	r5, #1
 80054ea:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 80054ec:	bd70      	pop	{r4, r5, r6, pc}
 80054ee:	bf00      	nop

080054f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80054f2:	b172      	cbz	r2, 8005512 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054f4:	b510      	push	{r4, lr}
 80054f6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80054f8:	68c4      	ldr	r4, [r0, #12]
 80054fa:	4414      	add	r4, r2
 80054fc:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054fe:	6840      	ldr	r0, [r0, #4]
 8005500:	4284      	cmp	r4, r0
 8005502:	d301      	bcc.n	8005508 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	60d8      	str	r0, [r3, #12]
 8005508:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800550a:	68d9      	ldr	r1, [r3, #12]
 800550c:	f7fa fe86 	bl	800021c <memcpy>
 8005510:	bd10      	pop	{r4, pc}
 8005512:	4770      	bx	lr

08005514 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005518:	f001 ffec 	bl	80074f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800551c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005520:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005522:	e00a      	b.n	800553a <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005524:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005526:	b153      	cbz	r3, 800553e <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005528:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800552c:	f001 f84c 	bl	80065c8 <xTaskRemoveFromEventList>
 8005530:	b108      	cbz	r0, 8005536 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005532:	f001 f8e5 	bl	8006700 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005536:	3c01      	subs	r4, #1
 8005538:	b264      	sxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800553a:	2c00      	cmp	r4, #0
 800553c:	dcf2      	bgt.n	8005524 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800553e:	23ff      	movs	r3, #255	; 0xff
 8005540:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005544:	f001 fff8 	bl	8007538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005548:	f001 ffd4 	bl	80074f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800554c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005550:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005552:	e00a      	b.n	800556a <prvUnlockQueue+0x56>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005554:	692b      	ldr	r3, [r5, #16]
 8005556:	b153      	cbz	r3, 800556e <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005558:	f105 0010 	add.w	r0, r5, #16
 800555c:	f001 f834 	bl	80065c8 <xTaskRemoveFromEventList>
 8005560:	b108      	cbz	r0, 8005566 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 8005562:	f001 f8cd 	bl	8006700 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005566:	3c01      	subs	r4, #1
 8005568:	b264      	sxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800556a:	2c00      	cmp	r4, #0
 800556c:	dcf2      	bgt.n	8005554 <prvUnlockQueue+0x40>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800556e:	23ff      	movs	r3, #255	; 0xff
 8005570:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005574:	f001 ffe0 	bl	8007538 <vPortExitCritical>
 8005578:	bd38      	pop	{r3, r4, r5, pc}
 800557a:	bf00      	nop

0800557c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800557c:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800557e:	b940      	cbnz	r0, 8005592 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	e7fe      	b.n	8005590 <xQueueGenericReset+0x14>
 8005592:	4604      	mov	r4, r0
 8005594:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 8005596:	f001 ffad 	bl	80074f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800559a:	6821      	ldr	r1, [r4, #0]
 800559c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800559e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055a0:	fb03 1002 	mla	r0, r3, r2, r1
 80055a4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055a6:	2000      	movs	r0, #0
 80055a8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055aa:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80055ac:	3a01      	subs	r2, #1
 80055ae:	fb02 1303 	mla	r3, r2, r3, r1
 80055b2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055b4:	23ff      	movs	r3, #255	; 0xff
 80055b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055be:	b97d      	cbnz	r5, 80055e0 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	b1ab      	cbz	r3, 80055f0 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c4:	f104 0010 	add.w	r0, r4, #16
 80055c8:	f000 fffe 	bl	80065c8 <xTaskRemoveFromEventList>
 80055cc:	b180      	cbz	r0, 80055f0 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <xQueueGenericReset+0x7c>)
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	e007      	b.n	80055f0 <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055e0:	f104 0010 	add.w	r0, r4, #16
 80055e4:	f7ff fee2 	bl	80053ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80055ec:	f7ff fede 	bl	80053ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055f0:	f001 ffa2 	bl	8007538 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 80055f4:	2001      	movs	r0, #1
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055fc:	b510      	push	{r4, lr}
 80055fe:	9b02      	ldr	r3, [sp, #8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005600:	460c      	mov	r4, r1
 8005602:	b909      	cbnz	r1, 8005608 <prvInitialiseNewQueue+0xc>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005604:	601b      	str	r3, [r3, #0]
 8005606:	e000      	b.n	800560a <prvInitialiseNewQueue+0xe>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005608:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800560a:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800560c:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800560e:	2101      	movs	r1, #1
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff ffb3 	bl	800557c <xQueueGenericReset>
 8005616:	bd10      	pop	{r4, pc}

08005618 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005618:	b940      	cbnz	r0, 800562c <xQueueGenericCreateStatic+0x14>
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	e7fe      	b.n	800562a <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800562c:	b510      	push	{r4, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005632:	b943      	cbnz	r3, 8005646 <xQueueGenericCreateStatic+0x2e>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	e7fe      	b.n	8005644 <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005646:	b112      	cbz	r2, 800564e <xQueueGenericCreateStatic+0x36>
 8005648:	b119      	cbz	r1, 8005652 <xQueueGenericCreateStatic+0x3a>
 800564a:	2001      	movs	r0, #1
 800564c:	e002      	b.n	8005654 <xQueueGenericCreateStatic+0x3c>
 800564e:	2001      	movs	r0, #1
 8005650:	e000      	b.n	8005654 <xQueueGenericCreateStatic+0x3c>
 8005652:	2000      	movs	r0, #0
 8005654:	b940      	cbnz	r0, 8005668 <xQueueGenericCreateStatic+0x50>
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	e7fe      	b.n	8005666 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005668:	b912      	cbnz	r2, 8005670 <xQueueGenericCreateStatic+0x58>
 800566a:	b919      	cbnz	r1, 8005674 <xQueueGenericCreateStatic+0x5c>
 800566c:	2001      	movs	r0, #1
 800566e:	e002      	b.n	8005676 <xQueueGenericCreateStatic+0x5e>
 8005670:	2001      	movs	r0, #1
 8005672:	e000      	b.n	8005676 <xQueueGenericCreateStatic+0x5e>
 8005674:	2000      	movs	r0, #0
 8005676:	b940      	cbnz	r0, 800568a <xQueueGenericCreateStatic+0x72>
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	e7fe      	b.n	8005688 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800568a:	2048      	movs	r0, #72	; 0x48
 800568c:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800568e:	9803      	ldr	r0, [sp, #12]
 8005690:	2848      	cmp	r0, #72	; 0x48
 8005692:	d008      	beq.n	80056a6 <xQueueGenericCreateStatic+0x8e>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericCreateStatic+0x8c>
 80056a6:	4620      	mov	r0, r4
 80056a8:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
 80056aa:	b13b      	cbz	r3, 80056bc <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056b2:	9400      	str	r4, [sp, #0]
 80056b4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80056b8:	f7ff ffa0 	bl	80055fc <prvInitialiseNewQueue>
		}

		return pxNewQueue;
	}
 80056bc:	4620      	mov	r0, r4
 80056be:	b004      	add	sp, #16
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop

080056c4 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056c4:	b940      	cbnz	r0, 80056d8 <xQueueGenericCreate+0x14>
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	e7fe      	b.n	80056d6 <xQueueGenericCreate+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056da:	b083      	sub	sp, #12
 80056dc:	4603      	mov	r3, r0
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80056de:	b111      	cbz	r1, 80056e6 <xQueueGenericCreate+0x22>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e0:	fb01 f000 	mul.w	r0, r1, r0
 80056e4:	e000      	b.n	80056e8 <xQueueGenericCreate+0x24>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80056e6:	2000      	movs	r0, #0
 80056e8:	461e      	mov	r6, r3
 80056ea:	4617      	mov	r7, r2
 80056ec:	460c      	mov	r4, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80056ee:	3048      	adds	r0, #72	; 0x48
 80056f0:	f001 fdde 	bl	80072b0 <pvPortMalloc>

		if( pxNewQueue != NULL )
 80056f4:	4605      	mov	r5, r0
 80056f6:	b150      	cbz	r0, 800570e <xQueueGenericCreate+0x4a>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056fe:	9000      	str	r0, [sp, #0]
 8005700:	463b      	mov	r3, r7
 8005702:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8005706:	4621      	mov	r1, r4
 8005708:	4630      	mov	r0, r6
 800570a:	f7ff ff77 	bl	80055fc <prvInitialiseNewQueue>
		}

		return pxNewQueue;
	}
 800570e:	4628      	mov	r0, r5
 8005710:	b003      	add	sp, #12
 8005712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005714 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005716:	b085      	sub	sp, #20
 8005718:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800571a:	b940      	cbnz	r0, 800572e <xQueueGenericSend+0x1a>
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	e7fe      	b.n	800572c <xQueueGenericSend+0x18>
 800572e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005730:	b919      	cbnz	r1, 800573a <xQueueGenericSend+0x26>
 8005732:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005734:	b91a      	cbnz	r2, 800573e <xQueueGenericSend+0x2a>
 8005736:	2201      	movs	r2, #1
 8005738:	e002      	b.n	8005740 <xQueueGenericSend+0x2c>
 800573a:	2201      	movs	r2, #1
 800573c:	e000      	b.n	8005740 <xQueueGenericSend+0x2c>
 800573e:	2200      	movs	r2, #0
 8005740:	b942      	cbnz	r2, 8005754 <xQueueGenericSend+0x40>
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	e7fe      	b.n	8005752 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005754:	2b02      	cmp	r3, #2
 8005756:	d103      	bne.n	8005760 <xQueueGenericSend+0x4c>
 8005758:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800575a:	2a01      	cmp	r2, #1
 800575c:	d102      	bne.n	8005764 <xQueueGenericSend+0x50>
 800575e:	e002      	b.n	8005766 <xQueueGenericSend+0x52>
 8005760:	2201      	movs	r2, #1
 8005762:	e000      	b.n	8005766 <xQueueGenericSend+0x52>
 8005764:	2200      	movs	r2, #0
 8005766:	b942      	cbnz	r2, 800577a <xQueueGenericSend+0x66>
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	e7fe      	b.n	8005778 <xQueueGenericSend+0x64>
 800577a:	461d      	mov	r5, r3
 800577c:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800577e:	f000 ffd7 	bl	8006730 <xTaskGetSchedulerState>
 8005782:	b918      	cbnz	r0, 800578c <xQueueGenericSend+0x78>
 8005784:	9b01      	ldr	r3, [sp, #4]
 8005786:	b91b      	cbnz	r3, 8005790 <xQueueGenericSend+0x7c>
 8005788:	2301      	movs	r3, #1
 800578a:	e002      	b.n	8005792 <xQueueGenericSend+0x7e>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <xQueueGenericSend+0x7e>
 8005790:	2300      	movs	r3, #0
 8005792:	b943      	cbnz	r3, 80057a6 <xQueueGenericSend+0x92>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	e7fe      	b.n	80057a4 <xQueueGenericSend+0x90>
 80057a6:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a8:	f001 fea4 	bl	80074f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d301      	bcc.n	80057b8 <xQueueGenericSend+0xa4>
 80057b4:	2d02      	cmp	r5, #2
 80057b6:	d121      	bne.n	80057fc <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b8:	462a      	mov	r2, r5
 80057ba:	4631      	mov	r1, r6
 80057bc:	4620      	mov	r0, r4
 80057be:	f7ff fe5b 	bl	8005478 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057c4:	b16b      	cbz	r3, 80057e2 <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80057ca:	f000 fefd 	bl	80065c8 <xTaskRemoveFromEventList>
 80057ce:	b188      	cbz	r0, 80057f4 <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d4:	4b32      	ldr	r3, [pc, #200]	; (80058a0 <xQueueGenericSend+0x18c>)
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	e008      	b.n	80057f4 <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057e2:	b138      	cbz	r0, 80057f4 <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e8:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <xQueueGenericSend+0x18c>)
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057f4:	f001 fea0 	bl	8007538 <vPortExitCritical>
				return pdPASS;
 80057f8:	2001      	movs	r0, #1
 80057fa:	e04e      	b.n	800589a <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057fc:	9b01      	ldr	r3, [sp, #4]
 80057fe:	b91b      	cbnz	r3, 8005808 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005800:	f001 fe9a 	bl	8007538 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005804:	2000      	movs	r0, #0
 8005806:	e048      	b.n	800589a <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005808:	b91f      	cbnz	r7, 8005812 <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800580a:	a802      	add	r0, sp, #8
 800580c:	f000 ff22 	bl	8006654 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005810:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005812:	f001 fe91 	bl	8007538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005816:	f000 fc93 	bl	8006140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800581a:	f001 fe6b 	bl	80074f4 <vPortEnterCritical>
 800581e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005822:	b25b      	sxtb	r3, r3
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d102      	bne.n	8005830 <xQueueGenericSend+0x11c>
 800582a:	2300      	movs	r3, #0
 800582c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005830:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005834:	b25b      	sxtb	r3, r3
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d102      	bne.n	8005842 <xQueueGenericSend+0x12e>
 800583c:	2300      	movs	r3, #0
 800583e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005842:	f001 fe79 	bl	8007538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005846:	a901      	add	r1, sp, #4
 8005848:	a802      	add	r0, sp, #8
 800584a:	f000 ff19 	bl	8006680 <xTaskCheckForTimeOut>
 800584e:	b9f0      	cbnz	r0, 800588e <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005850:	4620      	mov	r0, r4
 8005852:	f7ff fdf3 	bl	800543c <prvIsQueueFull>
 8005856:	b1a0      	cbz	r0, 8005882 <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005858:	9901      	ldr	r1, [sp, #4]
 800585a:	f104 0010 	add.w	r0, r4, #16
 800585e:	f000 fe7f 	bl	8006560 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005862:	4620      	mov	r0, r4
 8005864:	f7ff fe56 	bl	8005514 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005868:	f000 fd0a 	bl	8006280 <xTaskResumeAll>
 800586c:	2800      	cmp	r0, #0
 800586e:	d19b      	bne.n	80057a8 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
 8005870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <xQueueGenericSend+0x18c>)
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	e792      	b.n	80057a8 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005882:	4620      	mov	r0, r4
 8005884:	f7ff fe46 	bl	8005514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005888:	f000 fcfa 	bl	8006280 <xTaskResumeAll>
 800588c:	e78c      	b.n	80057a8 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800588e:	4620      	mov	r0, r4
 8005890:	f7ff fe40 	bl	8005514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005894:	f000 fcf4 	bl	8006280 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005898:	2000      	movs	r0, #0
		}
	}
}
 800589a:	b005      	add	sp, #20
 800589c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589e:	bf00      	nop
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80058a8:	b940      	cbnz	r0, 80058bc <xQueueGenericSendFromISR+0x18>
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	e7fe      	b.n	80058ba <xQueueGenericSendFromISR+0x16>
 80058bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058be:	b919      	cbnz	r1, 80058c8 <xQueueGenericSendFromISR+0x24>
 80058c0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80058c2:	b918      	cbnz	r0, 80058cc <xQueueGenericSendFromISR+0x28>
 80058c4:	2001      	movs	r0, #1
 80058c6:	e002      	b.n	80058ce <xQueueGenericSendFromISR+0x2a>
 80058c8:	2001      	movs	r0, #1
 80058ca:	e000      	b.n	80058ce <xQueueGenericSendFromISR+0x2a>
 80058cc:	2000      	movs	r0, #0
 80058ce:	b940      	cbnz	r0, 80058e2 <xQueueGenericSendFromISR+0x3e>
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	e7fe      	b.n	80058e0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d103      	bne.n	80058ee <xQueueGenericSendFromISR+0x4a>
 80058e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80058e8:	2801      	cmp	r0, #1
 80058ea:	d102      	bne.n	80058f2 <xQueueGenericSendFromISR+0x4e>
 80058ec:	e002      	b.n	80058f4 <xQueueGenericSendFromISR+0x50>
 80058ee:	2001      	movs	r0, #1
 80058f0:	e000      	b.n	80058f4 <xQueueGenericSendFromISR+0x50>
 80058f2:	2000      	movs	r0, #0
 80058f4:	b940      	cbnz	r0, 8005908 <xQueueGenericSendFromISR+0x64>
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	e7fe      	b.n	8005906 <xQueueGenericSendFromISR+0x62>
 8005908:	461f      	mov	r7, r3
 800590a:	4690      	mov	r8, r2
 800590c:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800590e:	f001 fefd 	bl	800770c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005912:	f3ef 8611 	mrs	r6, BASEPRI
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005926:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800592a:	429a      	cmp	r2, r3
 800592c:	d301      	bcc.n	8005932 <xQueueGenericSendFromISR+0x8e>
 800592e:	2f02      	cmp	r7, #2
 8005930:	d11e      	bne.n	8005970 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005932:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005936:	b26d      	sxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005938:	463a      	mov	r2, r7
 800593a:	4649      	mov	r1, r9
 800593c:	4620      	mov	r0, r4
 800593e:	f7ff fd9b 	bl	8005478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005942:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005946:	d10d      	bne.n	8005964 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800594a:	b19b      	cbz	r3, 8005974 <xQueueGenericSendFromISR+0xd0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800594c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005950:	f000 fe3a 	bl	80065c8 <xTaskRemoveFromEventList>
 8005954:	b180      	cbz	r0, 8005978 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005956:	f1b8 0f00 	cmp.w	r8, #0
 800595a:	d00f      	beq.n	800597c <xQueueGenericSendFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800595c:	2001      	movs	r0, #1
 800595e:	f8c8 0000 	str.w	r0, [r8]
 8005962:	e00c      	b.n	800597e <xQueueGenericSendFromISR+0xda>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005964:	1c6b      	adds	r3, r5, #1
 8005966:	b25b      	sxtb	r3, r3
 8005968:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 800596c:	2001      	movs	r0, #1
 800596e:	e006      	b.n	800597e <xQueueGenericSendFromISR+0xda>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005970:	2000      	movs	r0, #0
 8005972:	e004      	b.n	800597e <xQueueGenericSendFromISR+0xda>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
 8005974:	2001      	movs	r0, #1
 8005976:	e002      	b.n	800597e <xQueueGenericSendFromISR+0xda>
 8005978:	2001      	movs	r0, #1
 800597a:	e000      	b.n	800597e <xQueueGenericSendFromISR+0xda>
 800597c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800597e:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8005982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005986:	bf00      	nop

08005988 <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005988:	b940      	cbnz	r0, 800599c <xQueueGiveFromISR+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	e7fe      	b.n	800599a <xQueueGiveFromISR+0x12>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80059a2:	b143      	cbz	r3, 80059b6 <xQueueGiveFromISR+0x2e>
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	e7fe      	b.n	80059b4 <xQueueGiveFromISR+0x2c>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80059b6:	6803      	ldr	r3, [r0, #0]
 80059b8:	b91b      	cbnz	r3, 80059c2 <xQueueGiveFromISR+0x3a>
 80059ba:	6843      	ldr	r3, [r0, #4]
 80059bc:	b91b      	cbnz	r3, 80059c6 <xQueueGiveFromISR+0x3e>
 80059be:	2301      	movs	r3, #1
 80059c0:	e002      	b.n	80059c8 <xQueueGiveFromISR+0x40>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <xQueueGiveFromISR+0x40>
 80059c6:	2300      	movs	r3, #0
 80059c8:	b943      	cbnz	r3, 80059dc <xQueueGiveFromISR+0x54>
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	e7fe      	b.n	80059da <xQueueGiveFromISR+0x52>
 80059dc:	460e      	mov	r6, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059de:	f001 fe95 	bl	800770c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059e2:	f3ef 8511 	mrs	r5, BASEPRI
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d218      	bcs.n	8005a30 <xQueueGiveFromISR+0xa8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80059fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005a02:	b25b      	sxtb	r3, r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005a04:	3201      	adds	r2, #1
 8005a06:	63a2      	str	r2, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d10a      	bne.n	8005a24 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a10:	b183      	cbz	r3, 8005a34 <xQueueGiveFromISR+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a16:	f000 fdd7 	bl	80065c8 <xTaskRemoveFromEventList>
 8005a1a:	b168      	cbz	r0, 8005a38 <xQueueGiveFromISR+0xb0>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a1c:	b176      	cbz	r6, 8005a3c <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a1e:	2001      	movs	r0, #1
 8005a20:	6030      	str	r0, [r6, #0]
 8005a22:	e00c      	b.n	8005a3e <xQueueGiveFromISR+0xb6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a24:	3301      	adds	r3, #1
 8005a26:	b25b      	sxtb	r3, r3
 8005a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	e006      	b.n	8005a3e <xQueueGiveFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a30:	2000      	movs	r0, #0
 8005a32:	e004      	b.n	8005a3e <xQueueGiveFromISR+0xb6>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
 8005a34:	2001      	movs	r0, #1
 8005a36:	e002      	b.n	8005a3e <xQueueGiveFromISR+0xb6>
 8005a38:	2001      	movs	r0, #1
 8005a3a:	e000      	b.n	8005a3e <xQueueGiveFromISR+0xb6>
 8005a3c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a3e:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8005a42:	bd70      	pop	{r4, r5, r6, pc}

08005a44 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8005a4c:	b940      	cbnz	r0, 8005a60 <xQueueGenericReceive+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	e7fe      	b.n	8005a5e <xQueueGenericReceive+0x1a>
 8005a60:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a62:	b919      	cbnz	r1, 8005a6c <xQueueGenericReceive+0x28>
 8005a64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005a66:	b91a      	cbnz	r2, 8005a70 <xQueueGenericReceive+0x2c>
 8005a68:	2201      	movs	r2, #1
 8005a6a:	e002      	b.n	8005a72 <xQueueGenericReceive+0x2e>
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	e000      	b.n	8005a72 <xQueueGenericReceive+0x2e>
 8005a70:	2200      	movs	r2, #0
 8005a72:	b942      	cbnz	r2, 8005a86 <xQueueGenericReceive+0x42>
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	e7fe      	b.n	8005a84 <xQueueGenericReceive+0x40>
 8005a86:	461f      	mov	r7, r3
 8005a88:	4688      	mov	r8, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a8a:	f000 fe51 	bl	8006730 <xTaskGetSchedulerState>
 8005a8e:	b918      	cbnz	r0, 8005a98 <xQueueGenericReceive+0x54>
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	b91b      	cbnz	r3, 8005a9c <xQueueGenericReceive+0x58>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e002      	b.n	8005a9e <xQueueGenericReceive+0x5a>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <xQueueGenericReceive+0x5a>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	b943      	cbnz	r3, 8005ab2 <xQueueGenericReceive+0x6e>
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericReceive+0x6c>
 8005ab2:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ab4:	f001 fd1e 	bl	80074f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ab8:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aba:	b385      	cbz	r5, 8005b1e <xQueueGenericReceive+0xda>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005abc:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005abe:	4641      	mov	r1, r8
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7ff fd15 	bl	80054f0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8005ac6:	b9b7      	cbnz	r7, 8005af6 <xQueueGenericReceive+0xb2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005ac8:	3d01      	subs	r5, #1
 8005aca:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	b913      	cbnz	r3, 8005ad6 <xQueueGenericReceive+0x92>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005ad0:	f000 feec 	bl	80068ac <pvTaskIncrementMutexHeldCount>
 8005ad4:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	b1eb      	cbz	r3, 8005b16 <xQueueGenericReceive+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ada:	f104 0010 	add.w	r0, r4, #16
 8005ade:	f000 fd73 	bl	80065c8 <xTaskRemoveFromEventList>
 8005ae2:	b1c0      	cbz	r0, 8005b16 <xQueueGenericReceive+0xd2>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8005ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae8:	4b3d      	ldr	r3, [pc, #244]	; (8005be0 <xQueueGenericReceive+0x19c>)
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	e00f      	b.n	8005b16 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005af6:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afa:	b163      	cbz	r3, 8005b16 <xQueueGenericReceive+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005afc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b00:	f000 fd62 	bl	80065c8 <xTaskRemoveFromEventList>
 8005b04:	b138      	cbz	r0, 8005b16 <xQueueGenericReceive+0xd2>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	4b35      	ldr	r3, [pc, #212]	; (8005be0 <xQueueGenericReceive+0x19c>)
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8005b16:	f001 fd0f 	bl	8007538 <vPortExitCritical>
				return pdPASS;
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	e05d      	b.n	8005bda <xQueueGenericReceive+0x196>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b1e:	9b01      	ldr	r3, [sp, #4]
 8005b20:	b91b      	cbnz	r3, 8005b2a <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b22:	f001 fd09 	bl	8007538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b26:	2000      	movs	r0, #0
 8005b28:	e057      	b.n	8005bda <xQueueGenericReceive+0x196>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b2a:	b91e      	cbnz	r6, 8005b34 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005b2c:	a802      	add	r0, sp, #8
 8005b2e:	f000 fd91 	bl	8006654 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b32:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b34:	f001 fd00 	bl	8007538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b38:	f000 fb02 	bl	8006140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b3c:	f001 fcda 	bl	80074f4 <vPortEnterCritical>
 8005b40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005b44:	b25b      	sxtb	r3, r3
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d102      	bne.n	8005b52 <xQueueGenericReceive+0x10e>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005b56:	b25b      	sxtb	r3, r3
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d102      	bne.n	8005b64 <xQueueGenericReceive+0x120>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b64:	f001 fce8 	bl	8007538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b68:	a901      	add	r1, sp, #4
 8005b6a:	a802      	add	r0, sp, #8
 8005b6c:	f000 fd88 	bl	8006680 <xTaskCheckForTimeOut>
 8005b70:	bb38      	cbnz	r0, 8005bc2 <xQueueGenericReceive+0x17e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b72:	4620      	mov	r0, r4
 8005b74:	f7ff fc72 	bl	800545c <prvIsQueueEmpty>
 8005b78:	b1e8      	cbz	r0, 8005bb6 <xQueueGenericReceive+0x172>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	b933      	cbnz	r3, 8005b8c <xQueueGenericReceive+0x148>
					{
						taskENTER_CRITICAL();
 8005b7e:	f001 fcb9 	bl	80074f4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005b82:	6860      	ldr	r0, [r4, #4]
 8005b84:	f000 fde4 	bl	8006750 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8005b88:	f001 fcd6 	bl	8007538 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b8c:	9901      	ldr	r1, [sp, #4]
 8005b8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b92:	f000 fce5 	bl	8006560 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b96:	4620      	mov	r0, r4
 8005b98:	f7ff fcbc 	bl	8005514 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b9c:	f000 fb70 	bl	8006280 <xTaskResumeAll>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d187      	bne.n	8005ab4 <xQueueGenericReceive+0x70>
				{
					portYIELD_WITHIN_API();
 8005ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <xQueueGenericReceive+0x19c>)
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	e77e      	b.n	8005ab4 <xQueueGenericReceive+0x70>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7ff fcac 	bl	8005514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bbc:	f000 fb60 	bl	8006280 <xTaskResumeAll>
 8005bc0:	e778      	b.n	8005ab4 <xQueueGenericReceive+0x70>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f7ff fca6 	bl	8005514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bc8:	f000 fb5a 	bl	8006280 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7ff fc45 	bl	800545c <prvIsQueueEmpty>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	f43f af6e 	beq.w	8005ab4 <xQueueGenericReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bd8:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005bda:	b004      	add	sp, #16
 8005bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be0:	e000ed04 	.word	0xe000ed04

08005be4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005be4:	2300      	movs	r3, #0
 8005be6:	e00b      	b.n	8005c00 <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005be8:	4a07      	ldr	r2, [pc, #28]	; (8005c08 <vQueueAddToRegistry+0x24>)
 8005bea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005bee:	b932      	cbnz	r2, 8005bfe <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bf0:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <vQueueAddToRegistry+0x24>)
 8005bf2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005bfa:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bfc:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bfe:	3301      	adds	r3, #1
 8005c00:	2b0b      	cmp	r3, #11
 8005c02:	d9f1      	bls.n	8005be8 <vQueueAddToRegistry+0x4>
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20006bb0 	.word	0x20006bb0

08005c0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	460d      	mov	r5, r1
 8005c12:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c14:	f001 fc6e 	bl	80074f4 <vPortEnterCritical>
 8005c18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c1c:	b25b      	sxtb	r3, r3
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	d102      	bne.n	8005c2a <vQueueWaitForMessageRestricted+0x1e>
 8005c24:	2300      	movs	r3, #0
 8005c26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005c2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c2e:	b25b      	sxtb	r3, r3
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c34:	d102      	bne.n	8005c3c <vQueueWaitForMessageRestricted+0x30>
 8005c36:	2300      	movs	r3, #0
 8005c38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c3c:	f001 fc7c 	bl	8007538 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c42:	b92b      	cbnz	r3, 8005c50 <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c44:	4632      	mov	r2, r6
 8005c46:	4629      	mov	r1, r5
 8005c48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c4c:	f000 fca0 	bl	8006590 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c50:	4620      	mov	r0, r4
 8005c52:	f7ff fc5f 	bl	8005514 <prvUnlockQueue>
 8005c56:	bd70      	pop	{r4, r5, r6, pc}

08005c58 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <prvIdleTask+0x1c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d9fb      	bls.n	8005c58 <prvIdleTask>
			{
				taskYIELD();
 8005c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <prvIdleTask+0x20>)
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	e7f2      	b.n	8005c58 <prvIdleTask>
 8005c72:	bf00      	nop
 8005c74:	20000ee4 	.word	0x20000ee4
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 8005c7c:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c7e:	e001      	b.n	8005c84 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005c80:	3001      	adds	r0, #1
			ulCount++;
 8005c82:	3301      	adds	r3, #1

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005c84:	7802      	ldrb	r2, [r0, #0]
 8005c86:	2aa5      	cmp	r2, #165	; 0xa5
 8005c88:	d0fa      	beq.n	8005c80 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( uint16_t ) ulCount;
	}
 8005c8a:	f3c3 008f 	ubfx	r0, r3, #2, #16
 8005c8e:	4770      	bx	lr

08005c90 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <prvResetNextTaskUnblockTime+0x2c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	b90b      	cbnz	r3, 8005c9c <prvResetNextTaskUnblockTime+0xc>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <prvResetNextTaskUnblockTime+0xe>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	b123      	cbz	r3, 8005caa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <prvResetNextTaskUnblockTime+0x30>)
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005caa:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <prvResetNextTaskUnblockTime+0x2c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	4b02      	ldr	r3, [pc, #8]	; (8005cc0 <prvResetNextTaskUnblockTime+0x30>)
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	20000ed0 	.word	0x20000ed0
 8005cc0:	20000f94 	.word	0x20000f94

08005cc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc8:	4681      	mov	r9, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	4617      	mov	r7, r2
 8005cce:	469a      	mov	sl, r3
 8005cd0:	9e08      	ldr	r6, [sp, #32]
 8005cd2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005cd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cd8:	0092      	lsls	r2, r2, #2
 8005cda:	21a5      	movs	r1, #165	; 0xa5
 8005cdc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005cde:	f005 fb53 	bl	800b388 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ce4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005cee:	f027 0707 	bic.w	r7, r7, #7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e006      	b.n	8005d04 <prvInitialiseNewTask+0x40>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cf6:	5ce9      	ldrb	r1, [r5, r3]
 8005cf8:	18e2      	adds	r2, r4, r3
 8005cfa:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005cfe:	5cea      	ldrb	r2, [r5, r3]
 8005d00:	b112      	cbz	r2, 8005d08 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d02:	3301      	adds	r3, #1
 8005d04:	2b0f      	cmp	r3, #15
 8005d06:	d9f6      	bls.n	8005cf6 <prvInitialiseNewTask+0x32>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d0e:	2e06      	cmp	r6, #6
 8005d10:	d900      	bls.n	8005d14 <prvInitialiseNewTask+0x50>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d12:	2606      	movs	r6, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d14:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d16:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005d18:	2500      	movs	r5, #0
 8005d1a:	64a5      	str	r5, [r4, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d1c:	1d20      	adds	r0, r4, #4
 8005d1e:	f7ff fb51 	bl	80053c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d22:	f104 0018 	add.w	r0, r4, #24
 8005d26:	f7ff fb4d 	bl	80053c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d2a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2c:	f1c6 0607 	rsb	r6, r6, #7
 8005d30:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d32:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d34:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d36:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4638      	mov	r0, r7
 8005d40:	f001 fbae 	bl	80074a0 <pxPortInitialiseStack>
 8005d44:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005d46:	f1b8 0f00 	cmp.w	r8, #0
 8005d4a:	d001      	beq.n	8005d50 <prvInitialiseNewTask+0x8c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d4c:	f8c8 4000 	str.w	r4, [r8]
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d54:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d56:	2400      	movs	r4, #0
 8005d58:	e007      	b.n	8005d6a <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005d5e:	0093      	lsls	r3, r2, #2
 8005d60:	480c      	ldr	r0, [pc, #48]	; (8005d94 <prvInitialiseTaskLists+0x40>)
 8005d62:	4418      	add	r0, r3
 8005d64:	f7ff fb22 	bl	80053ac <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d68:	3401      	adds	r4, #1
 8005d6a:	2c06      	cmp	r4, #6
 8005d6c:	d9f5      	bls.n	8005d5a <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d6e:	4d0a      	ldr	r5, [pc, #40]	; (8005d98 <prvInitialiseTaskLists+0x44>)
 8005d70:	4628      	mov	r0, r5
 8005d72:	f7ff fb1b 	bl	80053ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d76:	4c09      	ldr	r4, [pc, #36]	; (8005d9c <prvInitialiseTaskLists+0x48>)
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7ff fb17 	bl	80053ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d7e:	4808      	ldr	r0, [pc, #32]	; (8005da0 <prvInitialiseTaskLists+0x4c>)
 8005d80:	f7ff fb14 	bl	80053ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d84:	4807      	ldr	r0, [pc, #28]	; (8005da4 <prvInitialiseTaskLists+0x50>)
 8005d86:	f7ff fb11 	bl	80053ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <prvInitialiseTaskLists+0x54>)
 8005d8c:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <prvInitialiseTaskLists+0x58>)
 8005d90:	601c      	str	r4, [r3, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	20000ee4 	.word	0x20000ee4
 8005d98:	20000f9c 	.word	0x20000f9c
 8005d9c:	20000fb0 	.word	0x20000fb0
 8005da0:	20000f7c 	.word	0x20000f7c
 8005da4:	20000fc4 	.word	0x20000fc4
 8005da8:	20000ed0 	.word	0x20000ed0
 8005dac:	20000edc 	.word	0x20000edc

08005db0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005db4:	f001 fb9e 	bl	80074f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005db8:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <prvAddNewTaskToReadyList+0x8c>)
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dc0:	4b1f      	ldr	r3, [pc, #124]	; (8005e40 <prvAddNewTaskToReadyList+0x90>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	b93b      	cbnz	r3, 8005dd6 <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dc6:	4b1e      	ldr	r3, [pc, #120]	; (8005e40 <prvAddNewTaskToReadyList+0x90>)
 8005dc8:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d10d      	bne.n	8005dec <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005dd0:	f7ff ffc0 	bl	8005d54 <prvInitialiseTaskLists>
 8005dd4:	e00a      	b.n	8005dec <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <prvAddNewTaskToReadyList+0x94>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	b93b      	cbnz	r3, 8005dec <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ddc:	4b18      	ldr	r3, [pc, #96]	; (8005e40 <prvAddNewTaskToReadyList+0x90>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d801      	bhi.n	8005dec <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
 8005de8:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <prvAddNewTaskToReadyList+0x90>)
 8005dea:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dec:	4a16      	ldr	r2, [pc, #88]	; (8005e48 <prvAddNewTaskToReadyList+0x98>)
 8005dee:	6813      	ldr	r3, [r2, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005df6:	2201      	movs	r2, #1
 8005df8:	fa02 f103 	lsl.w	r1, r2, r3
 8005dfc:	4813      	ldr	r0, [pc, #76]	; (8005e4c <prvAddNewTaskToReadyList+0x9c>)
 8005dfe:	6802      	ldr	r2, [r0, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	6002      	str	r2, [r0, #0]
 8005e04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e08:	009a      	lsls	r2, r3, #2
 8005e0a:	1d21      	adds	r1, r4, #4
 8005e0c:	4810      	ldr	r0, [pc, #64]	; (8005e50 <prvAddNewTaskToReadyList+0xa0>)
 8005e0e:	4410      	add	r0, r2
 8005e10:	f7ff fadc 	bl	80053cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e14:	f001 fb90 	bl	8007538 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <prvAddNewTaskToReadyList+0x94>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b16b      	cbz	r3, 8005e3a <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <prvAddNewTaskToReadyList+0x90>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d207      	bcs.n	8005e3a <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <prvAddNewTaskToReadyList+0xa4>)
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	bd10      	pop	{r4, pc}
 8005e3c:	20000f74 	.word	0x20000f74
 8005e40:	20000f78 	.word	0x20000f78
 8005e44:	20000ed4 	.word	0x20000ed4
 8005e48:	20000f98 	.word	0x20000f98
 8005e4c:	20000fd8 	.word	0x20000fd8
 8005e50:	20000ee4 	.word	0x20000ee4
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005e60:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e62:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	3004      	adds	r0, #4
 8005e68:	f7ff fad6 	bl	8005418 <uxListRemove>
 8005e6c:	b950      	cbnz	r0, 8005e84 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e6e:	4b1a      	ldr	r3, [pc, #104]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	2301      	movs	r3, #1
 8005e76:	fa03 f202 	lsl.w	r2, r3, r2
 8005e7a:	4918      	ldr	r1, [pc, #96]	; (8005edc <prvAddCurrentTaskToDelayedList+0x84>)
 8005e7c:	680b      	ldr	r3, [r1, #0]
 8005e7e:	ea23 0302 	bic.w	r3, r3, r2
 8005e82:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e84:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005e88:	d107      	bne.n	8005e9a <prvAddCurrentTaskToDelayedList+0x42>
 8005e8a:	b136      	cbz	r6, 8005e9a <prvAddCurrentTaskToDelayedList+0x42>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	3104      	adds	r1, #4
 8005e92:	4813      	ldr	r0, [pc, #76]	; (8005ee0 <prvAddCurrentTaskToDelayedList+0x88>)
 8005e94:	f7ff fa9a 	bl	80053cc <vListInsertEnd>
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e9a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005ea2:	42a5      	cmp	r5, r4
 8005ea4:	d907      	bls.n	8005eb6 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005eac:	6819      	ldr	r1, [r3, #0]
 8005eae:	3104      	adds	r1, #4
 8005eb0:	f7ff fa98 	bl	80053e4 <vListInsert>
 8005eb4:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0x80>)
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	3104      	adds	r1, #4
 8005ec0:	f7ff fa90 	bl	80053e4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ec4:	4b09      	ldr	r3, [pc, #36]	; (8005eec <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	429c      	cmp	r4, r3
 8005eca:	d201      	bcs.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x78>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005ecc:	4b07      	ldr	r3, [pc, #28]	; (8005eec <prvAddCurrentTaskToDelayedList+0x94>)
 8005ece:	601c      	str	r4, [r3, #0]
 8005ed0:	bd70      	pop	{r4, r5, r6, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000f90 	.word	0x20000f90
 8005ed8:	20000f78 	.word	0x20000f78
 8005edc:	20000fd8 	.word	0x20000fd8
 8005ee0:	20000fc4 	.word	0x20000fc4
 8005ee4:	20000edc 	.word	0x20000edc
 8005ee8:	20000ed0 	.word	0x20000ed0
 8005eec:	20000f94 	.word	0x20000f94

08005ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ef0:	b530      	push	{r4, r5, lr}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005ef6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ef8:	b945      	cbnz	r5, 8005f0c <xTaskCreateStatic+0x1c>
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	e7fe      	b.n	8005f0a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8005f0c:	b944      	cbnz	r4, 8005f20 <xTaskCreateStatic+0x30>
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	e7fe      	b.n	8005f1e <xTaskCreateStatic+0x2e>

		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f20:	b18c      	cbz	r4, 8005f46 <xTaskCreateStatic+0x56>
 8005f22:	b185      	cbz	r5, 8005f46 <xTaskCreateStatic+0x56>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f24:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f26:	2502      	movs	r5, #2
 8005f28:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f2c:	2500      	movs	r5, #0
 8005f2e:	9503      	str	r5, [sp, #12]
 8005f30:	9402      	str	r4, [sp, #8]
 8005f32:	ad05      	add	r5, sp, #20
 8005f34:	9501      	str	r5, [sp, #4]
 8005f36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005f38:	9500      	str	r5, [sp, #0]
 8005f3a:	f7ff fec3 	bl	8005cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ff36 	bl	8005db0 <prvAddNewTaskToReadyList>
 8005f44:	e001      	b.n	8005f4a <xTaskCreateStatic+0x5a>
		}
		else
		{
			xReturn = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
 8005f4a:	9805      	ldr	r0, [sp, #20]
 8005f4c:	b007      	add	sp, #28
 8005f4e:	bd30      	pop	{r4, r5, pc}

08005f50 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f54:	b085      	sub	sp, #20
 8005f56:	4606      	mov	r6, r0
 8005f58:	460f      	mov	r7, r1
 8005f5a:	4615      	mov	r5, r2
 8005f5c:	4698      	mov	r8, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f5e:	0090      	lsls	r0, r2, #2
 8005f60:	f001 f9a6 	bl	80072b0 <pvPortMalloc>

			if( pxStack != NULL )
 8005f64:	b160      	cbz	r0, 8005f80 <xTaskCreate+0x30>
 8005f66:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f68:	2054      	movs	r0, #84	; 0x54
 8005f6a:	f001 f9a1 	bl	80072b0 <pvPortMalloc>

				if( pxNewTCB != NULL )
 8005f6e:	4604      	mov	r4, r0
 8005f70:	b110      	cbz	r0, 8005f78 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f72:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
 8005f76:	e004      	b.n	8005f82 <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f78:	4648      	mov	r0, r9
 8005f7a:	f001 fa1b 	bl	80073b4 <vPortFree>
 8005f7e:	e000      	b.n	8005f82 <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f80:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f82:	b19c      	cbz	r4, 8005fac <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f8a:	9303      	str	r3, [sp, #12]
 8005f8c:	9402      	str	r4, [sp, #8]
 8005f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	4643      	mov	r3, r8
 8005f98:	462a      	mov	r2, r5
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff fe91 	bl	8005cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f7ff ff04 	bl	8005db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fa8:	2001      	movs	r0, #1
 8005faa:	e001      	b.n	8005fb0 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8005fb0:	b005      	add	sp, #20
 8005fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fb6:	bf00      	nop

08005fb8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8005fba:	2906      	cmp	r1, #6
 8005fbc:	d908      	bls.n	8005fd0 <vTaskPrioritySet+0x18>
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	e7fe      	b.n	8005fce <vTaskPrioritySet+0x16>
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	460d      	mov	r5, r1

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fd4:	2906      	cmp	r1, #6
 8005fd6:	d900      	bls.n	8005fda <vTaskPrioritySet+0x22>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fd8:	2506      	movs	r5, #6
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8005fda:	f001 fa8b 	bl	80074f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8005fde:	b90c      	cbnz	r4, 8005fe4 <vTaskPrioritySet+0x2c>
 8005fe0:	4b2d      	ldr	r3, [pc, #180]	; (8006098 <vTaskPrioritySet+0xe0>)
 8005fe2:	681c      	ldr	r4, [r3, #0]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8005fe4:	6c63      	ldr	r3, [r4, #68]	; 0x44
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005fe6:	429d      	cmp	r5, r3
 8005fe8:	d053      	beq.n	8006092 <vTaskPrioritySet+0xda>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8005fea:	d90a      	bls.n	8006002 <vTaskPrioritySet+0x4a>
				{
					if( pxTCB != pxCurrentTCB )
 8005fec:	4a2a      	ldr	r2, [pc, #168]	; (8006098 <vTaskPrioritySet+0xe0>)
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	4294      	cmp	r4, r2
 8005ff2:	d00c      	beq.n	800600e <vTaskPrioritySet+0x56>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8005ff4:	4a28      	ldr	r2, [pc, #160]	; (8006098 <vTaskPrioritySet+0xe0>)
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ffa:	4295      	cmp	r5, r2
 8005ffc:	d209      	bcs.n	8006012 <vTaskPrioritySet+0x5a>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8005ffe:	2600      	movs	r6, #0
 8006000:	e00a      	b.n	8006018 <vTaskPrioritySet+0x60>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006002:	4a25      	ldr	r2, [pc, #148]	; (8006098 <vTaskPrioritySet+0xe0>)
 8006004:	6812      	ldr	r2, [r2, #0]
 8006006:	4294      	cmp	r4, r2
 8006008:	d005      	beq.n	8006016 <vTaskPrioritySet+0x5e>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800600a:	2600      	movs	r6, #0
 800600c:	e004      	b.n	8006018 <vTaskPrioritySet+0x60>
 800600e:	2600      	movs	r6, #0
 8006010:	e002      	b.n	8006018 <vTaskPrioritySet+0x60>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
 8006012:	2601      	movs	r6, #1
 8006014:	e000      	b.n	8006018 <vTaskPrioritySet+0x60>
				else if( pxTCB == pxCurrentTCB )
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006016:	2601      	movs	r6, #1
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006018:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800601a:	42bb      	cmp	r3, r7
 800601c:	d100      	bne.n	8006020 <vTaskPrioritySet+0x68>
					{
						pxTCB->uxPriority = uxNewPriority;
 800601e:	62e5      	str	r5, [r4, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006020:	6465      	str	r5, [r4, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006022:	69a3      	ldr	r3, [r4, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	db02      	blt.n	800602e <vTaskPrioritySet+0x76>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006028:	f1c5 0507 	rsb	r5, r5, #7
 800602c:	61a5      	str	r5, [r4, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800602e:	6961      	ldr	r1, [r4, #20]
 8006030:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8006034:	0093      	lsls	r3, r2, #2
 8006036:	4a19      	ldr	r2, [pc, #100]	; (800609c <vTaskPrioritySet+0xe4>)
 8006038:	4413      	add	r3, r2
 800603a:	4299      	cmp	r1, r3
 800603c:	d101      	bne.n	8006042 <vTaskPrioritySet+0x8a>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <vTaskPrioritySet+0x8c>
 8006042:	2300      	movs	r3, #0
 8006044:	b1e3      	cbz	r3, 8006080 <vTaskPrioritySet+0xc8>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006046:	1d25      	adds	r5, r4, #4
 8006048:	4628      	mov	r0, r5
 800604a:	f7ff f9e5 	bl	8005418 <uxListRemove>
 800604e:	b938      	cbnz	r0, 8006060 <vTaskPrioritySet+0xa8>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8006050:	2301      	movs	r3, #1
 8006052:	fa03 f707 	lsl.w	r7, r3, r7
 8006056:	4a12      	ldr	r2, [pc, #72]	; (80060a0 <vTaskPrioritySet+0xe8>)
 8006058:	6813      	ldr	r3, [r2, #0]
 800605a:	ea23 0307 	bic.w	r3, r3, r7
 800605e:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8006060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006062:	2201      	movs	r2, #1
 8006064:	fa02 f103 	lsl.w	r1, r2, r3
 8006068:	480d      	ldr	r0, [pc, #52]	; (80060a0 <vTaskPrioritySet+0xe8>)
 800606a:	6802      	ldr	r2, [r0, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	6002      	str	r2, [r0, #0]
 8006070:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006074:	009a      	lsls	r2, r3, #2
 8006076:	4629      	mov	r1, r5
 8006078:	4808      	ldr	r0, [pc, #32]	; (800609c <vTaskPrioritySet+0xe4>)
 800607a:	4410      	add	r0, r2
 800607c:	f7ff f9a6 	bl	80053cc <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8006080:	b13e      	cbz	r6, 8006092 <vTaskPrioritySet+0xda>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8006082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006086:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <vTaskPrioritySet+0xec>)
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8006092:	f001 fa51 	bl	8007538 <vPortExitCritical>
 8006096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006098:	20000f78 	.word	0x20000f78
 800609c:	20000ee4 	.word	0x20000ee4
 80060a0:	20000fd8 	.word	0x20000fd8
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060a8:	b510      	push	{r4, lr}
 80060aa:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ac:	2400      	movs	r4, #0
 80060ae:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060b0:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060b2:	aa07      	add	r2, sp, #28
 80060b4:	a906      	add	r1, sp, #24
 80060b6:	a805      	add	r0, sp, #20
 80060b8:	f7fb fd28 	bl	8001b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060bc:	9b05      	ldr	r3, [sp, #20]
 80060be:	9302      	str	r3, [sp, #8]
 80060c0:	9b06      	ldr	r3, [sp, #24]
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	9400      	str	r4, [sp, #0]
 80060c6:	4623      	mov	r3, r4
 80060c8:	9a07      	ldr	r2, [sp, #28]
 80060ca:	4918      	ldr	r1, [pc, #96]	; (800612c <vTaskStartScheduler+0x84>)
 80060cc:	4818      	ldr	r0, [pc, #96]	; (8006130 <vTaskStartScheduler+0x88>)
 80060ce:	f7ff ff0f 	bl	8005ef0 <xTaskCreateStatic>
												( void * ) NULL,
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060d2:	b108      	cbz	r0, 80060d8 <vTaskStartScheduler+0x30>
		{
			xReturn = pdPASS;
 80060d4:	2001      	movs	r0, #1
 80060d6:	e000      	b.n	80060da <vTaskStartScheduler+0x32>
		}
		else
		{
			xReturn = pdFAIL;
 80060d8:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060da:	2801      	cmp	r0, #1
 80060dc:	d101      	bne.n	80060e2 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
 80060de:	f000 fdcd 	bl	8006c7c <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060e2:	2801      	cmp	r0, #1
 80060e4:	d114      	bne.n	8006110 <vTaskStartScheduler+0x68>
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <vTaskStartScheduler+0x8c>)
 80060fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060fe:	2201      	movs	r2, #1
 8006100:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <vTaskStartScheduler+0x90>)
 8006102:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006104:	2200      	movs	r2, #0
 8006106:	4b0d      	ldr	r3, [pc, #52]	; (800613c <vTaskStartScheduler+0x94>)
 8006108:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800610a:	f001 fa89 	bl	8007620 <xPortStartScheduler>
 800610e:	e00b      	b.n	8006128 <vTaskStartScheduler+0x80>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006110:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006114:	d108      	bne.n	8006128 <vTaskStartScheduler+0x80>
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	e7fe      	b.n	8006126 <vTaskStartScheduler+0x7e>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006128:	b008      	add	sp, #32
 800612a:	bd10      	pop	{r4, pc}
 800612c:	0800ed30 	.word	0x0800ed30
 8006130:	08005c59 	.word	0x08005c59
 8006134:	20000f94 	.word	0x20000f94
 8006138:	20000ed4 	.word	0x20000ed4
 800613c:	20000f90 	.word	0x20000f90

08006140 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006140:	4a02      	ldr	r2, [pc, #8]	; (800614c <vTaskSuspendAll+0xc>)
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	3301      	adds	r3, #1
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000f70 	.word	0x20000f70

08006150 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006150:	4b01      	ldr	r3, [pc, #4]	; (8006158 <xTaskGetTickCount+0x8>)
 8006152:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000f90 	.word	0x20000f90

0800615c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615e:	4b3d      	ldr	r3, [pc, #244]	; (8006254 <xTaskIncrementTick+0xf8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d169      	bne.n	800623a <xTaskIncrementTick+0xde>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8006166:	4b3c      	ldr	r3, [pc, #240]	; (8006258 <xTaskIncrementTick+0xfc>)
 8006168:	681d      	ldr	r5, [r3, #0]
 800616a:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800616c:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800616e:	b9c5      	cbnz	r5, 80061a2 <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
 8006170:	4b3a      	ldr	r3, [pc, #232]	; (800625c <xTaskIncrementTick+0x100>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	b143      	cbz	r3, 800618a <xTaskIncrementTick+0x2e>
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	e7fe      	b.n	8006188 <xTaskIncrementTick+0x2c>
 800618a:	4a34      	ldr	r2, [pc, #208]	; (800625c <xTaskIncrementTick+0x100>)
 800618c:	6811      	ldr	r1, [r2, #0]
 800618e:	4b34      	ldr	r3, [pc, #208]	; (8006260 <xTaskIncrementTick+0x104>)
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	6010      	str	r0, [r2, #0]
 8006194:	6019      	str	r1, [r3, #0]
 8006196:	4a33      	ldr	r2, [pc, #204]	; (8006264 <xTaskIncrementTick+0x108>)
 8006198:	6813      	ldr	r3, [r2, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	f7ff fd77 	bl	8005c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061a2:	4b31      	ldr	r3, [pc, #196]	; (8006268 <xTaskIncrementTick+0x10c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429d      	cmp	r5, r3
 80061a8:	d203      	bcs.n	80061b2 <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061aa:	2400      	movs	r4, #0
 80061ac:	e03a      	b.n	8006224 <xTaskIncrementTick+0xc8>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
 80061ae:	2401      	movs	r4, #1
 80061b0:	e000      	b.n	80061b4 <xTaskIncrementTick+0x58>
 80061b2:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061b4:	4b29      	ldr	r3, [pc, #164]	; (800625c <xTaskIncrementTick+0x100>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	b90b      	cbnz	r3, 80061c0 <xTaskIncrementTick+0x64>
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <xTaskIncrementTick+0x66>
 80061c0:	2300      	movs	r3, #0
 80061c2:	b123      	cbz	r3, 80061ce <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295
 80061c8:	4b27      	ldr	r3, [pc, #156]	; (8006268 <xTaskIncrementTick+0x10c>)
 80061ca:	601a      	str	r2, [r3, #0]
					break;
 80061cc:	e02a      	b.n	8006224 <xTaskIncrementTick+0xc8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061ce:	4b23      	ldr	r3, [pc, #140]	; (800625c <xTaskIncrementTick+0x100>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061d6:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
 80061d8:	429d      	cmp	r5, r3
 80061da:	d202      	bcs.n	80061e2 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <xTaskIncrementTick+0x10c>)
 80061de:	6013      	str	r3, [r2, #0]
						break;
 80061e0:	e020      	b.n	8006224 <xTaskIncrementTick+0xc8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061e2:	1d37      	adds	r7, r6, #4
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff f917 	bl	8005418 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061ea:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80061ec:	b11b      	cbz	r3, 80061f6 <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ee:	f106 0018 	add.w	r0, r6, #24
 80061f2:	f7ff f911 	bl	8005418 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061f6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80061f8:	2201      	movs	r2, #1
 80061fa:	fa02 f103 	lsl.w	r1, r2, r3
 80061fe:	481b      	ldr	r0, [pc, #108]	; (800626c <xTaskIncrementTick+0x110>)
 8006200:	6802      	ldr	r2, [r0, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	6002      	str	r2, [r0, #0]
 8006206:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800620a:	009a      	lsls	r2, r3, #2
 800620c:	4639      	mov	r1, r7
 800620e:	4818      	ldr	r0, [pc, #96]	; (8006270 <xTaskIncrementTick+0x114>)
 8006210:	4410      	add	r0, r2
 8006212:	f7ff f8db 	bl	80053cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006216:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006218:	4b16      	ldr	r3, [pc, #88]	; (8006274 <xTaskIncrementTick+0x118>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d2c5      	bcs.n	80061ae <xTaskIncrementTick+0x52>
 8006222:	e7c7      	b.n	80061b4 <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006224:	4b13      	ldr	r3, [pc, #76]	; (8006274 <xTaskIncrementTick+0x118>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800622e:	009a      	lsls	r2, r3, #2
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <xTaskIncrementTick+0x114>)
 8006232:	589b      	ldr	r3, [r3, r2]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d806      	bhi.n	8006246 <xTaskIncrementTick+0xea>
 8006238:	e006      	b.n	8006248 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800623a:	4a0f      	ldr	r2, [pc, #60]	; (8006278 <xTaskIncrementTick+0x11c>)
 800623c:	6813      	ldr	r3, [r2, #0]
 800623e:	3301      	adds	r3, #1
 8006240:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006242:	2400      	movs	r4, #0
 8006244:	e000      	b.n	8006248 <xTaskIncrementTick+0xec>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 8006246:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <xTaskIncrementTick+0x120>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	b103      	cbz	r3, 8006250 <xTaskIncrementTick+0xf4>
		{
			xSwitchRequired = pdTRUE;
 800624e:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8006250:	4620      	mov	r0, r4
 8006252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006254:	20000f70 	.word	0x20000f70
 8006258:	20000f90 	.word	0x20000f90
 800625c:	20000ed0 	.word	0x20000ed0
 8006260:	20000edc 	.word	0x20000edc
 8006264:	20000ed8 	.word	0x20000ed8
 8006268:	20000f94 	.word	0x20000f94
 800626c:	20000fd8 	.word	0x20000fd8
 8006270:	20000ee4 	.word	0x20000ee4
 8006274:	20000f78 	.word	0x20000f78
 8006278:	20000ee0 	.word	0x20000ee0
 800627c:	20000fdc 	.word	0x20000fdc

08006280 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006280:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006282:	4b34      	ldr	r3, [pc, #208]	; (8006354 <xTaskResumeAll+0xd4>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	b943      	cbnz	r3, 800629a <xTaskResumeAll+0x1a>
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	e7fe      	b.n	8006298 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800629a:	f001 f92b 	bl	80074f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800629e:	4b2d      	ldr	r3, [pc, #180]	; (8006354 <xTaskResumeAll+0xd4>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	3a01      	subs	r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d14c      	bne.n	8006346 <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062ac:	4b2a      	ldr	r3, [pc, #168]	; (8006358 <xTaskResumeAll+0xd8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	bb33      	cbnz	r3, 8006300 <xTaskResumeAll+0x80>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 80062b2:	2400      	movs	r4, #0
 80062b4:	e04a      	b.n	800634c <xTaskResumeAll+0xcc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062b6:	4b29      	ldr	r3, [pc, #164]	; (800635c <xTaskResumeAll+0xdc>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062bc:	f104 0018 	add.w	r0, r4, #24
 80062c0:	f7ff f8aa 	bl	8005418 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c4:	1d25      	adds	r5, r4, #4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f7ff f8a6 	bl	8005418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062ce:	2201      	movs	r2, #1
 80062d0:	fa02 f103 	lsl.w	r1, r2, r3
 80062d4:	4822      	ldr	r0, [pc, #136]	; (8006360 <xTaskResumeAll+0xe0>)
 80062d6:	6802      	ldr	r2, [r0, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	6002      	str	r2, [r0, #0]
 80062dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062e0:	009a      	lsls	r2, r3, #2
 80062e2:	4629      	mov	r1, r5
 80062e4:	481f      	ldr	r0, [pc, #124]	; (8006364 <xTaskResumeAll+0xe4>)
 80062e6:	4410      	add	r0, r2
 80062e8:	f7ff f870 	bl	80053cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062ee:	4b1e      	ldr	r3, [pc, #120]	; (8006368 <xTaskResumeAll+0xe8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d304      	bcc.n	8006302 <xTaskResumeAll+0x82>
					{
						xYieldPending = pdTRUE;
 80062f8:	2201      	movs	r2, #1
 80062fa:	4b1c      	ldr	r3, [pc, #112]	; (800636c <xTaskResumeAll+0xec>)
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e000      	b.n	8006302 <xTaskResumeAll+0x82>
 8006300:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006302:	4b16      	ldr	r3, [pc, #88]	; (800635c <xTaskResumeAll+0xdc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1d5      	bne.n	80062b6 <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800630a:	b10c      	cbz	r4, 8006310 <xTaskResumeAll+0x90>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800630c:	f7ff fcc0 	bl	8005c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006310:	4b17      	ldr	r3, [pc, #92]	; (8006370 <xTaskResumeAll+0xf0>)
 8006312:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006314:	b154      	cbz	r4, 800632c <xTaskResumeAll+0xac>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006316:	f7ff ff21 	bl	800615c <xTaskIncrementTick>
 800631a:	b110      	cbz	r0, 8006322 <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
 800631c:	2201      	movs	r2, #1
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <xTaskResumeAll+0xec>)
 8006320:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006322:	3c01      	subs	r4, #1
 8006324:	d1f7      	bne.n	8006316 <xTaskResumeAll+0x96>

						uxPendedTicks = 0;
 8006326:	2200      	movs	r2, #0
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <xTaskResumeAll+0xf0>)
 800632a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <xTaskResumeAll+0xec>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	b15b      	cbz	r3, 800634a <xTaskResumeAll+0xca>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <xTaskResumeAll+0xf4>)
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006342:	2401      	movs	r4, #1
 8006344:	e002      	b.n	800634c <xTaskResumeAll+0xcc>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8006346:	2400      	movs	r4, #0
 8006348:	e000      	b.n	800634c <xTaskResumeAll+0xcc>
 800634a:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800634c:	f001 f8f4 	bl	8007538 <vPortExitCritical>

	return xAlreadyYielded;
}
 8006350:	4620      	mov	r0, r4
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	20000f70 	.word	0x20000f70
 8006358:	20000f74 	.word	0x20000f74
 800635c:	20000f7c 	.word	0x20000f7c
 8006360:	20000fd8 	.word	0x20000fd8
 8006364:	20000ee4 	.word	0x20000ee4
 8006368:	20000f78 	.word	0x20000f78
 800636c:	20000fdc 	.word	0x20000fdc
 8006370:	20000ee0 	.word	0x20000ee0
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006378:	b510      	push	{r4, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800637a:	b1a8      	cbz	r0, 80063a8 <vTaskDelay+0x30>
 800637c:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <vTaskDelay+0x48>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	b143      	cbz	r3, 8006396 <vTaskDelay+0x1e>
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	e7fe      	b.n	8006394 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006396:	f7ff fed3 	bl	8006140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800639a:	2100      	movs	r1, #0
 800639c:	4620      	mov	r0, r4
 800639e:	f7ff fd5b 	bl	8005e58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063a2:	f7ff ff6d 	bl	8006280 <xTaskResumeAll>
 80063a6:	e000      	b.n	80063aa <vTaskDelay+0x32>

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
	BaseType_t xAlreadyYielded = pdFALSE;
 80063a8:	2000      	movs	r0, #0
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063aa:	b938      	cbnz	r0, 80063bc <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 80063ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <vTaskDelay+0x4c>)
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	bf00      	nop
 80063c0:	20000f70 	.word	0x20000f70
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063c8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063ca:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <vTaskSwitchContext+0xb0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	b11b      	cbz	r3, 80063d8 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063d0:	2201      	movs	r2, #1
 80063d2:	4b2a      	ldr	r3, [pc, #168]	; (800647c <vTaskSwitchContext+0xb4>)
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xYieldPending = pdFALSE;
 80063d8:	2200      	movs	r2, #0
 80063da:	4b28      	ldr	r3, [pc, #160]	; (800647c <vTaskSwitchContext+0xb4>)
 80063dc:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 80063de:	4b28      	ldr	r3, [pc, #160]	; (8006480 <vTaskSwitchContext+0xb8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80063ea:	d10b      	bne.n	8006404 <vTaskSwitchContext+0x3c>
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80063f2:	d107      	bne.n	8006404 <vTaskSwitchContext+0x3c>
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80063fa:	d103      	bne.n	8006404 <vTaskSwitchContext+0x3c>
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8006402:	d005      	beq.n	8006410 <vTaskSwitchContext+0x48>
 8006404:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <vTaskSwitchContext+0xb8>)
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	6819      	ldr	r1, [r3, #0]
 800640a:	3134      	adds	r1, #52	; 0x34
 800640c:	f7fb fb7c 	bl	8001b08 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006410:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <vTaskSwitchContext+0xbc>)
 8006412:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8006414:	fab3 f383 	clz	r3, r3
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f1c3 031f 	rsb	r3, r3, #31
 800641e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006422:	008a      	lsls	r2, r1, #2
 8006424:	4918      	ldr	r1, [pc, #96]	; (8006488 <vTaskSwitchContext+0xc0>)
 8006426:	588a      	ldr	r2, [r1, r2]
 8006428:	b942      	cbnz	r2, 800643c <vTaskSwitchContext+0x74>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	e7fe      	b.n	800643a <vTaskSwitchContext+0x72>
 800643c:	4d12      	ldr	r5, [pc, #72]	; (8006488 <vTaskSwitchContext+0xc0>)
 800643e:	0099      	lsls	r1, r3, #2
 8006440:	18ca      	adds	r2, r1, r3
 8006442:	0090      	lsls	r0, r2, #2
 8006444:	4428      	add	r0, r5
 8006446:	6842      	ldr	r2, [r0, #4]
 8006448:	6854      	ldr	r4, [r2, #4]
 800644a:	6044      	str	r4, [r0, #4]
 800644c:	4419      	add	r1, r3
 800644e:	008a      	lsls	r2, r1, #2
 8006450:	3208      	adds	r2, #8
 8006452:	442a      	add	r2, r5
 8006454:	4294      	cmp	r4, r2
 8006456:	d105      	bne.n	8006464 <vTaskSwitchContext+0x9c>
 8006458:	6860      	ldr	r0, [r4, #4]
 800645a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800645e:	008a      	lsls	r2, r1, #2
 8006460:	442a      	add	r2, r5
 8006462:	6050      	str	r0, [r2, #4]
 8006464:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006468:	009a      	lsls	r2, r3, #2
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <vTaskSwitchContext+0xc0>)
 800646c:	441a      	add	r2, r3
 800646e:	6853      	ldr	r3, [r2, #4]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	4b03      	ldr	r3, [pc, #12]	; (8006480 <vTaskSwitchContext+0xb8>)
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20000f70 	.word	0x20000f70
 800647c:	20000fdc 	.word	0x20000fdc
 8006480:	20000f78 	.word	0x20000f78
 8006484:	20000fd8 	.word	0x20000fd8
 8006488:	20000ee4 	.word	0x20000ee4

0800648c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4604      	mov	r4, r0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006490:	f001 f830 	bl	80074f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006494:	b90c      	cbnz	r4, 800649a <vTaskSuspend+0xe>
 8006496:	4b2a      	ldr	r3, [pc, #168]	; (8006540 <vTaskSuspend+0xb4>)
 8006498:	681c      	ldr	r4, [r3, #0]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800649a:	1d25      	adds	r5, r4, #4
 800649c:	4628      	mov	r0, r5
 800649e:	f7fe ffbb 	bl	8005418 <uxListRemove>
 80064a2:	b970      	cbnz	r0, 80064c2 <vTaskSuspend+0x36>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80064a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064a6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80064aa:	008b      	lsls	r3, r1, #2
 80064ac:	4925      	ldr	r1, [pc, #148]	; (8006544 <vTaskSuspend+0xb8>)
 80064ae:	58cb      	ldr	r3, [r1, r3]
 80064b0:	b93b      	cbnz	r3, 80064c2 <vTaskSuspend+0x36>
 80064b2:	2301      	movs	r3, #1
 80064b4:	fa03 f202 	lsl.w	r2, r3, r2
 80064b8:	4923      	ldr	r1, [pc, #140]	; (8006548 <vTaskSuspend+0xbc>)
 80064ba:	680b      	ldr	r3, [r1, #0]
 80064bc:	ea23 0302 	bic.w	r3, r3, r2
 80064c0:	600b      	str	r3, [r1, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064c4:	b11b      	cbz	r3, 80064ce <vTaskSuspend+0x42>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c6:	f104 0018 	add.w	r0, r4, #24
 80064ca:	f7fe ffa5 	bl	8005418 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80064ce:	4629      	mov	r1, r5
 80064d0:	481e      	ldr	r0, [pc, #120]	; (800654c <vTaskSuspend+0xc0>)
 80064d2:	f7fe ff7b 	bl	80053cc <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 80064d6:	f001 f82f 	bl	8007538 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80064da:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <vTaskSuspend+0xc4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	b12b      	cbz	r3, 80064ec <vTaskSuspend+0x60>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80064e0:	f001 f808 	bl	80074f4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80064e4:	f7ff fbd4 	bl	8005c90 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80064e8:	f001 f826 	bl	8007538 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80064ec:	4b14      	ldr	r3, [pc, #80]	; (8006540 <vTaskSuspend+0xb4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	429c      	cmp	r4, r3
 80064f2:	d123      	bne.n	800653c <vTaskSuspend+0xb0>
		{
			if( xSchedulerRunning != pdFALSE )
 80064f4:	4b16      	ldr	r3, [pc, #88]	; (8006550 <vTaskSuspend+0xc4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	b1a3      	cbz	r3, 8006524 <vTaskSuspend+0x98>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80064fa:	4b16      	ldr	r3, [pc, #88]	; (8006554 <vTaskSuspend+0xc8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	b143      	cbz	r3, 8006512 <vTaskSuspend+0x86>
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	e7fe      	b.n	8006510 <vTaskSuspend+0x84>
				portYIELD_WITHIN_API();
 8006512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <vTaskSuspend+0xcc>)
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	bd38      	pop	{r3, r4, r5, pc}
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006524:	4b09      	ldr	r3, [pc, #36]	; (800654c <vTaskSuspend+0xc0>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <vTaskSuspend+0xd0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d103      	bne.n	8006538 <vTaskSuspend+0xac>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 8006530:	2200      	movs	r2, #0
 8006532:	4b03      	ldr	r3, [pc, #12]	; (8006540 <vTaskSuspend+0xb4>)
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					vTaskSwitchContext();
 8006538:	f7ff ff46 	bl	80063c8 <vTaskSwitchContext>
 800653c:	bd38      	pop	{r3, r4, r5, pc}
 800653e:	bf00      	nop
 8006540:	20000f78 	.word	0x20000f78
 8006544:	20000ee4 	.word	0x20000ee4
 8006548:	20000fd8 	.word	0x20000fd8
 800654c:	20000fc4 	.word	0x20000fc4
 8006550:	20000ed4 	.word	0x20000ed4
 8006554:	20000f70 	.word	0x20000f70
 8006558:	e000ed04 	.word	0xe000ed04
 800655c:	20000f74 	.word	0x20000f74

08006560 <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 8006560:	b940      	cbnz	r0, 8006574 <vTaskPlaceOnEventList+0x14>
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	e7fe      	b.n	8006572 <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006574:	b510      	push	{r4, lr}
 8006576:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <vTaskPlaceOnEventList+0x2c>)
 800657a:	6819      	ldr	r1, [r3, #0]
 800657c:	3118      	adds	r1, #24
 800657e:	f7fe ff31 	bl	80053e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006582:	2101      	movs	r1, #1
 8006584:	4620      	mov	r0, r4
 8006586:	f7ff fc67 	bl	8005e58 <prvAddCurrentTaskToDelayedList>
 800658a:	bd10      	pop	{r4, pc}
 800658c:	20000f78 	.word	0x20000f78

08006590 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006590:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006592:	b940      	cbnz	r0, 80065a6 <vTaskPlaceOnEventListRestricted+0x16>
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	e7fe      	b.n	80065a4 <vTaskPlaceOnEventListRestricted+0x14>
 80065a6:	460c      	mov	r4, r1
 80065a8:	4615      	mov	r5, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065aa:	4a06      	ldr	r2, [pc, #24]	; (80065c4 <vTaskPlaceOnEventListRestricted+0x34>)
 80065ac:	6811      	ldr	r1, [r2, #0]
 80065ae:	3118      	adds	r1, #24
 80065b0:	f7fe ff0c 	bl	80053cc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065b4:	b10d      	cbz	r5, 80065ba <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
 80065b6:	f04f 34ff 	mov.w	r4, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065ba:	4629      	mov	r1, r5
 80065bc:	4620      	mov	r0, r4
 80065be:	f7ff fc4b 	bl	8005e58 <prvAddCurrentTaskToDelayedList>
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	20000f78 	.word	0x20000f78

080065c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065c8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80065ca:	68c3      	ldr	r3, [r0, #12]
 80065cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80065ce:	b944      	cbnz	r4, 80065e2 <xTaskRemoveFromEventList+0x1a>
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	e7fe      	b.n	80065e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065e2:	f104 0518 	add.w	r5, r4, #24
 80065e6:	4628      	mov	r0, r5
 80065e8:	f7fe ff16 	bl	8005418 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <xTaskRemoveFromEventList+0x74>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	b9a3      	cbnz	r3, 800661c <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065f2:	1d25      	adds	r5, r4, #4
 80065f4:	4628      	mov	r0, r5
 80065f6:	f7fe ff0f 	bl	8005418 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065fc:	2201      	movs	r2, #1
 80065fe:	fa02 f103 	lsl.w	r1, r2, r3
 8006602:	480f      	ldr	r0, [pc, #60]	; (8006640 <xTaskRemoveFromEventList+0x78>)
 8006604:	6802      	ldr	r2, [r0, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	6002      	str	r2, [r0, #0]
 800660a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800660e:	009a      	lsls	r2, r3, #2
 8006610:	4629      	mov	r1, r5
 8006612:	480c      	ldr	r0, [pc, #48]	; (8006644 <xTaskRemoveFromEventList+0x7c>)
 8006614:	4410      	add	r0, r2
 8006616:	f7fe fed9 	bl	80053cc <vListInsertEnd>
 800661a:	e003      	b.n	8006624 <xTaskRemoveFromEventList+0x5c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800661c:	4629      	mov	r1, r5
 800661e:	480a      	ldr	r0, [pc, #40]	; (8006648 <xTaskRemoveFromEventList+0x80>)
 8006620:	f7fe fed4 	bl	80053cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006624:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006626:	4b09      	ldr	r3, [pc, #36]	; (800664c <xTaskRemoveFromEventList+0x84>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	429a      	cmp	r2, r3
 800662e:	d903      	bls.n	8006638 <xTaskRemoveFromEventList+0x70>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006630:	2001      	movs	r0, #1
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <xTaskRemoveFromEventList+0x88>)
 8006634:	6018      	str	r0, [r3, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
 8006638:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	20000f70 	.word	0x20000f70
 8006640:	20000fd8 	.word	0x20000fd8
 8006644:	20000ee4 	.word	0x20000ee4
 8006648:	20000f7c 	.word	0x20000f7c
 800664c:	20000f78 	.word	0x20000f78
 8006650:	20000fdc 	.word	0x20000fdc

08006654 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 8006654:	b940      	cbnz	r0, 8006668 <vTaskSetTimeOutState+0x14>
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	e7fe      	b.n	8006666 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006668:	4a03      	ldr	r2, [pc, #12]	; (8006678 <vTaskSetTimeOutState+0x24>)
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800666e:	4a03      	ldr	r2, [pc, #12]	; (800667c <vTaskSetTimeOutState+0x28>)
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	6042      	str	r2, [r0, #4]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20000ed8 	.word	0x20000ed8
 800667c:	20000f90 	.word	0x20000f90

08006680 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006680:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006682:	b940      	cbnz	r0, 8006696 <xTaskCheckForTimeOut+0x16>
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	e7fe      	b.n	8006694 <xTaskCheckForTimeOut+0x14>
 8006696:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
 8006698:	b941      	cbnz	r1, 80066ac <xTaskCheckForTimeOut+0x2c>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	e7fe      	b.n	80066aa <xTaskCheckForTimeOut+0x2a>
 80066ac:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 80066ae:	f000 ff21 	bl	80074f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066b2:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <xTaskCheckForTimeOut+0x78>)
 80066b4:	6819      	ldr	r1, [r3, #0]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066b6:	682a      	ldr	r2, [r5, #0]
 80066b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80066bc:	d013      	beq.n	80066e6 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <xTaskCheckForTimeOut+0x7c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4298      	cmp	r0, r3
 80066c6:	d002      	beq.n	80066ce <xTaskCheckForTimeOut+0x4e>
 80066c8:	6863      	ldr	r3, [r4, #4]
 80066ca:	4299      	cmp	r1, r3
 80066cc:	d20d      	bcs.n	80066ea <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066ce:	6863      	ldr	r3, [r4, #4]
 80066d0:	1ac8      	subs	r0, r1, r3
 80066d2:	4282      	cmp	r2, r0
 80066d4:	d90b      	bls.n	80066ee <xTaskCheckForTimeOut+0x6e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80066d6:	1a5b      	subs	r3, r3, r1
 80066d8:	4413      	add	r3, r2
 80066da:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80066dc:	4620      	mov	r0, r4
 80066de:	f7ff ffb9 	bl	8006654 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80066e2:	2400      	movs	r4, #0
 80066e4:	e004      	b.n	80066f0 <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066e6:	2400      	movs	r4, #0
 80066e8:	e002      	b.n	80066f0 <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066ea:	2401      	movs	r4, #1
 80066ec:	e000      	b.n	80066f0 <xTaskCheckForTimeOut+0x70>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
 80066ee:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
 80066f0:	f000 ff22 	bl	8007538 <vPortExitCritical>

	return xReturn;
}
 80066f4:	4620      	mov	r0, r4
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
 80066f8:	20000f90 	.word	0x20000f90
 80066fc:	20000ed8 	.word	0x20000ed8

08006700 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8006700:	2201      	movs	r2, #1
 8006702:	4b01      	ldr	r3, [pc, #4]	; (8006708 <vTaskMissedYield+0x8>)
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	4770      	bx	lr
 8006708:	20000fdc 	.word	0x20000fdc

0800670c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800670c:	b508      	push	{r3, lr}
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800670e:	4603      	mov	r3, r0
 8006710:	b908      	cbnz	r0, 8006716 <uxTaskGetStackHighWaterMark+0xa>
 8006712:	4b03      	ldr	r3, [pc, #12]	; (8006720 <uxTaskGetStackHighWaterMark+0x14>)
 8006714:	681b      	ldr	r3, [r3, #0]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8006716:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006718:	f7ff fab0 	bl	8005c7c <prvTaskCheckFreeStackSpace>

		return uxReturn;
	}
 800671c:	bd08      	pop	{r3, pc}
 800671e:	bf00      	nop
 8006720:	20000f78 	.word	0x20000f78

08006724 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006724:	4b01      	ldr	r3, [pc, #4]	; (800672c <xTaskGetCurrentTaskHandle+0x8>)
 8006726:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000f78 	.word	0x20000f78

08006730 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <xTaskGetSchedulerState+0x18>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	b123      	cbz	r3, 8006740 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <xTaskGetSchedulerState+0x1c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	b91b      	cbnz	r3, 8006744 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800673c:	2002      	movs	r0, #2
 800673e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006740:	2001      	movs	r0, #1
 8006742:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006744:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
 8006746:	4770      	bx	lr
 8006748:	20000ed4 	.word	0x20000ed4
 800674c:	20000f70 	.word	0x20000f70

08006750 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8006750:	2800      	cmp	r0, #0
 8006752:	d04a      	beq.n	80067ea <vTaskPriorityInherit+0x9a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4602      	mov	r2, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006758:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800675a:	4924      	ldr	r1, [pc, #144]	; (80067ec <vTaskPriorityInherit+0x9c>)
 800675c:	6809      	ldr	r1, [r1, #0]
 800675e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006760:	428b      	cmp	r3, r1
 8006762:	d241      	bcs.n	80067e8 <vTaskPriorityInherit+0x98>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006764:	6981      	ldr	r1, [r0, #24]
 8006766:	2900      	cmp	r1, #0
 8006768:	db05      	blt.n	8006776 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676a:	4920      	ldr	r1, [pc, #128]	; (80067ec <vTaskPriorityInherit+0x9c>)
 800676c:	6809      	ldr	r1, [r1, #0]
 800676e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006770:	f1c1 0107 	rsb	r1, r1, #7
 8006774:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006776:	6950      	ldr	r0, [r2, #20]
 8006778:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800677c:	0099      	lsls	r1, r3, #2
 800677e:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <vTaskPriorityInherit+0xa0>)
 8006780:	4419      	add	r1, r3
 8006782:	4288      	cmp	r0, r1
 8006784:	d101      	bne.n	800678a <vTaskPriorityInherit+0x3a>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <vTaskPriorityInherit+0x3c>
 800678a:	2300      	movs	r3, #0
 800678c:	b343      	cbz	r3, 80067e0 <vTaskPriorityInherit+0x90>
 800678e:	4614      	mov	r4, r2
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006790:	1d15      	adds	r5, r2, #4
 8006792:	4628      	mov	r0, r5
 8006794:	f7fe fe40 	bl	8005418 <uxListRemove>
 8006798:	b970      	cbnz	r0, 80067b8 <vTaskPriorityInherit+0x68>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800679a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800679c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80067a0:	008a      	lsls	r2, r1, #2
 80067a2:	4913      	ldr	r1, [pc, #76]	; (80067f0 <vTaskPriorityInherit+0xa0>)
 80067a4:	588a      	ldr	r2, [r1, r2]
 80067a6:	b93a      	cbnz	r2, 80067b8 <vTaskPriorityInherit+0x68>
 80067a8:	2201      	movs	r2, #1
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	4911      	ldr	r1, [pc, #68]	; (80067f4 <vTaskPriorityInherit+0xa4>)
 80067b0:	680a      	ldr	r2, [r1, #0]
 80067b2:	ea22 0303 	bic.w	r3, r2, r3
 80067b6:	600b      	str	r3, [r1, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <vTaskPriorityInherit+0x9c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80067c0:	2201      	movs	r2, #1
 80067c2:	fa02 f103 	lsl.w	r1, r2, r3
 80067c6:	480b      	ldr	r0, [pc, #44]	; (80067f4 <vTaskPriorityInherit+0xa4>)
 80067c8:	6802      	ldr	r2, [r0, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	6002      	str	r2, [r0, #0]
 80067ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067d2:	009a      	lsls	r2, r3, #2
 80067d4:	4629      	mov	r1, r5
 80067d6:	4806      	ldr	r0, [pc, #24]	; (80067f0 <vTaskPriorityInherit+0xa0>)
 80067d8:	4410      	add	r0, r2
 80067da:	f7fe fdf7 	bl	80053cc <vListInsertEnd>
 80067de:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067e0:	4b02      	ldr	r3, [pc, #8]	; (80067ec <vTaskPriorityInherit+0x9c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067e8:	bd38      	pop	{r3, r4, r5, pc}
 80067ea:	4770      	bx	lr
 80067ec:	20000f78 	.word	0x20000f78
 80067f0:	20000ee4 	.word	0x20000ee4
 80067f4:	20000fd8 	.word	0x20000fd8

080067f8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d04b      	beq.n	8006894 <xTaskPriorityDisinherit+0x9c>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006800:	4a27      	ldr	r2, [pc, #156]	; (80068a0 <xTaskPriorityDisinherit+0xa8>)
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	4290      	cmp	r0, r2
 8006806:	d008      	beq.n	800681a <xTaskPriorityDisinherit+0x22>
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	e7fe      	b.n	8006818 <xTaskPriorityDisinherit+0x20>

			configASSERT( pxTCB->uxMutexesHeld );
 800681a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800681c:	b942      	cbnz	r2, 8006830 <xTaskPriorityDisinherit+0x38>
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	e7fe      	b.n	800682e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006830:	3a01      	subs	r2, #1
 8006832:	6482      	str	r2, [r0, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006834:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006836:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006838:	4288      	cmp	r0, r1
 800683a:	d02d      	beq.n	8006898 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800683c:	bb72      	cbnz	r2, 800689c <xTaskPriorityDisinherit+0xa4>
 800683e:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006840:	1d1d      	adds	r5, r3, #4
 8006842:	4628      	mov	r0, r5
 8006844:	f7fe fde8 	bl	8005418 <uxListRemove>
 8006848:	b970      	cbnz	r0, 8006868 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800684a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800684c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006850:	008b      	lsls	r3, r1, #2
 8006852:	4914      	ldr	r1, [pc, #80]	; (80068a4 <xTaskPriorityDisinherit+0xac>)
 8006854:	58cb      	ldr	r3, [r1, r3]
 8006856:	b93b      	cbnz	r3, 8006868 <xTaskPriorityDisinherit+0x70>
 8006858:	2301      	movs	r3, #1
 800685a:	fa03 f202 	lsl.w	r2, r3, r2
 800685e:	4912      	ldr	r1, [pc, #72]	; (80068a8 <xTaskPriorityDisinherit+0xb0>)
 8006860:	680b      	ldr	r3, [r1, #0]
 8006862:	ea23 0302 	bic.w	r3, r3, r2
 8006866:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006868:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800686a:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800686c:	f1c3 0207 	rsb	r2, r3, #7
 8006870:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006872:	2401      	movs	r4, #1
 8006874:	fa04 f003 	lsl.w	r0, r4, r3
 8006878:	490b      	ldr	r1, [pc, #44]	; (80068a8 <xTaskPriorityDisinherit+0xb0>)
 800687a:	680a      	ldr	r2, [r1, #0]
 800687c:	4302      	orrs	r2, r0
 800687e:	600a      	str	r2, [r1, #0]
 8006880:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006884:	009a      	lsls	r2, r3, #2
 8006886:	4629      	mov	r1, r5
 8006888:	4806      	ldr	r0, [pc, #24]	; (80068a4 <xTaskPriorityDisinherit+0xac>)
 800688a:	4410      	add	r0, r2
 800688c:	f7fe fd9e 	bl	80053cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006890:	4620      	mov	r0, r4
 8006892:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8006894:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8006896:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8006898:	2000      	movs	r0, #0
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	20000f78 	.word	0x20000f78
 80068a4:	20000ee4 	.word	0x20000ee4
 80068a8:	20000fd8 	.word	0x20000fd8

080068ac <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <pvTaskIncrementMutexHeldCount+0x18>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	b123      	cbz	r3, 80068bc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80068b2:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <pvTaskIncrementMutexHeldCount+0x18>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80068b8:	3301      	adds	r3, #1
 80068ba:	6493      	str	r3, [r2, #72]	; 0x48
		}

		return pxCurrentTCB;
 80068bc:	4b01      	ldr	r3, [pc, #4]	; (80068c4 <pvTaskIncrementMutexHeldCount+0x18>)
 80068be:	6818      	ldr	r0, [r3, #0]
	}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000f78 	.word	0x20000f78

080068c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	4607      	mov	r7, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	4615      	mov	r5, r2
 80068d0:	461e      	mov	r6, r3
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80068d2:	f000 fe0f 	bl	80074f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80068d6:	4b20      	ldr	r3, [pc, #128]	; (8006958 <xTaskNotifyWait+0x90>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d016      	beq.n	8006912 <xTaskNotifyWait+0x4a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80068e4:	4b1c      	ldr	r3, [pc, #112]	; (8006958 <xTaskNotifyWait+0x90>)
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80068ea:	ea20 0007 	bic.w	r0, r0, r7
 80068ee:	64d0      	str	r0, [r2, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80068f8:	b15e      	cbz	r6, 8006912 <xTaskNotifyWait+0x4a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068fa:	4611      	mov	r1, r2
 80068fc:	4630      	mov	r0, r6
 80068fe:	f7ff faab 	bl	8005e58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006906:	4b15      	ldr	r3, [pc, #84]	; (800695c <xTaskNotifyWait+0x94>)
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006912:	f000 fe11 	bl	8007538 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006916:	f000 fded 	bl	80074f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800691a:	b11d      	cbz	r5, 8006924 <xTaskNotifyWait+0x5c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800691c:	4b0e      	ldr	r3, [pc, #56]	; (8006958 <xTaskNotifyWait+0x90>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006922:	602b      	str	r3, [r5, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006924:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <xTaskNotifyWait+0x90>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b01      	cmp	r3, #1
 8006930:	d007      	beq.n	8006942 <xTaskNotifyWait+0x7a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <xTaskNotifyWait+0x90>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006938:	ea21 0104 	bic.w	r1, r1, r4
 800693c:	64d9      	str	r1, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800693e:	2401      	movs	r4, #1
 8006940:	e000      	b.n	8006944 <xTaskNotifyWait+0x7c>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006942:	2400      	movs	r4, #0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006944:	4b04      	ldr	r3, [pc, #16]	; (8006958 <xTaskNotifyWait+0x90>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800694e:	f000 fdf3 	bl	8007538 <vPortExitCritical>

		return xReturn;
	}
 8006952:	4620      	mov	r0, r4
 8006954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006956:	bf00      	nop
 8006958:	20000f78 	.word	0x20000f78
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006962:	b940      	cbnz	r0, 8006976 <xTaskGenericNotify+0x16>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	e7fe      	b.n	8006974 <xTaskGenericNotify+0x14>
 8006976:	4604      	mov	r4, r0
 8006978:	461f      	mov	r7, r3
 800697a:	4615      	mov	r5, r2
 800697c:	460e      	mov	r6, r1
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800697e:	f000 fdb9 	bl	80074f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006982:	b10f      	cbz	r7, 8006988 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006984:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006986:	603b      	str	r3, [r7, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006988:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800698c:	b2db      	uxtb	r3, r3

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800698e:	2202      	movs	r2, #2
 8006990:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50

			switch( eAction )
 8006994:	1e6a      	subs	r2, r5, #1
 8006996:	2a03      	cmp	r2, #3
 8006998:	d815      	bhi.n	80069c6 <xTaskGenericNotify+0x66>
 800699a:	e8df f002 	tbb	[pc, r2]
 800699e:	0702      	.short	0x0702
 80069a0:	0f0c      	.short	0x0f0c
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80069a2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069a4:	4316      	orrs	r6, r2
 80069a6:	64e6      	str	r6, [r4, #76]	; 0x4c
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80069a8:	2501      	movs	r5, #1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
 80069aa:	e00f      	b.n	80069cc <xTaskGenericNotify+0x6c>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80069ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069ae:	3201      	adds	r2, #1
 80069b0:	64e2      	str	r2, [r4, #76]	; 0x4c
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80069b2:	2501      	movs	r5, #1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
 80069b4:	e00a      	b.n	80069cc <xTaskGenericNotify+0x6c>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80069b6:	64e6      	str	r6, [r4, #76]	; 0x4c
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80069b8:	2501      	movs	r5, #1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
 80069ba:	e007      	b.n	80069cc <xTaskGenericNotify+0x6c>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d004      	beq.n	80069ca <xTaskGenericNotify+0x6a>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80069c0:	64e6      	str	r6, [r4, #76]	; 0x4c
#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80069c2:	2501      	movs	r5, #1
 80069c4:	e002      	b.n	80069cc <xTaskGenericNotify+0x6c>
 80069c6:	2501      	movs	r5, #1
 80069c8:	e000      	b.n	80069cc <xTaskGenericNotify+0x6c>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80069ca:	2500      	movs	r5, #0

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d12c      	bne.n	8006a2a <xTaskGenericNotify+0xca>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d0:	1d26      	adds	r6, r4, #4
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7fe fd20 	bl	8005418 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80069d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80069da:	2201      	movs	r2, #1
 80069dc:	fa02 f103 	lsl.w	r1, r2, r3
 80069e0:	4814      	ldr	r0, [pc, #80]	; (8006a34 <xTaskGenericNotify+0xd4>)
 80069e2:	6802      	ldr	r2, [r0, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	6002      	str	r2, [r0, #0]
 80069e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80069ec:	009a      	lsls	r2, r3, #2
 80069ee:	4631      	mov	r1, r6
 80069f0:	4811      	ldr	r0, [pc, #68]	; (8006a38 <xTaskGenericNotify+0xd8>)
 80069f2:	4410      	add	r0, r2
 80069f4:	f7fe fcea 	bl	80053cc <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80069f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069fa:	b143      	cbz	r3, 8006a0e <xTaskGenericNotify+0xae>
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	e7fe      	b.n	8006a0c <xTaskGenericNotify+0xac>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <xTaskGenericNotify+0xdc>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d907      	bls.n	8006a2a <xTaskGenericNotify+0xca>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <xTaskGenericNotify+0xe0>)
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006a2a:	f000 fd85 	bl	8007538 <vPortExitCritical>

		return xReturn;
	}
 8006a2e:	4628      	mov	r0, r5
 8006a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000fd8 	.word	0x20000fd8
 8006a38:	20000ee4 	.word	0x20000ee4
 8006a3c:	20000f78 	.word	0x20000f78
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a48:	9e08      	ldr	r6, [sp, #32]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006a4a:	b940      	cbnz	r0, 8006a5e <xTaskGenericNotifyFromISR+0x1a>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	e7fe      	b.n	8006a5c <xTaskGenericNotifyFromISR+0x18>
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4699      	mov	r9, r3
 8006a62:	4615      	mov	r5, r2
 8006a64:	4688      	mov	r8, r1
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a66:	f000 fe51 	bl	800770c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a6a:	f3ef 8711 	mrs	r7, BASEPRI
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
 8006a7e:	f1b9 0f00 	cmp.w	r9, #0
 8006a82:	d002      	beq.n	8006a8a <xTaskGenericNotifyFromISR+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006a84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006a86:	f8c9 3000 	str.w	r3, [r9]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006a8a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006a8e:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006a90:	2202      	movs	r2, #2
 8006a92:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50

			switch( eAction )
 8006a96:	1e6a      	subs	r2, r5, #1
 8006a98:	2a03      	cmp	r2, #3
 8006a9a:	d818      	bhi.n	8006ace <xTaskGenericNotifyFromISR+0x8a>
 8006a9c:	e8df f002 	tbb	[pc, r2]
 8006aa0:	110d0802 	.word	0x110d0802
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006aa4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006aa6:	ea42 0208 	orr.w	r2, r2, r8
 8006aaa:	64e2      	str	r2, [r4, #76]	; 0x4c

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006aac:	2501      	movs	r5, #1

			switch( eAction )
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;
 8006aae:	e011      	b.n	8006ad4 <xTaskGenericNotifyFromISR+0x90>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006ab0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	64e2      	str	r2, [r4, #76]	; 0x4c

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006ab6:	2501      	movs	r5, #1
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
					break;
 8006ab8:	e00c      	b.n	8006ad4 <xTaskGenericNotifyFromISR+0x90>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006aba:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006abe:	2501      	movs	r5, #1
					( pxTCB->ulNotifiedValue )++;
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;
 8006ac0:	e008      	b.n	8006ad4 <xTaskGenericNotifyFromISR+0x90>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d005      	beq.n	8006ad2 <xTaskGenericNotifyFromISR+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006ac6:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006aca:	2501      	movs	r5, #1
 8006acc:	e002      	b.n	8006ad4 <xTaskGenericNotifyFromISR+0x90>
 8006ace:	2501      	movs	r5, #1
 8006ad0:	e000      	b.n	8006ad4 <xTaskGenericNotifyFromISR+0x90>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8006ad2:	2500      	movs	r5, #0

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d135      	bne.n	8006b44 <xTaskGenericNotifyFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ada:	b143      	cbz	r3, 8006aee <xTaskGenericNotifyFromISR+0xaa>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	e7fe      	b.n	8006aec <xTaskGenericNotifyFromISR+0xa8>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aee:	4b18      	ldr	r3, [pc, #96]	; (8006b50 <xTaskGenericNotifyFromISR+0x10c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	b9ab      	cbnz	r3, 8006b20 <xTaskGenericNotifyFromISR+0xdc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006af4:	f104 0804 	add.w	r8, r4, #4
 8006af8:	4640      	mov	r0, r8
 8006afa:	f7fe fc8d 	bl	8005418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006afe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b00:	2201      	movs	r2, #1
 8006b02:	fa02 f103 	lsl.w	r1, r2, r3
 8006b06:	4813      	ldr	r0, [pc, #76]	; (8006b54 <xTaskGenericNotifyFromISR+0x110>)
 8006b08:	6802      	ldr	r2, [r0, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	6002      	str	r2, [r0, #0]
 8006b0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b12:	009a      	lsls	r2, r3, #2
 8006b14:	4641      	mov	r1, r8
 8006b16:	4810      	ldr	r0, [pc, #64]	; (8006b58 <xTaskGenericNotifyFromISR+0x114>)
 8006b18:	4410      	add	r0, r2
 8006b1a:	f7fe fc57 	bl	80053cc <vListInsertEnd>
 8006b1e:	e004      	b.n	8006b2a <xTaskGenericNotifyFromISR+0xe6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006b20:	f104 0118 	add.w	r1, r4, #24
 8006b24:	480d      	ldr	r0, [pc, #52]	; (8006b5c <xTaskGenericNotifyFromISR+0x118>)
 8006b26:	f7fe fc51 	bl	80053cc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <xTaskGenericNotifyFromISR+0x11c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d906      	bls.n	8006b44 <xTaskGenericNotifyFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006b36:	b116      	cbz	r6, 8006b3e <xTaskGenericNotifyFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	6033      	str	r3, [r6, #0]
 8006b3c:	e002      	b.n	8006b44 <xTaskGenericNotifyFromISR+0x100>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006b3e:	2201      	movs	r2, #1
 8006b40:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <xTaskGenericNotifyFromISR+0x120>)
 8006b42:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b44:	f387 8811 	msr	BASEPRI, r7
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
 8006b48:	4628      	mov	r0, r5
 8006b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000f70 	.word	0x20000f70
 8006b54:	20000fd8 	.word	0x20000fd8
 8006b58:	20000ee4 	.word	0x20000ee4
 8006b5c:	20000f7c 	.word	0x20000f7c
 8006b60:	20000f78 	.word	0x20000f78
 8006b64:	20000fdc 	.word	0x20000fdc

08006b68 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b68:	4b06      	ldr	r3, [pc, #24]	; (8006b84 <prvGetNextExpireTime+0x1c>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6813      	ldr	r3, [r2, #0]
 8006b6e:	fab3 f383 	clz	r3, r3
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b76:	b913      	cbnz	r3, 8006b7e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b78:	68d3      	ldr	r3, [r2, #12]
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b7e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000fe0 	.word	0x20000fe0

08006b88 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b88:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b8a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b8c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b8e:	4291      	cmp	r1, r2
 8006b90:	d80a      	bhi.n	8006ba8 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	6983      	ldr	r3, [r0, #24]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d211      	bcs.n	8006bbe <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b9a:	1d01      	adds	r1, r0, #4
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <prvInsertTimerInActiveList+0x40>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	f7fe fc20 	bl	80053e4 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d201      	bcs.n	8006bb0 <prvInsertTimerInActiveList+0x28>
 8006bac:	4299      	cmp	r1, r3
 8006bae:	d208      	bcs.n	8006bc2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bb0:	1d01      	adds	r1, r0, #4
 8006bb2:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <prvInsertTimerInActiveList+0x44>)
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	f7fe fc15 	bl	80053e4 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8006bba:	2000      	movs	r0, #0
 8006bbc:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bc2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006bc4:	bd08      	pop	{r3, pc}
 8006bc6:	bf00      	nop
 8006bc8:	200010d4 	.word	0x200010d4
 8006bcc:	20000fe0 	.word	0x20000fe0

08006bd0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bd0:	b530      	push	{r4, r5, lr}
 8006bd2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bd4:	f000 fc8e 	bl	80074f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bd8:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <prvCheckForValidListAndQueue+0x4c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	b9cb      	cbnz	r3, 8006c12 <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
 8006bde:	4d10      	ldr	r5, [pc, #64]	; (8006c20 <prvCheckForValidListAndQueue+0x50>)
 8006be0:	4628      	mov	r0, r5
 8006be2:	f7fe fbe3 	bl	80053ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006be6:	4c0f      	ldr	r4, [pc, #60]	; (8006c24 <prvCheckForValidListAndQueue+0x54>)
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7fe fbdf 	bl	80053ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bee:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <prvCheckForValidListAndQueue+0x58>)
 8006bf0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <prvCheckForValidListAndQueue+0x5c>)
 8006bf4:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue;
				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <prvCheckForValidListAndQueue+0x60>)
 8006bfc:	4a0d      	ldr	r2, [pc, #52]	; (8006c34 <prvCheckForValidListAndQueue+0x64>)
 8006bfe:	210c      	movs	r1, #12
 8006c00:	200a      	movs	r0, #10
 8006c02:	f7fe fd09 	bl	8005618 <xQueueGenericCreateStatic>
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <prvCheckForValidListAndQueue+0x4c>)
 8006c08:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c0a:	b110      	cbz	r0, 8006c12 <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c0c:	490a      	ldr	r1, [pc, #40]	; (8006c38 <prvCheckForValidListAndQueue+0x68>)
 8006c0e:	f7fe ffe9 	bl	8005be4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c12:	f000 fc91 	bl	8007538 <vPortExitCritical>
}
 8006c16:	b003      	add	sp, #12
 8006c18:	bd30      	pop	{r4, r5, pc}
 8006c1a:	bf00      	nop
 8006c1c:	200010d0 	.word	0x200010d0
 8006c20:	2000105c 	.word	0x2000105c
 8006c24:	20001070 	.word	0x20001070
 8006c28:	20000fe0 	.word	0x20000fe0
 8006c2c:	200010d4 	.word	0x200010d4
 8006c30:	20001084 	.word	0x20001084
 8006c34:	20000fe4 	.word	0x20000fe4
 8006c38:	0800ed38 	.word	0x0800ed38

08006c3c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c40:	9c07      	ldr	r4, [sp, #28]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006c42:	b941      	cbnz	r1, 8006c56 <prvInitialiseNewTimer+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	e7fe      	b.n	8006c54 <prvInitialiseNewTimer+0x18>
 8006c56:	460f      	mov	r7, r1

	if( pxNewTimer != NULL )
 8006c58:	b174      	cbz	r4, 8006c78 <prvInitialiseNewTimer+0x3c>
 8006c5a:	461d      	mov	r5, r3
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	4680      	mov	r8, r0
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006c60:	f7ff ffb6 	bl	8006bd0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006c64:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006c68:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006c6a:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006c6c:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006c72:	1d20      	adds	r0, r4, #4
 8006c74:	f7fe fba6 	bl	80053c4 <vListInitialiseItem>
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ); /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c80:	f7ff ffa6 	bl	8006bd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c84:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <xTimerCreateTimerTask+0x60>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	b1d3      	cbz	r3, 8006cc0 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c8a:	2400      	movs	r4, #0
 8006c8c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c8e:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c90:	aa07      	add	r2, sp, #28
 8006c92:	a906      	add	r1, sp, #24
 8006c94:	a805      	add	r0, sp, #20
 8006c96:	f7fa ff45 	bl	8001b24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c9a:	9b05      	ldr	r3, [sp, #20]
 8006c9c:	9302      	str	r3, [sp, #8]
 8006c9e:	9b06      	ldr	r3, [sp, #24]
 8006ca0:	9301      	str	r3, [sp, #4]
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	9a07      	ldr	r2, [sp, #28]
 8006caa:	490d      	ldr	r1, [pc, #52]	; (8006ce0 <xTimerCreateTimerTask+0x64>)
 8006cac:	480d      	ldr	r0, [pc, #52]	; (8006ce4 <xTimerCreateTimerTask+0x68>)
 8006cae:	f7ff f91f 	bl	8005ef0 <xTaskCreateStatic>
 8006cb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <xTimerCreateTimerTask+0x6c>)
 8006cb4:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cb6:	b908      	cbnz	r0, 8006cbc <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ); /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8006cb8:	4620      	mov	r0, r4
 8006cba:	e002      	b.n	8006cc2 <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
 8006cbc:	2001      	movs	r0, #1
 8006cbe:	e000      	b.n	8006cc2 <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ); /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
 8006cc0:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cc2:	b940      	cbnz	r0, 8006cd6 <xTimerCreateTimerTask+0x5a>
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	e7fe      	b.n	8006cd4 <xTimerCreateTimerTask+0x58>
	return xReturn;
}
 8006cd6:	b008      	add	sp, #32
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop
 8006cdc:	200010d0 	.word	0x200010d0
 8006ce0:	0800ed40 	.word	0x0800ed40
 8006ce4:	0800701d 	.word	0x0800701d
 8006ce8:	200010d8 	.word	0x200010d8

08006cec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf0:	b082      	sub	sp, #8
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	460e      	mov	r6, r1
 8006cf6:	4617      	mov	r7, r2
 8006cf8:	4698      	mov	r8, r3
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006cfa:	202c      	movs	r0, #44	; 0x2c
 8006cfc:	f000 fad8 	bl	80072b0 <pvPortMalloc>

		if( pxNewTimer != NULL )
 8006d00:	4604      	mov	r4, r0
 8006d02:	b158      	cbz	r0, 8006d1c <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d04:	9001      	str	r0, [sp, #4]
 8006d06:	9b08      	ldr	r3, [sp, #32]
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	4643      	mov	r3, r8
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	f7ff ff93 	bl	8006c3c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006d16:	2300      	movs	r3, #0
 8006d18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
	}
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	b002      	add	sp, #8
 8006d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d24 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d24:	b530      	push	{r4, r5, lr}
 8006d26:	b085      	sub	sp, #20
 8006d28:	9c09      	ldr	r4, [sp, #36]	; 0x24
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structures. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006d2a:	252c      	movs	r5, #44	; 0x2c
 8006d2c:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006d2e:	9d03      	ldr	r5, [sp, #12]
 8006d30:	2d2c      	cmp	r5, #44	; 0x2c
 8006d32:	d008      	beq.n	8006d46 <xTimerCreateStatic+0x22>
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	e7fe      	b.n	8006d44 <xTimerCreateStatic+0x20>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006d46:	b944      	cbnz	r4, 8006d5a <xTimerCreateStatic+0x36>
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	e7fe      	b.n	8006d58 <xTimerCreateStatic+0x34>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewTimer != NULL )
 8006d5a:	b13c      	cbz	r4, 8006d6c <xTimerCreateStatic+0x48>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d5c:	9401      	str	r4, [sp, #4]
 8006d5e:	9d08      	ldr	r5, [sp, #32]
 8006d60:	9500      	str	r5, [sp, #0]
 8006d62:	f7ff ff6b 	bl	8006c3c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
	}
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	b005      	add	sp, #20
 8006d70:	bd30      	pop	{r4, r5, pc}
 8006d72:	bf00      	nop

08006d74 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d74:	b940      	cbnz	r0, 8006d88 <xTimerGenericCommand+0x14>
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	e7fe      	b.n	8006d86 <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d88:	b530      	push	{r4, r5, lr}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	4615      	mov	r5, r2
 8006d8e:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d90:	4a12      	ldr	r2, [pc, #72]	; (8006ddc <xTimerGenericCommand+0x68>)
 8006d92:	6810      	ldr	r0, [r2, #0]
 8006d94:	b1f0      	cbz	r0, 8006dd4 <xTimerGenericCommand+0x60>
 8006d96:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d98:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d9a:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006d9c:	9403      	str	r4, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d9e:	2905      	cmp	r1, #5
 8006da0:	dc13      	bgt.n	8006dca <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006da2:	f7ff fcc5 	bl	8006730 <xTaskGetSchedulerState>
 8006da6:	2802      	cmp	r0, #2
 8006da8:	d107      	bne.n	8006dba <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006daa:	2300      	movs	r3, #0
 8006dac:	9a08      	ldr	r2, [sp, #32]
 8006dae:	a901      	add	r1, sp, #4
 8006db0:	480a      	ldr	r0, [pc, #40]	; (8006ddc <xTimerGenericCommand+0x68>)
 8006db2:	6800      	ldr	r0, [r0, #0]
 8006db4:	f7fe fcae 	bl	8005714 <xQueueGenericSend>
 8006db8:	e00d      	b.n	8006dd6 <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dba:	2300      	movs	r3, #0
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	a901      	add	r1, sp, #4
 8006dc0:	4806      	ldr	r0, [pc, #24]	; (8006ddc <xTimerGenericCommand+0x68>)
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	f7fe fca6 	bl	8005714 <xQueueGenericSend>
 8006dc8:	e005      	b.n	8006dd6 <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dca:	2300      	movs	r3, #0
 8006dcc:	a901      	add	r1, sp, #4
 8006dce:	f7fe fd69 	bl	80058a4 <xQueueGenericSendFromISR>
 8006dd2:	e000      	b.n	8006dd6 <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
 8006dd4:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8006dd6:	b005      	add	sp, #20
 8006dd8:	bd30      	pop	{r4, r5, pc}
 8006dda:	bf00      	nop
 8006ddc:	200010d0 	.word	0x200010d0

08006de0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006de4:	e029      	b.n	8006e3a <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dea:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dec:	1d25      	adds	r5, r4, #4
 8006dee:	4628      	mov	r0, r5
 8006df0:	f7fe fb12 	bl	8005418 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df6:	4620      	mov	r0, r4
 8006df8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dfa:	69e3      	ldr	r3, [r4, #28]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d11c      	bne.n	8006e3a <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e00:	69a3      	ldr	r3, [r4, #24]
 8006e02:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8006e04:	429e      	cmp	r6, r3
 8006e06:	d207      	bcs.n	8006e18 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e08:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e0a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <prvSwitchTimerLists+0x74>)
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f7fe fae7 	bl	80053e4 <vListInsert>
 8006e16:	e010      	b.n	8006e3a <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e18:	2100      	movs	r1, #0
 8006e1a:	9100      	str	r1, [sp, #0]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4632      	mov	r2, r6
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7ff ffa7 	bl	8006d74 <xTimerGenericCommand>
				configASSERT( xResult );
 8006e26:	b940      	cbnz	r0, 8006e3a <prvSwitchTimerLists+0x5a>
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	e7fe      	b.n	8006e38 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <prvSwitchTimerLists+0x74>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	d1d0      	bne.n	8006de6 <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8006e44:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <prvSwitchTimerLists+0x78>)
 8006e46:	6810      	ldr	r0, [r2, #0]
 8006e48:	4902      	ldr	r1, [pc, #8]	; (8006e54 <prvSwitchTimerLists+0x74>)
 8006e4a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006e4c:	6013      	str	r3, [r2, #0]
}
 8006e4e:	b002      	add	sp, #8
 8006e50:	bd70      	pop	{r4, r5, r6, pc}
 8006e52:	bf00      	nop
 8006e54:	20000fe0 	.word	0x20000fe0
 8006e58:	200010d4 	.word	0x200010d4

08006e5c <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_INITIALIZED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e60:	f7ff f976 	bl	8006150 <xTaskGetTickCount>
 8006e64:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <prvSampleTimeNow+0x28>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4298      	cmp	r0, r3
 8006e6c:	d204      	bcs.n	8006e78 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
 8006e6e:	f7ff ffb7 	bl	8006de0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e72:	2301      	movs	r3, #1
 8006e74:	602b      	str	r3, [r5, #0]
 8006e76:	e001      	b.n	8006e7c <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
 8006e7c:	4b01      	ldr	r3, [pc, #4]	; (8006e84 <prvSampleTimeNow+0x28>)
 8006e7e:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
 8006e80:	4620      	mov	r0, r4
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	200010cc 	.word	0x200010cc

08006e88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e90:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <prvProcessExpiredTimer+0x58>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e98:	1d20      	adds	r0, r4, #4
 8006e9a:	f7fe fabd 	bl	8005418 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e9e:	69e3      	ldr	r3, [r4, #28]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d118      	bne.n	8006ed6 <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ea4:	69a1      	ldr	r1, [r4, #24]
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4429      	add	r1, r5
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7ff fe6b 	bl	8006b88 <prvInsertTimerInActiveList>
 8006eb2:	b180      	cbz	r0, 8006ed6 <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	9100      	str	r1, [sp, #0]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7ff ff59 	bl	8006d74 <xTimerGenericCommand>
			configASSERT( xResult );
 8006ec2:	b940      	cbnz	r0, 8006ed6 <prvProcessExpiredTimer+0x4e>
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	e7fe      	b.n	8006ed4 <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed8:	4620      	mov	r0, r4
 8006eda:	4798      	blx	r3
}
 8006edc:	b002      	add	sp, #8
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	20000fe0 	.word	0x20000fe0

08006ee4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	4606      	mov	r6, r0
 8006eea:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006eec:	f7ff f928 	bl	8006140 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ef0:	a801      	add	r0, sp, #4
 8006ef2:	f7ff ffb3 	bl	8006e5c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8006ef6:	9b01      	ldr	r3, [sp, #4]
 8006ef8:	bb1b      	cbnz	r3, 8006f42 <prvProcessTimerOrBlockTask+0x5e>
 8006efa:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006efc:	b944      	cbnz	r4, 8006f10 <prvProcessTimerOrBlockTask+0x2c>
 8006efe:	42b0      	cmp	r0, r6
 8006f00:	d306      	bcc.n	8006f10 <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
 8006f02:	f7ff f9bd 	bl	8006280 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f06:	4629      	mov	r1, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f7ff ffbd 	bl	8006e88 <prvProcessExpiredTimer>
 8006f0e:	e01a      	b.n	8006f46 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8006f10:	b12c      	cbz	r4, 8006f1e <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f12:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <prvProcessTimerOrBlockTask+0x68>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681c      	ldr	r4, [r3, #0]
 8006f18:	fab4 f484 	clz	r4, r4
 8006f1c:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f1e:	4622      	mov	r2, r4
 8006f20:	1b71      	subs	r1, r6, r5
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvProcessTimerOrBlockTask+0x6c>)
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	f7fe fe71 	bl	8005c0c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8006f2a:	f7ff f9a9 	bl	8006280 <xTaskResumeAll>
 8006f2e:	b950      	cbnz	r0, 8006f46 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8006f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f34:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <prvProcessTimerOrBlockTask+0x70>)
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	e001      	b.n	8006f46 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8006f42:	f7ff f99d 	bl	8006280 <xTaskResumeAll>
		}
	}
}
 8006f46:	b002      	add	sp, #8
 8006f48:	bd70      	pop	{r4, r5, r6, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200010d4 	.word	0x200010d4
 8006f50:	200010d0 	.word	0x200010d0
 8006f54:	e000ed04 	.word	0xe000ed04

08006f58 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f58:	b530      	push	{r4, r5, lr}
 8006f5a:	b087      	sub	sp, #28
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f5c:	e050      	b.n	8007000 <prvProcessReceivedCommands+0xa8>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	db4d      	blt.n	8007000 <prvProcessReceivedCommands+0xa8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f64:	9c05      	ldr	r4, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8006f66:	6963      	ldr	r3, [r4, #20]
 8006f68:	b113      	cbz	r3, 8006f70 <prvProcessReceivedCommands+0x18>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f6a:	1d20      	adds	r0, r4, #4
 8006f6c:	f7fe fa54 	bl	8005418 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f70:	a802      	add	r0, sp, #8
 8006f72:	f7ff ff73 	bl	8006e5c <prvSampleTimeNow>

			switch( xMessage.xMessageID )
 8006f76:	9b03      	ldr	r3, [sp, #12]
 8006f78:	2b09      	cmp	r3, #9
 8006f7a:	d841      	bhi.n	8007000 <prvProcessReceivedCommands+0xa8>
 8006f7c:	e8df f003 	tbb	[pc, r3]
 8006f80:	40050505 	.word	0x40050505
 8006f84:	05053a27 	.word	0x05053a27
 8006f88:	2740      	.short	0x2740
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f8a:	9904      	ldr	r1, [sp, #16]
 8006f8c:	69a5      	ldr	r5, [r4, #24]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4602      	mov	r2, r0
 8006f92:	4429      	add	r1, r5
 8006f94:	4620      	mov	r0, r4
 8006f96:	f7ff fdf7 	bl	8006b88 <prvInsertTimerInActiveList>
 8006f9a:	b388      	cbz	r0, 8007000 <prvProcessReceivedCommands+0xa8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006fa2:	69e3      	ldr	r3, [r4, #28]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d12b      	bne.n	8007000 <prvProcessReceivedCommands+0xa8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fa8:	69a2      	ldr	r2, [r4, #24]
 8006faa:	2100      	movs	r1, #0
 8006fac:	9100      	str	r1, [sp, #0]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	9804      	ldr	r0, [sp, #16]
 8006fb2:	4402      	add	r2, r0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f7ff fedd 	bl	8006d74 <xTimerGenericCommand>
							configASSERT( xResult );
 8006fba:	bb08      	cbnz	r0, 8007000 <prvProcessReceivedCommands+0xa8>
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	e7fe      	b.n	8006fcc <prvProcessReceivedCommands+0x74>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fce:	9904      	ldr	r1, [sp, #16]
 8006fd0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fd2:	b941      	cbnz	r1, 8006fe6 <prvProcessReceivedCommands+0x8e>
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	e7fe      	b.n	8006fe4 <prvProcessReceivedCommands+0x8c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4401      	add	r1, r0
 8006fec:	4620      	mov	r0, r4
 8006fee:	f7ff fdcb 	bl	8006b88 <prvInsertTimerInActiveList>
					break;
 8006ff2:	e005      	b.n	8007000 <prvProcessReceivedCommands+0xa8>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ff4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006ff8:	b913      	cbnz	r3, 8007000 <prvProcessReceivedCommands+0xa8>
						{
							vPortFree( pxTimer );
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 f9da 	bl	80073b4 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007000:	2300      	movs	r3, #0
 8007002:	461a      	mov	r2, r3
 8007004:	a903      	add	r1, sp, #12
 8007006:	4804      	ldr	r0, [pc, #16]	; (8007018 <prvProcessReceivedCommands+0xc0>)
 8007008:	6800      	ldr	r0, [r0, #0]
 800700a:	f7fe fd1b 	bl	8005a44 <xQueueGenericReceive>
 800700e:	2800      	cmp	r0, #0
 8007010:	d1a5      	bne.n	8006f5e <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 8007012:	b007      	add	sp, #28
 8007014:	bd30      	pop	{r4, r5, pc}
 8007016:	bf00      	nop
 8007018:	200010d0 	.word	0x200010d0

0800701c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800701c:	b500      	push	{lr}
 800701e:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007020:	a801      	add	r0, sp, #4
 8007022:	f7ff fda1 	bl	8006b68 <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007026:	9901      	ldr	r1, [sp, #4]
 8007028:	f7ff ff5c 	bl	8006ee4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800702c:	f7ff ff94 	bl	8006f58 <prvProcessReceivedCommands>
 8007030:	e7f6      	b.n	8007020 <prvTimerTask+0x4>
 8007032:	bf00      	nop

08007034 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8007034:	2884      	cmp	r0, #132	; 0x84
 8007036:	d001      	beq.n	800703c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8007038:	3003      	adds	r0, #3
 800703a:	4770      	bx	lr
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800703c:	2000      	movs	r0, #0
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
  }
  
  return fpriority;
}
 800703e:	4770      	bx	lr

08007040 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007040:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 8007044:	3000      	adds	r0, #0
 8007046:	bf18      	it	ne
 8007048:	2001      	movne	r0, #1
 800704a:	4770      	bx	lr

0800704c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800704c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800704e:	f7ff f82b 	bl	80060a8 <vTaskStartScheduler>
  
  return osOK;
}
 8007052:	2000      	movs	r0, #0
 8007054:	bd08      	pop	{r3, pc}
 8007056:	bf00      	nop

08007058 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800705c:	b087      	sub	sp, #28
 800705e:	4604      	mov	r4, r0
 8007060:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007062:	6945      	ldr	r5, [r0, #20]
 8007064:	b1a5      	cbz	r5, 8007090 <osThreadCreate+0x38>
 8007066:	6986      	ldr	r6, [r0, #24]
 8007068:	b196      	cbz	r6, 8007090 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800706a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800706e:	f8d0 9000 	ldr.w	r9, [r0]
 8007072:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8007076:	f7ff ffdd 	bl	8007034 <makeFreeRtosPriority>
 800707a:	6922      	ldr	r2, [r4, #16]
 800707c:	9602      	str	r6, [sp, #8]
 800707e:	9501      	str	r5, [sp, #4]
 8007080:	9000      	str	r0, [sp, #0]
 8007082:	463b      	mov	r3, r7
 8007084:	4649      	mov	r1, r9
 8007086:	4640      	mov	r0, r8
 8007088:	f7fe ff32 	bl	8005ef0 <xTaskCreateStatic>
 800708c:	9005      	str	r0, [sp, #20]
 800708e:	e013      	b.n	80070b8 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007090:	6865      	ldr	r5, [r4, #4]
 8007092:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007094:	f8d4 8010 	ldr.w	r8, [r4, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007098:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800709c:	f7ff ffca 	bl	8007034 <makeFreeRtosPriority>
 80070a0:	ab05      	add	r3, sp, #20
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	9000      	str	r0, [sp, #0]
 80070a6:	463b      	mov	r3, r7
 80070a8:	fa1f f288 	uxth.w	r2, r8
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	f7fe ff4e 	bl	8005f50 <xTaskCreate>
 80070b4:	2801      	cmp	r0, #1
 80070b6:	d101      	bne.n	80070bc <osThreadCreate+0x64>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80070b8:	9805      	ldr	r0, [sp, #20]
 80070ba:	e000      	b.n	80070be <osThreadCreate+0x66>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
      return NULL;
 80070bc:	2000      	movs	r0, #0
    return NULL;
  }     
#endif
  
  return handle;
}
 80070be:	b007      	add	sp, #28
 80070c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080070c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070c4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070c6:	b908      	cbnz	r0, 80070cc <osDelay+0x8>
 80070c8:	2001      	movs	r0, #1
 80070ca:	e7ff      	b.n	80070cc <osDelay+0x8>
 80070cc:	f7ff f954 	bl	8006378 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80070d0:	2000      	movs	r0, #0
 80070d2:	bd08      	pop	{r3, pc}

080070d4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80070d4:	b510      	push	{r4, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80070da:	6844      	ldr	r4, [r0, #4]
 80070dc:	b164      	cbz	r4, 80070f8 <osTimerCreate+0x24>
    return xTimerCreateStatic((const char *)"",
 80070de:	2901      	cmp	r1, #1
 80070e0:	d101      	bne.n	80070e6 <osTimerCreate+0x12>
 80070e2:	2201      	movs	r2, #1
 80070e4:	e000      	b.n	80070e8 <osTimerCreate+0x14>
 80070e6:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80070e8:	6801      	ldr	r1, [r0, #0]
{
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
 80070ea:	9401      	str	r4, [sp, #4]
 80070ec:	9100      	str	r1, [sp, #0]
 80070ee:	2101      	movs	r1, #1
 80070f0:	4808      	ldr	r0, [pc, #32]	; (8007114 <osTimerCreate+0x40>)
 80070f2:	f7ff fe17 	bl	8006d24 <xTimerCreateStatic>
 80070f6:	e00a      	b.n	800710e <osTimerCreate+0x3a>
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);
  }
  else {
    return xTimerCreate((const char *)"",
 80070f8:	2901      	cmp	r1, #1
 80070fa:	d101      	bne.n	8007100 <osTimerCreate+0x2c>
 80070fc:	2201      	movs	r2, #1
 80070fe:	e000      	b.n	8007102 <osTimerCreate+0x2e>
 8007100:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8007102:	6801      	ldr	r1, [r0, #0]
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);
  }
  else {
    return xTimerCreate((const char *)"",
 8007104:	9100      	str	r1, [sp, #0]
 8007106:	2101      	movs	r1, #1
 8007108:	4802      	ldr	r0, [pc, #8]	; (8007114 <osTimerCreate+0x40>)
 800710a:	f7ff fdef 	bl	8006cec <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800710e:	b002      	add	sp, #8
 8007110:	bd10      	pop	{r4, pc}
 8007112:	bf00      	nop
 8007114:	0800ecf0 	.word	0x0800ecf0

08007118 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007118:	b530      	push	{r4, r5, lr}
 800711a:	b085      	sub	sp, #20
 800711c:	4605      	mov	r5, r0
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800711e:	2300      	movs	r3, #0
 8007120:	9303      	str	r3, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8007122:	460c      	mov	r4, r1
 8007124:	b901      	cbnz	r1, 8007128 <osTimerStart+0x10>
    ticks = 1;
 8007126:	2401      	movs	r4, #1
    
  if (inHandlerMode()) 
 8007128:	f7ff ff8a 	bl	8007040 <inHandlerMode>
 800712c:	b1a8      	cbz	r0, 800715a <osTimerStart+0x42>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800712e:	2300      	movs	r3, #0
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	ab03      	add	r3, sp, #12
 8007134:	4622      	mov	r2, r4
 8007136:	2109      	movs	r1, #9
 8007138:	4628      	mov	r0, r5
 800713a:	f7ff fe1b 	bl	8006d74 <xTimerGenericCommand>
 800713e:	2801      	cmp	r0, #1
 8007140:	d116      	bne.n	8007170 <osTimerStart+0x58>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	b1b3      	cbz	r3, 8007174 <osTimerStart+0x5c>
 8007146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714a:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <osTimerStart+0x68>)
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	f3bf 8f6f 	isb	sy
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
  osStatus result = osOK;
 8007156:	2000      	movs	r0, #0
 8007158:	e00f      	b.n	800717a <osTimerStart+0x62>
      portEND_SWITCHING_ISR(taskWoken);     
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800715a:	2300      	movs	r3, #0
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4622      	mov	r2, r4
 8007160:	2104      	movs	r1, #4
 8007162:	4628      	mov	r0, r5
 8007164:	f7ff fe06 	bl	8006d74 <xTimerGenericCommand>
 8007168:	2801      	cmp	r0, #1
 800716a:	d105      	bne.n	8007178 <osTimerStart+0x60>
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
  osStatus result = osOK;
 800716c:	2000      	movs	r0, #0
 800716e:	e004      	b.n	800717a <osTimerStart+0x62>
    
  if (inHandlerMode()) 
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
    {
      result = osErrorOS;
 8007170:	20ff      	movs	r0, #255	; 0xff
 8007172:	e002      	b.n	800717a <osTimerStart+0x62>
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
  osStatus result = osOK;
 8007174:	2000      	movs	r0, #0
 8007176:	e000      	b.n	800717a <osTimerStart+0x62>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 8007178:	20ff      	movs	r0, #255	; 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 800717a:	b005      	add	sp, #20
 800717c:	bd30      	pop	{r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007184:	b510      	push	{r4, lr}
 8007186:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007188:	6843      	ldr	r3, [r0, #4]
 800718a:	b14b      	cbz	r3, 80071a0 <osSemaphoreCreate+0x1c>
    if (count == 1) {
 800718c:	2901      	cmp	r1, #1
 800718e:	d117      	bne.n	80071c0 <osSemaphoreCreate+0x3c>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007190:	2203      	movs	r2, #3
 8007192:	9200      	str	r2, [sp, #0]
 8007194:	2200      	movs	r2, #0
 8007196:	4611      	mov	r1, r2
 8007198:	2001      	movs	r0, #1
 800719a:	f7fe fa3d 	bl	8005618 <xQueueGenericCreateStatic>
 800719e:	e013      	b.n	80071c8 <osSemaphoreCreate+0x44>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80071a0:	2901      	cmp	r1, #1
 80071a2:	d10f      	bne.n	80071c4 <osSemaphoreCreate+0x40>
      vSemaphoreCreateBinary(sema);
 80071a4:	2203      	movs	r2, #3
 80071a6:	2100      	movs	r1, #0
 80071a8:	2001      	movs	r0, #1
 80071aa:	f7fe fa8b 	bl	80056c4 <xQueueGenericCreate>
 80071ae:	4604      	mov	r4, r0
 80071b0:	b150      	cbz	r0, 80071c8 <osSemaphoreCreate+0x44>
 80071b2:	2300      	movs	r3, #0
 80071b4:	461a      	mov	r2, r3
 80071b6:	4619      	mov	r1, r3
 80071b8:	f7fe faac 	bl	8005714 <xQueueGenericSend>
      return sema;
 80071bc:	4620      	mov	r0, r4
 80071be:	e003      	b.n	80071c8 <osSemaphoreCreate+0x44>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80071c0:	2000      	movs	r0, #0
 80071c2:	e001      	b.n	80071c8 <osSemaphoreCreate+0x44>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80071c4:	2000      	movs	r0, #0
 80071c6:	e7ff      	b.n	80071c8 <osSemaphoreCreate+0x44>
#else
    return NULL;
#endif
  }
#endif
}
 80071c8:	b002      	add	sp, #8
 80071ca:	bd10      	pop	{r4, pc}

080071cc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80071cc:	b510      	push	{r4, lr}
 80071ce:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80071d0:	6882      	ldr	r2, [r0, #8]
 80071d2:	b142      	cbz	r2, 80071e6 <osMessageCreate+0x1a>
 80071d4:	68c3      	ldr	r3, [r0, #12]
 80071d6:	b133      	cbz	r3, 80071e6 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80071d8:	6841      	ldr	r1, [r0, #4]
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	2400      	movs	r4, #0
 80071de:	9400      	str	r4, [sp, #0]
 80071e0:	f7fe fa1a 	bl	8005618 <xQueueGenericCreateStatic>
 80071e4:	e004      	b.n	80071f0 <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80071e6:	2200      	movs	r2, #0
 80071e8:	6841      	ldr	r1, [r0, #4]
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	f7fe fa6a 	bl	80056c4 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80071f0:	b002      	add	sp, #8
 80071f2:	bd10      	pop	{r4, pc}

080071f4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071f4:	4a12      	ldr	r2, [pc, #72]	; (8007240 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071f6:	f012 0f07 	tst.w	r2, #7
 80071fa:	d007      	beq.n	800720c <prvHeapInit+0x18>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071fc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071fe:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007202:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8007206:	4413      	add	r3, r2
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007208:	460a      	mov	r2, r1
 800720a:	e001      	b.n	8007210 <prvHeapInit+0x1c>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800720c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007210:	480c      	ldr	r0, [pc, #48]	; (8007244 <prvHeapInit+0x50>)
 8007212:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007214:	2100      	movs	r1, #0
 8007216:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007218:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800721a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800721c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007220:	4809      	ldr	r0, [pc, #36]	; (8007248 <prvHeapInit+0x54>)
 8007222:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007224:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007226:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007228:	1a99      	subs	r1, r3, r2
 800722a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800722c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800722e:	4b07      	ldr	r3, [pc, #28]	; (800724c <prvHeapInit+0x58>)
 8007230:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007232:	4b07      	ldr	r3, [pc, #28]	; (8007250 <prvHeapInit+0x5c>)
 8007234:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007236:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <prvHeapInit+0x60>)
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	4770      	bx	lr
 8007240:	200010ec 	.word	0x200010ec
 8007244:	200010e4 	.word	0x200010e4
 8007248:	200010e0 	.word	0x200010e0
 800724c:	20004cf0 	.word	0x20004cf0
 8007250:	200010dc 	.word	0x200010dc
 8007254:	20004cec 	.word	0x20004cec

08007258 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007258:	4b13      	ldr	r3, [pc, #76]	; (80072a8 <prvInsertBlockIntoFreeList+0x50>)
 800725a:	e000      	b.n	800725e <prvInsertBlockIntoFreeList+0x6>
 800725c:	4613      	mov	r3, r2
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4282      	cmp	r2, r0
 8007262:	d3fb      	bcc.n	800725c <prvInsertBlockIntoFreeList+0x4>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007264:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007266:	685c      	ldr	r4, [r3, #4]
 8007268:	1919      	adds	r1, r3, r4
 800726a:	4288      	cmp	r0, r1
 800726c:	d103      	bne.n	8007276 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800726e:	6841      	ldr	r1, [r0, #4]
 8007270:	4421      	add	r1, r4
 8007272:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007274:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007276:	6844      	ldr	r4, [r0, #4]
 8007278:	1901      	adds	r1, r0, r4
 800727a:	428a      	cmp	r2, r1
 800727c:	d10c      	bne.n	8007298 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800727e:	490b      	ldr	r1, [pc, #44]	; (80072ac <prvInsertBlockIntoFreeList+0x54>)
 8007280:	6809      	ldr	r1, [r1, #0]
 8007282:	428a      	cmp	r2, r1
 8007284:	d006      	beq.n	8007294 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007286:	6852      	ldr	r2, [r2, #4]
 8007288:	4422      	add	r2, r4
 800728a:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	6002      	str	r2, [r0, #0]
 8007292:	e002      	b.n	800729a <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007294:	6001      	str	r1, [r0, #0]
 8007296:	e000      	b.n	800729a <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007298:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800729a:	4298      	cmp	r0, r3
 800729c:	d000      	beq.n	80072a0 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800729e:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	200010e4 	.word	0x200010e4
 80072ac:	200010e0 	.word	0x200010e0

080072b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80072b4:	f7fe ff44 	bl	8006140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072b8:	4b39      	ldr	r3, [pc, #228]	; (80073a0 <pvPortMalloc+0xf0>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	b90b      	cbnz	r3, 80072c2 <pvPortMalloc+0x12>
		{
			prvHeapInit();
 80072be:	f7ff ff99 	bl	80071f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072c2:	4b38      	ldr	r3, [pc, #224]	; (80073a4 <pvPortMalloc+0xf4>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	421c      	tst	r4, r3
 80072c8:	d153      	bne.n	8007372 <pvPortMalloc+0xc2>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072ca:	b194      	cbz	r4, 80072f2 <pvPortMalloc+0x42>
			{
				xWantedSize += xHeapStructSize;
 80072cc:	3408      	adds	r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072ce:	f014 0f07 	tst.w	r4, #7
 80072d2:	d00e      	beq.n	80072f2 <pvPortMalloc+0x42>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072d4:	f024 0407 	bic.w	r4, r4, #7
 80072d8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072da:	f004 0307 	and.w	r3, r4, #7
 80072de:	b143      	cbz	r3, 80072f2 <pvPortMalloc+0x42>
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	e7fe      	b.n	80072f0 <pvPortMalloc+0x40>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d03f      	beq.n	8007376 <pvPortMalloc+0xc6>
 80072f6:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <pvPortMalloc+0xf8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	429c      	cmp	r4, r3
 80072fc:	d83d      	bhi.n	800737a <pvPortMalloc+0xca>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80072fe:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <pvPortMalloc+0xfc>)
 8007300:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007302:	e001      	b.n	8007308 <pvPortMalloc+0x58>
				{
					pxPreviousBlock = pxBlock;
 8007304:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8007306:	4615      	mov	r5, r2
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007308:	686a      	ldr	r2, [r5, #4]
 800730a:	4294      	cmp	r4, r2
 800730c:	d902      	bls.n	8007314 <pvPortMalloc+0x64>
 800730e:	682a      	ldr	r2, [r5, #0]
 8007310:	2a00      	cmp	r2, #0
 8007312:	d1f7      	bne.n	8007304 <pvPortMalloc+0x54>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007314:	4a22      	ldr	r2, [pc, #136]	; (80073a0 <pvPortMalloc+0xf0>)
 8007316:	6812      	ldr	r2, [r2, #0]
 8007318:	4295      	cmp	r5, r2
 800731a:	d030      	beq.n	800737e <pvPortMalloc+0xce>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800731c:	681e      	ldr	r6, [r3, #0]
 800731e:	3608      	adds	r6, #8

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007320:	682a      	ldr	r2, [r5, #0]
 8007322:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007324:	686b      	ldr	r3, [r5, #4]
 8007326:	1b1b      	subs	r3, r3, r4
 8007328:	2b10      	cmp	r3, #16
 800732a:	d910      	bls.n	800734e <pvPortMalloc+0x9e>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800732c:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800732e:	f010 0f07 	tst.w	r0, #7
 8007332:	d008      	beq.n	8007346 <pvPortMalloc+0x96>
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	e7fe      	b.n	8007344 <pvPortMalloc+0x94>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007346:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007348:	606c      	str	r4, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800734a:	f7ff ff85 	bl	8007258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800734e:	686a      	ldr	r2, [r5, #4]
 8007350:	4915      	ldr	r1, [pc, #84]	; (80073a8 <pvPortMalloc+0xf8>)
 8007352:	680b      	ldr	r3, [r1, #0]
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	600b      	str	r3, [r1, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007358:	4915      	ldr	r1, [pc, #84]	; (80073b0 <pvPortMalloc+0x100>)
 800735a:	6809      	ldr	r1, [r1, #0]
 800735c:	428b      	cmp	r3, r1
 800735e:	d201      	bcs.n	8007364 <pvPortMalloc+0xb4>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007360:	4913      	ldr	r1, [pc, #76]	; (80073b0 <pvPortMalloc+0x100>)
 8007362:	600b      	str	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <pvPortMalloc+0xf4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	431a      	orrs	r2, r3
 800736a:	606a      	str	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	602b      	str	r3, [r5, #0]
 8007370:	e006      	b.n	8007380 <pvPortMalloc+0xd0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007372:	2600      	movs	r6, #0
 8007374:	e004      	b.n	8007380 <pvPortMalloc+0xd0>
 8007376:	2600      	movs	r6, #0
 8007378:	e002      	b.n	8007380 <pvPortMalloc+0xd0>
 800737a:	2600      	movs	r6, #0
 800737c:	e000      	b.n	8007380 <pvPortMalloc+0xd0>
 800737e:	2600      	movs	r6, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007380:	f7fe ff7e 	bl	8006280 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007384:	f016 0f07 	tst.w	r6, #7
 8007388:	d008      	beq.n	800739c <pvPortMalloc+0xec>
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	e7fe      	b.n	800739a <pvPortMalloc+0xea>
	return pvReturn;
}
 800739c:	4630      	mov	r0, r6
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	200010e0 	.word	0x200010e0
 80073a4:	20004cec 	.word	0x20004cec
 80073a8:	200010dc 	.word	0x200010dc
 80073ac:	200010e4 	.word	0x200010e4
 80073b0:	20004cf0 	.word	0x20004cf0

080073b4 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80073b4:	b3a0      	cbz	r0, 8007420 <vPortFree+0x6c>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073b6:	b538      	push	{r3, r4, r5, lr}
 80073b8:	4603      	mov	r3, r0

	if( pv != NULL )
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073ba:	f1a0 0508 	sub.w	r5, r0, #8

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073be:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80073c2:	4918      	ldr	r1, [pc, #96]	; (8007424 <vPortFree+0x70>)
 80073c4:	6809      	ldr	r1, [r1, #0]
 80073c6:	ea12 0401 	ands.w	r4, r2, r1
 80073ca:	d108      	bne.n	80073de <vPortFree+0x2a>
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	e7fe      	b.n	80073dc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073de:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80073e2:	b140      	cbz	r0, 80073f6 <vPortFree+0x42>
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	e7fe      	b.n	80073f4 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073f6:	b194      	cbz	r4, 800741e <vPortFree+0x6a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073f8:	b988      	cbnz	r0, 800741e <vPortFree+0x6a>
 80073fa:	461c      	mov	r4, r3
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073fc:	ea22 0201 	bic.w	r2, r2, r1
 8007400:	f843 2c04 	str.w	r2, [r3, #-4]

				vTaskSuspendAll();
 8007404:	f7fe fe9c 	bl	8006140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007408:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800740c:	4a06      	ldr	r2, [pc, #24]	; (8007428 <vPortFree+0x74>)
 800740e:	6811      	ldr	r1, [r2, #0]
 8007410:	440b      	add	r3, r1
 8007412:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007414:	4628      	mov	r0, r5
 8007416:	f7ff ff1f 	bl	8007258 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800741a:	f7fe ff31 	bl	8006280 <xTaskResumeAll>
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20004cec 	.word	0x20004cec
 8007428:	200010dc 	.word	0x200010dc

0800742c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return xFreeBytesRemaining;
}
 800742c:	4b01      	ldr	r3, [pc, #4]	; (8007434 <xPortGetFreeHeapSize+0x8>)
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	200010dc 	.word	0x200010dc

08007438 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007438:	4b0b      	ldr	r3, [pc, #44]	; (8007468 <prvTaskExitError+0x30>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d008      	beq.n	8007454 <prvTaskExitError+0x1c>
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	e7fe      	b.n	8007452 <prvTaskExitError+0x1a>
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	e7fe      	b.n	8007464 <prvTaskExitError+0x2c>
 8007466:	bf00      	nop
 8007468:	2000004c 	.word	0x2000004c

0800746c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800746c:	4806      	ldr	r0, [pc, #24]	; (8007488 <prvPortStartFirstTask+0x1c>)
 800746e:	6800      	ldr	r0, [r0, #0]
 8007470:	6800      	ldr	r0, [r0, #0]
 8007472:	f380 8808 	msr	MSP, r0
 8007476:	b662      	cpsie	i
 8007478:	b661      	cpsie	f
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	df00      	svc	0
 8007484:	bf00      	nop
 8007486:	0000      	.short	0x0000
 8007488:	e000ed08 	.word	0xe000ed08

0800748c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800748c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800749c <vPortEnableVFP+0x10>
 8007490:	6801      	ldr	r1, [r0, #0]
 8007492:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007496:	6001      	str	r1, [r0, #0]
 8007498:	4770      	bx	lr
 800749a:	0000      	.short	0x0000
 800749c:	e000ed88 	.word	0xe000ed88

080074a0 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074a4:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074a8:	f021 0101 	bic.w	r1, r1, #1
 80074ac:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <pxPortInitialiseStack+0x28>)
 80074b2:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074b6:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80074ba:	f06f 0302 	mvn.w	r3, #2
 80074be:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80074c2:	3844      	subs	r0, #68	; 0x44
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	08007439 	.word	0x08007439
 80074cc:	00000000 	.word	0x00000000

080074d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <pxCurrentTCBConst2>)
 80074d2:	6819      	ldr	r1, [r3, #0]
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f380 8809 	msr	PSP, r0
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8811 	msr	BASEPRI, r0
 80074ea:	4770      	bx	lr
 80074ec:	f3af 8000 	nop.w

080074f0 <pxCurrentTCBConst2>:
 80074f0:	20000f78 	.word	0x20000f78

080074f4 <vPortEnterCritical>:
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007504:	4a0a      	ldr	r2, [pc, #40]	; (8007530 <vPortEnterCritical+0x3c>)
 8007506:	6813      	ldr	r3, [r2, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800750c:	2b01      	cmp	r3, #1
 800750e:	d10d      	bne.n	800752c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007510:	4b08      	ldr	r3, [pc, #32]	; (8007534 <vPortEnterCritical+0x40>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007518:	d008      	beq.n	800752c <vPortEnterCritical+0x38>
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	e7fe      	b.n	800752a <vPortEnterCritical+0x36>
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	2000004c 	.word	0x2000004c
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <vPortExitCritical+0x28>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	b943      	cbnz	r3, 8007550 <vPortExitCritical+0x18>
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	e7fe      	b.n	800754e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007550:	3b01      	subs	r3, #1
 8007552:	4a03      	ldr	r2, [pc, #12]	; (8007560 <vPortExitCritical+0x28>)
 8007554:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007556:	b90b      	cbnz	r3, 800755c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	2000004c 	.word	0x2000004c
	...

08007570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007570:	f3ef 8009 	mrs	r0, PSP
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <pxCurrentTCBConst>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	f01e 0f10 	tst.w	lr, #16
 8007580:	bf08      	it	eq
 8007582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	6010      	str	r0, [r2, #0]
 800758c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8007590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007594:	f380 8811 	msr	BASEPRI, r0
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f7fe ff12 	bl	80063c8 <vTaskSwitchContext>
 80075a4:	f04f 0000 	mov.w	r0, #0
 80075a8:	f380 8811 	msr	BASEPRI, r0
 80075ac:	bc08      	pop	{r3}
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	6808      	ldr	r0, [r1, #0]
 80075b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b6:	f01e 0f10 	tst.w	lr, #16
 80075ba:	bf08      	it	eq
 80075bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80075c0:	f380 8809 	msr	PSP, r0
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	f3af 8000 	nop.w

080075d0 <pxCurrentTCBConst>:
 80075d0:	20000f78 	.word	0x20000f78

080075d4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075d4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075e6:	f7fe fdb9 	bl	800615c <xTaskIncrementTick>
 80075ea:	b118      	cbz	r0, 80075f4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f0:	4b02      	ldr	r3, [pc, #8]	; (80075fc <SysTick_Handler+0x28>)
 80075f2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075f4:	2300      	movs	r3, #0
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	bd08      	pop	{r3, pc}
 80075fc:	e000ed04 	.word	0xe000ed04

08007600 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007600:	4b04      	ldr	r3, [pc, #16]	; (8007614 <vPortSetupTimerInterrupt+0x14>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	0a5b      	lsrs	r3, r3, #9
 8007606:	3b01      	subs	r3, #1
 8007608:	4a03      	ldr	r2, [pc, #12]	; (8007618 <vPortSetupTimerInterrupt+0x18>)
 800760a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800760c:	2207      	movs	r2, #7
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <vPortSetupTimerInterrupt+0x1c>)
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	4770      	bx	lr
 8007614:	20000048 	.word	0x20000048
 8007618:	e000e014 	.word	0xe000e014
 800761c:	e000e010 	.word	0xe000e010

08007620 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007620:	4b31      	ldr	r3, [pc, #196]	; (80076e8 <xPortStartScheduler+0xc8>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b31      	ldr	r3, [pc, #196]	; (80076ec <xPortStartScheduler+0xcc>)
 8007626:	429a      	cmp	r2, r3
 8007628:	d108      	bne.n	800763c <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	e7fe      	b.n	800763a <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800763c:	4b2a      	ldr	r3, [pc, #168]	; (80076e8 <xPortStartScheduler+0xc8>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	4b2b      	ldr	r3, [pc, #172]	; (80076f0 <xPortStartScheduler+0xd0>)
 8007642:	429a      	cmp	r2, r3
 8007644:	d108      	bne.n	8007658 <xPortStartScheduler+0x38>
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	e7fe      	b.n	8007656 <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007658:	b500      	push	{lr}
 800765a:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800765c:	4b25      	ldr	r3, [pc, #148]	; (80076f4 <xPortStartScheduler+0xd4>)
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007664:	22ff      	movs	r2, #255	; 0xff
 8007666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007670:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007678:	4a1f      	ldr	r2, [pc, #124]	; (80076f8 <xPortStartScheduler+0xd8>)
 800767a:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800767c:	2207      	movs	r2, #7
 800767e:	4b1f      	ldr	r3, [pc, #124]	; (80076fc <xPortStartScheduler+0xdc>)
 8007680:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007682:	e009      	b.n	8007698 <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
 8007684:	4a1d      	ldr	r2, [pc, #116]	; (80076fc <xPortStartScheduler+0xdc>)
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	3b01      	subs	r3, #1
 800768a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800768c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007698:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800769c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80076a0:	d1f0      	bne.n	8007684 <xPortStartScheduler+0x64>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076a2:	4a16      	ldr	r2, [pc, #88]	; (80076fc <xPortStartScheduler+0xdc>)
 80076a4:	6813      	ldr	r3, [r2, #0]
 80076a6:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <xPortStartScheduler+0xd4>)
 80076b4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076b6:	4b12      	ldr	r3, [pc, #72]	; (8007700 <xPortStartScheduler+0xe0>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80076be:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80076c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076c8:	f7ff ff9a 	bl	8007600 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076cc:	2200      	movs	r2, #0
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <xPortStartScheduler+0xe4>)
 80076d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076d2:	f7ff fedb 	bl	800748c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076d6:	4a0c      	ldr	r2, [pc, #48]	; (8007708 <xPortStartScheduler+0xe8>)
 80076d8:	6813      	ldr	r3, [r2, #0]
 80076da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076de:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076e0:	f7ff fec4 	bl	800746c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80076e4:	f7ff fea8 	bl	8007438 <prvTaskExitError>
 80076e8:	e000ed00 	.word	0xe000ed00
 80076ec:	410fc271 	.word	0x410fc271
 80076f0:	410fc270 	.word	0x410fc270
 80076f4:	e000e400 	.word	0xe000e400
 80076f8:	20004cf4 	.word	0x20004cf4
 80076fc:	20004cf8 	.word	0x20004cf8
 8007700:	e000ed20 	.word	0xe000ed20
 8007704:	2000004c 	.word	0x2000004c
 8007708:	e000ef34 	.word	0xe000ef34

0800770c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800770c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007710:	2b0f      	cmp	r3, #15
 8007712:	d90f      	bls.n	8007734 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007714:	4a10      	ldr	r2, [pc, #64]	; (8007758 <vPortValidateInterruptPriority+0x4c>)
 8007716:	5c9b      	ldrb	r3, [r3, r2]
 8007718:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800771a:	4a10      	ldr	r2, [pc, #64]	; (800775c <vPortValidateInterruptPriority+0x50>)
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	4293      	cmp	r3, r2
 8007720:	d208      	bcs.n	8007734 <vPortValidateInterruptPriority+0x28>
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	e7fe      	b.n	8007732 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007734:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <vPortValidateInterruptPriority+0x54>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800773c:	4a09      	ldr	r2, [pc, #36]	; (8007764 <vPortValidateInterruptPriority+0x58>)
 800773e:	6812      	ldr	r2, [r2, #0]
 8007740:	4293      	cmp	r3, r2
 8007742:	d908      	bls.n	8007756 <vPortValidateInterruptPriority+0x4a>
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	e7fe      	b.n	8007754 <vPortValidateInterruptPriority+0x48>
 8007756:	4770      	bx	lr
 8007758:	e000e3f0 	.word	0xe000e3f0
 800775c:	20004cf4 	.word	0x20004cf4
 8007760:	e000ed0c 	.word	0xe000ed0c
 8007764:	20004cf8 	.word	0x20004cf8

08007768 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007768:	b198      	cbz	r0, 8007792 <USBD_Init+0x2a>
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800776a:	b508      	push	{r3, lr}
 800776c:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800776e:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8007772:	b110      	cbz	r0, 800777a <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8007774:	2000      	movs	r0, #0
 8007776:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800777a:	b109      	cbz	r1, 8007780 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800777c:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8007780:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007782:	2301      	movs	r3, #1
 8007784:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8007788:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800778a:	f7fa fa93 	bl	8001cb4 <USBD_LL_Init>
  
  return USBD_OK; 
 800778e:	2000      	movs	r0, #0
 8007790:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8007792:	2002      	movs	r0, #2
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop

08007798 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8007798:	b119      	cbz	r1, 80077a2 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800779a:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800779e:	2000      	movs	r0, #0
 80077a0:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80077a2:	2002      	movs	r0, #2
  }
  
  return status;
}
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop

080077a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80077a8:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80077aa:	f7fa fab7 	bl	8001d1c <USBD_LL_Start>
  
  return USBD_OK;  
}
 80077ae:	2000      	movs	r0, #0
 80077b0:	bd08      	pop	{r3, pc}
 80077b2:	bf00      	nop

080077b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077b4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80077b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80077ba:	b123      	cbz	r3, 80077c6 <USBD_SetClassConfig+0x12>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4798      	blx	r3
 80077c0:	b118      	cbz	r0, 80077ca <USBD_SetClassConfig+0x16>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80077c2:	2002      	movs	r0, #2
 80077c4:	bd08      	pop	{r3, pc}
 80077c6:	2002      	movs	r0, #2
 80077c8:	bd08      	pop	{r3, pc}
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
    {
      ret = USBD_OK;
 80077ca:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 80077cc:	bd08      	pop	{r3, pc}
 80077ce:	bf00      	nop

080077d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077d0:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80077d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	4798      	blx	r3
  return USBD_OK;
}
 80077da:	2000      	movs	r0, #0
 80077dc:	bd08      	pop	{r3, pc}
 80077de:	bf00      	nop

080077e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077e4:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 f91d 	bl	8007a28 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80077ee:	2301      	movs	r3, #1
 80077f0:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80077f4:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80077f8:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80077fc:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8007800:	f001 031f 	and.w	r3, r1, #31
 8007804:	2b01      	cmp	r3, #1
 8007806:	d008      	beq.n	800781a <USBD_LL_SetupStage+0x3a>
 8007808:	b113      	cbz	r3, 8007810 <USBD_LL_SetupStage+0x30>
 800780a:	2b02      	cmp	r3, #2
 800780c:	d00a      	beq.n	8007824 <USBD_LL_SetupStage+0x44>
 800780e:	e00e      	b.n	800782e <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8007810:	4629      	mov	r1, r5
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fa84 	bl	8007d20 <USBD_StdDevReq>
    break;
 8007818:	e00e      	b.n	8007838 <USBD_LL_SetupStage+0x58>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800781a:	4629      	mov	r1, r5
 800781c:	4620      	mov	r0, r4
 800781e:	f000 faa3 	bl	8007d68 <USBD_StdItfReq>
    break;
 8007822:	e009      	b.n	8007838 <USBD_LL_SetupStage+0x58>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8007824:	4629      	mov	r1, r5
 8007826:	4620      	mov	r0, r4
 8007828:	f000 faba 	bl	8007da0 <USBD_StdEPReq>
    break;
 800782c:	e004      	b.n	8007838 <USBD_LL_SetupStage+0x58>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800782e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007832:	4620      	mov	r0, r4
 8007834:	f7fa faa4 	bl	8001d80 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8007838:	2000      	movs	r0, #0
 800783a:	bd38      	pop	{r3, r4, r5, pc}

0800783c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800783c:	b510      	push	{r4, lr}
 800783e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8007840:	bb11      	cbnz	r1, 8007888 <USBD_LL_DataOutStage+0x4c>
 8007842:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007844:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8007848:	2a03      	cmp	r2, #3
 800784a:	d128      	bne.n	800789e <USBD_LL_DataOutStage+0x62>
    {
      if(pep->rem_length > pep->maxpacket)
 800784c:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8007850:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8007854:	4291      	cmp	r1, r2
 8007856:	d90a      	bls.n	800786e <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8007858:	1a89      	subs	r1, r1, r2
 800785a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800785e:	428a      	cmp	r2, r1
 8007860:	bf28      	it	cs
 8007862:	460a      	movcs	r2, r1
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8007864:	b292      	uxth	r2, r2
 8007866:	4619      	mov	r1, r3
 8007868:	f000 fb6c 	bl	8007f44 <USBD_CtlContinueRx>
 800786c:	e017      	b.n	800789e <USBD_LL_DataOutStage+0x62>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800786e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	b123      	cbz	r3, 8007880 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007876:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800787a:	2a03      	cmp	r2, #3
 800787c:	d100      	bne.n	8007880 <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800787e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fb67 	bl	8007f54 <USBD_CtlSendStatus>
 8007886:	e00a      	b.n	800789e <USBD_LL_DataOutStage+0x62>
 8007888:	460a      	mov	r2, r1
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800788a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	b12b      	cbz	r3, 800789e <USBD_LL_DataOutStage+0x62>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007892:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8007896:	2903      	cmp	r1, #3
 8007898:	d101      	bne.n	800789e <USBD_LL_DataOutStage+0x62>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800789a:	4611      	mov	r1, r2
 800789c:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800789e:	2000      	movs	r0, #0
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	bf00      	nop

080078a4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80078a8:	2900      	cmp	r1, #0
 80078aa:	d143      	bne.n	8007934 <USBD_LL_DataInStage+0x90>
 80078ac:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80078ae:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80078b2:	2a02      	cmp	r2, #2
 80078b4:	d136      	bne.n	8007924 <USBD_LL_DataInStage+0x80>
    {
      if(pep->rem_length > pep->maxpacket)
 80078b6:	69c1      	ldr	r1, [r0, #28]
 80078b8:	6a02      	ldr	r2, [r0, #32]
 80078ba:	4291      	cmp	r1, r2
 80078bc:	d90c      	bls.n	80078d8 <USBD_LL_DataInStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80078be:	1a8a      	subs	r2, r1, r2
 80078c0:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80078c2:	b292      	uxth	r2, r2
 80078c4:	4619      	mov	r1, r3
 80078c6:	f000 fb25 	bl	8007f14 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80078ca:	2300      	movs	r3, #0
 80078cc:	461a      	mov	r2, r3
 80078ce:	4619      	mov	r1, r3
 80078d0:	4620      	mov	r0, r4
 80078d2:	f7fa faad 	bl	8001e30 <USBD_LL_PrepareReceive>
 80078d6:	e025      	b.n	8007924 <USBD_LL_DataInStage+0x80>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 80078d8:	6981      	ldr	r1, [r0, #24]
 80078da:	fbb1 f3f2 	udiv	r3, r1, r2
 80078de:	fb02 1313 	mls	r3, r2, r3, r1
 80078e2:	b993      	cbnz	r3, 800790a <USBD_LL_DataInStage+0x66>
 80078e4:	428a      	cmp	r2, r1
 80078e6:	d810      	bhi.n	800790a <USBD_LL_DataInStage+0x66>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 80078e8:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 80078ec:	4299      	cmp	r1, r3
 80078ee:	d20c      	bcs.n	800790a <USBD_LL_DataInStage+0x66>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80078f0:	2200      	movs	r2, #0
 80078f2:	4611      	mov	r1, r2
 80078f4:	f000 fb0e 	bl	8007f14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80078f8:	2100      	movs	r1, #0
 80078fa:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80078fe:	460b      	mov	r3, r1
 8007900:	460a      	mov	r2, r1
 8007902:	4620      	mov	r0, r4
 8007904:	f7fa fa94 	bl	8001e30 <USBD_LL_PrepareReceive>
 8007908:	e00c      	b.n	8007924 <USBD_LL_DataInStage+0x80>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800790a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	b12b      	cbz	r3, 800791e <USBD_LL_DataInStage+0x7a>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007912:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8007916:	2a03      	cmp	r2, #3
 8007918:	d101      	bne.n	800791e <USBD_LL_DataInStage+0x7a>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800791a:	4620      	mov	r0, r4
 800791c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fb24 	bl	8007f6c <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8007924:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8007928:	2b01      	cmp	r3, #1
 800792a:	d10e      	bne.n	800794a <USBD_LL_DataInStage+0xa6>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8007932:	e00a      	b.n	800794a <USBD_LL_DataInStage+0xa6>
 8007934:	460a      	mov	r2, r1
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8007936:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	b12b      	cbz	r3, 800794a <USBD_LL_DataInStage+0xa6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800793e:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8007942:	2903      	cmp	r1, #3
 8007944:	d101      	bne.n	800794a <USBD_LL_DataInStage+0xa6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8007946:	4611      	mov	r1, r2
 8007948:	4798      	blx	r3
  }  
  return USBD_OK;
}
 800794a:	2000      	movs	r0, #0
 800794c:	bd10      	pop	{r4, pc}
 800794e:	bf00      	nop

08007950 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	2200      	movs	r2, #0
 8007958:	4611      	mov	r1, r2
 800795a:	f7fa f9ef 	bl	8001d3c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800795e:	2540      	movs	r5, #64	; 0x40
 8007960:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8007964:	462b      	mov	r3, r5
 8007966:	2200      	movs	r2, #0
 8007968:	2180      	movs	r1, #128	; 0x80
 800796a:	4620      	mov	r0, r4
 800796c:	f7fa f9e6 	bl	8001d3c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007970:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007972:	2301      	movs	r3, #1
 8007974:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8007978:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800797c:	b12b      	cbz	r3, 800798a <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800797e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	7921      	ldrb	r1, [r4, #4]
 8007986:	4620      	mov	r0, r4
 8007988:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800798a:	2000      	movs	r0, #0
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	bf00      	nop

08007990 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007990:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8007992:	2000      	movs	r0, #0
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop

08007998 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8007998:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800799c:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80079a0:	2304      	movs	r3, #4
 80079a2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80079a6:	2000      	movs	r0, #0
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop

080079ac <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80079ac:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80079b0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80079b4:	2000      	movs	r0, #0
 80079b6:	4770      	bx	lr

080079b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80079b8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d104      	bne.n	80079cc <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80079c2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	b103      	cbz	r3, 80079cc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80079ca:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80079cc:	2000      	movs	r0, #0
 80079ce:	bd08      	pop	{r3, pc}

080079d0 <USBD_LL_IsoINIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 80079d0:	2000      	movs	r0, #0
 80079d2:	4770      	bx	lr

080079d4 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 80079d4:	2000      	movs	r0, #0
 80079d6:	4770      	bx	lr

080079d8 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80079d8:	2000      	movs	r0, #0
 80079da:	4770      	bx	lr

080079dc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80079dc:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079de:	2201      	movs	r2, #1
 80079e0:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80079e4:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80079e8:	6852      	ldr	r2, [r2, #4]
 80079ea:	7901      	ldrb	r1, [r0, #4]
 80079ec:	4790      	blx	r2
   
  return USBD_OK;
}
 80079ee:	2000      	movs	r0, #0
 80079f0:	bd08      	pop	{r3, pc}
 80079f2:	bf00      	nop

080079f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079f4:	4603      	mov	r3, r0
    uint8_t  len = 0;
 80079f6:	2000      	movs	r0, #0

    while (*buf != '\0') 
 80079f8:	e002      	b.n	8007a00 <USBD_GetLen+0xc>
    {
        len++;
 80079fa:	3001      	adds	r0, #1
 80079fc:	b2c0      	uxtb	r0, r0
        buf++;
 80079fe:	3301      	adds	r3, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	d1f9      	bne.n	80079fa <USBD_GetLen+0x6>
        len++;
        buf++;
    }

    return len;
}
 8007a06:	4770      	bx	lr

08007a08 <USBD_SetFeature>:
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a08:	884b      	ldrh	r3, [r1, #2]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d10b      	bne.n	8007a26 <USBD_SetFeature+0x1e>
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	4604      	mov	r4, r0

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
  {
    pdev->dev_remote_wakeup = 1;  
 8007a12:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8007a16:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 fa98 	bl	8007f54 <USBD_CtlSendStatus>
 8007a24:	bd10      	pop	{r4, pc}
 8007a26:	4770      	bx	lr

08007a28 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007a28:	780b      	ldrb	r3, [r1, #0]
 8007a2a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007a2c:	784b      	ldrb	r3, [r1, #1]
 8007a2e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007a30:	788b      	ldrb	r3, [r1, #2]
 8007a32:	78ca      	ldrb	r2, [r1, #3]
 8007a34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a38:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007a3a:	790b      	ldrb	r3, [r1, #4]
 8007a3c:	794a      	ldrb	r2, [r1, #5]
 8007a3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a42:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007a44:	798b      	ldrb	r3, [r1, #6]
 8007a46:	79ca      	ldrb	r2, [r1, #7]
 8007a48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007a4c:	80c3      	strh	r3, [r0, #6]
 8007a4e:	4770      	bx	lr

08007a50 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a50:	b510      	push	{r4, lr}
 8007a52:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8007a54:	2180      	movs	r1, #128	; 0x80
 8007a56:	f7fa f993 	bl	8001d80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f7fa f98f 	bl	8001d80 <USBD_LL_StallEP>
 8007a62:	bd10      	pop	{r4, pc}

08007a64 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8007a64:	b530      	push	{r4, r5, lr}
 8007a66:	b083      	sub	sp, #12
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8007a6c:	884a      	ldrh	r2, [r1, #2]
 8007a6e:	0a13      	lsrs	r3, r2, #8
 8007a70:	3b01      	subs	r3, #1
 8007a72:	2b06      	cmp	r3, #6
 8007a74:	d879      	bhi.n	8007b6a <USBD_GetDescriptor+0x106>
 8007a76:	e8df f003 	tbb	[pc, r3]
 8007a7a:	0c04      	.short	0x0c04
 8007a7c:	5c787820 	.word	0x5c787820
 8007a80:	69          	.byte	0x69
 8007a81:	00          	.byte	0x00
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a82:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f10d 0106 	add.w	r1, sp, #6
 8007a8c:	7c00      	ldrb	r0, [r0, #16]
 8007a8e:	4798      	blx	r3
    break;
 8007a90:	e06f      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8007a92:	7c03      	ldrb	r3, [r0, #16]
 8007a94:	b943      	cbnz	r3, 8007aa8 <USBD_GetDescriptor+0x44>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007a96:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	f10d 0006 	add.w	r0, sp, #6
 8007aa0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	7043      	strb	r3, [r0, #1]
 8007aa6:	e064      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007aa8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aae:	f10d 0006 	add.w	r0, sp, #6
 8007ab2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	7043      	strb	r3, [r0, #1]
 8007ab8:	e05b      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	2a05      	cmp	r2, #5
 8007abe:	d834      	bhi.n	8007b2a <USBD_GetDescriptor+0xc6>
 8007ac0:	e8df f002 	tbb	[pc, r2]
 8007ac4:	1b130b03 	.word	0x1b130b03
 8007ac8:	2b23      	.short	0x2b23
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8007aca:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f10d 0106 	add.w	r1, sp, #6
 8007ad4:	7c00      	ldrb	r0, [r0, #16]
 8007ad6:	4798      	blx	r3
      break;
 8007ad8:	e04b      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ada:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f10d 0106 	add.w	r1, sp, #6
 8007ae4:	7c00      	ldrb	r0, [r0, #16]
 8007ae6:	4798      	blx	r3
      break;
 8007ae8:	e043      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007aea:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f10d 0106 	add.w	r1, sp, #6
 8007af4:	7c00      	ldrb	r0, [r0, #16]
 8007af6:	4798      	blx	r3
      break;
 8007af8:	e03b      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007afa:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	f10d 0106 	add.w	r1, sp, #6
 8007b04:	7c00      	ldrb	r0, [r0, #16]
 8007b06:	4798      	blx	r3
      break;
 8007b08:	e033      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b0a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	f10d 0106 	add.w	r1, sp, #6
 8007b14:	7c00      	ldrb	r0, [r0, #16]
 8007b16:	4798      	blx	r3
      break;
 8007b18:	e02b      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b1a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	f10d 0106 	add.w	r1, sp, #6
 8007b24:	7c00      	ldrb	r0, [r0, #16]
 8007b26:	4798      	blx	r3
      break;
 8007b28:	e023      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	f7ff ff90 	bl	8007a50 <USBD_CtlError>
      return;
 8007b30:	e02d      	b.n	8007b8e <USBD_GetDescriptor+0x12a>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007b32:	7c03      	ldrb	r3, [r0, #16]
 8007b34:	b933      	cbnz	r3, 8007b44 <USBD_GetDescriptor+0xe0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b36:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3c:	f10d 0006 	add.w	r0, sp, #6
 8007b40:	4798      	blx	r3
      break;
 8007b42:	e016      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7ff ff83 	bl	8007a50 <USBD_CtlError>
      return;
 8007b4a:	e020      	b.n	8007b8e <USBD_GetDescriptor+0x12a>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007b4c:	7c03      	ldrb	r3, [r0, #16]
 8007b4e:	b943      	cbnz	r3, 8007b62 <USBD_GetDescriptor+0xfe>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b50:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	f10d 0006 	add.w	r0, sp, #6
 8007b5a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b5c:	2307      	movs	r3, #7
 8007b5e:	7043      	strb	r3, [r0, #1]
      break; 
 8007b60:	e007      	b.n	8007b72 <USBD_GetDescriptor+0x10e>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007b62:	4629      	mov	r1, r5
 8007b64:	f7ff ff74 	bl	8007a50 <USBD_CtlError>
      return;
 8007b68:	e011      	b.n	8007b8e <USBD_GetDescriptor+0x12a>
    }

  default: 
     USBD_CtlError(pdev , req);
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7ff ff70 	bl	8007a50 <USBD_CtlError>
    return;
 8007b70:	e00d      	b.n	8007b8e <USBD_GetDescriptor+0x12a>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8007b72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007b76:	b153      	cbz	r3, 8007b8e <USBD_GetDescriptor+0x12a>
 8007b78:	88ea      	ldrh	r2, [r5, #6]
 8007b7a:	b142      	cbz	r2, 8007b8e <USBD_GetDescriptor+0x12a>
  {
    
    len = MIN(len , req->wLength);
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bf28      	it	cs
 8007b80:	461a      	movcs	r2, r3
 8007b82:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 8007b86:	4601      	mov	r1, r0
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 f9b5 	bl	8007ef8 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8007b8e:	b003      	add	sp, #12
 8007b90:	bd30      	pop	{r4, r5, pc}
 8007b92:	bf00      	nop

08007b94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4604      	mov	r4, r0
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007b98:	888b      	ldrh	r3, [r1, #4]
 8007b9a:	b9e3      	cbnz	r3, 8007bd6 <USBD_SetAddress+0x42>
 8007b9c:	88cb      	ldrh	r3, [r1, #6]
 8007b9e:	b9d3      	cbnz	r3, 8007bd6 <USBD_SetAddress+0x42>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007ba0:	788d      	ldrb	r5, [r1, #2]
 8007ba2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007ba6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d102      	bne.n	8007bb4 <USBD_SetAddress+0x20>
    {
      USBD_CtlError(pdev , req);
 8007bae:	f7ff ff4f 	bl	8007a50 <USBD_CtlError>
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8007bb4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7fa f919 	bl	8001df0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 f9c8 	bl	8007f54 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8007bc4:	b11d      	cbz	r5, 8007bce <USBD_SetAddress+0x3a>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8007bd4:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7ff ff3a 	bl	8007a50 <USBD_CtlError>
 8007bdc:	bd38      	pop	{r3, r4, r5, pc}
 8007bde:	bf00      	nop

08007be0 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4604      	mov	r4, r0
 8007be4:	460d      	mov	r5, r1
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8007be6:	7889      	ldrb	r1, [r1, #2]
 8007be8:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <USBD_SetConfig+0xa4>)
 8007bea:	7019      	strb	r1, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8007bec:	2901      	cmp	r1, #1
 8007bee:	d903      	bls.n	8007bf8 <USBD_SetConfig+0x18>
  {            
     USBD_CtlError(pdev , req);                              
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7ff ff2d 	bl	8007a50 <USBD_CtlError>
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
  } 
  else 
  {
    switch (pdev->dev_state) 
 8007bf8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d002      	beq.n	8007c06 <USBD_SetConfig+0x26>
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d015      	beq.n	8007c30 <USBD_SetConfig+0x50>
 8007c04:	e039      	b.n	8007c7a <USBD_SetConfig+0x9a>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8007c06:	b181      	cbz	r1, 8007c2a <USBD_SetConfig+0x4a>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8007c08:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007c10:	f7ff fdd0 	bl	80077b4 <USBD_SetClassConfig>
 8007c14:	2802      	cmp	r0, #2
 8007c16:	d104      	bne.n	8007c22 <USBD_SetConfig+0x42>
        {
          USBD_CtlError(pdev , req);  
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f7ff ff18 	bl	8007a50 <USBD_CtlError>
          return;
 8007c20:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 f996 	bl	8007f54 <USBD_CtlSendStatus>
 8007c28:	bd38      	pop	{r3, r4, r5, pc}
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8007c2a:	f000 f993 	bl	8007f54 <USBD_CtlSendStatus>
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8007c30:	b949      	cbnz	r1, 8007c46 <USBD_SetConfig+0x66>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c32:	2302      	movs	r3, #2
 8007c34:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8007c38:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8007c3a:	f7ff fdc9 	bl	80077d0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f988 	bl	8007f54 <USBD_CtlSendStatus>
 8007c44:	bd38      	pop	{r3, r4, r5, pc}
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8007c46:	6843      	ldr	r3, [r0, #4]
 8007c48:	4299      	cmp	r1, r3
 8007c4a:	d013      	beq.n	8007c74 <USBD_SetConfig+0x94>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8007c4c:	b2d9      	uxtb	r1, r3
 8007c4e:	f7ff fdbf 	bl	80077d0 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8007c52:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <USBD_SetConfig+0xa4>)
 8007c54:	7819      	ldrb	r1, [r3, #0]
 8007c56:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7ff fdab 	bl	80077b4 <USBD_SetClassConfig>
 8007c5e:	2802      	cmp	r0, #2
 8007c60:	d104      	bne.n	8007c6c <USBD_SetConfig+0x8c>
        {
          USBD_CtlError(pdev , req);  
 8007c62:	4629      	mov	r1, r5
 8007c64:	4620      	mov	r0, r4
 8007c66:	f7ff fef3 	bl	8007a50 <USBD_CtlError>
          return;
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
        }
        USBD_CtlSendStatus(pdev);
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 f971 	bl	8007f54 <USBD_CtlSendStatus>
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8007c74:	f000 f96e 	bl	8007f54 <USBD_CtlSendStatus>
 8007c78:	bd38      	pop	{r3, r4, r5, pc}
      }
      break;
      
    default:					
       USBD_CtlError(pdev , req);                     
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	f7ff fee8 	bl	8007a50 <USBD_CtlError>
 8007c80:	bd38      	pop	{r3, r4, r5, pc}
 8007c82:	bf00      	nop
 8007c84:	20004cfc 	.word	0x20004cfc

08007c88 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007c88:	b508      	push	{r3, lr}

  if (req->wLength != 1) 
 8007c8a:	88cb      	ldrh	r3, [r1, #6]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d002      	beq.n	8007c96 <USBD_GetConfig+0xe>
  {                   
     USBD_CtlError(pdev , req);
 8007c90:	f7ff fede 	bl	8007a50 <USBD_CtlError>
 8007c94:	bd08      	pop	{r3, pc}
  }
  else 
  {
    switch (pdev->dev_state )  
 8007c96:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d002      	beq.n	8007ca4 <USBD_GetConfig+0x1c>
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d008      	beq.n	8007cb4 <USBD_GetConfig+0x2c>
 8007ca2:	e00c      	b.n	8007cbe <USBD_GetConfig+0x36>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8007ca4:	4601      	mov	r1, r0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8007cac:	2201      	movs	r2, #1
 8007cae:	f000 f923 	bl	8007ef8 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 8007cb2:	bd08      	pop	{r3, pc}
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	1d01      	adds	r1, r0, #4
 8007cb8:	f000 f91e 	bl	8007ef8 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 8007cbc:	bd08      	pop	{r3, pc}
      
    default:
       USBD_CtlError(pdev , req);
 8007cbe:	f7ff fec7 	bl	8007a50 <USBD_CtlError>
 8007cc2:	bd08      	pop	{r3, pc}

08007cc4 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007cc4:	b508      	push	{r3, lr}
  
    
  switch (pdev->dev_state) 
 8007cc6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007cca:	3b02      	subs	r3, #2
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d80c      	bhi.n	8007cea <USBD_GetStatus+0x26>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8007cd4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8007cd8:	b10b      	cbz	r3, 8007cde <USBD_GetStatus+0x1a>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007cda:	2303      	movs	r3, #3
 8007cdc:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f100 010c 	add.w	r1, r0, #12
 8007ce4:	f000 f908 	bl	8007ef8 <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 8007ce8:	bd08      	pop	{r3, pc}
    
  default :
    USBD_CtlError(pdev , req);                        
 8007cea:	f7ff feb1 	bl	8007a50 <USBD_CtlError>
 8007cee:	bd08      	pop	{r3, pc}

08007cf0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 8007cf4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007cf8:	3b02      	subs	r3, #2
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d80d      	bhi.n	8007d1a <USBD_ClrFeature+0x2a>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007cfe:	884b      	ldrh	r3, [r1, #2]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d10c      	bne.n	8007d1e <USBD_ClrFeature+0x2e>
    {
      pdev->dev_remote_wakeup = 0; 
 8007d04:	2300      	movs	r3, #0
 8007d06:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8007d0a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 f91e 	bl	8007f54 <USBD_CtlSendStatus>
 8007d18:	bd10      	pop	{r4, pc}
    }
    break;
    
  default :
     USBD_CtlError(pdev , req);
 8007d1a:	f7ff fe99 	bl	8007a50 <USBD_CtlError>
 8007d1e:	bd10      	pop	{r4, pc}

08007d20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007d20:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8007d22:	784b      	ldrb	r3, [r1, #1]
 8007d24:	2b09      	cmp	r3, #9
 8007d26:	d81b      	bhi.n	8007d60 <USBD_StdDevReq+0x40>
 8007d28:	e8df f003 	tbb	[pc, r3]
 8007d2c:	141a1711 	.word	0x141a1711
 8007d30:	1a05081a 	.word	0x1a05081a
 8007d34:	0b0e      	.short	0x0b0e
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8007d36:	f7ff fe95 	bl	8007a64 <USBD_GetDescriptor>
    break;
 8007d3a:	e013      	b.n	8007d64 <USBD_StdDevReq+0x44>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8007d3c:	f7ff ff2a 	bl	8007b94 <USBD_SetAddress>
    break;
 8007d40:	e010      	b.n	8007d64 <USBD_StdDevReq+0x44>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8007d42:	f7ff ff4d 	bl	8007be0 <USBD_SetConfig>
    break;
 8007d46:	e00d      	b.n	8007d64 <USBD_StdDevReq+0x44>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8007d48:	f7ff ff9e 	bl	8007c88 <USBD_GetConfig>
    break;
 8007d4c:	e00a      	b.n	8007d64 <USBD_StdDevReq+0x44>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8007d4e:	f7ff ffb9 	bl	8007cc4 <USBD_GetStatus>
    break;
 8007d52:	e007      	b.n	8007d64 <USBD_StdDevReq+0x44>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8007d54:	f7ff fe58 	bl	8007a08 <USBD_SetFeature>
    break;
 8007d58:	e004      	b.n	8007d64 <USBD_StdDevReq+0x44>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8007d5a:	f7ff ffc9 	bl	8007cf0 <USBD_ClrFeature>
    break;
 8007d5e:	e001      	b.n	8007d64 <USBD_StdDevReq+0x44>
    
  default:  
    USBD_CtlError(pdev , req);
 8007d60:	f7ff fe76 	bl	8007a50 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8007d64:	2000      	movs	r0, #0
 8007d66:	bd08      	pop	{r3, pc}

08007d68 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8007d6e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d10f      	bne.n	8007d96 <USBD_StdItfReq+0x2e>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8007d76:	790b      	ldrb	r3, [r1, #4]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d809      	bhi.n	8007d90 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8007d7c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8007d84:	88eb      	ldrh	r3, [r5, #6]
 8007d86:	b943      	cbnz	r3, 8007d9a <USBD_StdItfReq+0x32>
      {
         USBD_CtlSendStatus(pdev);
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 f8e3 	bl	8007f54 <USBD_CtlSendStatus>
 8007d8e:	e004      	b.n	8007d9a <USBD_StdItfReq+0x32>
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8007d90:	f7ff fe5e 	bl	8007a50 <USBD_CtlError>
 8007d94:	e001      	b.n	8007d9a <USBD_StdItfReq+0x32>
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8007d96:	f7ff fe5b 	bl	8007a50 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	bd38      	pop	{r3, r4, r5, pc}
 8007d9e:	bf00      	nop

08007da0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4605      	mov	r5, r0
 8007da4:	460c      	mov	r4, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8007da6:	888a      	ldrh	r2, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8007da8:	780b      	ldrb	r3, [r1, #0]
 8007daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d104      	bne.n	8007dbc <USBD_StdEPReq+0x1c>
  {
    pdev->pClass->Setup (pdev, req);
 8007db2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	4798      	blx	r3
    
    return USBD_OK;
 8007dba:	e07d      	b.n	8007eb8 <USBD_StdEPReq+0x118>
 8007dbc:	b2d1      	uxtb	r1, r2
  }
  
  switch (req->bRequest) 
 8007dbe:	7863      	ldrb	r3, [r4, #1]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d026      	beq.n	8007e12 <USBD_StdEPReq+0x72>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d048      	beq.n	8007e5a <USBD_StdEPReq+0xba>
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d175      	bne.n	8007eb8 <USBD_StdEPReq+0x118>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8007dcc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d002      	beq.n	8007dda <USBD_StdEPReq+0x3a>
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d007      	beq.n	8007de8 <USBD_StdEPReq+0x48>
 8007dd8:	e017      	b.n	8007e0a <USBD_StdEPReq+0x6a>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007dda:	2900      	cmp	r1, #0
 8007ddc:	d06c      	beq.n	8007eb8 <USBD_StdEPReq+0x118>
 8007dde:	2980      	cmp	r1, #128	; 0x80
 8007de0:	d06a      	beq.n	8007eb8 <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8007de2:	f7f9 ffcd 	bl	8001d80 <USBD_LL_StallEP>
 8007de6:	e067      	b.n	8007eb8 <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007de8:	8863      	ldrh	r3, [r4, #2]
 8007dea:	b923      	cbnz	r3, 8007df6 <USBD_StdEPReq+0x56>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007dec:	b119      	cbz	r1, 8007df6 <USBD_StdEPReq+0x56>
 8007dee:	2980      	cmp	r1, #128	; 0x80
 8007df0:	d001      	beq.n	8007df6 <USBD_StdEPReq+0x56>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8007df2:	f7f9 ffc5 	bl	8001d80 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 8007df6:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4628      	mov	r0, r5
 8007e00:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f8a6 	bl	8007f54 <USBD_CtlSendStatus>
      
      break;
 8007e08:	e056      	b.n	8007eb8 <USBD_StdEPReq+0x118>
      
    default:                         
      USBD_CtlError(pdev , req);
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	f7ff fe20 	bl	8007a50 <USBD_CtlError>
      break;    
 8007e10:	e052      	b.n	8007eb8 <USBD_StdEPReq+0x118>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8007e12:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d002      	beq.n	8007e20 <USBD_StdEPReq+0x80>
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d007      	beq.n	8007e2e <USBD_StdEPReq+0x8e>
 8007e1e:	e018      	b.n	8007e52 <USBD_StdEPReq+0xb2>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007e20:	2900      	cmp	r1, #0
 8007e22:	d049      	beq.n	8007eb8 <USBD_StdEPReq+0x118>
 8007e24:	2980      	cmp	r1, #128	; 0x80
 8007e26:	d047      	beq.n	8007eb8 <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8007e28:	f7f9 ffaa 	bl	8001d80 <USBD_LL_StallEP>
 8007e2c:	e044      	b.n	8007eb8 <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007e2e:	8863      	ldrh	r3, [r4, #2]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d141      	bne.n	8007eb8 <USBD_StdEPReq+0x118>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8007e34:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8007e38:	d007      	beq.n	8007e4a <USBD_StdEPReq+0xaa>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007e3a:	f7f9 ffb1 	bl	8001da0 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007e3e:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	4621      	mov	r1, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 f882 	bl	8007f54 <USBD_CtlSendStatus>
 8007e50:	e032      	b.n	8007eb8 <USBD_StdEPReq+0x118>
      }
      break;
      
    default:                         
      USBD_CtlError(pdev , req);
 8007e52:	4621      	mov	r1, r4
 8007e54:	f7ff fdfc 	bl	8007a50 <USBD_CtlError>
      break;    
 8007e58:	e02e      	b.n	8007eb8 <USBD_StdEPReq+0x118>
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8007e5a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d002      	beq.n	8007e68 <USBD_StdEPReq+0xc8>
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d006      	beq.n	8007e74 <USBD_StdEPReq+0xd4>
 8007e66:	e024      	b.n	8007eb2 <USBD_StdEPReq+0x112>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8007e68:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8007e6c:	d024      	beq.n	8007eb8 <USBD_StdEPReq+0x118>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8007e6e:	f7f9 ff87 	bl	8001d80 <USBD_LL_StallEP>
 8007e72:	e021      	b.n	8007eb8 <USBD_StdEPReq+0x118>
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007e74:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007e78:	d006      	beq.n	8007e88 <USBD_StdEPReq+0xe8>
 8007e7a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8007e7e:	3401      	adds	r4, #1
 8007e80:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8007e84:	3404      	adds	r4, #4
 8007e86:	e005      	b.n	8007e94 <USBD_StdEPReq+0xf4>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8007e88:	f001 047f 	and.w	r4, r1, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007e8c:	3410      	adds	r4, #16
 8007e8e:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8007e92:	3404      	adds	r4, #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007e94:	4628      	mov	r0, r5
 8007e96:	f7f9 ff93 	bl	8001dc0 <USBD_LL_IsStallEP>
 8007e9a:	b110      	cbz	r0, 8007ea2 <USBD_StdEPReq+0x102>
      {
        pep->status = 0x0001;     
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	e001      	b.n	8007ea6 <USBD_StdEPReq+0x106>
      }
      else
      {
        pep->status = 0x0000;  
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	6023      	str	r3, [r4, #0]
      }
      
      USBD_CtlSendData (pdev,
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f000 f824 	bl	8007ef8 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8007eb0:	e002      	b.n	8007eb8 <USBD_StdEPReq+0x118>
      
    default:                         
      USBD_CtlError(pdev , req);
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	f7ff fdcc 	bl	8007a50 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8007eb8:	2000      	movs	r0, #0
 8007eba:	bd38      	pop	{r3, r4, r5, pc}

08007ebc <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8007ebc:	b1d0      	cbz	r0, 8007ef4 <USBD_GetString+0x38>
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ebe:	b570      	push	{r4, r5, r6, lr}
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	4616      	mov	r6, r2
 8007ec4:	4604      	mov	r4, r0
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8007ec6:	f7ff fd95 	bl	80079f4 <USBD_GetLen>
 8007eca:	3001      	adds	r0, #1
 8007ecc:	0040      	lsls	r0, r0, #1
 8007ece:	b280      	uxth	r0, r0
 8007ed0:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 8007ed2:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	706b      	strb	r3, [r5, #1]
 8007ed8:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8007eda:	e007      	b.n	8007eec <USBD_GetString+0x30>
    {
      unicode[idx++] = *desc++;
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	3401      	adds	r4, #1
 8007ee2:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2100      	movs	r1, #0
 8007eea:	54a9      	strb	r1, [r5, r2]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 8007eec:	7821      	ldrb	r1, [r4, #0]
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	d1f4      	bne.n	8007edc <USBD_GetString+0x20>
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop

08007ef8 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8007efc:	2202      	movs	r2, #2
 8007efe:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8007f02:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8007f04:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8007f06:	460a      	mov	r2, r1
 8007f08:	2100      	movs	r1, #0
 8007f0a:	f7f9 ff81 	bl	8001e10 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007f0e:	2000      	movs	r0, #0
 8007f10:	bd10      	pop	{r4, pc}
 8007f12:	bf00      	nop

08007f14 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8007f14:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8007f16:	4613      	mov	r3, r2
 8007f18:	460a      	mov	r2, r1
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	f7f9 ff78 	bl	8001e10 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007f20:	2000      	movs	r0, #0
 8007f22:	bd08      	pop	{r3, pc}

08007f24 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8007f24:	b510      	push	{r4, lr}
 8007f26:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8007f28:	2203      	movs	r2, #3
 8007f2a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8007f2e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8007f32:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8007f36:	460a      	mov	r2, r1
 8007f38:	2100      	movs	r1, #0
 8007f3a:	f7f9 ff79 	bl	8001e30 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8007f3e:	2000      	movs	r0, #0
 8007f40:	bd10      	pop	{r4, pc}
 8007f42:	bf00      	nop

08007f44 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8007f44:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8007f46:	4613      	mov	r3, r2
 8007f48:	460a      	mov	r2, r1
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f7f9 ff70 	bl	8001e30 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8007f50:	2000      	movs	r0, #0
 8007f52:	bd08      	pop	{r3, pc}

08007f54 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8007f54:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f56:	2304      	movs	r3, #4
 8007f58:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4619      	mov	r1, r3
 8007f62:	f7f9 ff55 	bl	8001e10 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8007f66:	2000      	movs	r0, #0
 8007f68:	bd08      	pop	{r3, pc}
 8007f6a:	bf00      	nop

08007f6c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8007f6c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8007f6e:	2305      	movs	r3, #5
 8007f70:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8007f74:	2300      	movs	r3, #0
 8007f76:	461a      	mov	r2, r3
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f7f9 ff59 	bl	8001e30 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8007f7e:	2000      	movs	r0, #0
 8007f80:	bd08      	pop	{r3, pc}
 8007f82:	bf00      	nop

08007f84 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007f84:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8007f88:	b11b      	cbz	r3, 8007f92 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8007f90:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8007f92:	2002      	movs	r0, #2
  }
}
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop

08007f98 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8007f98:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007f9a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8007f9e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007fa2:	b15b      	cbz	r3, 8007fbc <USBD_CDC_EP0_RxReady+0x24>
 8007fa4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007fa8:	28ff      	cmp	r0, #255	; 0xff
 8007faa:	d007      	beq.n	8007fbc <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8007fb6:	23ff      	movs	r3, #255	; 0xff
 8007fb8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	bd10      	pop	{r4, pc}

08007fc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007fc0:	2343      	movs	r3, #67	; 0x43
 8007fc2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8007fc4:	4800      	ldr	r0, [pc, #0]	; (8007fc8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8007fc6:	4770      	bx	lr
 8007fc8:	20000050 	.word	0x20000050

08007fcc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007fcc:	2343      	movs	r3, #67	; 0x43
 8007fce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8007fd0:	4800      	ldr	r0, [pc, #0]	; (8007fd4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8007fd2:	4770      	bx	lr
 8007fd4:	2000011c 	.word	0x2000011c

08007fd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007fd8:	2343      	movs	r3, #67	; 0x43
 8007fda:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8007fdc:	4800      	ldr	r0, [pc, #0]	; (8007fe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8007fde:	4770      	bx	lr
 8007fe0:	200000d8 	.word	0x200000d8

08007fe4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007fe4:	230a      	movs	r3, #10
 8007fe6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8007fe8:	4800      	ldr	r0, [pc, #0]	; (8007fec <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007fea:	4770      	bx	lr
 8007fec:	200000cc 	.word	0x200000cc

08007ff0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ff4:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007ff8:	f7f9 ff2a 	bl	8001e50 <USBD_LL_GetRxDataSize>
 8007ffc:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008000:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8008004:	b14b      	cbz	r3, 800801a <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008006:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8008010:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8008014:	4798      	blx	r3

    return USBD_OK;
 8008016:	2000      	movs	r0, #0
 8008018:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 800801a:	2002      	movs	r0, #2
  }
}
 800801c:	bd38      	pop	{r3, r4, r5, pc}
 800801e:	bf00      	nop

08008020 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	4605      	mov	r5, r0
 8008024:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008026:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800802a:	780b      	ldrb	r3, [r1, #0]
 800802c:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8008030:	d024      	beq.n	800807c <USBD_CDC_Setup+0x5c>
 8008032:	2a20      	cmp	r2, #32
 8008034:	d129      	bne.n	800808a <USBD_CDC_Setup+0x6a>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008036:	88ca      	ldrh	r2, [r1, #6]
 8008038:	b1ca      	cbz	r2, 800806e <USBD_CDC_Setup+0x4e>
    {
      if (req->bmRequest & 0x80)
 800803a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800803e:	d00b      	beq.n	8008058 <USBD_CDC_Setup+0x38>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008040:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	4631      	mov	r1, r6
 8008048:	7860      	ldrb	r0, [r4, #1]
 800804a:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 800804c:	88e2      	ldrh	r2, [r4, #6]
 800804e:	4631      	mov	r1, r6
 8008050:	4628      	mov	r0, r5
 8008052:	f7ff ff51 	bl	8007ef8 <USBD_CtlSendData>
 8008056:	e018      	b.n	800808a <USBD_CDC_Setup+0x6a>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8008058:	784b      	ldrb	r3, [r1, #1]
 800805a:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800805e:	88cb      	ldrh	r3, [r1, #6]
 8008060:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 8008064:	88ca      	ldrh	r2, [r1, #6]
 8008066:	4631      	mov	r1, r6
 8008068:	f7ff ff5c 	bl	8007f24 <USBD_CtlPrepareRx>
 800806c:	e00d      	b.n	800808a <USBD_CDC_Setup+0x6a>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800806e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	2200      	movs	r2, #0
 8008076:	7848      	ldrb	r0, [r1, #1]
 8008078:	4798      	blx	r3
 800807a:	e006      	b.n	800808a <USBD_CDC_Setup+0x6a>
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800807c:	784b      	ldrb	r3, [r1, #1]
 800807e:	2b0a      	cmp	r3, #10
 8008080:	d103      	bne.n	800808a <USBD_CDC_Setup+0x6a>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8008082:	2201      	movs	r2, #1
 8008084:	4902      	ldr	r1, [pc, #8]	; (8008090 <USBD_CDC_Setup+0x70>)
 8008086:	f7ff ff37 	bl	8007ef8 <USBD_CtlSendData>
 
  default: 
    break;
  }
  return USBD_OK;
}
 800808a:	2000      	movs	r0, #0
 800808c:	bd70      	pop	{r4, r5, r6, pc}
 800808e:	bf00      	nop
 8008090:	20004cfd 	.word	0x20004cfd

08008094 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8008094:	b510      	push	{r4, lr}
 8008096:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8008098:	2181      	movs	r1, #129	; 0x81
 800809a:	f7f9 fe61 	bl	8001d60 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800809e:	2101      	movs	r1, #1
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7f9 fe5d 	bl	8001d60 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80080a6:	2182      	movs	r1, #130	; 0x82
 80080a8:	4620      	mov	r0, r4
 80080aa:	f7f9 fe59 	bl	8001d60 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80080ae:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80080b2:	b153      	cbz	r3, 80080ca <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080b4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080bc:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80080c0:	f002 fea2 	bl	800ae08 <free>
    pdev->pClassData = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 80080ca:	2000      	movs	r0, #0
 80080cc:	bd10      	pop	{r4, pc}
 80080ce:	bf00      	nop

080080d0 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80080d4:	7c03      	ldrb	r3, [r0, #16]
 80080d6:	b96b      	cbnz	r3, 80080f4 <USBD_CDC_Init+0x24>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80080d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080dc:	2202      	movs	r2, #2
 80080de:	2181      	movs	r1, #129	; 0x81
 80080e0:	f7f9 fe2c 	bl	8001d3c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80080e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080e8:	2202      	movs	r2, #2
 80080ea:	2101      	movs	r1, #1
 80080ec:	4620      	mov	r0, r4
 80080ee:	f7f9 fe25 	bl	8001d3c <USBD_LL_OpenEP>
 80080f2:	e00a      	b.n	800810a <USBD_CDC_Init+0x3a>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80080f4:	2340      	movs	r3, #64	; 0x40
 80080f6:	2202      	movs	r2, #2
 80080f8:	2181      	movs	r1, #129	; 0x81
 80080fa:	f7f9 fe1f 	bl	8001d3c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80080fe:	2340      	movs	r3, #64	; 0x40
 8008100:	2202      	movs	r2, #2
 8008102:	2101      	movs	r1, #1
 8008104:	4620      	mov	r0, r4
 8008106:	f7f9 fe19 	bl	8001d3c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800810a:	2308      	movs	r3, #8
 800810c:	2203      	movs	r2, #3
 800810e:	2182      	movs	r1, #130	; 0x82
 8008110:	4620      	mov	r0, r4
 8008112:	f7f9 fe13 	bl	8001d3c <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008116:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800811a:	f002 fe6d 	bl	800adf8 <malloc>
 800811e:	4605      	mov	r5, r0
 8008120:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8008124:	b1e8      	cbz	r0, 8008162 <USBD_CDC_Init+0x92>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008126:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800812e:	2300      	movs	r3, #0
 8008130:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState =0;
 8008134:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008138:	7c23      	ldrb	r3, [r4, #16]
 800813a:	b94b      	cbnz	r3, 8008150 <USBD_CDC_Init+0x80>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800813c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008140:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8008144:	2101      	movs	r1, #1
 8008146:	4620      	mov	r0, r4
 8008148:	f7f9 fe72 	bl	8001e30 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 800814c:	2000      	movs	r0, #0
 800814e:	bd38      	pop	{r3, r4, r5, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008150:	2340      	movs	r3, #64	; 0x40
 8008152:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8008156:	2101      	movs	r1, #1
 8008158:	4620      	mov	r0, r4
 800815a:	f7f9 fe69 	bl	8001e30 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 800815e:	2000      	movs	r0, #0
 8008160:	bd38      	pop	{r3, r4, r5, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 8008162:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	bf00      	nop

08008168 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8008168:	b119      	cbz	r1, 8008172 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800816a:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800816e:	2000      	movs	r0, #0
 8008170:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8008172:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop

08008178 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008178:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
 800817c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8008180:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8008184:	2000      	movs	r0, #0
 8008186:	4770      	bx	lr

08008188 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008188:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->RxBuffer = pbuff;
 800818c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 8008190:	2000      	movs	r0, #0
 8008192:	4770      	bx	lr

08008194 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008194:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8008198:	b17a      	cbz	r2, 80081ba <USBD_CDC_TransmitPacket+0x26>
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800819a:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if(pdev->pClassData != NULL)
  {
    if(hcdc->TxState == 0)
 800819c:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80081a0:	b96b      	cbnz	r3, 80081be <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80081a8:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80081ac:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80081b0:	2181      	movs	r1, #129	; 0x81
 80081b2:	f7f9 fe2d 	bl	8001e10 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 80081b6:	2000      	movs	r0, #0
 80081b8:	bd08      	pop	{r3, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80081ba:	2002      	movs	r0, #2
  }
}
 80081bc:	4770      	bx	lr
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80081be:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80081c0:	bd08      	pop	{r3, pc}
 80081c2:	bf00      	nop

080081c4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80081c4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80081c8:	b19a      	cbz	r2, 80081f2 <USBD_CDC_ReceivePacket+0x2e>
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 80081ca:	b508      	push	{r3, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80081cc:	7c03      	ldrb	r3, [r0, #16]
 80081ce:	b943      	cbnz	r3, 80081e2 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081d4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80081d8:	2101      	movs	r1, #1
 80081da:	f7f9 fe29 	bl	8001e30 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80081de:	2000      	movs	r0, #0
 80081e0:	bd08      	pop	{r3, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081e2:	2340      	movs	r3, #64	; 0x40
 80081e4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80081e8:	2101      	movs	r1, #1
 80081ea:	f7f9 fe21 	bl	8001e30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80081ee:	2000      	movs	r0, #0
 80081f0:	bd08      	pop	{r3, pc}
  }
  else
  {
    return USBD_FAIL;
 80081f2:	2002      	movs	r0, #2
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop

080081f8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 80081f8:	2800      	cmp	r0, #0
 80081fa:	f000 80a4 	beq.w	8008346 <HAL_CAN_Init+0x14e>
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80081fe:	b538      	push	{r3, r4, r5, lr}
 8008200:	4604      	mov	r4, r0
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 8008202:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008206:	f013 0fff 	tst.w	r3, #255	; 0xff
 800820a:	d101      	bne.n	8008210 <HAL_CAN_Init+0x18>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800820c:	f7f9 fff6 	bl	80021fc <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	6813      	ldr	r3, [r2, #0]
 8008214:	f023 0302 	bic.w	r3, r3, #2
 8008218:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800821a:	f7fd f887 	bl	800532c <HAL_GetTick>
 800821e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8008220:	e00d      	b.n	800823e <HAL_CAN_Init+0x46>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008222:	f7fd f883 	bl	800532c <HAL_GetTick>
 8008226:	1b40      	subs	r0, r0, r5
 8008228:	280a      	cmp	r0, #10
 800822a:	d908      	bls.n	800823e <HAL_CAN_Init+0x46>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800822c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800822e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008232:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008234:	2305      	movs	r3, #5
 8008236:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800823a:	2001      	movs	r0, #1
 800823c:	bd38      	pop	{r3, r4, r5, pc}

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	f012 0f02 	tst.w	r2, #2
 8008246:	d1ec      	bne.n	8008222 <HAL_CAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	f042 0201 	orr.w	r2, r2, #1
 800824e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008250:	f7fd f86c 	bl	800532c <HAL_GetTick>
 8008254:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8008256:	e00d      	b.n	8008274 <HAL_CAN_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008258:	f7fd f868 	bl	800532c <HAL_GetTick>
 800825c:	1b40      	subs	r0, r0, r5
 800825e:	280a      	cmp	r0, #10
 8008260:	d908      	bls.n	8008274 <HAL_CAN_Init+0x7c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008268:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800826a:	2305      	movs	r3, #5
 800826c:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8008270:	2001      	movs	r0, #1
 8008272:	bd38      	pop	{r3, r4, r5, pc}

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	f012 0f01 	tst.w	r2, #1
 800827c:	d0ec      	beq.n	8008258 <HAL_CAN_Init+0x60>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800827e:	7e22      	ldrb	r2, [r4, #24]
 8008280:	2a01      	cmp	r2, #1
 8008282:	d104      	bne.n	800828e <HAL_CAN_Init+0x96>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	e003      	b.n	8008296 <HAL_CAN_Init+0x9e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008294:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008296:	7e63      	ldrb	r3, [r4, #25]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d105      	bne.n	80082a8 <HAL_CAN_Init+0xb0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800829c:	6822      	ldr	r2, [r4, #0]
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	e004      	b.n	80082b2 <HAL_CAN_Init+0xba>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80082a8:	6822      	ldr	r2, [r4, #0]
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082b0:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80082b2:	7ea3      	ldrb	r3, [r4, #26]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d105      	bne.n	80082c4 <HAL_CAN_Init+0xcc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80082b8:	6822      	ldr	r2, [r4, #0]
 80082ba:	6813      	ldr	r3, [r2, #0]
 80082bc:	f043 0320 	orr.w	r3, r3, #32
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	e004      	b.n	80082ce <HAL_CAN_Init+0xd6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	6813      	ldr	r3, [r2, #0]
 80082c8:	f023 0320 	bic.w	r3, r3, #32
 80082cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80082ce:	7ee3      	ldrb	r3, [r4, #27]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d105      	bne.n	80082e0 <HAL_CAN_Init+0xe8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80082d4:	6822      	ldr	r2, [r4, #0]
 80082d6:	6813      	ldr	r3, [r2, #0]
 80082d8:	f023 0310 	bic.w	r3, r3, #16
 80082dc:	6013      	str	r3, [r2, #0]
 80082de:	e004      	b.n	80082ea <HAL_CAN_Init+0xf2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80082e0:	6822      	ldr	r2, [r4, #0]
 80082e2:	6813      	ldr	r3, [r2, #0]
 80082e4:	f043 0310 	orr.w	r3, r3, #16
 80082e8:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80082ea:	7f23      	ldrb	r3, [r4, #28]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d105      	bne.n	80082fc <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80082f0:	6822      	ldr	r2, [r4, #0]
 80082f2:	6813      	ldr	r3, [r2, #0]
 80082f4:	f043 0308 	orr.w	r3, r3, #8
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e004      	b.n	8008306 <HAL_CAN_Init+0x10e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	6813      	ldr	r3, [r2, #0]
 8008300:	f023 0308 	bic.w	r3, r3, #8
 8008304:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008306:	7f63      	ldrb	r3, [r4, #29]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d105      	bne.n	8008318 <HAL_CAN_Init+0x120>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	6813      	ldr	r3, [r2, #0]
 8008310:	f043 0304 	orr.w	r3, r3, #4
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	e004      	b.n	8008322 <HAL_CAN_Init+0x12a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008318:	6822      	ldr	r2, [r4, #0]
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	f023 0304 	bic.w	r3, r3, #4
 8008320:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008322:	6821      	ldr	r1, [r4, #0]
 8008324:	68a2      	ldr	r2, [r4, #8]
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	431a      	orrs	r2, r3
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	431a      	orrs	r2, r3
 800832e:	6963      	ldr	r3, [r4, #20]
 8008330:	431a      	orrs	r2, r3
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	3b01      	subs	r3, #1
 8008336:	4313      	orrs	r3, r2
 8008338:	61cb      	str	r3, [r1, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800833a:	2000      	movs	r0, #0
 800833c:	6260      	str	r0, [r4, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800833e:	2301      	movs	r3, #1
 8008340:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8008344:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
  {
    return HAL_ERROR;
 8008346:	2001      	movs	r0, #1
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800834c:	b470      	push	{r4, r5, r6}
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800834e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b01      	cmp	r3, #1
 8008356:	d005      	beq.n	8008364 <HAL_CAN_ConfigFilter+0x18>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8008358:	f890 3020 	ldrb.w	r3, [r0, #32]
 800835c:	b2db      	uxtb	r3, r3
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800835e:	2b02      	cmp	r3, #2
 8008360:	f040 8081 	bne.w	8008466 <HAL_CAN_ConfigFilter+0x11a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008364:	4b43      	ldr	r3, [pc, #268]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 8008366:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800836a:	f042 0201 	orr.w	r2, r2, #1
 800836e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8008372:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008376:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800837a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800837e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008382:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8008384:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008388:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 800838c:	694a      	ldr	r2, [r1, #20]
 800838e:	2001      	movs	r0, #1
 8008390:	fa00 f202 	lsl.w	r2, r0, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008394:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8008398:	43d4      	mvns	r4, r2
 800839a:	4020      	ands	r0, r4
 800839c:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80083a0:	69cb      	ldr	r3, [r1, #28]
 80083a2:	b9b3      	cbnz	r3, 80083d2 <HAL_CAN_ConfigFilter+0x86>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80083a4:	4b33      	ldr	r3, [pc, #204]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 80083a6:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 80083aa:	4020      	ands	r0, r4
 80083ac:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80083b0:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80083b2:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80083b4:	888d      	ldrh	r5, [r1, #4]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80083b6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80083ba:	3048      	adds	r0, #72	; 0x48
 80083bc:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80083c0:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80083c2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80083c4:	8808      	ldrh	r0, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80083c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80083ca:	3548      	adds	r5, #72	; 0x48
 80083cc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80083d0:	6058      	str	r0, [r3, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80083d2:	69cb      	ldr	r3, [r1, #28]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d116      	bne.n	8008406 <HAL_CAN_ConfigFilter+0xba>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80083d8:	4b26      	ldr	r3, [pc, #152]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 80083da:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 80083de:	4310      	orrs	r0, r2
 80083e0:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80083e4:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80083e6:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80083e8:	888d      	ldrh	r5, [r1, #4]
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80083ea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80083ee:	3048      	adds	r0, #72	; 0x48
 80083f0:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80083f4:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80083f6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80083f8:	8988      	ldrh	r0, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80083fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80083fe:	3548      	adds	r5, #72	; 0x48
 8008400:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008404:	6058      	str	r0, [r3, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008406:	698b      	ldr	r3, [r1, #24]
 8008408:	b933      	cbnz	r3, 8008418 <HAL_CAN_ConfigFilter+0xcc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800840a:	481a      	ldr	r0, [pc, #104]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 800840c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8008410:	4023      	ands	r3, r4
 8008412:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8008416:	e005      	b.n	8008424 <HAL_CAN_ConfigFilter+0xd8>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008418:	4816      	ldr	r0, [pc, #88]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 800841a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008424:	690b      	ldr	r3, [r1, #16]
 8008426:	b933      	cbnz	r3, 8008436 <HAL_CAN_ConfigFilter+0xea>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008428:	4812      	ldr	r0, [pc, #72]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 800842a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800842e:	401c      	ands	r4, r3
 8008430:	f8c0 4214 	str.w	r4, [r0, #532]	; 0x214
 8008434:	e005      	b.n	8008442 <HAL_CAN_ConfigFilter+0xf6>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008436:	480f      	ldr	r0, [pc, #60]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 8008438:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800843c:	4313      	orrs	r3, r2
 800843e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 8008442:	6a0b      	ldr	r3, [r1, #32]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d105      	bne.n	8008454 <HAL_CAN_ConfigFilter+0x108>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008448:	490a      	ldr	r1, [pc, #40]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 800844a:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 800844e:	431a      	orrs	r2, r3
 8008450:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008454:	4a07      	ldr	r2, [pc, #28]	; (8008474 <HAL_CAN_ConfigFilter+0x128>)
 8008456:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008462:	2000      	movs	r0, #0
 8008464:	e004      	b.n	8008470 <HAL_CAN_ConfigFilter+0x124>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008466:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800846c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800846e:	2001      	movs	r0, #1
  }
}
 8008470:	bc70      	pop	{r4, r5, r6}
 8008472:	4770      	bx	lr
 8008474:	40006400 	.word	0x40006400

08008478 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008478:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 800847a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b01      	cmp	r3, #1
 8008482:	d122      	bne.n	80084ca <HAL_CAN_Start+0x52>
 8008484:	4604      	mov	r4, r0
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008486:	2302      	movs	r3, #2
 8008488:	f880 3020 	strb.w	r3, [r0, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800848c:	6802      	ldr	r2, [r0, #0]
 800848e:	6813      	ldr	r3, [r2, #0]
 8008490:	f023 0301 	bic.w	r3, r3, #1
 8008494:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008496:	f7fc ff49 	bl	800532c <HAL_GetTick>
 800849a:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 800849c:	e00d      	b.n	80084ba <HAL_CAN_Start+0x42>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800849e:	f7fc ff45 	bl	800532c <HAL_GetTick>
 80084a2:	1b40      	subs	r0, r0, r5
 80084a4:	280a      	cmp	r0, #10
 80084a6:	d908      	bls.n	80084ba <HAL_CAN_Start+0x42>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80084a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ae:	6263      	str	r3, [r4, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80084b0:	2305      	movs	r3, #5
 80084b2:	f884 3020 	strb.w	r3, [r4, #32]

        return HAL_ERROR;
 80084b6:	2001      	movs	r0, #1
 80084b8:	bd38      	pop	{r3, r4, r5, pc}

    /* Get tick */
    tickstart = HAL_GetTick();

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f013 0f01 	tst.w	r3, #1
 80084c2:	d1ec      	bne.n	800849e <HAL_CAN_Start+0x26>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80084c4:	2000      	movs	r0, #0
 80084c6:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80084c8:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80084ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80084cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084d0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80084d2:	2001      	movs	r0, #1
  }
}
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	bf00      	nop

080084d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80084d8:	b470      	push	{r4, r5, r6}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80084da:	f890 4020 	ldrb.w	r4, [r0, #32]
 80084de:	b2e4      	uxtb	r4, r4
 80084e0:	2c01      	cmp	r4, #1
 80084e2:	d004      	beq.n	80084ee <HAL_CAN_AddTxMessage+0x16>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80084e4:	f890 4020 	ldrb.w	r4, [r0, #32]
 80084e8:	b2e4      	uxtb	r4, r4
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80084ea:	2c02      	cmp	r4, #2
 80084ec:	d165      	bne.n	80085ba <HAL_CAN_AddTxMessage+0xe2>
      (hcan->State == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 80084ee:	6804      	ldr	r4, [r0, #0]
 80084f0:	68a5      	ldr	r5, [r4, #8]
 80084f2:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 80084f6:	d107      	bne.n	8008508 <HAL_CAN_AddTxMessage+0x30>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 80084f8:	68a5      	ldr	r5, [r4, #8]

  if ((hcan->State == HAL_CAN_STATE_READY) ||
      (hcan->State == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 80084fa:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
 80084fe:	d103      	bne.n	8008508 <HAL_CAN_AddTxMessage+0x30>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 8008500:	68a5      	ldr	r5, [r4, #8]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
      (hcan->State == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8008502:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8008506:	d052      	beq.n	80085ae <HAL_CAN_AddTxMessage+0xd6>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008508:	68a4      	ldr	r4, [r4, #8]
 800850a:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 800850e:	2501      	movs	r5, #1
 8008510:	40a5      	lsls	r5, r4
 8008512:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008514:	688b      	ldr	r3, [r1, #8]
 8008516:	b94b      	cbnz	r3, 800852c <HAL_CAN_AddTxMessage+0x54>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008518:	6805      	ldr	r5, [r0, #0]
 800851a:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 800851c:	68cb      	ldr	r3, [r1, #12]
      *pTxMailbox = 1U << transmitmailbox;

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800851e:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 8008522:	f104 0318 	add.w	r3, r4, #24
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	50ee      	str	r6, [r5, r3]
 800852a:	e009      	b.n	8008540 <HAL_CAN_AddTxMessage+0x68>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800852c:	6806      	ldr	r6, [r0, #0]
 800852e:	684d      	ldr	r5, [r1, #4]
 8008530:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
                                                           pHeader->IDE |
                                                           pHeader->RTR);
 8008534:	68cd      	ldr	r5, [r1, #12]
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 8008536:	432b      	orrs	r3, r5
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008538:	f104 0518 	add.w	r5, r4, #24
 800853c:	012d      	lsls	r5, r5, #4
 800853e:	5173      	str	r3, [r6, r5]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008540:	6803      	ldr	r3, [r0, #0]
 8008542:	690d      	ldr	r5, [r1, #16]
 8008544:	f104 0618 	add.w	r6, r4, #24
 8008548:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800854c:	605d      	str	r5, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800854e:	7d0b      	ldrb	r3, [r1, #20]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d106      	bne.n	8008562 <HAL_CAN_AddTxMessage+0x8a>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008554:	6803      	ldr	r3, [r0, #0]
 8008556:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800855a:	6859      	ldr	r1, [r3, #4]
 800855c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008560:	6059      	str	r1, [r3, #4]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008562:	6801      	ldr	r1, [r0, #0]
 8008564:	79d5      	ldrb	r5, [r2, #7]
 8008566:	7993      	ldrb	r3, [r2, #6]
 8008568:	041b      	lsls	r3, r3, #16
 800856a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800856e:	7955      	ldrb	r5, [r2, #5]
 8008570:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8008574:	7915      	ldrb	r5, [r2, #4]
 8008576:	432b      	orrs	r3, r5
 8008578:	0125      	lsls	r5, r4, #4
 800857a:	4429      	add	r1, r5
 800857c:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008580:	6801      	ldr	r1, [r0, #0]
 8008582:	78d6      	ldrb	r6, [r2, #3]
 8008584:	7893      	ldrb	r3, [r2, #2]
 8008586:	041b      	lsls	r3, r3, #16
 8008588:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800858c:	7856      	ldrb	r6, [r2, #1]
 800858e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8008592:	7812      	ldrb	r2, [r2, #0]
 8008594:	4313      	orrs	r3, r2
 8008596:	4429      	add	r1, r5
 8008598:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800859c:	6802      	ldr	r2, [r0, #0]
 800859e:	3418      	adds	r4, #24
 80085a0:	0124      	lsls	r4, r4, #4
 80085a2:	5913      	ldr	r3, [r2, r4]
 80085a4:	f043 0301 	orr.w	r3, r3, #1
 80085a8:	5113      	str	r3, [r2, r4]

      /* Return function status */
      return HAL_OK;
 80085aa:	2000      	movs	r0, #0
 80085ac:	e00a      	b.n	80085c4 <HAL_CAN_AddTxMessage+0xec>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80085ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80085b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085b4:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 80085b6:	2001      	movs	r0, #1
 80085b8:	e004      	b.n	80085c4 <HAL_CAN_AddTxMessage+0xec>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80085ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80085bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085c0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80085c2:	2001      	movs	r0, #1
  }
}
 80085c4:	bc70      	pop	{r4, r5, r6}
 80085c6:	4770      	bx	lr

080085c8 <HAL_CAN_AbortTxRequest>:
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80085c8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d004      	beq.n	80085dc <HAL_CAN_AbortTxRequest+0x14>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 80085d2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80085d6:	b2db      	uxtb	r3, r3
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d119      	bne.n	8008610 <HAL_CAN_AbortTxRequest+0x48>
      (hcan->State == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != RESET)
 80085dc:	f011 0f01 	tst.w	r1, #1
 80085e0:	d004      	beq.n	80085ec <HAL_CAN_AbortTxRequest+0x24>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80085e2:	6802      	ldr	r2, [r0, #0]
 80085e4:	6893      	ldr	r3, [r2, #8]
 80085e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ea:	6093      	str	r3, [r2, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != RESET)
 80085ec:	f011 0f02 	tst.w	r1, #2
 80085f0:	d004      	beq.n	80085fc <HAL_CAN_AbortTxRequest+0x34>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 80085f2:	6802      	ldr	r2, [r0, #0]
 80085f4:	6893      	ldr	r3, [r2, #8]
 80085f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085fa:	6093      	str	r3, [r2, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != RESET)
 80085fc:	f011 0f04 	tst.w	r1, #4
 8008600:	d00c      	beq.n	800861c <HAL_CAN_AbortTxRequest+0x54>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8008602:	6802      	ldr	r2, [r0, #0]
 8008604:	6893      	ldr	r3, [r2, #8]
 8008606:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800860a:	6093      	str	r3, [r2, #8]
    }

    /* Return function status */
    return HAL_OK;
 800860c:	2000      	movs	r0, #0
 800860e:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008610:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008616:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008618:	2001      	movs	r0, #1
 800861a:	4770      	bx	lr
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
    }

    /* Return function status */
    return HAL_OK;
 800861c:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800861e:	4770      	bx	lr

08008620 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008620:	b430      	push	{r4, r5}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8008622:	f890 4020 	ldrb.w	r4, [r0, #32]
 8008626:	b2e4      	uxtb	r4, r4
 8008628:	2c01      	cmp	r4, #1
 800862a:	d005      	beq.n	8008638 <HAL_CAN_GetRxMessage+0x18>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800862c:	f890 4020 	ldrb.w	r4, [r0, #32]
 8008630:	b2e4      	uxtb	r4, r4
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8008632:	2c02      	cmp	r4, #2
 8008634:	f040 808a 	bne.w	800874c <HAL_CAN_GetRxMessage+0x12c>
      (hcan->State == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008638:	b951      	cbnz	r1, 8008650 <HAL_CAN_GetRxMessage+0x30>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 800863a:	6804      	ldr	r4, [r0, #0]
 800863c:	68e4      	ldr	r4, [r4, #12]
 800863e:	f014 0f03 	tst.w	r4, #3
 8008642:	d112      	bne.n	800866a <HAL_CAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008644:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800864a:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 800864c:	2001      	movs	r0, #1
 800864e:	e084      	b.n	800875a <HAL_CAN_GetRxMessage+0x13a>
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8008650:	2901      	cmp	r1, #1
 8008652:	d10a      	bne.n	800866a <HAL_CAN_GetRxMessage+0x4a>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8008654:	6804      	ldr	r4, [r0, #0]
 8008656:	6924      	ldr	r4, [r4, #16]
 8008658:	f014 0f03 	tst.w	r4, #3
 800865c:	d105      	bne.n	800866a <HAL_CAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800865e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008664:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8008666:	2001      	movs	r0, #1
 8008668:	e077      	b.n	800875a <HAL_CAN_GetRxMessage+0x13a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800866a:	6805      	ldr	r5, [r0, #0]
 800866c:	f101 041b 	add.w	r4, r1, #27
 8008670:	0124      	lsls	r4, r4, #4
 8008672:	592c      	ldr	r4, [r5, r4]
 8008674:	f004 0404 	and.w	r4, r4, #4
 8008678:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800867a:	b93c      	cbnz	r4, 800868c <HAL_CAN_GetRxMessage+0x6c>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800867c:	6805      	ldr	r5, [r0, #0]
 800867e:	f101 041b 	add.w	r4, r1, #27
 8008682:	0124      	lsls	r4, r4, #4
 8008684:	592c      	ldr	r4, [r5, r4]
 8008686:	0d64      	lsrs	r4, r4, #21
 8008688:	6014      	str	r4, [r2, #0]
 800868a:	e006      	b.n	800869a <HAL_CAN_GetRxMessage+0x7a>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800868c:	6805      	ldr	r5, [r0, #0]
 800868e:	f101 041b 	add.w	r4, r1, #27
 8008692:	0124      	lsls	r4, r4, #4
 8008694:	592c      	ldr	r4, [r5, r4]
 8008696:	08e4      	lsrs	r4, r4, #3
 8008698:	6054      	str	r4, [r2, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 800869a:	6805      	ldr	r5, [r0, #0]
 800869c:	f101 041b 	add.w	r4, r1, #27
 80086a0:	0124      	lsls	r4, r4, #4
 80086a2:	592d      	ldr	r5, [r5, r4]
 80086a4:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80086a8:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80086aa:	6805      	ldr	r5, [r0, #0]
 80086ac:	4425      	add	r5, r4
 80086ae:	686d      	ldr	r5, [r5, #4]
 80086b0:	f005 050f 	and.w	r5, r5, #15
 80086b4:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80086b6:	6805      	ldr	r5, [r0, #0]
 80086b8:	4425      	add	r5, r4
 80086ba:	686d      	ldr	r5, [r5, #4]
 80086bc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80086c0:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80086c2:	6805      	ldr	r5, [r0, #0]
 80086c4:	442c      	add	r4, r5
 80086c6:	6864      	ldr	r4, [r4, #4]
 80086c8:	0c24      	lsrs	r4, r4, #16
 80086ca:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80086cc:	6804      	ldr	r4, [r0, #0]
 80086ce:	010a      	lsls	r2, r1, #4
 80086d0:	4414      	add	r4, r2
 80086d2:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80086d6:	701c      	strb	r4, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80086d8:	6804      	ldr	r4, [r0, #0]
 80086da:	4414      	add	r4, r2
 80086dc:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80086e0:	0a24      	lsrs	r4, r4, #8
 80086e2:	705c      	strb	r4, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80086e4:	6804      	ldr	r4, [r0, #0]
 80086e6:	4414      	add	r4, r2
 80086e8:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80086ec:	0c24      	lsrs	r4, r4, #16
 80086ee:	709c      	strb	r4, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80086f0:	6804      	ldr	r4, [r0, #0]
 80086f2:	4414      	add	r4, r2
 80086f4:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80086f8:	0e24      	lsrs	r4, r4, #24
 80086fa:	70dc      	strb	r4, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80086fc:	6804      	ldr	r4, [r0, #0]
 80086fe:	4414      	add	r4, r2
 8008700:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8008704:	711c      	strb	r4, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8008706:	6804      	ldr	r4, [r0, #0]
 8008708:	4414      	add	r4, r2
 800870a:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800870e:	0a24      	lsrs	r4, r4, #8
 8008710:	715c      	strb	r4, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8008712:	6804      	ldr	r4, [r0, #0]
 8008714:	4414      	add	r4, r2
 8008716:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800871a:	0c24      	lsrs	r4, r4, #16
 800871c:	719c      	strb	r4, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 800871e:	6804      	ldr	r4, [r0, #0]
 8008720:	4422      	add	r2, r4
 8008722:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8008726:	0e12      	lsrs	r2, r2, #24
 8008728:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800872a:	b931      	cbnz	r1, 800873a <HAL_CAN_GetRxMessage+0x11a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800872c:	6802      	ldr	r2, [r0, #0]
 800872e:	68d3      	ldr	r3, [r2, #12]
 8008730:	f043 0320 	orr.w	r3, r3, #32
 8008734:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8008736:	2000      	movs	r0, #0
 8008738:	e00f      	b.n	800875a <HAL_CAN_GetRxMessage+0x13a>
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 800873a:	2901      	cmp	r1, #1
 800873c:	d10c      	bne.n	8008758 <HAL_CAN_GetRxMessage+0x138>
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800873e:	6802      	ldr	r2, [r0, #0]
 8008740:	6913      	ldr	r3, [r2, #16]
 8008742:	f043 0320 	orr.w	r3, r3, #32
 8008746:	6113      	str	r3, [r2, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008748:	2000      	movs	r0, #0
 800874a:	e006      	b.n	800875a <HAL_CAN_GetRxMessage+0x13a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800874c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800874e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008752:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008754:	2001      	movs	r0, #1
 8008756:	e000      	b.n	800875a <HAL_CAN_GetRxMessage+0x13a>
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8008758:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800875a:	bc30      	pop	{r4, r5}
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop

08008760 <HAL_CAN_ActivateNotification>:
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8008760:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b01      	cmp	r3, #1
 8008768:	d004      	beq.n	8008774 <HAL_CAN_ActivateNotification+0x14>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 800876a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800876e:	b2db      	uxtb	r3, r3
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8008770:	2b02      	cmp	r3, #2
 8008772:	d105      	bne.n	8008780 <HAL_CAN_ActivateNotification+0x20>
      (hcan->State == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008774:	6803      	ldr	r3, [r0, #0]
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	4311      	orrs	r1, r2
 800877a:	6159      	str	r1, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800877c:	2000      	movs	r0, #0
 800877e:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008780:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008782:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008786:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8008788:	2001      	movs	r0, #1
  }
}
 800878a:	4770      	bx	lr

0800878c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop

08008790 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop

08008794 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop

08008798 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop

080087a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop

080087a4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop

080087a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop

080087ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80087ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	4605      	mov	r5, r0
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80087b2:	6803      	ldr	r3, [r0, #0]
 80087b4:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80087b6:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80087b8:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80087ba:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80087be:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80087c2:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 80087c6:	f014 0f01 	tst.w	r4, #1
 80087ca:	d05a      	beq.n	8008882 <HAL_CAN_IRQHandler+0xd6>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 80087cc:	f016 0f01 	tst.w	r6, #1
 80087d0:	d014      	beq.n	80087fc <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80087d2:	2201      	movs	r2, #1
 80087d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 80087d6:	f016 0f02 	tst.w	r6, #2
 80087da:	d004      	beq.n	80087e6 <HAL_CAN_IRQHandler+0x3a>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80087dc:	f001 f89e 	bl	800991c <HAL_CAN_TxMailbox0CompleteCallback>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80087e0:	f04f 0b00 	mov.w	fp, #0
 80087e4:	e012      	b.n	800880c <HAL_CAN_IRQHandler+0x60>
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 80087e6:	f016 0f04 	tst.w	r6, #4
 80087ea:	d10a      	bne.n	8008802 <HAL_CAN_IRQHandler+0x56>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
        }
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 80087ec:	f016 0f08 	tst.w	r6, #8
 80087f0:	d10a      	bne.n	8008808 <HAL_CAN_IRQHandler+0x5c>
        }
        else
        {
          /* Transmission Mailbox 0 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80087f2:	f001 f8c3 	bl	800997c <HAL_CAN_TxMailbox0AbortCallback>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80087f6:	f04f 0b00 	mov.w	fp, #0
 80087fa:	e007      	b.n	800880c <HAL_CAN_IRQHandler+0x60>
 80087fc:	f04f 0b00 	mov.w	fp, #0
 8008800:	e004      	b.n	800880c <HAL_CAN_IRQHandler+0x60>
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008802:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 8008806:	e001      	b.n	800880c <HAL_CAN_IRQHandler+0x60>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008808:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 800880c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8008810:	d019      	beq.n	8008846 <HAL_CAN_IRQHandler+0x9a>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008818:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 800881a:	f416 7f00 	tst.w	r6, #512	; 0x200
 800881e:	d003      	beq.n	8008828 <HAL_CAN_IRQHandler+0x7c>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008820:	4628      	mov	r0, r5
 8008822:	f7ff ffb3 	bl	800878c <HAL_CAN_TxMailbox1CompleteCallback>
 8008826:	e00e      	b.n	8008846 <HAL_CAN_IRQHandler+0x9a>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 8008828:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800882c:	d002      	beq.n	8008834 <HAL_CAN_IRQHandler+0x88>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800882e:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
 8008832:	e008      	b.n	8008846 <HAL_CAN_IRQHandler+0x9a>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8008834:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8008838:	d002      	beq.n	8008840 <HAL_CAN_IRQHandler+0x94>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800883a:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 800883e:	e002      	b.n	8008846 <HAL_CAN_IRQHandler+0x9a>
        }
        else
        {
          /* Transmission Mailbox 1 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008840:	4628      	mov	r0, r5
 8008842:	f7ff ffa7 	bl	8008794 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 8008846:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800884a:	d01c      	beq.n	8008886 <HAL_CAN_IRQHandler+0xda>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008852:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8008854:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8008858:	d003      	beq.n	8008862 <HAL_CAN_IRQHandler+0xb6>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800885a:	4628      	mov	r0, r5
 800885c:	f7ff ff98 	bl	8008790 <HAL_CAN_TxMailbox2CompleteCallback>
 8008860:	e011      	b.n	8008886 <HAL_CAN_IRQHandler+0xda>
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 8008862:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8008866:	d002      	beq.n	800886e <HAL_CAN_IRQHandler+0xc2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008868:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 800886c:	e00b      	b.n	8008886 <HAL_CAN_IRQHandler+0xda>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 800886e:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8008872:	d002      	beq.n	800887a <HAL_CAN_IRQHandler+0xce>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008874:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 8008878:	e005      	b.n	8008886 <HAL_CAN_IRQHandler+0xda>
        }
        else
        {
          /* Transmission Mailbox 2 abort callback */
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800887a:	4628      	mov	r0, r5
 800887c:	f7ff ff8c 	bl	8008798 <HAL_CAN_TxMailbox2AbortCallback>
 8008880:	e001      	b.n	8008886 <HAL_CAN_IRQHandler+0xda>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008882:	f04f 0b00 	mov.w	fp, #0
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 8008886:	f014 0f08 	tst.w	r4, #8
 800888a:	d007      	beq.n	800889c <HAL_CAN_IRQHandler+0xf0>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 800888c:	f019 0f10 	tst.w	r9, #16
 8008890:	d004      	beq.n	800889c <HAL_CAN_IRQHandler+0xf0>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008892:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008896:	682b      	ldr	r3, [r5, #0]
 8008898:	2210      	movs	r2, #16
 800889a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 800889c:	f014 0f04 	tst.w	r4, #4
 80088a0:	d008      	beq.n	80088b4 <HAL_CAN_IRQHandler+0x108>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 80088a2:	f019 0f08 	tst.w	r9, #8
 80088a6:	d005      	beq.n	80088b4 <HAL_CAN_IRQHandler+0x108>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	2208      	movs	r2, #8
 80088ac:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7ff ff74 	bl	800879c <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 80088b4:	f014 0f02 	tst.w	r4, #2
 80088b8:	d007      	beq.n	80088ca <HAL_CAN_IRQHandler+0x11e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f013 0f03 	tst.w	r3, #3
 80088c2:	d002      	beq.n	80088ca <HAL_CAN_IRQHandler+0x11e>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80088c4:	4628      	mov	r0, r5
 80088c6:	f001 f89b 	bl	8009a00 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 80088ca:	f014 0f40 	tst.w	r4, #64	; 0x40
 80088ce:	d007      	beq.n	80088e0 <HAL_CAN_IRQHandler+0x134>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 80088d0:	f018 0f10 	tst.w	r8, #16
 80088d4:	d004      	beq.n	80088e0 <HAL_CAN_IRQHandler+0x134>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80088d6:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80088da:	682b      	ldr	r3, [r5, #0]
 80088dc:	2210      	movs	r2, #16
 80088de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 80088e0:	f014 0f20 	tst.w	r4, #32
 80088e4:	d008      	beq.n	80088f8 <HAL_CAN_IRQHandler+0x14c>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 80088e6:	f018 0f08 	tst.w	r8, #8
 80088ea:	d005      	beq.n	80088f8 <HAL_CAN_IRQHandler+0x14c>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	2208      	movs	r2, #8
 80088f0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7ff ff54 	bl	80087a0 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 80088f8:	f014 0f10 	tst.w	r4, #16
 80088fc:	d007      	beq.n	800890e <HAL_CAN_IRQHandler+0x162>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f013 0f03 	tst.w	r3, #3
 8008906:	d002      	beq.n	800890e <HAL_CAN_IRQHandler+0x162>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008908:	4628      	mov	r0, r5
 800890a:	f001 f87f 	bl	8009a0c <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 800890e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8008912:	d008      	beq.n	8008926 <HAL_CAN_IRQHandler+0x17a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 8008914:	f017 0f10 	tst.w	r7, #16
 8008918:	d005      	beq.n	8008926 <HAL_CAN_IRQHandler+0x17a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	2210      	movs	r2, #16
 800891e:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008920:	4628      	mov	r0, r5
 8008922:	f7ff ff3f 	bl	80087a4 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 8008926:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800892a:	d008      	beq.n	800893e <HAL_CAN_IRQHandler+0x192>
  {
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 800892c:	f017 0f08 	tst.w	r7, #8
 8008930:	d005      	beq.n	800893e <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008932:	682b      	ldr	r3, [r5, #0]
 8008934:	2208      	movs	r2, #8
 8008936:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008938:	4628      	mov	r0, r5
 800893a:	f7ff ff35 	bl	80087a8 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != RESET)
 800893e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8008942:	d04e      	beq.n	80089e2 <HAL_CAN_IRQHandler+0x236>
  {
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 8008944:	f017 0f04 	tst.w	r7, #4
 8008948:	d048      	beq.n	80089dc <HAL_CAN_IRQHandler+0x230>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 800894a:	f414 7f80 	tst.w	r4, #256	; 0x100
 800894e:	d004      	beq.n	800895a <HAL_CAN_IRQHandler+0x1ae>
 8008950:	f01a 0f01 	tst.w	sl, #1
 8008954:	d001      	beq.n	800895a <HAL_CAN_IRQHandler+0x1ae>
          ((esrflags & CAN_ESR_EWGF) != RESET))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008956:	f04b 0b01 	orr.w	fp, fp, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 800895a:	f414 7f00 	tst.w	r4, #512	; 0x200
 800895e:	d004      	beq.n	800896a <HAL_CAN_IRQHandler+0x1be>
 8008960:	f01a 0f02 	tst.w	sl, #2
 8008964:	d001      	beq.n	800896a <HAL_CAN_IRQHandler+0x1be>
          ((esrflags & CAN_ESR_EPVF) != RESET))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008966:	f04b 0b02 	orr.w	fp, fp, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 800896a:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800896e:	d004      	beq.n	800897a <HAL_CAN_IRQHandler+0x1ce>
 8008970:	f01a 0f04 	tst.w	sl, #4
 8008974:	d001      	beq.n	800897a <HAL_CAN_IRQHandler+0x1ce>
          ((esrflags & CAN_ESR_BOFF) != RESET))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008976:	f04b 0b04 	orr.w	fp, fp, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 800897a:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800897e:	d02d      	beq.n	80089dc <HAL_CAN_IRQHandler+0x230>
 8008980:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8008984:	d02a      	beq.n	80089dc <HAL_CAN_IRQHandler+0x230>
          ((esrflags & CAN_ESR_LEC) != RESET))
      {
        switch (esrflags & CAN_ESR_LEC)
 8008986:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 800898a:	d017      	beq.n	80089bc <HAL_CAN_IRQHandler+0x210>
 800898c:	d806      	bhi.n	800899c <HAL_CAN_IRQHandler+0x1f0>
 800898e:	f1ba 0f10 	cmp.w	sl, #16
 8008992:	d00d      	beq.n	80089b0 <HAL_CAN_IRQHandler+0x204>
 8008994:	f1ba 0f20 	cmp.w	sl, #32
 8008998:	d00d      	beq.n	80089b6 <HAL_CAN_IRQHandler+0x20a>
 800899a:	e01a      	b.n	80089d2 <HAL_CAN_IRQHandler+0x226>
 800899c:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 80089a0:	d012      	beq.n	80089c8 <HAL_CAN_IRQHandler+0x21c>
 80089a2:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 80089a6:	d012      	beq.n	80089ce <HAL_CAN_IRQHandler+0x222>
 80089a8:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80089ac:	d111      	bne.n	80089d2 <HAL_CAN_IRQHandler+0x226>
 80089ae:	e008      	b.n	80089c2 <HAL_CAN_IRQHandler+0x216>
        {
          case (CAN_ESR_LEC_0):
            /* Set CAN error code to Stuff error */
            errorcode |= HAL_CAN_ERROR_STF;
 80089b0:	f04b 0b08 	orr.w	fp, fp, #8
            break;
 80089b4:	e00d      	b.n	80089d2 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_1):
            /* Set CAN error code to Form error */
            errorcode |= HAL_CAN_ERROR_FOR;
 80089b6:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 80089ba:	e00a      	b.n	80089d2 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
 80089bc:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 80089c0:	e007      	b.n	80089d2 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 80089c2:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 80089c6:	e004      	b.n	80089d2 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
            /* Set CAN error code to Bit Dominant error */
            errorcode |= HAL_CAN_ERROR_BD;
 80089c8:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 80089cc:	e001      	b.n	80089d2 <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
 80089ce:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80089d2:	682a      	ldr	r2, [r5, #0]
 80089d4:	6993      	ldr	r3, [r2, #24]
 80089d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089da:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	2204      	movs	r2, #4
 80089e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80089e2:	f1bb 0f00 	cmp.w	fp, #0
 80089e6:	d006      	beq.n	80089f6 <HAL_CAN_IRQHandler+0x24a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80089e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089ea:	ea4b 0303 	orr.w	r3, fp, r3
 80089ee:	626b      	str	r3, [r5, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 ffcd 	bl	8009990 <HAL_CAN_ErrorCallback>
 80089f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fa:	bf00      	nop

080089fc <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80089fc:	4b48      	ldr	r3, [pc, #288]	; (8008b20 <ADC_Init+0x124>)
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8008a04:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008a06:	6859      	ldr	r1, [r3, #4]
 8008a08:	6842      	ldr	r2, [r0, #4]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008a0e:	6802      	ldr	r2, [r0, #0]
 8008a10:	6853      	ldr	r3, [r2, #4]
 8008a12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a16:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008a18:	6802      	ldr	r2, [r0, #0]
 8008a1a:	6853      	ldr	r3, [r2, #4]
 8008a1c:	6901      	ldr	r1, [r0, #16]
 8008a1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008a22:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008a24:	6802      	ldr	r2, [r0, #0]
 8008a26:	6853      	ldr	r3, [r2, #4]
 8008a28:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008a2c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008a2e:	6802      	ldr	r2, [r0, #0]
 8008a30:	6851      	ldr	r1, [r2, #4]
 8008a32:	6883      	ldr	r3, [r0, #8]
 8008a34:	430b      	orrs	r3, r1
 8008a36:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008a38:	6802      	ldr	r2, [r0, #0]
 8008a3a:	6893      	ldr	r3, [r2, #8]
 8008a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a40:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008a42:	6802      	ldr	r2, [r0, #0]
 8008a44:	6891      	ldr	r1, [r2, #8]
 8008a46:	68c3      	ldr	r3, [r0, #12]
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a4c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008a4e:	4b35      	ldr	r3, [pc, #212]	; (8008b24 <ADC_Init+0x128>)
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d014      	beq.n	8008a7e <ADC_Init+0x82>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008a54:	6802      	ldr	r2, [r0, #0]
 8008a56:	6893      	ldr	r3, [r2, #8]
 8008a58:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008a5c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008a5e:	6802      	ldr	r2, [r0, #0]
 8008a60:	6891      	ldr	r1, [r2, #8]
 8008a62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008a64:	430b      	orrs	r3, r1
 8008a66:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008a68:	6802      	ldr	r2, [r0, #0]
 8008a6a:	6893      	ldr	r3, [r2, #8]
 8008a6c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008a70:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008a72:	6802      	ldr	r2, [r0, #0]
 8008a74:	6891      	ldr	r1, [r2, #8]
 8008a76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	6093      	str	r3, [r2, #8]
 8008a7c:	e009      	b.n	8008a92 <ADC_Init+0x96>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008a7e:	6802      	ldr	r2, [r0, #0]
 8008a80:	6893      	ldr	r3, [r2, #8]
 8008a82:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008a86:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008a88:	6802      	ldr	r2, [r0, #0]
 8008a8a:	6893      	ldr	r3, [r2, #8]
 8008a8c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008a90:	6093      	str	r3, [r2, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008a92:	6802      	ldr	r2, [r0, #0]
 8008a94:	6893      	ldr	r3, [r2, #8]
 8008a96:	f023 0302 	bic.w	r3, r3, #2
 8008a9a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8008a9c:	6802      	ldr	r2, [r0, #0]
 8008a9e:	6893      	ldr	r3, [r2, #8]
 8008aa0:	6981      	ldr	r1, [r0, #24]
 8008aa2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008aa6:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008aa8:	6a03      	ldr	r3, [r0, #32]
 8008aaa:	b18b      	cbz	r3, 8008ad0 <ADC_Init+0xd4>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008aac:	6802      	ldr	r2, [r0, #0]
 8008aae:	6853      	ldr	r3, [r2, #4]
 8008ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ab4:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008ab6:	6802      	ldr	r2, [r0, #0]
 8008ab8:	6853      	ldr	r3, [r2, #4]
 8008aba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008abe:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008ac0:	6801      	ldr	r1, [r0, #0]
 8008ac2:	684a      	ldr	r2, [r1, #4]
 8008ac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8008acc:	604b      	str	r3, [r1, #4]
 8008ace:	e004      	b.n	8008ada <ADC_Init+0xde>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008ad0:	6802      	ldr	r2, [r0, #0]
 8008ad2:	6853      	ldr	r3, [r2, #4]
 8008ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad8:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008ada:	6802      	ldr	r2, [r0, #0]
 8008adc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ae2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008ae4:	6801      	ldr	r1, [r0, #0]
 8008ae6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8008ae8:	69c3      	ldr	r3, [r0, #28]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8008af0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008af2:	6802      	ldr	r2, [r0, #0]
 8008af4:	6893      	ldr	r3, [r2, #8]
 8008af6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008afa:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8008afc:	6802      	ldr	r2, [r0, #0]
 8008afe:	6893      	ldr	r3, [r2, #8]
 8008b00:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008b02:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8008b06:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008b08:	6802      	ldr	r2, [r0, #0]
 8008b0a:	6893      	ldr	r3, [r2, #8]
 8008b0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b10:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008b12:	6802      	ldr	r2, [r0, #0]
 8008b14:	6893      	ldr	r3, [r2, #8]
 8008b16:	6941      	ldr	r1, [r0, #20]
 8008b18:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8008b1c:	6093      	str	r3, [r2, #8]
 8008b1e:	4770      	bx	lr
 8008b20:	40012300 	.word	0x40012300
 8008b24:	0f000001 	.word	0x0f000001

08008b28 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008b28:	b328      	cbz	r0, 8008b76 <HAL_ADC_Init+0x4e>
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008b2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008b30:	b923      	cbnz	r3, 8008b3c <HAL_ADC_Init+0x14>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b32:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008b34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008b38:	f7f9 fadc 	bl	80020f4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b3e:	f013 0f10 	tst.w	r3, #16
 8008b42:	d113      	bne.n	8008b6c <HAL_ADC_Init+0x44>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008b4a:	f023 0302 	bic.w	r3, r3, #2
 8008b4e:	f043 0302 	orr.w	r3, r3, #2
 8008b52:	6423      	str	r3, [r4, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008b54:	4620      	mov	r0, r4
 8008b56:	f7ff ff51 	bl	80089fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b60:	f023 0303 	bic.w	r3, r3, #3
 8008b64:	f043 0301 	orr.w	r3, r3, #1
 8008b68:	6423      	str	r3, [r4, #64]	; 0x40
 8008b6a:	e000      	b.n	8008b6e <HAL_ADC_Init+0x46>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008b6c:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008b74:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8008b76:	2001      	movs	r0, #1
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop

08008b7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008b7c:	b530      	push	{r4, r5, lr}
 8008b7e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008b84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d07e      	beq.n	8008c8a <HAL_ADC_Start_DMA+0x10e>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008b92:	6803      	ldr	r3, [r0, #0]
 8008b94:	689c      	ldr	r4, [r3, #8]
 8008b96:	f014 0f01 	tst.w	r4, #1
 8008b9a:	d113      	bne.n	8008bc4 <HAL_ADC_Start_DMA+0x48>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008b9c:	689c      	ldr	r4, [r3, #8]
 8008b9e:	f044 0401 	orr.w	r4, r4, #1
 8008ba2:	609c      	str	r4, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008ba4:	4b3e      	ldr	r3, [pc, #248]	; (8008ca0 <HAL_ADC_Start_DMA+0x124>)
 8008ba6:	681c      	ldr	r4, [r3, #0]
 8008ba8:	4b3e      	ldr	r3, [pc, #248]	; (8008ca4 <HAL_ADC_Start_DMA+0x128>)
 8008baa:	fba3 3404 	umull	r3, r4, r3, r4
 8008bae:	0ca4      	lsrs	r4, r4, #18
 8008bb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008bb4:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8008bb6:	e002      	b.n	8008bbe <HAL_ADC_Start_DMA+0x42>
    {
      counter--;
 8008bb8:	9c01      	ldr	r4, [sp, #4]
 8008bba:	3c01      	subs	r4, #1
 8008bbc:	9401      	str	r4, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
    while(counter != 0U)
 8008bbe:	9c01      	ldr	r4, [sp, #4]
 8008bc0:	2c00      	cmp	r4, #0
 8008bc2:	d1f9      	bne.n	8008bb8 <HAL_ADC_Start_DMA+0x3c>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008bc4:	6803      	ldr	r3, [r0, #0]
 8008bc6:	689c      	ldr	r4, [r3, #8]
 8008bc8:	f014 0f01 	tst.w	r4, #1
 8008bcc:	d05f      	beq.n	8008c8e <HAL_ADC_Start_DMA+0x112>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008bce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008bd0:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8008bd4:	f024 0401 	bic.w	r4, r4, #1
 8008bd8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8008bdc:	6404      	str	r4, [r0, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008be4:	d005      	beq.n	8008bf2 <HAL_ADC_Start_DMA+0x76>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008be6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008be8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bf0:	6403      	str	r3, [r0, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008bf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008bf4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008bf8:	d004      	beq.n	8008c04 <HAL_ADC_Start_DMA+0x88>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008bfa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008bfc:	f023 0306 	bic.w	r3, r3, #6
 8008c00:	6443      	str	r3, [r0, #68]	; 0x44
 8008c02:	e001      	b.n	8008c08 <HAL_ADC_Start_DMA+0x8c>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008c04:	2300      	movs	r3, #0
 8008c06:	6443      	str	r3, [r0, #68]	; 0x44
 8008c08:	4613      	mov	r3, r2
 8008c0a:	4604      	mov	r4, r0
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008c12:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008c14:	4824      	ldr	r0, [pc, #144]	; (8008ca8 <HAL_ADC_Start_DMA+0x12c>)
 8008c16:	63d0      	str	r0, [r2, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008c18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008c1a:	4824      	ldr	r0, [pc, #144]	; (8008cac <HAL_ADC_Start_DMA+0x130>)
 8008c1c:	6410      	str	r0, [r2, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008c1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008c20:	4823      	ldr	r0, [pc, #140]	; (8008cb0 <HAL_ADC_Start_DMA+0x134>)
 8008c22:	64d0      	str	r0, [r2, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8008c2a:	6010      	str	r0, [r2, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008c2c:	6825      	ldr	r5, [r4, #0]
 8008c2e:	6868      	ldr	r0, [r5, #4]
 8008c30:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8008c34:	6068      	str	r0, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008c36:	6825      	ldr	r5, [r4, #0]
 8008c38:	68a8      	ldr	r0, [r5, #8]
 8008c3a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008c3e:	60a8      	str	r0, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008c40:	6820      	ldr	r0, [r4, #0]
 8008c42:	460a      	mov	r2, r1
 8008c44:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8008c48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008c4a:	f7fc f9bf 	bl	8004fcc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008c4e:	4b19      	ldr	r3, [pc, #100]	; (8008cb4 <HAL_ADC_Start_DMA+0x138>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f013 0f1f 	tst.w	r3, #31
 8008c56:	d10a      	bne.n	8008c6e <HAL_ADC_Start_DMA+0xf2>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008c60:	d117      	bne.n	8008c92 <HAL_ADC_Start_DMA+0x116>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008c68:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e016      	b.n	8008c9c <HAL_ADC_Start_DMA+0x120>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	4a11      	ldr	r2, [pc, #68]	; (8008cb8 <HAL_ADC_Start_DMA+0x13c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d10f      	bne.n	8008c96 <HAL_ADC_Start_DMA+0x11a>
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008c7c:	d10d      	bne.n	8008c9a <HAL_ADC_Start_DMA+0x11e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008c84:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008c86:	2000      	movs	r0, #0
 8008c88:	e008      	b.n	8008c9c <HAL_ADC_Start_DMA+0x120>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008c8a:	2002      	movs	r0, #2
 8008c8c:	e006      	b.n	8008c9c <HAL_ADC_Start_DMA+0x120>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e004      	b.n	8008c9c <HAL_ADC_Start_DMA+0x120>
 8008c92:	2000      	movs	r0, #0
 8008c94:	e002      	b.n	8008c9c <HAL_ADC_Start_DMA+0x120>
 8008c96:	2000      	movs	r0, #0
 8008c98:	e000      	b.n	8008c9c <HAL_ADC_Start_DMA+0x120>
 8008c9a:	2000      	movs	r0, #0
}
 8008c9c:	b003      	add	sp, #12
 8008c9e:	bd30      	pop	{r4, r5, pc}
 8008ca0:	20000048 	.word	0x20000048
 8008ca4:	431bde83 	.word	0x431bde83
 8008ca8:	08008cbd 	.word	0x08008cbd
 8008cac:	08008d21 	.word	0x08008d21
 8008cb0:	08008e81 	.word	0x08008e81
 8008cb4:	40012300 	.word	0x40012300
 8008cb8:	40012000 	.word	0x40012000

08008cbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008cbc:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008cbe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cc2:	f012 0f50 	tst.w	r2, #80	; 0x50
 8008cc6:	d126      	bne.n	8008d16 <ADC_DMAConvCplt+0x5a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	6891      	ldr	r1, [r2, #8]
 8008cd4:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8008cd8:	d119      	bne.n	8008d0e <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008cda:	6999      	ldr	r1, [r3, #24]
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008cdc:	b9b9      	cbnz	r1, 8008d0e <ADC_DMAConvCplt+0x52>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008cde:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008ce0:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8008ce4:	d003      	beq.n	8008cee <ADC_DMAConvCplt+0x32>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008ce6:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008ce8:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8008cec:	d10f      	bne.n	8008d0e <ADC_DMAConvCplt+0x52>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008cee:	6851      	ldr	r1, [r2, #4]
 8008cf0:	f021 0120 	bic.w	r1, r1, #32
 8008cf4:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cfc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d00:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8008d04:	d103      	bne.n	8008d0e <ADC_DMAConvCplt+0x52>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 fd86 	bl	800a820 <HAL_ADC_ConvCpltCallback>
 8008d14:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1a:	4798      	blx	r3
 8008d1c:	bd08      	pop	{r3, pc}
 8008d1e:	bf00      	nop

08008d20 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008d20:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8008d22:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008d24:	f001 fd56 	bl	800a7d4 <HAL_ADC_ConvHalfCpltCallback>
 8008d28:	bd08      	pop	{r3, pc}
 8008d2a:	bf00      	nop

08008d2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop

08008d30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8008d38:	6802      	ldr	r2, [r0, #0]
 8008d3a:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8008d3c:	6853      	ldr	r3, [r2, #4]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8008d3e:	f011 0f02 	tst.w	r1, #2
 8008d42:	d02f      	beq.n	8008da4 <HAL_ADC_IRQHandler+0x70>
 8008d44:	f003 0320 	and.w	r3, r3, #32
 8008d48:	b363      	cbz	r3, 8008da4 <HAL_ADC_IRQHandler+0x70>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008d4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008d4c:	f013 0f10 	tst.w	r3, #16
 8008d50:	d103      	bne.n	8008d5a <HAL_ADC_IRQHandler+0x26>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008d52:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d58:	6403      	str	r3, [r0, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d5a:	6893      	ldr	r3, [r2, #8]
 8008d5c:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 8008d60:	d119      	bne.n	8008d96 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008d62:	69a3      	ldr	r3, [r4, #24]
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d64:	b9bb      	cbnz	r3, 8008d96 <HAL_ADC_IRQHandler+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008d68:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8008d6c:	d003      	beq.n	8008d76 <HAL_ADC_IRQHandler+0x42>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008d6e:	6893      	ldr	r3, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008d74:	d10f      	bne.n	8008d96 <HAL_ADC_IRQHandler+0x62>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008d76:	6853      	ldr	r3, [r2, #4]
 8008d78:	f023 0320 	bic.w	r3, r3, #32
 8008d7c:	6053      	str	r3, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d84:	6423      	str	r3, [r4, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d88:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008d8c:	d103      	bne.n	8008d96 <HAL_ADC_IRQHandler+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d90:	f043 0301 	orr.w	r3, r3, #1
 8008d94:	6423      	str	r3, [r4, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 8008d96:	4620      	mov	r0, r4
 8008d98:	f001 fd42 	bl	800a820 <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	f06f 0212 	mvn.w	r2, #18
 8008da2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	f002 0280 	and.w	r2, r2, #128	; 0x80
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8008dae:	f011 0f04 	tst.w	r1, #4
 8008db2:	d036      	beq.n	8008e22 <HAL_ADC_IRQHandler+0xee>
 8008db4:	2a00      	cmp	r2, #0
 8008db6:	d034      	beq.n	8008e22 <HAL_ADC_IRQHandler+0xee>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008db8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008dba:	f012 0f10 	tst.w	r2, #16
 8008dbe:	d103      	bne.n	8008dc8 <HAL_ADC_IRQHandler+0x94>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008dc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dc6:	6422      	str	r2, [r4, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008dc8:	689a      	ldr	r2, [r3, #8]
 8008dca:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008dce:	d121      	bne.n	8008e14 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008dd2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008dd6:	d003      	beq.n	8008de0 <HAL_ADC_IRQHandler+0xac>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008dd8:	689a      	ldr	r2, [r3, #8]
    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008dda:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008dde:	d119      	bne.n	8008e14 <HAL_ADC_IRQHandler+0xe0>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008de0:	685a      	ldr	r2, [r3, #4]
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008de2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008de6:	d115      	bne.n	8008e14 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008de8:	689a      	ldr	r2, [r3, #8]
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008dea:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008dee:	d111      	bne.n	8008e14 <HAL_ADC_IRQHandler+0xe0>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8008df0:	69a2      	ldr	r2, [r4, #24]
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008df2:	b97a      	cbnz	r2, 8008e14 <HAL_ADC_IRQHandler+0xe0>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dfa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e02:	6423      	str	r3, [r4, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008e0a:	d103      	bne.n	8008e14 <HAL_ADC_IRQHandler+0xe0>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008e0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	6423      	str	r3, [r4, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 f905 	bl	8009024 <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	f06f 020c 	mvn.w	r2, #12
 8008e20:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8008e22:	6822      	ldr	r2, [r4, #0]
 8008e24:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8008e26:	6853      	ldr	r3, [r2, #4]
 8008e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8008e2c:	f011 0f01 	tst.w	r1, #1
 8008e30:	d00f      	beq.n	8008e52 <HAL_ADC_IRQHandler+0x11e>
 8008e32:	b173      	cbz	r3, 8008e52 <HAL_ADC_IRQHandler+0x11e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008e34:	6813      	ldr	r3, [r2, #0]
 8008e36:	f013 0f01 	tst.w	r3, #1
 8008e3a:	d00a      	beq.n	8008e52 <HAL_ADC_IRQHandler+0x11e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e42:	6423      	str	r3, [r4, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008e44:	4620      	mov	r0, r4
 8008e46:	f7ff ff71 	bl	8008d2c <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	f06f 0201 	mvn.w	r2, #1
 8008e50:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8008e52:	6822      	ldr	r2, [r4, #0]
 8008e54:	6811      	ldr	r1, [r2, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8008e56:	6853      	ldr	r3, [r2, #4]
 8008e58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8008e5c:	f011 0f20 	tst.w	r1, #32
 8008e60:	d00c      	beq.n	8008e7c <HAL_ADC_IRQHandler+0x148>
 8008e62:	b15b      	cbz	r3, 8008e7c <HAL_ADC_IRQHandler+0x148>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008e64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e66:	f043 0302 	orr.w	r3, r3, #2
 8008e6a:	6463      	str	r3, [r4, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008e6c:	f06f 0520 	mvn.w	r5, #32
 8008e70:	6015      	str	r5, [r2, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff ff5c 	bl	8008d30 <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	601d      	str	r5, [r3, #0]
 8008e7c:	bd38      	pop	{r3, r4, r5, pc}
 8008e7e:	bf00      	nop

08008e80 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008e80:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008e82:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008e84:	2340      	movs	r3, #64	; 0x40
 8008e86:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008e88:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008e8a:	f043 0304 	orr.w	r3, r3, #4
 8008e8e:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 8008e90:	f7ff ff4e 	bl	8008d30 <HAL_ADC_ErrorCallback>
 8008e94:	bd08      	pop	{r3, pc}
 8008e96:	bf00      	nop

08008e98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008e98:	b430      	push	{r4, r5}
 8008e9a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008ea0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	f000 80b2 	beq.w	800900e <HAL_ADC_ConfigChannel+0x176>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008eb0:	680b      	ldr	r3, [r1, #0]
 8008eb2:	2b09      	cmp	r3, #9
 8008eb4:	d917      	bls.n	8008ee6 <HAL_ADC_ConfigChannel+0x4e>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008eb6:	6805      	ldr	r5, [r0, #0]
 8008eb8:	68ea      	ldr	r2, [r5, #12]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008ec0:	3b1e      	subs	r3, #30
 8008ec2:	2407      	movs	r4, #7
 8008ec4:	fa04 f303 	lsl.w	r3, r4, r3
 8008ec8:	ea22 0303 	bic.w	r3, r2, r3
 8008ecc:	60eb      	str	r3, [r5, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008ece:	6804      	ldr	r4, [r0, #0]
 8008ed0:	68e5      	ldr	r5, [r4, #12]
 8008ed2:	688a      	ldr	r2, [r1, #8]
 8008ed4:	880b      	ldrh	r3, [r1, #0]
 8008ed6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008eda:	3b1e      	subs	r3, #30
 8008edc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee0:	432b      	orrs	r3, r5
 8008ee2:	60e3      	str	r3, [r4, #12]
 8008ee4:	e013      	b.n	8008f0e <HAL_ADC_ConfigChannel+0x76>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008ee6:	6805      	ldr	r5, [r0, #0]
 8008ee8:	692a      	ldr	r2, [r5, #16]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008ef0:	2407      	movs	r4, #7
 8008ef2:	fa04 f303 	lsl.w	r3, r4, r3
 8008ef6:	ea22 0303 	bic.w	r3, r2, r3
 8008efa:	612b      	str	r3, [r5, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008efc:	6804      	ldr	r4, [r0, #0]
 8008efe:	6925      	ldr	r5, [r4, #16]
 8008f00:	688b      	ldr	r3, [r1, #8]
 8008f02:	880a      	ldrh	r2, [r1, #0]
 8008f04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008f08:	4093      	lsls	r3, r2
 8008f0a:	432b      	orrs	r3, r5
 8008f0c:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008f0e:	684b      	ldr	r3, [r1, #4]
 8008f10:	2b06      	cmp	r3, #6
 8008f12:	d816      	bhi.n	8008f42 <HAL_ADC_ConfigChannel+0xaa>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008f14:	6805      	ldr	r5, [r0, #0]
 8008f16:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008f18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f1c:	3b05      	subs	r3, #5
 8008f1e:	241f      	movs	r4, #31
 8008f20:	fa04 f303 	lsl.w	r3, r4, r3
 8008f24:	ea22 0303 	bic.w	r3, r2, r3
 8008f28:	636b      	str	r3, [r5, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008f2a:	6804      	ldr	r4, [r0, #0]
 8008f2c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008f2e:	684b      	ldr	r3, [r1, #4]
 8008f30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f34:	3b05      	subs	r3, #5
 8008f36:	880a      	ldrh	r2, [r1, #0]
 8008f38:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3c:	432b      	orrs	r3, r5
 8008f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8008f40:	e02e      	b.n	8008fa0 <HAL_ADC_ConfigChannel+0x108>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008f42:	2b0c      	cmp	r3, #12
 8008f44:	d816      	bhi.n	8008f74 <HAL_ADC_ConfigChannel+0xdc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008f46:	6805      	ldr	r5, [r0, #0]
 8008f48:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8008f4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f4e:	3b23      	subs	r3, #35	; 0x23
 8008f50:	241f      	movs	r4, #31
 8008f52:	fa04 f303 	lsl.w	r3, r4, r3
 8008f56:	ea22 0303 	bic.w	r3, r2, r3
 8008f5a:	632b      	str	r3, [r5, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008f5c:	6804      	ldr	r4, [r0, #0]
 8008f5e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008f60:	684b      	ldr	r3, [r1, #4]
 8008f62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f66:	3b23      	subs	r3, #35	; 0x23
 8008f68:	880a      	ldrh	r2, [r1, #0]
 8008f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6e:	432b      	orrs	r3, r5
 8008f70:	6323      	str	r3, [r4, #48]	; 0x30
 8008f72:	e015      	b.n	8008fa0 <HAL_ADC_ConfigChannel+0x108>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008f74:	6805      	ldr	r5, [r0, #0]
 8008f76:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008f78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f7c:	3b41      	subs	r3, #65	; 0x41
 8008f7e:	241f      	movs	r4, #31
 8008f80:	fa04 f303 	lsl.w	r3, r4, r3
 8008f84:	ea22 0303 	bic.w	r3, r2, r3
 8008f88:	62eb      	str	r3, [r5, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008f8a:	6804      	ldr	r4, [r0, #0]
 8008f8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8008f8e:	684b      	ldr	r3, [r1, #4]
 8008f90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f94:	3b41      	subs	r3, #65	; 0x41
 8008f96:	880a      	ldrh	r2, [r1, #0]
 8008f98:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9c:	432b      	orrs	r3, r5
 8008f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008fa0:	6802      	ldr	r2, [r0, #0]
 8008fa2:	4b1d      	ldr	r3, [pc, #116]	; (8009018 <HAL_ADC_ConfigChannel+0x180>)
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d107      	bne.n	8008fb8 <HAL_ADC_ConfigChannel+0x120>
 8008fa8:	680b      	ldr	r3, [r1, #0]
 8008faa:	2b12      	cmp	r3, #18
 8008fac:	d104      	bne.n	8008fb8 <HAL_ADC_ConfigChannel+0x120>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008fae:	4a1b      	ldr	r2, [pc, #108]	; (800901c <HAL_ADC_ConfigChannel+0x184>)
 8008fb0:	6853      	ldr	r3, [r2, #4]
 8008fb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fb6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008fb8:	6802      	ldr	r2, [r0, #0]
 8008fba:	4b17      	ldr	r3, [pc, #92]	; (8009018 <HAL_ADC_ConfigChannel+0x180>)
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d121      	bne.n	8009004 <HAL_ADC_ConfigChannel+0x16c>
 8008fc0:	680b      	ldr	r3, [r1, #0]
 8008fc2:	3b10      	subs	r3, #16
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d81d      	bhi.n	8009004 <HAL_ADC_ConfigChannel+0x16c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008fc8:	4a14      	ldr	r2, [pc, #80]	; (800901c <HAL_ADC_ConfigChannel+0x184>)
 8008fca:	6853      	ldr	r3, [r2, #4]
 8008fcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fd0:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008fd2:	680b      	ldr	r3, [r1, #0]
 8008fd4:	2b10      	cmp	r3, #16
 8008fd6:	d115      	bne.n	8009004 <HAL_ADC_ConfigChannel+0x16c>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <HAL_ADC_ConfigChannel+0x188>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8008fe0:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8008fe4:	f202 3283 	addw	r2, r2, #899	; 0x383
 8008fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fec:	0c9b      	lsrs	r3, r3, #18
 8008fee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008ff2:	005a      	lsls	r2, r3, #1
 8008ff4:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8008ff6:	e002      	b.n	8008ffe <HAL_ADC_ConfigChannel+0x166>
      {
        counter--;
 8008ff8:	9b01      	ldr	r3, [sp, #4]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1f9      	bne.n	8008ff8 <HAL_ADC_ConfigChannel+0x160>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009004:	2300      	movs	r3, #0
 8009006:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800900a:	4618      	mov	r0, r3
 800900c:	e000      	b.n	8009010 <HAL_ADC_ConfigChannel+0x178>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800900e:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 8009010:	b002      	add	sp, #8
 8009012:	bc30      	pop	{r4, r5}
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	40012000 	.word	0x40012000
 800901c:	40012300 	.word	0x40012300
 8009020:	20000048 	.word	0x20000048

08009024 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop

08009028 <StartSerialTaskSend>:
/* *************************************************************************
 * void StartSerialTaskSend(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartSerialTaskSend(void* argument1)
{
 8009028:	b500      	push	{lr}
 800902a:	b083      	sub	sp, #12
  {
		do
		{
		/* Wait indefinitely for someone to load something into the queue */
		/* Skip over empty returns, and NULL pointers that would cause trouble */
			Qret = xQueueReceive(SerialTaskSendQHandle,&pssb,portMAX_DELAY);
 800902c:	2300      	movs	r3, #0
 800902e:	f04f 32ff 	mov.w	r2, #4294967295
 8009032:	a901      	add	r1, sp, #4
 8009034:	481f      	ldr	r0, [pc, #124]	; (80090b4 <StartSerialTaskSend+0x8c>)
 8009036:	6800      	ldr	r0, [r0, #0]
 8009038:	f7fc fd04 	bl	8005a44 <xQueueGenericReceive>
			if (Qret == pdPASS) // Break loop if not empty
 800903c:	2801      	cmp	r0, #1
 800903e:	d006      	beq.n	800904e <StartSerialTaskSend+0x26>
				break;
		} while ((pssb->phuart == NULL) || (pssb->tskhandle == NULL));
 8009040:	9b01      	ldr	r3, [sp, #4]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	2a00      	cmp	r2, #0
 8009046:	d0f1      	beq.n	800902c <StartSerialTaskSend+0x4>
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0ee      	beq.n	800902c <StartSerialTaskSend+0x4>

		/* Add Q item to linked list for this uart/usart */

		/* Find uart/usart list for this item from Q */
		ptmp = pbhd;
 800904e:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <StartSerialTaskSend+0x90>)
 8009050:	681b      	ldr	r3, [r3, #0]
		while (ptmp->phuart != pssb->phuart) ptmp = ptmp->pnext;
 8009052:	e000      	b.n	8009056 <StartSerialTaskSend+0x2e>
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6959      	ldr	r1, [r3, #20]
 8009058:	9801      	ldr	r0, [sp, #4]
 800905a:	6802      	ldr	r2, [r0, #0]
 800905c:	4291      	cmp	r1, r2
 800905e:	d1f9      	bne.n	8009054 <StartSerialTaskSend+0x2c>

	 	if ((pssb->pbuf == NULL) || (pssb->size == 0))
 8009060:	68c2      	ldr	r2, [r0, #12]
 8009062:	b10a      	cbz	r2, 8009068 <StartSerialTaskSend+0x40>
 8009064:	8a02      	ldrh	r2, [r0, #16]
 8009066:	b932      	cbnz	r2, 8009076 <StartSerialTaskSend+0x4e>
		{ // Here, HAL is going to reject it
  			/* Release buffer just sent to it can be reused. */
			xSemaphoreGive(pssb->semaphore);\
 8009068:	2300      	movs	r3, #0
 800906a:	461a      	mov	r2, r3
 800906c:	4619      	mov	r1, r3
 800906e:	6880      	ldr	r0, [r0, #8]
 8009070:	f7fc fb50 	bl	8005714 <xQueueGenericSend>
			return;
 8009074:	e01a      	b.n	80090ac <StartSerialTaskSend+0x84>
		}

		/* Add bcb to circular buffer for this uart/usart */
		*ptmp->padd = pssb; //Copy BCB pointer into circular buffer
 8009076:	68da      	ldr	r2, [r3, #12]
 8009078:	6010      	str	r0, [r2, #0]

		ptmp->padd += 1;	// Advance list ptr with wraparound
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	3204      	adds	r2, #4
 800907e:	60da      	str	r2, [r3, #12]
		if (ptmp->padd == ptmp->pend) ptmp->padd = ptmp->pbegin;
 8009080:	6899      	ldr	r1, [r3, #8]
 8009082:	428a      	cmp	r2, r1
 8009084:	d101      	bne.n	800908a <StartSerialTaskSend+0x62>
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	60da      	str	r2, [r3, #12]
		{		
      /* If HAL for this uart/usart is busy nothing happens. */
			if (ptmp->dmaflag == 0) // send buffer via char-by-char or dma 
 800908a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800908e:	b933      	cbnz	r3, 800909e <StartSerialTaskSend+0x76>
	 			HAL_UART_Transmit_IT((UART_HandleTypeDef*)pssb->phuart,pssb->pbuf,pssb->size);
 8009090:	9b01      	ldr	r3, [sp, #4]
 8009092:	8a1a      	ldrh	r2, [r3, #16]
 8009094:	68d9      	ldr	r1, [r3, #12]
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	f7fb f84c 	bl	8004134 <HAL_UART_Transmit_IT>
 800909c:	e7c6      	b.n	800902c <StartSerialTaskSend+0x4>
			else		
 				HAL_UART_Transmit_DMA((UART_HandleTypeDef*)pssb->phuart,pssb->pbuf,pssb->size);
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	8a1a      	ldrh	r2, [r3, #16]
 80090a2:	68d9      	ldr	r1, [r3, #12]
 80090a4:	6818      	ldr	r0, [r3, #0]
 80090a6:	f7fb f893 	bl	80041d0 <HAL_UART_Transmit_DMA>
 80090aa:	e7bf      	b.n	800902c <StartSerialTaskSend+0x4>
		}
	}
}
 80090ac:	b003      	add	sp, #12
 80090ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80090b2:	bf00      	nop
 80090b4:	20006c10 	.word	0x20006c10
 80090b8:	20004d00 	.word	0x20004d00

080090bc <xSerialTaskSendAdd>:
 * @param	: qsize = total number of buffer control blocks circular buffer can hold
 * @param	: dmaflag = 0 = char-by-char, 1 = dma
 * @return	: 0 = OK, -1 = failed 1st calloc, -2 = failed 2nd calloc
 * *************************************************************************/
BaseType_t xSerialTaskSendAdd(UART_HandleTypeDef* p, uint16_t qsize, int8_t dmaflag)
{
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	4607      	mov	r7, r0
 80090c0:	460d      	mov	r5, r1
 80090c2:	4616      	mov	r6, r2
	struct SSCIRBUF* ptmp1;
	struct SSCIRBUF* ptmp2;
	struct SERIALSENDTASKBCB** pssb;

taskENTER_CRITICAL();
 80090c4:	f7fe fa16 	bl	80074f4 <vPortEnterCritical>
	/* Add block with circular buffer pointers for this uart/usart to list */
	ptmp1 = (struct SSCIRBUF*)calloc(1, sizeof(struct SSCIRBUF));
 80090c8:	211c      	movs	r1, #28
 80090ca:	2001      	movs	r0, #1
 80090cc:	f001 fe34 	bl	800ad38 <calloc>
	if (ptmp1 == NULL) {taskEXIT_CRITICAL();return -1;}
 80090d0:	b920      	cbnz	r0, 80090dc <xSerialTaskSendAdd+0x20>
 80090d2:	f7fe fa31 	bl	8007538 <vPortExitCritical>
 80090d6:	f04f 30ff 	mov.w	r0, #4294967295
 80090da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090dc:	4604      	mov	r4, r0
	if (pbhd  == NULL) // Is this the first?
 80090de:	4b11      	ldr	r3, [pc, #68]	; (8009124 <xSerialTaskSendAdd+0x68>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	b923      	cbnz	r3, 80090ee <xSerialTaskSendAdd+0x32>
	{ // Yes
		pbhd = ptmp1;	// Point head to first on list
 80090e4:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <xSerialTaskSendAdd+0x68>)
 80090e6:	6018      	str	r0, [r3, #0]
		ptmp1->pnext = ptmp1; // Point first item on list to self
 80090e8:	6020      	str	r0, [r4, #0]
 80090ea:	e005      	b.n	80090f8 <xSerialTaskSendAdd+0x3c>
	}
	else
	{ // No, one or more have been added
		/* Find end of list */
		ptmp2 = pbhd;	// Start at head
		while (ptmp2 != ptmp2->pnext) ptmp2 = ptmp2->pnext;
 80090ec:	4613      	mov	r3, r2
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d1fb      	bne.n	80090ec <xSerialTaskSendAdd+0x30>
		ptmp2->pnext = ptmp1; // Last block points to added block
 80090f4:	601c      	str	r4, [r3, #0]
		ptmp1->pnext = ptmp1; // Added block points to self
 80090f6:	6024      	str	r4, [r4, #0]
	}

	/* Get memory for circular buffer of buffer control blocks (bcb) */	
	pssb = (struct SERIALSENDTASKBCB**)calloc(qsize, sizeof(struct SERIALSENDTASKBCB*));
 80090f8:	2104      	movs	r1, #4
 80090fa:	4628      	mov	r0, r5
 80090fc:	f001 fe1c 	bl	800ad38 <calloc>
	if ( pssb == NULL) {taskEXIT_CRITICAL();return -2;}
 8009100:	b920      	cbnz	r0, 800910c <xSerialTaskSendAdd+0x50>
 8009102:	f7fe fa19 	bl	8007538 <vPortExitCritical>
 8009106:	f06f 0001 	mvn.w	r0, #1
 800910a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Initialize pointers for circular buffer */
	// ptmp1 points to last item on list
	ptmp1->pbegin  = pssb;
 800910c:	6060      	str	r0, [r4, #4]
	ptmp1->padd    = pssb;
 800910e:	60e0      	str	r0, [r4, #12]
	ptmp1->ptake   = pssb;
 8009110:	6120      	str	r0, [r4, #16]
	ptmp1->pend    = pssb + qsize;
 8009112:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8009116:	60a1      	str	r1, [r4, #8]
	ptmp1->phuart  = p;
 8009118:	6167      	str	r7, [r4, #20]
	ptmp1->dmaflag = dmaflag;
 800911a:	7626      	strb	r6, [r4, #24]
taskEXIT_CRITICAL();
 800911c:	f7fe fa0c 	bl	8007538 <vPortExitCritical>
	return 0;
 8009120:	2000      	movs	r0, #0
}
 8009122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009124:	20004d00 	.word	0x20004d00

08009128 <xSerialTaskSendCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: SerialTaskSendHandle
 * *************************************************************************/
osThreadId xSerialTaskSendCreate(uint32_t taskpriority)
{
 8009128:	b500      	push	{lr}
 800912a:	b083      	sub	sp, #12
unsigned short usStackDepth,
void *pvParameters,
UBaseType_t uxPriority,
TaskHandle_t *pxCreatedTask );
*/
	BaseType_t ret = xTaskCreate(StartSerialTaskSend, "SerialTaskSend",\
 800912c:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <xSerialTaskSendCreate+0x38>)
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	9000      	str	r0, [sp, #0]
 8009132:	2300      	movs	r3, #0
 8009134:	2260      	movs	r2, #96	; 0x60
 8009136:	490b      	ldr	r1, [pc, #44]	; (8009164 <xSerialTaskSendCreate+0x3c>)
 8009138:	480b      	ldr	r0, [pc, #44]	; (8009168 <xSerialTaskSendCreate+0x40>)
 800913a:	f7fc ff09 	bl	8005f50 <xTaskCreate>
     96, NULL, taskpriority,\
     &SerialTaskHandle);
	if (ret != pdPASS) return NULL;
 800913e:	2801      	cmp	r0, #1
 8009140:	d10a      	bne.n	8009158 <xSerialTaskSendCreate+0x30>

	SerialTaskSendQHandle = xQueueCreate(QUEUESIZE, sizeof(struct SERIALSENDTASKBCB) );
 8009142:	2200      	movs	r2, #0
 8009144:	2114      	movs	r1, #20
 8009146:	2010      	movs	r0, #16
 8009148:	f7fc fabc 	bl	80056c4 <xQueueGenericCreate>
 800914c:	4b07      	ldr	r3, [pc, #28]	; (800916c <xSerialTaskSendCreate+0x44>)
 800914e:	6018      	str	r0, [r3, #0]
	if (SerialTaskSendQHandle == NULL) return NULL;
 8009150:	b118      	cbz	r0, 800915a <xSerialTaskSendCreate+0x32>
	return SerialTaskHandle;
 8009152:	4b03      	ldr	r3, [pc, #12]	; (8009160 <xSerialTaskSendCreate+0x38>)
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	e000      	b.n	800915a <xSerialTaskSendCreate+0x32>
TaskHandle_t *pxCreatedTask );
*/
	BaseType_t ret = xTaskCreate(StartSerialTaskSend, "SerialTaskSend",\
     96, NULL, taskpriority,\
     &SerialTaskHandle);
	if (ret != pdPASS) return NULL;
 8009158:	2000      	movs	r0, #0

	SerialTaskSendQHandle = xQueueCreate(QUEUESIZE, sizeof(struct SERIALSENDTASKBCB) );
	if (SerialTaskSendQHandle == NULL) return NULL;
	return SerialTaskHandle;
}
 800915a:	b003      	add	sp, #12
 800915c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009160:	20004d04 	.word	0x20004d04
 8009164:	0800ed48 	.word	0x0800ed48
 8009168:	08009029 	.word	0x08009029
 800916c:	20006c10 	.word	0x20006c10

08009170 <HAL_UART_TxCpltCallback>:
/* #######################################################################
   UART interrupt callback: file|size has been sent
   ####################################################################### */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *phuart)
{
 8009170:	b510      	push	{r4, lr}
 8009172:	b082      	sub	sp, #8
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009174:	2300      	movs	r3, #0
 8009176:	9301      	str	r3, [sp, #4]

	struct SERIALSENDTASKBCB* pbcb; // Buffer control block ptr
	struct SSCIRBUF* ptmp1;	// Linked list of usarts

	/* Find bcb circular buffer for this uart */
	ptmp1 = pbhd; // Polnt to first on list
 8009178:	4b19      	ldr	r3, [pc, #100]	; (80091e0 <HAL_UART_TxCpltCallback+0x70>)
 800917a:	681c      	ldr	r4, [r3, #0]
	while (ptmp1->phuart != phuart) 
 800917c:	e000      	b.n	8009180 <HAL_UART_TxCpltCallback+0x10>
	{
		ptmp1 = ptmp1->pnext; // Step to next uart
 800917e:	6824      	ldr	r4, [r4, #0]
	struct SERIALSENDTASKBCB* pbcb; // Buffer control block ptr
	struct SSCIRBUF* ptmp1;	// Linked list of usarts

	/* Find bcb circular buffer for this uart */
	ptmp1 = pbhd; // Polnt to first on list
	while (ptmp1->phuart != phuart) 
 8009180:	6963      	ldr	r3, [r4, #20]
 8009182:	4283      	cmp	r3, r0
 8009184:	d1fb      	bne.n	800917e <HAL_UART_TxCpltCallback+0xe>
	{
		ptmp1 = ptmp1->pnext; // Step to next uart
	}

	/* Pointr to buffer control block for next buffer to send. */
	pbcb = *ptmp1->ptake;
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	681b      	ldr	r3, [r3, #0]

   /* Release buffer just sent to it can be reused. */
	xSemaphoreGiveFromISR( pbcb->semaphore, &xHigherPriorityTaskWoken );
 800918a:	a901      	add	r1, sp, #4
 800918c:	6898      	ldr	r0, [r3, #8]
 800918e:	f7fc fbfb 	bl	8005988 <xQueueGiveFromISR>

	/* Advance 'take' pointer of circular buffer. */
	ptmp1->ptake += 1;	// Advance ptr with wraparound
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	3304      	adds	r3, #4
 8009196:	6123      	str	r3, [r4, #16]
	if (ptmp1->ptake == ptmp1->pend) ptmp1->ptake = ptmp1->pbegin;	
 8009198:	68a2      	ldr	r2, [r4, #8]
 800919a:	4293      	cmp	r3, r2
 800919c:	d101      	bne.n	80091a2 <HAL_UART_TxCpltCallback+0x32>
 800919e:	6863      	ldr	r3, [r4, #4]
 80091a0:	6123      	str	r3, [r4, #16]

	/* If more bcb remain in the buffer start the next sending. */
	if (ptmp1->ptake != ptmp1->padd)
 80091a2:	6923      	ldr	r3, [r4, #16]
 80091a4:	68e2      	ldr	r2, [r4, #12]
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d00e      	beq.n	80091c8 <HAL_UART_TxCpltCallback+0x58>
	{
		pbcb = *ptmp1->ptake;
 80091aa:	681b      	ldr	r3, [r3, #0]
		if (ptmp1->dmaflag == 0)
 80091ac:	f994 2018 	ldrsb.w	r2, [r4, #24]
 80091b0:	b92a      	cbnz	r2, 80091be <HAL_UART_TxCpltCallback+0x4e>
			HAL_UART_Transmit_IT (pbcb->phuart,pbcb->pbuf,pbcb->size);
 80091b2:	8a1a      	ldrh	r2, [r3, #16]
 80091b4:	68d9      	ldr	r1, [r3, #12]
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	f7fa ffbc 	bl	8004134 <HAL_UART_Transmit_IT>
 80091bc:	e004      	b.n	80091c8 <HAL_UART_TxCpltCallback+0x58>
		else
			HAL_UART_Transmit_DMA(pbcb->phuart,pbcb->pbuf,pbcb->size);
 80091be:	8a1a      	ldrh	r2, [r3, #16]
 80091c0:	68d9      	ldr	r1, [r3, #12]
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	f7fb f804 	bl	80041d0 <HAL_UART_Transmit_DMA>
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	b13b      	cbz	r3, 80091dc <HAL_UART_TxCpltCallback+0x6c>
 80091cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d0:	4b04      	ldr	r3, [pc, #16]	; (80091e4 <HAL_UART_TxCpltCallback+0x74>)
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	f3bf 8f6f 	isb	sy
	return;
}
 80091dc:	b002      	add	sp, #8
 80091de:	bd10      	pop	{r4, pc}
 80091e0:	20004d00 	.word	0x20004d00
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <vSerialTaskSendQueueBuf>:
 * void vSerialTaskSendQueueBuf(struct SERIALSENDTASKBCB** ppbcb);
 *	@brief	: Load buffer control block onto queue for sending
 * @param	: ppbcb = Pointer to pointer to Buffer Control Block
 * *************************************************************************/
void vSerialTaskSendQueueBuf(struct SERIALSENDTASKBCB** ppbcb)
{
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4605      	mov	r5, r0
	uint32_t qret;

	do 
	{
		qret=xQueueSendToBack(SerialTaskSendQHandle, ppbcb, portMAX_DELAY);
 80091ec:	2300      	movs	r3, #0
 80091ee:	f04f 32ff 	mov.w	r2, #4294967295
 80091f2:	4629      	mov	r1, r5
 80091f4:	4805      	ldr	r0, [pc, #20]	; (800920c <vSerialTaskSendQueueBuf+0x24>)
 80091f6:	6800      	ldr	r0, [r0, #0]
 80091f8:	f7fc fa8c 	bl	8005714 <xQueueGenericSend>
		if (qret == errQUEUE_FULL) osDelay(1); // Delay, don't spin.
 80091fc:	4604      	mov	r4, r0
 80091fe:	b910      	cbnz	r0, 8009206 <vSerialTaskSendQueueBuf+0x1e>
 8009200:	2001      	movs	r0, #1
 8009202:	f7fd ff5f 	bl	80070c4 <osDelay>

	} while(qret == errQUEUE_FULL);
 8009206:	2c00      	cmp	r4, #0
 8009208:	d0f0      	beq.n	80091ec <vSerialTaskSendQueueBuf+0x4>
	return;
}
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20006c10 	.word	0x20006c10

08009210 <step_ptr>:
/* *****************************************************************************
  Advance buffer pointer
********************************************************************************/
static struct CDCBUFFPTR* step_ptr(struct CDCBUFFPTR* pb)
{
		pb++;	//Step to next struct of pointers for a buffer
 8009210:	300c      	adds	r0, #12
		if (pb >= pbuff_end)
 8009212:	4b03      	ldr	r3, [pc, #12]	; (8009220 <step_ptr+0x10>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4298      	cmp	r0, r3
 8009218:	d301      	bcc.n	800921e <step_ptr+0xe>
			pb = pbuff_begin; // Wrap around
 800921a:	4b02      	ldr	r3, [pc, #8]	; (8009224 <step_ptr+0x14>)
 800921c:	6818      	ldr	r0, [r3, #0]
		return pb;
}
 800921e:	4770      	bx	lr
 8009220:	20004e0c 	.word	0x20004e0c
 8009224:	20004e08 	.word	0x20004e08

08009228 <pbuff_init>:
/* *****************************************************************************
   Get buffer space and init pointers
********************************************************************************/
static uint8_t* pbuff_init(struct CDCBUFFPTR* pb, uint16_t size)
{
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4605      	mov	r5, r0
 800922c:	460c      	mov	r4, r1
  pb->begin = calloc(size, sizeof(uint8_t));
 800922e:	2101      	movs	r1, #1
 8009230:	4620      	mov	r0, r4
 8009232:	f001 fd81 	bl	800ad38 <calloc>
 8009236:	6028      	str	r0, [r5, #0]
  pb->work  = pb->begin;
 8009238:	60a8      	str	r0, [r5, #8]
  pb->end   = pb->begin + size;
 800923a:	4404      	add	r4, r0
 800923c:	606c      	str	r4, [r5, #4]
  return pb->begin;
}
 800923e:	bd38      	pop	{r3, r4, r5, pc}

08009240 <poll>:

uint32_t cdcct5;

/* static version called by callback */
static uint32_t poll(void)
{
 8009240:	b510      	push	{r4, lr}
	struct CDCBUFFPTR* pbuff_tmp;

	/* Return if caught up with buffer ptrs AND no new data */
	pbuff_tmp = step_ptr(pbuff_i);	// Advance last sent ptr JIC
 8009242:	4b16      	ldr	r3, [pc, #88]	; (800929c <poll+0x5c>)
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	f7ff ffe3 	bl	8009210 <step_ptr>
 800924a:	4604      	mov	r4, r0
	if ((pbuff_m == pbuff_tmp)	&& ((pbuff_m->work - pbuff_m->begin) == 0)) return 2;
 800924c:	4b14      	ldr	r3, [pc, #80]	; (80092a0 <poll+0x60>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4298      	cmp	r0, r3
 8009252:	d103      	bne.n	800925c <poll+0x1c>
 8009254:	689a      	ldr	r2, [r3, #8]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d018      	beq.n	800928e <poll+0x4e>

	/* Start next buffer sending if USBD is ready */
	if ((CDC_Transmit_FS( (uint8_t*)pbuff_tmp->begin, (pbuff_tmp->work - pbuff_tmp->begin))) == USBD_OK)
 800925c:	68a1      	ldr	r1, [r4, #8]
 800925e:	6820      	ldr	r0, [r4, #0]
 8009260:	1a09      	subs	r1, r1, r0
 8009262:	b289      	uxth	r1, r1
 8009264:	f7f8 fe82 	bl	8001f6c <CDC_Transmit_FS>
 8009268:	b998      	cbnz	r0, 8009292 <poll+0x52>
	{ // Here, not busy, AND sending of next-buffer-to-send has been started
cdcct5 +=1;	// DEBUG: Count number of buffer "sends"
 800926a:	4a0e      	ldr	r2, [pc, #56]	; (80092a4 <poll+0x64>)
 800926c:	6813      	ldr	r3, [r2, #0]
 800926e:	3301      	adds	r3, #1
 8009270:	6013      	str	r3, [r2, #0]
		pbuff_i = pbuff_tmp;	// Save buffer pointer being sent
 8009272:	4b0a      	ldr	r3, [pc, #40]	; (800929c <poll+0x5c>)
 8009274:	601c      	str	r4, [r3, #0]
		pbuff_i->work = pbuff_i->begin;  // Reset char pointer for buffer just sent
 8009276:	6823      	ldr	r3, [r4, #0]
 8009278:	60a3      	str	r3, [r4, #8]
		if (pbuff_m == pbuff_i)
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <poll+0x60>)
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	4284      	cmp	r4, r0
 8009280:	d109      	bne.n	8009296 <poll+0x56>
		{
			pbuff_m = step_ptr(pbuff_m);
 8009282:	f7ff ffc5 	bl	8009210 <step_ptr>
 8009286:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <poll+0x60>)
 8009288:	6018      	str	r0, [r3, #0]
		}
		return 1;
 800928a:	2001      	movs	r0, #1
 800928c:	bd10      	pop	{r4, pc}
{
	struct CDCBUFFPTR* pbuff_tmp;

	/* Return if caught up with buffer ptrs AND no new data */
	pbuff_tmp = step_ptr(pbuff_i);	// Advance last sent ptr JIC
	if ((pbuff_m == pbuff_tmp)	&& ((pbuff_m->work - pbuff_m->begin) == 0)) return 2;
 800928e:	2002      	movs	r0, #2
 8009290:	bd10      	pop	{r4, pc}
		{
			pbuff_m = step_ptr(pbuff_m);
		}
		return 1;
	}
	return 0;	
 8009292:	2000      	movs	r0, #0
 8009294:	bd10      	pop	{r4, pc}
		pbuff_i->work = pbuff_i->begin;  // Reset char pointer for buffer just sent
		if (pbuff_m == pbuff_i)
		{
			pbuff_m = step_ptr(pbuff_m);
		}
		return 1;
 8009296:	2001      	movs	r0, #1
	}
	return 0;	
}
 8009298:	bd10      	pop	{r4, pc}
 800929a:	bf00      	nop
 800929c:	20004eb0 	.word	0x20004eb0
 80092a0:	20004ef8 	.word	0x20004ef8
 80092a4:	20006c18 	.word	0x20006c18

080092a8 <cdc_txbuff_callback>:
*/
int cdcct1 = 0;
int cdcct2 = 0;

void cdc_txbuff_callback(void const * argument)
{
 80092a8:	b508      	push	{r3, lr}
	if (cdcaddbusy != 0)
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <cdc_txbuff_callback+0x20>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	b123      	cbz	r3, 80092ba <cdc_txbuff_callback+0x12>
	{ // Here, 'cdc_txbuff_add' is busy adding chars to a buffer
cdcct2 += 1;
 80092b0:	4a06      	ldr	r2, [pc, #24]	; (80092cc <cdc_txbuff_callback+0x24>)
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	3301      	adds	r3, #1
 80092b6:	6013      	str	r3, [r2, #0]

		return;
 80092b8:	bd08      	pop	{r3, pc}
	}
cdcct1 += 1;
 80092ba:	4a05      	ldr	r2, [pc, #20]	; (80092d0 <cdc_txbuff_callback+0x28>)
 80092bc:	6813      	ldr	r3, [r2, #0]
 80092be:	3301      	adds	r3, #1
 80092c0:	6013      	str	r3, [r2, #0]
	poll();	// Send next buffer, if available
 80092c2:	f7ff ffbd 	bl	8009240 <poll>
 80092c6:	bd08      	pop	{r3, pc}
 80092c8:	20004efc 	.word	0x20004efc
 80092cc:	20004eac 	.word	0x20004eac
 80092d0:	20004f00 	.word	0x20004f00

080092d4 <xCdcTxTaskSendCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: Handle to queue
 * *************************************************************************/
osThreadId xCdcTxTaskSendCreate(uint32_t taskpriority)
{
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	b08e      	sub	sp, #56	; 0x38
 80092d8:	4606      	mov	r6, r0
	/* definition and creation of task: CdcTxTaskSend */
	osThreadStaticDef(CdcTxTaskSend, StartCdcTxTaskSend, osPriorityNormal, 0, 64, CdcTxTaskSendBuffer, &CdcTxTaskSendControlBlock);
 80092da:	ac07      	add	r4, sp, #28
 80092dc:	4d16      	ldr	r5, [pc, #88]	; (8009338 <xCdcTxTaskSendCreate+0x64>)
 80092de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80092e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   CdcTxTaskSendHandle = osThreadCreate(osThread(CdcTxTaskSend), NULL);
 80092ea:	2100      	movs	r1, #0
 80092ec:	a807      	add	r0, sp, #28
 80092ee:	f7fd feb3 	bl	8007058 <osThreadCreate>
 80092f2:	4c12      	ldr	r4, [pc, #72]	; (800933c <xCdcTxTaskSendCreate+0x68>)
 80092f4:	6020      	str	r0, [r4, #0]
	vTaskPrioritySet( CdcTxTaskSendHandle, taskpriority );
 80092f6:	4631      	mov	r1, r6
 80092f8:	f7fc fe5e 	bl	8005fb8 <vTaskPrioritySet>
	if (CdcTxTaskSendHandle == NULL) return NULL;
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	b1c8      	cbz	r0, 8009334 <xCdcTxTaskSendCreate+0x60>

	/* FreeRTOS queue for task with data to send. */
  osMessageQStaticDef(CdcTxSendQ, CDCTXQUEUESIZE, struct CDCTXTASKBCB, CdcTxTaskSendQBuffer, &CdcTxTaskSendQCB);
 8009300:	ac03      	add	r4, sp, #12
 8009302:	f105 030c 	add.w	r3, r5, #12
 8009306:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  CdcTxTaskSendQHandle = osMessageCreate(osMessageQ(CdcTxSendQ), NULL);
 800930c:	2100      	movs	r1, #0
 800930e:	4620      	mov	r0, r4
 8009310:	f7fd ff5c 	bl	80071cc <osMessageCreate>
 8009314:	4c0a      	ldr	r4, [pc, #40]	; (8009340 <xCdcTxTaskSendCreate+0x6c>)
 8009316:	6020      	str	r0, [r4, #0]

  /* definition and creation of CdcTxTimer */
  osTimerDef(CdcTxTim, cdc_txbuff_callback);
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <xCdcTxTaskSendCreate+0x70>)
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	9202      	str	r2, [sp, #8]
  CdcTxTimerHandle = osTimerCreate(osTimer(CdcTxTim), osTimerPeriodic, NULL);
 8009320:	2101      	movs	r1, #1
 8009322:	a801      	add	r0, sp, #4
 8009324:	f7fd fed6 	bl	80070d4 <osTimerCreate>
 8009328:	4b07      	ldr	r3, [pc, #28]	; (8009348 <xCdcTxTaskSendCreate+0x74>)
 800932a:	6018      	str	r0, [r3, #0]

	/* Start timer callback polling */
	osTimerStart (CdcTxTimerHandle, CDCTIMEDURATION);	
 800932c:	2105      	movs	r1, #5
 800932e:	f7fd fef3 	bl	8007118 <osTimerStart>

	return CdcTxTaskSendQHandle;
 8009332:	6820      	ldr	r0, [r4, #0]
}
 8009334:	b00e      	add	sp, #56	; 0x38
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	0800eafc 	.word	0x0800eafc
 800933c:	20004eb4 	.word	0x20004eb4
 8009340:	20006c20 	.word	0x20006c20
 8009344:	080092a9 	.word	0x080092a9
 8009348:	20006c28 	.word	0x20006c28

0800934c <cdc_txbuff_init>:
  * @param	: size = number of bytes in each buffer
  * @return	: NULL = calloc failed; not NULL = pointer to 1st struct with buff ptrs
  ******************************************************************************
  */
struct CDCBUFFPTR* cdc_txbuff_init(uint16_t numbuff, uint16_t size)
{
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
	/* Minimum of 2 buffers required */
	if (numbuff < 2)
 8009352:	2801      	cmp	r0, #1
 8009354:	d800      	bhi.n	8009358 <cdc_txbuff_init+0xc>
	{ // Here, we force 2, but we *could* just bomb, but what if the hapless Programmer
		// doesn't check the return!
		numbuff = 2; 
 8009356:	2402      	movs	r4, #2
	}
	/* Miminum of one char for the buffer (is this a duh?) */
	if (size == 0)
 8009358:	b905      	cbnz	r5, 800935c <cdc_txbuff_init+0x10>
	{
		size = 1;
 800935a:	2501      	movs	r5, #1
	}

	struct CDCBUFFPTR* pb = calloc(numbuff, sizeof(struct CDCBUFFPTR));
 800935c:	210c      	movs	r1, #12
 800935e:	4620      	mov	r0, r4
 8009360:	f001 fcea 	bl	800ad38 <calloc>
	if (pb == NULL)  return NULL;
 8009364:	4603      	mov	r3, r0
 8009366:	b1e0      	cbz	r0, 80093a2 <cdc_txbuff_init+0x56>
	pbuff_begin = pb;
 8009368:	4a10      	ldr	r2, [pc, #64]	; (80093ac <cdc_txbuff_init+0x60>)
 800936a:	6010      	str	r0, [r2, #0]
	pbuff_end = pbuff_begin;
	pbuff_end += numbuff;
 800936c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009370:	00a6      	lsls	r6, r4, #2
 8009372:	1981      	adds	r1, r0, r6
 8009374:	4a0e      	ldr	r2, [pc, #56]	; (80093b0 <cdc_txbuff_init+0x64>)
 8009376:	6011      	str	r1, [r2, #0]

	/* Get memory for buffers, and init pointers for each */
	while (pb != pbuff_end)
 8009378:	e007      	b.n	800938a <cdc_txbuff_init+0x3e>
	{
	   if (pbuff_init(pb++, size) == NULL) return NULL;
 800937a:	f103 040c 	add.w	r4, r3, #12
 800937e:	4629      	mov	r1, r5
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff ff51 	bl	8009228 <pbuff_init>
 8009386:	b170      	cbz	r0, 80093a6 <cdc_txbuff_init+0x5a>
 8009388:	4623      	mov	r3, r4
	pbuff_begin = pb;
	pbuff_end = pbuff_begin;
	pbuff_end += numbuff;

	/* Get memory for buffers, and init pointers for each */
	while (pb != pbuff_end)
 800938a:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <cdc_txbuff_init+0x64>)
 800938c:	6812      	ldr	r2, [r2, #0]
 800938e:	4293      	cmp	r3, r2
 8009390:	d1f3      	bne.n	800937a <cdc_txbuff_init+0x2e>
	{
	   if (pbuff_init(pb++, size) == NULL) return NULL;
   }

	/* Init pointers for adding/taking */
	pbuff_m = pbuff_begin;	// Adding
 8009392:	4b06      	ldr	r3, [pc, #24]	; (80093ac <cdc_txbuff_init+0x60>)
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <cdc_txbuff_init+0x68>)
 8009398:	6018      	str	r0, [r3, #0]
	pbuff_i = pbuff_begin;	// Taking
	pbuff_i += numbuff;		//  (initially one behind Adding)
 800939a:	4406      	add	r6, r0
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <cdc_txbuff_init+0x6c>)
 800939e:	601e      	str	r6, [r3, #0]

   return pbuff_m;	// Probably not used except for debugging
 80093a0:	bd70      	pop	{r4, r5, r6, pc}
	{
		size = 1;
	}

	struct CDCBUFFPTR* pb = calloc(numbuff, sizeof(struct CDCBUFFPTR));
	if (pb == NULL)  return NULL;
 80093a2:	2000      	movs	r0, #0
 80093a4:	bd70      	pop	{r4, r5, r6, pc}
	pbuff_end += numbuff;

	/* Get memory for buffers, and init pointers for each */
	while (pb != pbuff_end)
	{
	   if (pbuff_init(pb++, size) == NULL) return NULL;
 80093a6:	2000      	movs	r0, #0
	pbuff_m = pbuff_begin;	// Adding
	pbuff_i = pbuff_begin;	// Taking
	pbuff_i += numbuff;		//  (initially one behind Adding)

   return pbuff_m;	// Probably not used except for debugging
}
 80093a8:	bd70      	pop	{r4, r5, r6, pc}
 80093aa:	bf00      	nop
 80093ac:	20004e08 	.word	0x20004e08
 80093b0:	20004e0c 	.word	0x20004e0c
 80093b4:	20004ef8 	.word	0x20004ef8
 80093b8:	20004eb0 	.word	0x20004eb0

080093bc <cdc_txbuff_poll>:
  */
static uint32_t poll(void);
static volatile uint32_t cdcaddbusy = 0;	// 0 = cdc_txbuff_add routine not active; 1 = in process

uint32_t cdc_txbuff_poll(void)
{
 80093bc:	b510      	push	{r4, lr}
	cdcaddbusy = 1;	// Show callback that adding data is active
 80093be:	4c04      	ldr	r4, [pc, #16]	; (80093d0 <cdc_txbuff_poll+0x14>)
 80093c0:	2301      	movs	r3, #1
 80093c2:	6023      	str	r3, [r4, #0]
	uint32_t ret = poll();
 80093c4:	f7ff ff3c 	bl	8009240 <poll>
	cdcaddbusy = 0;	// Done adding	
 80093c8:	2300      	movs	r3, #0
 80093ca:	6023      	str	r3, [r4, #0]
	return ret;
}
 80093cc:	bd10      	pop	{r4, pc}
 80093ce:	bf00      	nop
 80093d0:	20004efc 	.word	0x20004efc

080093d4 <cdc_txbuff_add>:
uint32_t cdcct4;
uint32_t cdcT0;
uint32_t cdcMax;

static uint32_t cdc_txbuff_add(struct CDCTXTASKBCB* p)
{
 80093d4:	b538      	push	{r3, r4, r5, lr}
 80093d6:	4604      	mov	r4, r0
	cdcaddbusy = 1;	// Show callback that adding data is active
 80093d8:	2201      	movs	r2, #1
 80093da:	4b23      	ldr	r3, [pc, #140]	; (8009468 <cdc_txbuff_add+0x94>)
 80093dc:	601a      	str	r2, [r3, #0]
	uint16_t csize = 0;	// Count of chars added
 80093de:	2500      	movs	r5, #0

	/* Add data to current buffer */
 	while (p->size > 0)
 80093e0:	e037      	b.n	8009452 <cdc_txbuff_add+0x7e>
   {
		// Copy into current "add-to" buffer
		*pbuff_m->work++ = *p->pbuf++;
 80093e2:	4b22      	ldr	r3, [pc, #136]	; (800946c <cdc_txbuff_add+0x98>)
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	6883      	ldr	r3, [r0, #8]
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	6082      	str	r2, [r0, #8]
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	1c51      	adds	r1, r2, #1
 80093f0:	6021      	str	r1, [r4, #0]
 80093f2:	7812      	ldrb	r2, [r2, #0]
 80093f4:	701a      	strb	r2, [r3, #0]
		p->size -= 1;	// Count down chars copied
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	6063      	str	r3, [r4, #4]

		if (pbuff_m->work == pbuff_m->end) // End of local buffer?
 80093fc:	6882      	ldr	r2, [r0, #8]
 80093fe:	6843      	ldr	r3, [r0, #4]
 8009400:	429a      	cmp	r2, r3
 8009402:	d124      	bne.n	800944e <cdc_txbuff_add+0x7a>
		{ // Here, yes
			pbuff_m = step_ptr(pbuff_m);	// Advance ptr to next buff
 8009404:	f7ff ff04 	bl	8009210 <step_ptr>
 8009408:	4b18      	ldr	r3, [pc, #96]	; (800946c <cdc_txbuff_add+0x98>)
 800940a:	6018      	str	r0, [r3, #0]
			pbuff_m->work = pbuff_m->begin; // Start at beginning 
 800940c:	6803      	ldr	r3, [r0, #0]
 800940e:	6083      	str	r3, [r0, #8]
			if (pbuff_m == pbuff_i)
 8009410:	4b17      	ldr	r3, [pc, #92]	; (8009470 <cdc_txbuff_add+0x9c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4298      	cmp	r0, r3
 8009416:	d11a      	bne.n	800944e <cdc_txbuff_add+0x7a>
			{ // Here, we point to output buffer; about to OVERRUN
cdcct4 += 1;	// DEBUG: Count number of instances
 8009418:	4a16      	ldr	r2, [pc, #88]	; (8009474 <cdc_txbuff_add+0xa0>)
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	3301      	adds	r3, #1
 800941e:	6013      	str	r3, [r2, #0]
#include "DTW_counter.h"
cdcT0 = DTWTIME;	// DEBUG: Time wasted in loop
 8009420:	4b15      	ldr	r3, [pc, #84]	; (8009478 <cdc_txbuff_add+0xa4>)
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	4b15      	ldr	r3, [pc, #84]	; (800947c <cdc_txbuff_add+0xa8>)
 8009426:	601a      	str	r2, [r3, #0]
				while(poll() == 0)	// Loop until buffer is free   
 8009428:	e003      	b.n	8009432 <cdc_txbuff_add+0x5e>
				{
cdcct3+=1;	// DEBUG: count loops
 800942a:	4a15      	ldr	r2, [pc, #84]	; (8009480 <cdc_txbuff_add+0xac>)
 800942c:	6813      	ldr	r3, [r2, #0]
 800942e:	3301      	adds	r3, #1
 8009430:	6013      	str	r3, [r2, #0]
			if (pbuff_m == pbuff_i)
			{ // Here, we point to output buffer; about to OVERRUN
cdcct4 += 1;	// DEBUG: Count number of instances
#include "DTW_counter.h"
cdcT0 = DTWTIME;	// DEBUG: Time wasted in loop
				while(poll() == 0)	// Loop until buffer is free   
 8009432:	f7ff ff05 	bl	8009240 <poll>
 8009436:	2800      	cmp	r0, #0
 8009438:	d0f7      	beq.n	800942a <cdc_txbuff_add+0x56>
				{
cdcct3+=1;	// DEBUG: count loops
					
				}
// DEBUG: time wasted in loop
cdcT0 = DTWTIME - cdcT0;
 800943a:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <cdc_txbuff_add+0xa4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a0f      	ldr	r2, [pc, #60]	; (800947c <cdc_txbuff_add+0xa8>)
 8009440:	6811      	ldr	r1, [r2, #0]
 8009442:	1a5b      	subs	r3, r3, r1
 8009444:	6013      	str	r3, [r2, #0]
cdcMax += cdcT0;
 8009446:	4a0f      	ldr	r2, [pc, #60]	; (8009484 <cdc_txbuff_add+0xb0>)
 8009448:	6811      	ldr	r1, [r2, #0]
 800944a:	440b      	add	r3, r1
 800944c:	6013      	str	r3, [r2, #0]
			}
		}
		csize += 1;
 800944e:	3501      	adds	r5, #1
 8009450:	b2ad      	uxth	r5, r5
{
	cdcaddbusy = 1;	// Show callback that adding data is active
	uint16_t csize = 0;	// Count of chars added

	/* Add data to current buffer */
 	while (p->size > 0)
 8009452:	6863      	ldr	r3, [r4, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1c4      	bne.n	80093e2 <cdc_txbuff_add+0xe>
		}
		csize += 1;
	}

	/* All chars in the input string were added to the buffer. */
	cdc_txbuff_poll();	// Start sending if not already sending   
 8009458:	f7ff ffb0 	bl	80093bc <cdc_txbuff_poll>

	cdcaddbusy = 0;	// Done adding	
 800945c:	2200      	movs	r2, #0
 800945e:	4b02      	ldr	r3, [pc, #8]	; (8009468 <cdc_txbuff_add+0x94>)
 8009460:	601a      	str	r2, [r3, #0]
	return csize;
}
 8009462:	4628      	mov	r0, r5
 8009464:	bd38      	pop	{r3, r4, r5, pc}
 8009466:	bf00      	nop
 8009468:	20004efc 	.word	0x20004efc
 800946c:	20004ef8 	.word	0x20004ef8
 8009470:	20004eb0 	.word	0x20004eb0
 8009474:	20006c24 	.word	0x20006c24
 8009478:	e0001004 	.word	0xe0001004
 800947c:	20006c2c 	.word	0x20006c2c
 8009480:	20006c14 	.word	0x20006c14
 8009484:	20006c1c 	.word	0x20006c1c

08009488 <StartCdcTxTaskSend>:
/* *************************************************************************
 * void StartSerialTaskSend(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartCdcTxTaskSend(void const * argument)
{
 8009488:	b500      	push	{lr}
 800948a:	b083      	sub	sp, #12
  {
		do
		{
		/* Wait indefinitely for someone to load something into the queue */
		/* Skip over empty returns, and NULL pointers that would cause trouble */
			Qret = xQueueReceive(CdcTxTaskSendQHandle,&ssb,portMAX_DELAY);
 800948c:	2300      	movs	r3, #0
 800948e:	f04f 32ff 	mov.w	r2, #4294967295
 8009492:	4669      	mov	r1, sp
 8009494:	4807      	ldr	r0, [pc, #28]	; (80094b4 <StartCdcTxTaskSend+0x2c>)
 8009496:	6800      	ldr	r0, [r0, #0]
 8009498:	f7fc fad4 	bl	8005a44 <xQueueGenericReceive>
			if (Qret == pdPASS) // Break loop if not empty
 800949c:	2801      	cmp	r0, #1
 800949e:	d005      	beq.n	80094ac <StartCdcTxTaskSend+0x24>
				break;
		} while ( (ssb.pbuf == NULL) || (ssb.size == 0));
 80094a0:	9b00      	ldr	r3, [sp, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0f2      	beq.n	800948c <StartCdcTxTaskSend+0x4>
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0ef      	beq.n	800948c <StartCdcTxTaskSend+0x4>
	   cdc_txbuff_add(&ssb);  // Add data to local cdc tx buffer
 80094ac:	4668      	mov	r0, sp
 80094ae:	f7ff ff91 	bl	80093d4 <cdc_txbuff_add>
  }
 80094b2:	e7eb      	b.n	800948c <StartCdcTxTaskSend+0x4>
 80094b4:	20006c20 	.word	0x20006c20

080094b8 <DTW_counter_init>:
void DTW_counter_init(void)
{
/* Use DTW_CYCCNT counter for timing */
/* CYCCNT counter is in the Cortex-M-series core.  See the following for details 
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0337g/BABJFFGJ.html */
	*(volatile unsigned int*)0xE000EDFC |= 0x01000000; // SCB_DEMCR = 0x01000000;
 80094b8:	4a05      	ldr	r2, [pc, #20]	; (80094d0 <DTW_counter_init+0x18>)
 80094ba:	6813      	ldr	r3, [r2, #0]
 80094bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094c0:	6013      	str	r3, [r2, #0]
	*(volatile unsigned int*)0xE0001000 |= 0x1;	// Enable DTW_CYCCNT (Data Watch cycle counter)
 80094c2:	4a04      	ldr	r2, [pc, #16]	; (80094d4 <DTW_counter_init+0x1c>)
 80094c4:	6813      	ldr	r3, [r2, #0]
 80094c6:	f043 0301 	orr.w	r3, r3, #1
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	e000edfc 	.word	0xe000edfc
 80094d4:	e0001000 	.word	0xe0001000

080094d8 <StartCanTxTask>:
/* *************************************************************************
 * void StartCanTxTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartCanTxTask(void const * argument)
{
 80094d8:	b500      	push	{lr}
 80094da:	b089      	sub	sp, #36	; 0x24
//osDelay(512*4); // Debug delay

  /* Infinite RTOS Task loop */
  for(;;)
  {
HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // ORANGE
 80094dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80094e0:	480a      	ldr	r0, [pc, #40]	; (800950c <StartCanTxTask+0x34>)
 80094e2:	f7fb fc8b 	bl	8004dfc <HAL_GPIO_TogglePin>
		Qret = xQueueReceive(CanTxQHandle,&txq,portMAX_DELAY);
 80094e6:	2300      	movs	r3, #0
 80094e8:	f04f 32ff 	mov.w	r2, #4294967295
 80094ec:	4669      	mov	r1, sp
 80094ee:	4808      	ldr	r0, [pc, #32]	; (8009510 <StartCanTxTask+0x38>)
 80094f0:	6800      	ldr	r0, [r0, #0]
 80094f2:	f7fc faa7 	bl	8005a44 <xQueueGenericReceive>
		if (Qret == pdPASS) // Break loop if not empty
 80094f6:	2801      	cmp	r0, #1
 80094f8:	d1f0      	bne.n	80094dc <StartCanTxTask+0x4>
		{
			can_driver_put(txq.pctl, &txq.can, txq.maxretryct, txq.bits);
 80094fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80094fe:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8009502:	a902      	add	r1, sp, #8
 8009504:	9800      	ldr	r0, [sp, #0]
 8009506:	f000 f947 	bl	8009798 <can_driver_put>
 800950a:	e7e7      	b.n	80094dc <StartCanTxTask+0x4>
 800950c:	40020c00 	.word	0x40020c00
 8009510:	20006c30 	.word	0x20006c30

08009514 <StartCanRxTask>:
/* *************************************************************************
 * void StartCanRxTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartCanRxTask(void const * argument)
{
 8009514:	b508      	push	{r3, lr}
/* NOTE:  Since there is just one receiving task, this task is not needed.
          However, the initialization to create the queue is needed.
*/
	vTaskSuspend( NULL );
 8009516:	2000      	movs	r0, #0
 8009518:	f7fc ffb8 	bl	800648c <vTaskSuspend>
//	struct CANRCVBUFN ncan;

  /* Infinite RTOS Task loop */
  for(;;)
  {
osDelay(11000);
 800951c:	f642 20f8 	movw	r0, #11000	; 0x2af8
 8009520:	f7fd fdd0 	bl	80070c4 <osDelay>
 8009524:	e7fa      	b.n	800951c <StartCanRxTask+0x8>
 8009526:	bf00      	nop

08009528 <xCanTxTaskCreate>:
 * @param	: taskpriority = Task priority (just as it says!)
 * @param	: queuesize = number of items in Tx queue
 * @return	: QueueHandle_t = queue handle
 * *************************************************************************/
QueueHandle_t  xCanTxTaskCreate(uint32_t taskpriority, int32_t queuesize)
{
 8009528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952a:	b089      	sub	sp, #36	; 0x24
 800952c:	4607      	mov	r7, r0
 800952e:	460e      	mov	r6, r1
 /* definition and creation of CanTask */
  osThreadDef(CanTxTask, StartCanTxTask, osPriorityNormal, 0, 256);
 8009530:	ac01      	add	r4, sp, #4
 8009532:	4d0c      	ldr	r5, [pc, #48]	; (8009564 <xCanTxTaskCreate+0x3c>)
 8009534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009538:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800953c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CanTxTaskHandle = osThreadCreate(osThread(CanTxTask), NULL);
 8009540:	2100      	movs	r1, #0
 8009542:	a801      	add	r0, sp, #4
 8009544:	f7fd fd88 	bl	8007058 <osThreadCreate>
 8009548:	4b07      	ldr	r3, [pc, #28]	; (8009568 <xCanTxTaskCreate+0x40>)
 800954a:	6018      	str	r0, [r3, #0]
	vTaskPrioritySet( CanTxTaskHandle, taskpriority );
 800954c:	4639      	mov	r1, r7
 800954e:	f7fc fd33 	bl	8005fb8 <vTaskPrioritySet>

	/* FreeRTOS queue for task with data to send. */
	CanTxQHandle = xQueueCreate(queuesize, sizeof(struct CANTXQMSG));
 8009552:	2200      	movs	r2, #0
 8009554:	2120      	movs	r1, #32
 8009556:	4630      	mov	r0, r6
 8009558:	f7fc f8b4 	bl	80056c4 <xQueueGenericCreate>
 800955c:	4b03      	ldr	r3, [pc, #12]	; (800956c <xCanTxTaskCreate+0x44>)
 800955e:	6018      	str	r0, [r3, #0]
	return CanTxQHandle;
}
 8009560:	b009      	add	sp, #36	; 0x24
 8009562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009564:	0800eb28 	.word	0x0800eb28
 8009568:	20006c3c 	.word	0x20006c3c
 800956c:	20006c30 	.word	0x20006c30

08009570 <canmsg_compress>:
 * @param	: pcan = pointer to useful hardware format output
 * @param	: phal = pointer to HAL header input
 * @param	: pdat = pointer to HAL payload data array input
 * *************************************************************************/
static void canmsg_compress(struct CANRCVBUF *pcan, CAN_RxHeaderTypeDef *phal, uint8_t *pdat)
{
 8009570:	b410      	push	{r4}
	if (phal->IDE != 0)
 8009572:	688b      	ldr	r3, [r1, #8]
 8009574:	b123      	cbz	r3, 8009580 <canmsg_compress+0x10>
	{ // Extended 29b CAN id
		pcan->id = phal->IDE | (phal->ExtId << 3);
 8009576:	684c      	ldr	r4, [r1, #4]
 8009578:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	e002      	b.n	8009586 <canmsg_compress+0x16>
	}
	else
	{ // Standard 11b CAN id
		pcan->id = phal->StdId << 21;
 8009580:	680b      	ldr	r3, [r1, #0]
 8009582:	055b      	lsls	r3, r3, #21
 8009584:	6003      	str	r3, [r0, #0]
	}
	pcan->id |= phal->RTR;
 8009586:	68cb      	ldr	r3, [r1, #12]
 8009588:	6804      	ldr	r4, [r0, #0]
 800958a:	4323      	orrs	r3, r4
 800958c:	6003      	str	r3, [r0, #0]
	
	pcan->dlc = (phal->DLC & 0xf);
 800958e:	690b      	ldr	r3, [r1, #16]
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	6043      	str	r3, [r0, #4]

	pcan->cd.uc[0] = *(pdat+0);
 8009596:	7813      	ldrb	r3, [r2, #0]
 8009598:	7203      	strb	r3, [r0, #8]
	pcan->cd.uc[1] = *(pdat+1);
 800959a:	7853      	ldrb	r3, [r2, #1]
 800959c:	7243      	strb	r3, [r0, #9]
	pcan->cd.uc[2] = *(pdat+2);
 800959e:	7893      	ldrb	r3, [r2, #2]
 80095a0:	7283      	strb	r3, [r0, #10]
	pcan->cd.uc[3] = *(pdat+3);
 80095a2:	78d3      	ldrb	r3, [r2, #3]
 80095a4:	72c3      	strb	r3, [r0, #11]
	pcan->cd.uc[4] = *(pdat+4);
 80095a6:	7913      	ldrb	r3, [r2, #4]
 80095a8:	7303      	strb	r3, [r0, #12]
	pcan->cd.uc[5] = *(pdat+5);
 80095aa:	7953      	ldrb	r3, [r2, #5]
 80095ac:	7343      	strb	r3, [r0, #13]
	pcan->cd.uc[6] = *(pdat+6);
 80095ae:	7993      	ldrb	r3, [r2, #6]
 80095b0:	7383      	strb	r3, [r0, #14]
	pcan->cd.uc[7] = *(pdat+7);
 80095b2:	79d3      	ldrb	r3, [r2, #7]
 80095b4:	73c3      	strb	r3, [r0, #15]
	return;
}
 80095b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <moveremove2>:

//	disable_TXints(pctl, save);	// TX or RX(other) interrupts might remove a msg from the free list.
// Each CAN module has its own linked list and RX0,1 does not use the linked list, so disabling interrupts is not needed.

	/* Remove from pending; move to free list. */
	pmov = pctl->pxprv->plinknext;	// Pts to removed item
 80095bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80095be:	681b      	ldr	r3, [r3, #0]
	pctl->pxprv->plinknext = pmov->plinknext;
 80095c0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6011      	str	r1, [r2, #0]

	// Adding to free list
	pmov->plinknext = pctl->frii.plinknext; 
 80095c6:	6882      	ldr	r2, [r0, #8]
 80095c8:	601a      	str	r2, [r3, #0]
	pctl->frii.plinknext  = pmov;
 80095ca:	6083      	str	r3, [r0, #8]
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop

080095d0 <loadmbx2>:
{
	uint32_t uidata[2];
	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef halmsg;

	volatile struct CAN_POOLBLOCK* p = pctl->pend.plinknext;
 80095d0:	6b03      	ldr	r3, [r0, #48]	; 0x30

	if (p == NULL)
 80095d2:	b90b      	cbnz	r3, 80095d8 <loadmbx2+0x8>
	{
		pctl->pxprv = NULL;
 80095d4:	6503      	str	r3, [r0, #80]	; 0x50
 80095d6:	4770      	bx	lr
/*---------------------------------------------------------------------------------------------
 * static void loadmbx2(struct CAN_CTLBLOCK* pctl)
 * @brief	: Load mailbox
 ----------------------------------------------------------------------------------------------*/
static void loadmbx2(struct CAN_CTLBLOCK* pctl)
{
 80095d8:	b500      	push	{lr}
 80095da:	b08b      	sub	sp, #44	; 0x2c
	{
		pctl->pxprv = NULL;
		return; // Return if no more to send
	}

	pctl->pxprv = &pctl->pend;	// Save in a static var
 80095dc:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80095e0:	6502      	str	r2, [r0, #80]	; 0x50
	pctl->phcan->sTxMailBox[0].TDHR = p->can.cd.ui[1];	// CAN_TDL0RH: mailbox 0 data low  register
	/* Load CAN ID with TX Request bit set */
	pctl->phcan->sTxMailBox[0].TIR = (p->can.id | 0x1); 	// CAN_TI0R:   mailbox 0 identifier register
#else
	/* Expand hardware friendly format to HAL format (which gets changed back to hardware friendly) */
	halmsg.StdId = (p->can.id >> 21);
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	0d52      	lsrs	r2, r2, #21
 80095e6:	9201      	str	r2, [sp, #4]
	halmsg.ExtId = (p->can.id >>  3);
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	08d2      	lsrs	r2, r2, #3
 80095ec:	9202      	str	r2, [sp, #8]
	halmsg.IDE   = (p->can.id & CAN_ID_EXT);
 80095ee:	689a      	ldr	r2, [r3, #8]
 80095f0:	f002 0204 	and.w	r2, r2, #4
 80095f4:	9203      	str	r2, [sp, #12]
	halmsg.RTR   = (p->can.id & CAN_RTR_REMOTE);
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	f002 0202 	and.w	r2, r2, #2
 80095fc:	9204      	str	r2, [sp, #16]
	halmsg.DLC   = (p->can.dlc & 0xf);
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	f002 020f 	and.w	r2, r2, #15
 8009604:	9205      	str	r2, [sp, #20]
	uidata[0]   = p->can.cd.ui[0];
 8009606:	691a      	ldr	r2, [r3, #16]
 8009608:	9208      	str	r2, [sp, #32]
	uidata[1]   = p->can.cd.ui[1];
 800960a:	695a      	ldr	r2, [r3, #20]
 800960c:	9209      	str	r2, [sp, #36]	; 0x24
	pctl->mbx0  = p->can.id;	// Shadow MBX0 ID
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	6283      	str	r3, [r0, #40]	; 0x28
   HAL_CAN_AddTxMessage(pctl->phcan, &halmsg, (uint8_t*)uidata, &TxMailbox);
 8009612:	ab07      	add	r3, sp, #28
 8009614:	aa08      	add	r2, sp, #32
 8009616:	a901      	add	r1, sp, #4
 8009618:	6800      	ldr	r0, [r0, #0]
 800961a:	f7fe ff5d 	bl	80084d8 <HAL_CAN_AddTxMessage>
#endif
	return;
}
 800961e:	b00b      	add	sp, #44	; 0x2c
 8009620:	f85d fb04 	ldr.w	pc, [sp], #4

08009624 <can_iface_add_take>:
 * @param	: pctl = pointer to our CAN control block
 * @return	: pointer to pointer pointing to 'take' location in circular CAN buffer
 * 			:  NULL = Failed 
*******************************************************************************/
struct CANTAKEPTR* can_iface_add_take(struct CAN_CTLBLOCK*  pctl)
{
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4605      	mov	r5, r0
	struct CANTAKEPTR* p;
	
taskENTER_CRITICAL();
 8009628:	f7fd ff64 	bl	80074f4 <vPortEnterCritical>
	/* Get one measily pointer */
	p = (struct CANTAKEPTR*)calloc(1, sizeof(struct CANTAKEPTR));
 800962c:	2108      	movs	r1, #8
 800962e:	2001      	movs	r0, #1
 8009630:	f001 fb82 	bl	800ad38 <calloc>
	if (p == NULL){ taskEXIT_CRITICAL();return NULL;}
 8009634:	b918      	cbnz	r0, 800963e <can_iface_add_take+0x1a>
 8009636:	f7fd ff7f 	bl	8007538 <vPortExitCritical>
 800963a:	2000      	movs	r0, #0
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	4604      	mov	r4, r0

	/* Initialize the pointer to curret add location of the circular buffer. */
   /* Given 'p', the beginning, end, and location CAN msgs are being added
      can be accessed. */
	p->pcir  = &pctl->cirptrs;
 8009640:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8009644:	6003      	str	r3, [r0, #0]

	/* Start the 'take' pointer at the position in the circular buffer where
      CAN msgs are currently being added. */
	p->ptake = pctl->cirptrs.pwork;
 8009646:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009648:	6043      	str	r3, [r0, #4]

taskEXIT_CRITICAL();
 800964a:	f7fd ff75 	bl	8007538 <vPortExitCritical>
	return p;
 800964e:	4620      	mov	r0, r4
}
 8009650:	bd38      	pop	{r3, r4, r5, pc}
 8009652:	bf00      	nop

08009654 <can_iface_mbx_init>:
 * @param	: tskhandle = task handle that will be used for notification; NULL = use current task
 * @param	: notebit = notification bit if notifications used
 * @return	: pointer to pointer pointing to 'take' location in circular CAN buffer 
*******************************************************************************/
struct CANTAKEPTR* can_iface_mbx_init(struct CAN_CTLBLOCK* pctl, osThreadId tskhandle, uint32_t notebit)
{
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4604      	mov	r4, r0
 8009658:	4615      	mov	r5, r2
	if (tskhandle == NULL)
 800965a:	4608      	mov	r0, r1
 800965c:	b909      	cbnz	r1, 8009662 <can_iface_mbx_init+0xe>
	{ // Here, use the current running Task
		tskhandle = xTaskGetCurrentTaskHandle();
 800965e:	f7fd f861 	bl	8006724 <xTaskGetCurrentTaskHandle>
	}

	/* Notification of CAN msgs added to the circular buffer are only for one task. */
	pctl->tsknote.tskhandle = tskhandle;
 8009662:	6660      	str	r0, [r4, #100]	; 0x64
	pctl->tsknote.notebit   = notebit;
 8009664:	66a5      	str	r5, [r4, #104]	; 0x68

	/* The 'add' pointer was setup in 'can_iface_init' below */
	
	/* Get a 'take' pointer into the circular buffer */
	return can_iface_add_take(pctl);
 8009666:	4620      	mov	r0, r4
 8009668:	f7ff ffdc 	bl	8009624 <can_iface_add_take>
}
 800966c:	bd38      	pop	{r3, r4, r5, pc}
 800966e:	bf00      	nop

08009670 <can_iface_get_CANmsg>:
 * @brief 	: Get a pointer to the next available CAN msg and step ahead in the circular buffer
 * @brief	: p = pointer to struct with 'take' and 'add' pointers
 * @return	: pointer to CAN msg struct; NULL = no msgs available.
*******************************************************************************/
 struct CANRCVBUFN* can_iface_get_CANmsg(struct CANTAKEPTR* p)
{
 8009670:	4603      	mov	r3, r0
	struct CANRCVBUFN* ptmp = NULL;
	if (p->pcir->pwork == p->ptake) return ptmp;
 8009672:	6802      	ldr	r2, [r0, #0]
 8009674:	6891      	ldr	r1, [r2, #8]
 8009676:	6840      	ldr	r0, [r0, #4]
 8009678:	4281      	cmp	r1, r0
 800967a:	d009      	beq.n	8009690 <can_iface_get_CANmsg+0x20>
 * @brief 	: Get a pointer to the next available CAN msg and step ahead in the circular buffer
 * @brief	: p = pointer to struct with 'take' and 'add' pointers
 * @return	: pointer to CAN msg struct; NULL = no msgs available.
*******************************************************************************/
 struct CANRCVBUFN* can_iface_get_CANmsg(struct CANTAKEPTR* p)
{
 800967c:	b410      	push	{r4}
	struct CANRCVBUFN* ptmp = NULL;
	if (p->pcir->pwork == p->ptake) return ptmp;

	ptmp = p->ptake;
	p->ptake += 1;
 800967e:	f100 0118 	add.w	r1, r0, #24
 8009682:	6059      	str	r1, [r3, #4]
	if (p->ptake == p->pcir->pend) p->ptake = p->pcir->pbegin;
 8009684:	6854      	ldr	r4, [r2, #4]
 8009686:	42a1      	cmp	r1, r4
 8009688:	d104      	bne.n	8009694 <can_iface_get_CANmsg+0x24>
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	605a      	str	r2, [r3, #4]
 800968e:	e001      	b.n	8009694 <can_iface_get_CANmsg+0x24>
 * @return	: pointer to CAN msg struct; NULL = no msgs available.
*******************************************************************************/
 struct CANRCVBUFN* can_iface_get_CANmsg(struct CANTAKEPTR* p)
{
	struct CANRCVBUFN* ptmp = NULL;
	if (p->pcir->pwork == p->ptake) return ptmp;
 8009690:	2000      	movs	r0, #0
 8009692:	4770      	bx	lr
	ptmp = p->ptake;
	p->ptake += 1;
	if (p->ptake == p->pcir->pend) p->ptake = p->pcir->pbegin;

	return ptmp;	
}
 8009694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop

0800969c <can_iface_init>:
Return is a pointer to the control block.  Since the unmodified STM32CubeMX routines only
pass their CAN module "handle" (pointer) upon interrupt a lookup is required to obtain
the pointer to the buffers.  Therefore, these pointers are also saved.
*/
struct CAN_CTLBLOCK* can_iface_init(CAN_HandleTypeDef *phcan, uint8_t canidx, uint16_t numtx, uint16_t numrx)
{
 800969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a0:	4604      	mov	r4, r0
 80096a2:	4688      	mov	r8, r1
 80096a4:	4616      	mov	r6, r2
 80096a6:	461f      	mov	r7, r3
	struct CAN_POOLBLOCK* plst;
	struct CAN_POOLBLOCK* ptmp;

	struct CANRCVBUFN* pcann;

taskENTER_CRITICAL();
 80096a8:	f7fd ff24 	bl	80074f4 <vPortEnterCritical>
	/* Get a control block for this CAN module. */
	pctl = (struct CAN_CTLBLOCK*)calloc(1, sizeof(struct CAN_CTLBLOCK));
 80096ac:	21b8      	movs	r1, #184	; 0xb8
 80096ae:	2001      	movs	r0, #1
 80096b0:	f001 fb42 	bl	800ad38 <calloc>
	if (pctl == NULL){ taskEXIT_CRITICAL();return NULL;}
 80096b4:	b920      	cbnz	r0, 80096c0 <can_iface_init+0x24>
 80096b6:	f7fd ff3f 	bl	8007538 <vPortExitCritical>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c0:	4605      	mov	r5, r0

	/* Add HAL CAN control block "handle" to our control block */
	pctl->phcan = phcan; 
 80096c2:	6004      	str	r4, [r0, #0]

	/* Save CAN module index (CAN1 = 0). */
	pctl->canidx = canidx;
 80096c4:	f880 80b1 	strb.w	r8, [r0, #177]	; 0xb1

	/* Add new control block to list of control blocks */
	if (ppctllist != NULL) // Not first time?
 80096c8:	4b30      	ldr	r3, [pc, #192]	; (800978c <can_iface_init+0xf0>)
 80096ca:	6819      	ldr	r1, [r3, #0]
 80096cc:	b959      	cbnz	r1, 80096e6 <can_iface_init+0x4a>
 80096ce:	e00e      	b.n	80096ee <can_iface_init+0x52>
	{ // Yes. Check for duplicates, i.e. check for bozo programmers
		ppx = &pctllist[0];	// NOTE: don't confuse ppctllist with pctllist
		while (ppx != ppctllist)
		{
			if ( (*ppx)->phcan == phcan)
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	6812      	ldr	r2, [r2, #0]
 80096d4:	4294      	cmp	r4, r2
 80096d6:	d104      	bne.n	80096e2 <can_iface_init+0x46>
			{
				taskEXIT_CRITICAL();
 80096d8:	f7fd ff2e 	bl	8007538 <vPortExitCritical>
				return NULL; // Duplicate
 80096dc:	2000      	movs	r0, #0
 80096de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			ppx++;;
 80096e2:	3304      	adds	r3, #4
 80096e4:	e000      	b.n	80096e8 <can_iface_init+0x4c>
 80096e6:	4b2a      	ldr	r3, [pc, #168]	; (8009790 <can_iface_init+0xf4>)

	/* Add new control block to list of control blocks */
	if (ppctllist != NULL) // Not first time?
	{ // Yes. Check for duplicates, i.e. check for bozo programmers
		ppx = &pctllist[0];	// NOTE: don't confuse ppctllist with pctllist
		while (ppx != ppctllist)
 80096e8:	428b      	cmp	r3, r1
 80096ea:	d1f1      	bne.n	80096d0 <can_iface_init+0x34>
 80096ec:	e002      	b.n	80096f4 <can_iface_init+0x58>
			ppx++;;
		}
	}
	else
	{
		ppctllist = &pctllist[0];
 80096ee:	4a28      	ldr	r2, [pc, #160]	; (8009790 <can_iface_init+0xf4>)
 80096f0:	4b26      	ldr	r3, [pc, #152]	; (800978c <can_iface_init+0xf0>)
 80096f2:	601a      	str	r2, [r3, #0]
	}
	/* Save control block pointer on list, and advance list pointer */
	*ppctllist = pctl;	
 80096f4:	4a25      	ldr	r2, [pc, #148]	; (800978c <can_iface_init+0xf0>)
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	f843 5b04 	str.w	r5, [r3], #4
	ppctllist++;
 80096fc:	6013      	str	r3, [r2, #0]
	if (ppctllist == &pctllist[MAXCANMODULES]) { taskEXIT_CRITICAL();return NULL;} //JIC too many entries
 80096fe:	4a25      	ldr	r2, [pc, #148]	; (8009794 <can_iface_init+0xf8>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d104      	bne.n	800970e <can_iface_init+0x72>
 8009704:	f7fd ff18 	bl	8007538 <vPortExitCritical>
 8009708:	2000      	movs	r0, #0
 800970a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	
	/* Now that we have control block in memory, we can use it to return errors. 
	   by setting the error code in pctl->ret. */

	/* Get CAN xmit linked list. */	
	if (numtx == 0)  {pctl->ret = -1; return pctl;} // Bogus tx buffering count
 800970e:	b92e      	cbnz	r6, 800971c <can_iface_init+0x80>
 8009710:	23ff      	movs	r3, #255	; 0xff
 8009712:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
 8009716:	4628      	mov	r0, r5
 8009718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ptmp = (struct CAN_POOLBLOCK*)calloc(numtx, sizeof(struct CAN_POOLBLOCK));
 800971c:	2120      	movs	r1, #32
 800971e:	4630      	mov	r0, r6
 8009720:	f001 fb0a 	bl	800ad38 <calloc>
	if (ptmp == NULL){pctl->ret = -2; taskEXIT_CRITICAL(); return NULL;} // Get buff failed
 8009724:	4603      	mov	r3, r0
 8009726:	b938      	cbnz	r0, 8009738 <can_iface_init+0x9c>
 8009728:	23fe      	movs	r3, #254	; 0xfe
 800972a:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
 800972e:	f7fd ff03 	bl	8007538 <vPortExitCritical>
 8009732:	2000      	movs	r0, #0
 8009734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Initialize links.  All are in the "free" list. */
	// Item: the last block is left with NULL in plinknext
	plst = &pctl->frii;
 8009738:	f105 0108 	add.w	r1, r5, #8
	for (i = 0; i < numtx; i++)
 800973c:	2200      	movs	r2, #0
 800973e:	e003      	b.n	8009748 <can_iface_init+0xac>
	{
		plst->plinknext = ptmp;
 8009740:	600b      	str	r3, [r1, #0]
	if (ptmp == NULL){pctl->ret = -2; taskEXIT_CRITICAL(); return NULL;} // Get buff failed

	/* Initialize links.  All are in the "free" list. */
	// Item: the last block is left with NULL in plinknext
	plst = &pctl->frii;
	for (i = 0; i < numtx; i++)
 8009742:	3201      	adds	r2, #1
	{
		plst->plinknext = ptmp;
		plst = ptmp++;
 8009744:	4619      	mov	r1, r3
 8009746:	3320      	adds	r3, #32
	if (ptmp == NULL){pctl->ret = -2; taskEXIT_CRITICAL(); return NULL;} // Get buff failed

	/* Initialize links.  All are in the "free" list. */
	// Item: the last block is left with NULL in plinknext
	plst = &pctl->frii;
	for (i = 0; i < numtx; i++)
 8009748:	42b2      	cmp	r2, r6
 800974a:	dbf9      	blt.n	8009740 <can_iface_init+0xa4>
		plst->plinknext = ptmp;
		plst = ptmp++;
	}

	/* Setup circular buffer for receive CAN msgs */
	if (numrx == 0)  {pctl->ret = -3; return pctl;} // Bogus rx buffering count
 800974c:	b92f      	cbnz	r7, 800975a <can_iface_init+0xbe>
 800974e:	23fd      	movs	r3, #253	; 0xfd
 8009750:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
 8009754:	4628      	mov	r0, r5
 8009756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pcann = (struct CANRCVBUFN*)calloc(numrx, sizeof(struct CANRCVBUFN));
 800975a:	2118      	movs	r1, #24
 800975c:	4638      	mov	r0, r7
 800975e:	f001 faeb 	bl	800ad38 <calloc>
	if (pcann == NULL){pctl->ret = -4; taskEXIT_CRITICAL(); return NULL;} // Get buff failed
 8009762:	b938      	cbnz	r0, 8009774 <can_iface_init+0xd8>
 8009764:	23fc      	movs	r3, #252	; 0xfc
 8009766:	f885 30b0 	strb.w	r3, [r5, #176]	; 0xb0
 800976a:	f7fd fee5 	bl	8007538 <vPortExitCritical>
 800976e:	2000      	movs	r0, #0
 8009770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Initialize pointers for "add"ing CAN msgs to the circular buffer */
	pctl->cirptrs.pbegin = pcann;
 8009774:	65a8      	str	r0, [r5, #88]	; 0x58
	pctl->cirptrs.pwork  = pcann;
 8009776:	6628      	str	r0, [r5, #96]	; 0x60
	pctl->cirptrs.pend   = pcann + numrx;
 8009778:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800977c:	00fb      	lsls	r3, r7, #3
 800977e:	4403      	add	r3, r0
 8009780:	65eb      	str	r3, [r5, #92]	; 0x5c

	/* NOTE: pctl->tsknote gets initialized
      when 'MailboxTask' calls 'can_iface_mbx_init' */

taskEXIT_CRITICAL();
 8009782:	f7fd fed9 	bl	8007538 <vPortExitCritical>
	return pctl;	// Return pointer to control block
 8009786:	4628      	mov	r0, r5
}
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	20004f04 	.word	0x20004f04
 8009790:	20004f08 	.word	0x20004f08
 8009794:	20004f18 	.word	0x20004f18

08009798 <can_driver_put>:
 ******************************************************************************/

extern uint32_t debugTX1c;

int can_driver_put(struct CAN_CTLBLOCK* pctl,struct CANRCVBUF *pcan,uint8_t maxretryct,uint8_t bits)
{
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct CAN_POOLBLOCK* pnew;
	volatile struct CAN_POOLBLOCK* pfor; 	// Loop pointer for the 'for’ loop.

	/* Reject CAN msg if CAN id is "bogus". */
	// If 11b is specified && bits in extended address are present it is bogus
	if (((pcan->id & CAN_ID_EXT) == 0) && ((pcan->id & CAN_EXTENDED_MASK) != 0))
 800979c:	680e      	ldr	r6, [r1, #0]
 800979e:	f016 0f04 	tst.w	r6, #4
 80097a2:	d10b      	bne.n	80097bc <can_driver_put+0x24>
 80097a4:	4c2d      	ldr	r4, [pc, #180]	; (800985c <can_driver_put+0xc4>)
 80097a6:	4034      	ands	r4, r6
 80097a8:	b144      	cbz	r4, 80097bc <can_driver_put+0x24>
	{
		pctl->bogusct += 1;
 80097aa:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 80097ae:	3301      	adds	r3, #1
 80097b0:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		return -2;
 80097b4:	f06f 0001 	mvn.w	r0, #1
 80097b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097bc:	4698      	mov	r8, r3
 80097be:	4691      	mov	r9, r2
 80097c0:	460e      	mov	r6, r1
 80097c2:	4605      	mov	r5, r0
	}

	/* Get a free block from the free list. */
//	disable_TXints(pctl, save);	// TX interrupt might move a msg to the free list.
	taskENTER_CRITICAL();
 80097c4:	f7fd fe96 	bl	80074f4 <vPortEnterCritical>

	pnew = pctl->frii.plinknext;
 80097c8:	68ac      	ldr	r4, [r5, #8]
	if (pnew == NULL)
 80097ca:	b944      	cbnz	r4, 80097de <can_driver_put+0x46>
	{ // Here, either no free list blocks OR this TX reached its limit
//		reenable_TXints(save);
		taskEXIT_CRITICAL();
 80097cc:	f7fd feb4 	bl	8007538 <vPortExitCritical>
		pctl->can_errors.can_msgovrflow += 1;	// Count overflows
 80097d0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80097d2:	3301      	adds	r3, #1
 80097d4:	67eb      	str	r3, [r5, #124]	; 0x7c
		return -1;	// Return failure: no space & screwed
 80097d6:	f04f 30ff 	mov.w	r0, #4294967295
 80097da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}	
	pctl->frii.plinknext = pnew->plinknext;
 80097de:	4627      	mov	r7, r4
 80097e0:	f857 3b08 	ldr.w	r3, [r7], #8
 80097e4:	60ab      	str	r3, [r5, #8]
	/* Build struct/block for addition to the pending list. */
	// retryct    xb[0]	// Counter for number of retries for TERR errors
	// maxretryct xb[1]	// Maximum number of TERR retry counts
	// bits	      xb[2]		// Use these bits to set some conditions (see below)
	// nosend     xb[3]	// Do not send: 0 = send; 1 = do NOT send on CAN bus (internal use only)
	pnew->can     = *pcan;	// Copy CAN msg.
 80097e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80097ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	pnew->x.xb[1] = maxretryct;	// Maximum number of TERR retry counts
 80097ee:	f884 9019 	strb.w	r9, [r4, #25]
	pnew->x.xb[2] = bits;	// Use these bits to set some conditions (see .h file)
 80097f2:	f884 801a 	strb.w	r8, [r4, #26]
	pnew->x.xb[3] = 0;	// not used for now
 80097f6:	2300      	movs	r3, #0
 80097f8:	76e3      	strb	r3, [r4, #27]
	pnew->x.xb[0] = 0;	// Retry counter for TERRs
 80097fa:	7623      	strb	r3, [r4, #24]
           and when the CAN id msg to be inserted has the same CAN id as the 'pfor' one
           already in the list, then place the new one further down so that msgs with 
           the same CAN id do not get their order of transmission altered. */
//	disable_TXints(pctl, save);

	for (pfor = &pctl->pend; pfor->plinknext != NULL; pfor = pfor->plinknext)
 80097fc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8009800:	e005      	b.n	800980e <can_driver_put+0x76>
	{
		if (pnew->can.id < (pfor->plinknext)->can.id) // Pay attention: "value" vs "priority"
 8009802:	68a1      	ldr	r1, [r4, #8]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	6892      	ldr	r2, [r2, #8]
 8009808:	4291      	cmp	r1, r2
 800980a:	d303      	bcc.n	8009814 <can_driver_put+0x7c>
           and when the CAN id msg to be inserted has the same CAN id as the 'pfor' one
           already in the list, then place the new one further down so that msgs with 
           the same CAN id do not get their order of transmission altered. */
//	disable_TXints(pctl, save);

	for (pfor = &pctl->pend; pfor->plinknext != NULL; pfor = pfor->plinknext)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	2a00      	cmp	r2, #0
 8009812:	d1f6      	bne.n	8009802 <can_driver_put+0x6a>
		if (pnew->can.id < (pfor->plinknext)->can.id) // Pay attention: "value" vs "priority"
			break;
	}

	/* Add new msg to pending list. (TX interrupt is still disabled) */
	pnew->plinknext = pfor->plinknext; 	// Insert new msg into 
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	6022      	str	r2, [r4, #0]
	pfor->plinknext = pnew;			//   pending list.
 8009818:	601c      	str	r4, [r3, #0]

	if (pctl->pxprv == NULL) // Is sending complete?
 800981a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800981c:	b91b      	cbnz	r3, 8009826 <can_driver_put+0x8e>
	{ // pxprv == NULL means CAN mailbox did not get loaded, so CAN is idle.
		loadmbx2(pctl); // Start sending
 800981e:	4628      	mov	r0, r5
 8009820:	f7ff fed6 	bl	80095d0 <loadmbx2>
 8009824:	e015      	b.n	8009852 <can_driver_put+0xba>
	}
	else
	{ // CAN sending is in progress.
		if ((pctl->pxprv)->plinknext == pnew) // Does pxprv need adjustment?
 8009826:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	429c      	cmp	r4, r3
 800982c:	d105      	bne.n	800983a <can_driver_put+0xa2>
		{ // Here yes. We inserted a msg between 'pxprv' and 'pxprv->linknext'
			pctl->pxprv = pnew;	// Update 'pxprv' so that it still points to msg TX using.
 800982e:	652c      	str	r4, [r5, #80]	; 0x50
			pctl->can_errors.can_pxprv_fwd_one += 1;	// Count: Instances that pxprv was adjusted in 'for' loop
 8009830:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8009834:	3301      	adds	r3, #1
 8009836:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		}
		/* Check if new msg is higher CAN priority than msg in mailbox */
#ifdef CHEATINGONHAL
		if ( (pctl->pend.plinknext)->can.id < (pctl->phcan->Instance->sTxMailBox[0] & ~0x1)  )
#else
		if ( (pctl->pend.plinknext)->can.id < (pctl->mbx0 & ~0x1)  ) // Use mailbox shadow id
 800983a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800983c:	689a      	ldr	r2, [r3, #8]
 800983e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009840:	f023 0301 	bic.w	r3, r3, #1
 8009844:	429a      	cmp	r2, r3
 8009846:	d204      	bcs.n	8009852 <can_driver_put+0xba>
/* CAN transmit status register (CAN_TSR) ref manual --
Set by software to abort the transmission request for the corresponding mailbox.
Cleared by hardware when the mailbox becomes empty.
Setting this bit has no effect when the mailbox is not pending for transmission. 
*/
			pctl->abortflag = 1;	// Set flag for interrupt routine use
 8009848:	2101      	movs	r1, #1
 800984a:	6569      	str	r1, [r5, #84]	; 0x54
//			CAN_TSR(pctl->vcan) |= CAN_TSR_ABRQ0;	// Set Abort request for mailbox 0.
			HAL_CAN_AbortTxRequest(pctl->phcan, CAN_TX_MAILBOX0);
 800984c:	6828      	ldr	r0, [r5, #0]
 800984e:	f7fe febb 	bl	80085c8 <HAL_CAN_AbortTxRequest>
		}
	}
//	reenable_TXints(save);
	taskEXIT_CRITICAL();
 8009852:	f7fd fe71 	bl	8007538 <vPortExitCritical>

	return 0;	// Success!
 8009856:	2000      	movs	r0, #0
}
 8009858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985c:	001ffff8 	.word	0x001ffff8

08009860 <getpctl>:
 * @param	: phcan = pointer to 'MX CAN handle (control block)
 * @return	: Pointer to our CAN control bock
 * *********************************************************************/
struct CAN_CTLBLOCK* getpctl(CAN_HandleTypeDef *phcan)
{
	struct CAN_CTLBLOCK** ppx = &pctllist[0];
 8009860:	4b06      	ldr	r3, [pc, #24]	; (800987c <getpctl+0x1c>)
	while (ppx != ppctllist) // Step through list of pointers 
 8009862:	e004      	b.n	800986e <getpctl+0xe>
	{
		if ( (*ppx)->phcan == phcan) break;
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	6812      	ldr	r2, [r2, #0]
 8009868:	4282      	cmp	r2, r0
 800986a:	d004      	beq.n	8009876 <getpctl+0x16>
		ppx++;
 800986c:	3304      	adds	r3, #4
 * @return	: Pointer to our CAN control bock
 * *********************************************************************/
struct CAN_CTLBLOCK* getpctl(CAN_HandleTypeDef *phcan)
{
	struct CAN_CTLBLOCK** ppx = &pctllist[0];
	while (ppx != ppctllist) // Step through list of pointers 
 800986e:	4a04      	ldr	r2, [pc, #16]	; (8009880 <getpctl+0x20>)
 8009870:	6812      	ldr	r2, [r2, #0]
 8009872:	4293      	cmp	r3, r2
 8009874:	d1f6      	bne.n	8009864 <getpctl+0x4>
	{
		if ( (*ppx)->phcan == phcan) break;
		ppx++;
	}
	return *ppx;
}
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	20004f08 	.word	0x20004f08
 8009880:	20004f04 	.word	0x20004f04

08009884 <unloadfifo>:
 * @return	: Pointer to our CAN control bock
 * *********************************************************************/
uint32_t debug1;

static void unloadfifo(CAN_HandleTypeDef *phcan, uint32_t RxFifo)
{
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	b092      	sub	sp, #72	; 0x48
 800988a:	4688      	mov	r8, r1
	struct CANRCVBUFN ncan; // CAN msg plus pctl
	ncan.toa = DTWTIME;
 800988c:	4b20      	ldr	r3, [pc, #128]	; (8009910 <unloadfifo+0x8c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	9311      	str	r3, [sp, #68]	; 0x44
debug1 += 1;
 8009892:	4a20      	ldr	r2, [pc, #128]	; (8009914 <unloadfifo+0x90>)
 8009894:	6813      	ldr	r3, [r2, #0]
 8009896:	3301      	adds	r3, #1
 8009898:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef ret;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800989a:	2300      	movs	r3, #0
 800989c:	930b      	str	r3, [sp, #44]	; 0x2c
	CAN_RxHeaderTypeDef header;
	uint8_t data[8];

	struct CAN_CTLBLOCK* pctl = getpctl(phcan); // Lookup pctl given phcan
 800989e:	f7ff ffdf 	bl	8009860 <getpctl>
 80098a2:	4605      	mov	r5, r0

	do /* Unload hardware RX FIFO */
	{
// NOTE: this could be done directly and avoid the expand/compress overhead
// but it would become processor dependent and would cheat on HAL.
		ret = HAL_CAN_GetRxMessage(pctl->phcan, RxFifo, &header, &data[0]);
 80098a4:	ab02      	add	r3, sp, #8
 80098a6:	aa04      	add	r2, sp, #16
 80098a8:	4641      	mov	r1, r8
 80098aa:	6828      	ldr	r0, [r5, #0]
 80098ac:	f7fe feb8 	bl	8008620 <HAL_CAN_GetRxMessage>
		if (ret == HAL_OK)
 80098b0:	4607      	mov	r7, r0
 80098b2:	b9f0      	cbnz	r0, 80098f2 <unloadfifo+0x6e>
		{
			/* Setup msg with pctl for our format */
			ncan.pctl = pctl;
 80098b4:	9510      	str	r5, [sp, #64]	; 0x40
			canmsg_compress(&ncan.can, &header, &data[0]);
 80098b6:	aa02      	add	r2, sp, #8
 80098b8:	a904      	add	r1, sp, #16
 80098ba:	a80c      	add	r0, sp, #48	; 0x30
 80098bc:	f7ff fe58 	bl	8009570 <canmsg_compress>

			/* Place on queue for Mailbox task to filter, distribute, notify, etc. */
			*pctl->cirptrs.pwork = ncan; // Copy struct
 80098c0:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 80098c2:	ac0c      	add	r4, sp, #48	; 0x30
 80098c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80098c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80098cc:	e886 0003 	stmia.w	r6, {r0, r1}
			pctl->cirptrs.pwork++;       // Advance 'add' pointer
 80098d0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80098d2:	3318      	adds	r3, #24
 80098d4:	662b      	str	r3, [r5, #96]	; 0x60
			if (pctl->cirptrs.pwork == pctl->cirptrs.pend) pctl->cirptrs.pwork = pctl->cirptrs.pbegin;
 80098d6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80098d8:	4293      	cmp	r3, r2
 80098da:	d101      	bne.n	80098e0 <unloadfifo+0x5c>
 80098dc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80098de:	662b      	str	r3, [r5, #96]	; 0x60

			if (pctl->tsknote.tskhandle != NULL)
 80098e0:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80098e2:	b130      	cbz	r0, 80098f2 <unloadfifo+0x6e>
			{ // Here, notify one task a new msg added to circular buffer
				xTaskNotifyFromISR(pctl->tsknote.tskhandle,\
 80098e4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80098e6:	ab0b      	add	r3, sp, #44	; 0x2c
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	2300      	movs	r3, #0
 80098ec:	2201      	movs	r2, #1
 80098ee:	f7fd f8a9 	bl	8006a44 <xTaskGenericNotifyFromISR>
					pctl->tsknote.notebit, eSetBits,\
					&xHigherPriorityTaskWoken );
			}
		}
	} while (ret == HAL_OK); //JIC there is more than one in the hw fifo
 80098f2:	2f00      	cmp	r7, #0
 80098f4:	d0d6      	beq.n	80098a4 <unloadfifo+0x20>
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken ); // Trigger scheduler
 80098f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098f8:	b13b      	cbz	r3, 800990a <unloadfifo+0x86>
 80098fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fe:	4b06      	ldr	r3, [pc, #24]	; (8009918 <unloadfifo+0x94>)
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	f3bf 8f6f 	isb	sy
}
 800990a:	b012      	add	sp, #72	; 0x48
 800990c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009910:	e0001004 	.word	0xe0001004
 8009914:	20006c40 	.word	0x20006c40
 8009918:	e000ed04 	.word	0xe000ed04

0800991c <HAL_CAN_TxMailbox0CompleteCallback>:
	return *ppx;
}

/* Transmission Mailbox 0 complete callback. */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *phcan)
{
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	b08a      	sub	sp, #40	; 0x28
	struct CAN_CTLBLOCK* pctl = getpctl(phcan); // Lookup our pointer
 8009920:	f7ff ff9e 	bl	8009860 <getpctl>
 8009924:	4605      	mov	r5, r0

	/* Loop back CAN =>TX<= msgs. */
#ifdef CANMSGLOOPBACK
volatile	struct CAN_POOLBLOCK* p = pctl->pend.plinknext;
 8009926:	6b03      	ldr	r3, [r0, #48]	; 0x30
	struct CANRCVBUFN ncan;
	ncan.pctl = pctl;
 8009928:	9008      	str	r0, [sp, #32]
	ncan.can = p->can;
 800992a:	ac04      	add	r4, sp, #16
 800992c:	3308      	adds	r3, #8
 800992e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009934:	2300      	movs	r3, #0
 8009936:	9303      	str	r3, [sp, #12]
			*pctl->cirptrs.pwork = ncan;
 8009938:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 800993a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800993c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800993e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009942:	e886 0003 	stmia.w	r6, {r0, r1}
			pctl->cirptrs.pwork++;
 8009946:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009948:	3318      	adds	r3, #24
 800994a:	662b      	str	r3, [r5, #96]	; 0x60
			if (pctl->cirptrs.pwork == pctl->cirptrs.pend) pctl->cirptrs.pwork = pctl->cirptrs.pbegin;
 800994c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800994e:	4293      	cmp	r3, r2
 8009950:	d101      	bne.n	8009956 <HAL_CAN_TxMailbox0CompleteCallback+0x3a>
 8009952:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009954:	662b      	str	r3, [r5, #96]	; 0x60

			if (pctl->tsknote.tskhandle != NULL)
 8009956:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8009958:	b130      	cbz	r0, 8009968 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>
			{ // Here, one task will be notified a msg added to circular buffer
				xTaskNotifyFromISR(pctl->tsknote.tskhandle,\
 800995a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	2300      	movs	r3, #0
 8009962:	2201      	movs	r2, #1
 8009964:	f7fd f86e 	bl	8006a44 <xTaskGenericNotifyFromISR>
					&xHigherPriorityTaskWoken );
			}

#endif

	moveremove2(pctl);	// remove from pending list, add to free list
 8009968:	4628      	mov	r0, r5
 800996a:	f7ff fe27 	bl	80095bc <moveremove2>
	pctl->abortflag = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	656b      	str	r3, [r5, #84]	; 0x54
	loadmbx2(pctl);		// Load mailbox 0.  Mailbox should be available/empty.
 8009972:	4628      	mov	r0, r5
 8009974:	f7ff fe2c 	bl	80095d0 <loadmbx2>
//portYIELD_FROM_ISR( xHigherPriorityTaskWoken ); // Trigger scheduler
}
 8009978:	b00a      	add	sp, #40	; 0x28
 800997a:	bd70      	pop	{r4, r5, r6, pc}

0800997c <HAL_CAN_TxMailbox0AbortCallback>:

/* Transmission Mailbox 0 Abort callback. */
void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *phcan)
{
 800997c:	b510      	push	{r4, lr}
	struct CAN_CTLBLOCK* pctl = getpctl(phcan);
 800997e:	f7ff ff6f 	bl	8009860 <getpctl>
 8009982:	4604      	mov	r4, r0
	loadmbx2(pctl);		// Load mailbox 0.  Mailbox should be available/empty.
 8009984:	f7ff fe24 	bl	80095d0 <loadmbx2>
	pctl->abortflag = 0;
 8009988:	2300      	movs	r3, #0
 800998a:	6563      	str	r3, [r4, #84]	; 0x54
 800998c:	bd10      	pop	{r4, pc}
 800998e:	bf00      	nop

08009990 <HAL_CAN_ErrorCallback>:
}

/* Error callback */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *phcan)
{
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4605      	mov	r5, r0
	struct CAN_CTLBLOCK* pctl = getpctl(phcan);
 8009994:	f7ff ff64 	bl	8009860 <getpctl>
 8009998:	4604      	mov	r4, r0
	if ((phcan->ErrorCode & HAL_CAN_ERROR_TX_ALST0) != 0 )
 800999a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800999c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80099a0:	d00f      	beq.n	80099c2 <HAL_CAN_ErrorCallback+0x32>
	{
		pctl->can_errors.can_tx_alst0_err += 1; // Running ct of arb lost: Mostly for debugging/monitoring
 80099a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80099a4:	3301      	adds	r3, #1
 80099a6:	6743      	str	r3, [r0, #116]	; 0x74
		if ((pctl->pxprv->plinknext->x.xb[2] & SOFTNART) != 0)
 80099a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	7e9b      	ldrb	r3, [r3, #26]
 80099ae:	f013 0f01 	tst.w	r3, #1
 80099b2:	d001      	beq.n	80099b8 <HAL_CAN_ErrorCallback+0x28>
		{ // Here this msg was not to be re-sent, i.e. NART
			moveremove2(pctl);	// Remove msg from pending queue
 80099b4:	f7ff fe02 	bl	80095bc <moveremove2>
		}
debugTX1c += 1;
 80099b8:	4a10      	ldr	r2, [pc, #64]	; (80099fc <HAL_CAN_ErrorCallback+0x6c>)
 80099ba:	6813      	ldr	r3, [r2, #0]
 80099bc:	3301      	adds	r3, #1
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	e018      	b.n	80099f4 <HAL_CAN_ErrorCallback+0x64>
	}
	else if ((phcan->ErrorCode & HAL_CAN_ERROR_TX_TERR0) != 0 )
 80099c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80099c8:	d014      	beq.n	80099f4 <HAL_CAN_ErrorCallback+0x64>
	{
		pctl->pxprv->plinknext->x.xb[0] += 1;	// Count errors for this msg
 80099ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	7e13      	ldrb	r3, [r2, #24]
 80099d0:	3301      	adds	r3, #1
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	7613      	strb	r3, [r2, #24]
		if (pctl->pxprv->plinknext->x.xb[0] > pctl->pxprv->plinknext->x.xb[1])
 80099d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	7e1a      	ldrb	r2, [r3, #24]
 80099dc:	b2d2      	uxtb	r2, r2
 80099de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	7e5b      	ldrb	r3, [r3, #25]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d904      	bls.n	80099f4 <HAL_CAN_ErrorCallback+0x64>
		{ // Here, too many error, remove from list
			pctl->can_errors.can_tx_bombed += 1;	// Number of bombouts
 80099ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80099ec:	3301      	adds	r3, #1
 80099ee:	6703      	str	r3, [r0, #112]	; 0x70
			moveremove2(pctl);	// Remove msg from pending queue
 80099f0:	f7ff fde4 	bl	80095bc <moveremove2>
		}
	}	
	loadmbx2(pctl);		// Load mailbox 0.  Mailbox should be available/empty.
 80099f4:	4620      	mov	r0, r4
 80099f6:	f7ff fdeb 	bl	80095d0 <loadmbx2>
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	2000528c 	.word	0x2000528c

08009a00 <HAL_CAN_RxFifo0MsgPendingCallback>:
	} while (ret == HAL_OK); //JIC there is more than one in the hw fifo
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken ); // Trigger scheduler
}
/* Rx FIFO 0 message pending callback. */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *phcan)
{
 8009a00:	b508      	push	{r3, lr}
	unloadfifo(phcan, CAN_RX_FIFO0);
 8009a02:	2100      	movs	r1, #0
 8009a04:	f7ff ff3e 	bl	8009884 <unloadfifo>
 8009a08:	bd08      	pop	{r3, pc}
 8009a0a:	bf00      	nop

08009a0c <HAL_CAN_RxFifo1MsgPendingCallback>:
	return;
}
/* Rx FIFO 1 message pending callback. */
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *phcan)
{
 8009a0c:	b508      	push	{r3, lr}
	unloadfifo(phcan, CAN_RX_FIFO1);
 8009a0e:	2101      	movs	r1, #1
 8009a10:	f7ff ff38 	bl	8009884 <unloadfifo>
 8009a14:	bd08      	pop	{r3, pc}
 8009a16:	bf00      	nop

08009a18 <canfilter_setup_first>:

	Some of the values in the HAL struct do not need to be updated, e.g. 'FilterActivation' hence
   the call to  'first"' sets these up.
*/
HAL_StatusTypeDef canfilter_setup_first(uint8_t cannum, CAN_HandleTypeDef *phcan, uint8_t slavebankdmarc)
{
 8009a18:	b570      	push	{r4, r5, r6, lr}
	struct CANFILTERW* p;
	HAL_StatusTypeDef ret;

	switch(cannum)
 8009a1a:	2802      	cmp	r0, #2
 8009a1c:	d007      	beq.n	8009a2e <canfilter_setup_first+0x16>
 8009a1e:	2803      	cmp	r0, #3
 8009a20:	d003      	beq.n	8009a2a <canfilter_setup_first+0x12>
 8009a22:	2801      	cmp	r0, #1
 8009a24:	d120      	bne.n	8009a68 <canfilter_setup_first+0x50>
	{
	case 1:	p = &canfilt1; break; // CAN 1
 8009a26:	4c11      	ldr	r4, [pc, #68]	; (8009a6c <canfilter_setup_first+0x54>)
 8009a28:	e002      	b.n	8009a30 <canfilter_setup_first+0x18>
	case 2: 	p = &canfilt2; break; // CAN 2
	case 3:	p = &canfilt3; break; // CAN 3
 8009a2a:	4c11      	ldr	r4, [pc, #68]	; (8009a70 <canfilter_setup_first+0x58>)
 8009a2c:	e000      	b.n	8009a30 <canfilter_setup_first+0x18>
	HAL_StatusTypeDef ret;

	switch(cannum)
	{
	case 1:	p = &canfilt1; break; // CAN 1
	case 2: 	p = &canfilt2; break; // CAN 2
 8009a2e:	4c11      	ldr	r4, [pc, #68]	; (8009a74 <canfilter_setup_first+0x5c>)
	case 3:	p = &canfilt3; break; // CAN 3
	default:		return HAL_ERROR;
	} // CAN1 & CAN3 start at zero
	if (cannum != 2)
 8009a30:	2802      	cmp	r0, #2
 8009a32:	d002      	beq.n	8009a3a <canfilter_setup_first+0x22>
	{
		p->filt.FilterBank = 0;  // Filter bank number
 8009a34:	2300      	movs	r3, #0
 8009a36:	6163      	str	r3, [r4, #20]
 8009a38:	e000      	b.n	8009a3c <canfilter_setup_first+0x24>
	}
	else
	{ // Here, CAN2 slave filter bank is shifted
		p->filt.FilterBank = slavebankdmarc;  // CAN1-CAN2 bank demarcation
 8009a3a:	6162      	str	r2, [r4, #20]
 8009a3c:	4608      	mov	r0, r1
	}
	p->filt.FilterIdHigh         = 0;
 8009a3e:	2500      	movs	r5, #0
 8009a40:	6025      	str	r5, [r4, #0]
	p->filt.FilterIdLow          = 0;
 8009a42:	6065      	str	r5, [r4, #4]
	p->filt.FilterMaskIdHigh     = 0;
 8009a44:	60a5      	str	r5, [r4, #8]
	p->filt.FilterMaskIdLow      = 0;
 8009a46:	60e5      	str	r5, [r4, #12]
	p->filt.FilterFIFOAssignment = 0;	// FIFO 0
 8009a48:	6125      	str	r5, [r4, #16]
	p->filt.FilterMode           = CAN_FILTERMODE_IDMASK;
 8009a4a:	61a5      	str	r5, [r4, #24]
	p->filt.FilterScale          = CAN_FILTERSCALE_32BIT;
 8009a4c:	2601      	movs	r6, #1
 8009a4e:	61e6      	str	r6, [r4, #28]
	p->filt.FilterActivation     = ENABLE;
 8009a50:	6226      	str	r6, [r4, #32]
	p->filt.SlaveStartFilterBank = slavebankdmarc; // No meaning for CAN3
 8009a52:	6262      	str	r2, [r4, #36]	; 0x24
	ret = HAL_CAN_ConfigFilter(phcan, &p->filt); // Store in hardware
 8009a54:	4621      	mov	r1, r4
 8009a56:	f7fe fc79 	bl	800834c <HAL_CAN_ConfigFilter>
	p->oto_sw = 1;
 8009a5a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
	p->banknum = 0;
 8009a5e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	p->odd     = 0;
 8009a62:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
	return ret;
 8009a66:	bd70      	pop	{r4, r5, r6, pc}
	switch(cannum)
	{
	case 1:	p = &canfilt1; break; // CAN 1
	case 2: 	p = &canfilt2; break; // CAN 2
	case 3:	p = &canfilt3; break; // CAN 3
	default:		return HAL_ERROR;
 8009a68:	2001      	movs	r0, #1
	ret = HAL_CAN_ConfigFilter(phcan, &p->filt); // Store in hardware
	p->oto_sw = 1;
	p->banknum = 0;
	p->odd     = 0;
	return ret;
}
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	20004f18 	.word	0x20004f18
 8009a70:	20004f70 	.word	0x20004f70
 8009a74:	20004f44 	.word	0x20004f44

08009a78 <getserialbuf>:

The items maintain the bit used by SerialTaskSend to notify the originating
task that the buffer has been sent and is available for reuse.
*/
struct SERIALSENDTASKBCB* getserialbuf( UART_HandleTypeDef* phuart, uint16_t maxsize)
{
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460d      	mov	r5, r1
	/* BCB: Buffer control block, passed on queue to SerialTaskSend. See SerialTaskSend.h */
	struct SERIALSENDTASKBCB* pbcb; // calloc'ed bcb pointer

	uint8_t* pbuf;	// callloc'ed byte buffer

taskENTER_CRITICAL();
 8009a7e:	f7fd fd39 	bl	80074f4 <vPortEnterCritical>
	/* Get one BCB block */
	pbcb = (struct SERIALSENDTASKBCB*)calloc(1, sizeof(struct SERIALSENDTASKBCB));	
 8009a82:	2114      	movs	r1, #20
 8009a84:	2001      	movs	r0, #1
 8009a86:	f001 f957 	bl	800ad38 <calloc>
	if (pbcb == NULL){taskEXIT_CRITICAL(); return NULL;}
 8009a8a:	b918      	cbnz	r0, 8009a94 <getserialbuf+0x1c>
 8009a8c:	f7fd fd54 	bl	8007538 <vPortExitCritical>
 8009a90:	2000      	movs	r0, #0
 8009a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a94:	4604      	mov	r4, r0

	/* Get byte buffer */
	pbuf = (uint8_t*)calloc(maxsize, sizeof(uint8_t));	
 8009a96:	2101      	movs	r1, #1
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f001 f94d 	bl	800ad38 <calloc>
	if (pbuf == NULL) return NULL;
 8009a9e:	4607      	mov	r7, r0
 8009aa0:	b1c8      	cbz	r0, 8009ad6 <getserialbuf+0x5e>

	/* Initialize the BCB. */
	pbcb->phuart    = phuart;  // 'MX uart handle
 8009aa2:	6026      	str	r6, [r4, #0]
	pbcb->tskhandle = xTaskGetCurrentTaskHandle();
 8009aa4:	f7fc fe3e 	bl	8006724 <xTaskGetCurrentTaskHandle>
 8009aa8:	6060      	str	r0, [r4, #4]
	pbcb->pbuf      = pbuf;		// Ptr to uint8_t buffer
 8009aaa:	60e7      	str	r7, [r4, #12]
	pbcb->maxsize   = maxsize;    // Size of uint8_t buffer
 8009aac:	8265      	strh	r5, [r4, #18]
	pbcb->semaphore = xSemaphoreCreateBinary(); // Semaphore for this buffer
 8009aae:	2203      	movs	r2, #3
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	f7fb fe06 	bl	80056c4 <xQueueGenericCreate>
 8009ab8:	60a0      	str	r0, [r4, #8]

	if (pbcb->semaphore == NULL){taskEXIT_CRITICAL(); return NULL;}
 8009aba:	b918      	cbnz	r0, 8009ac4 <getserialbuf+0x4c>
 8009abc:	f7fd fd3c 	bl	8007538 <vPortExitCritical>
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	xSemaphoreGive(pbcb->semaphore); // Initialize
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f7fb fe23 	bl	8005714 <xQueueGenericSend>

taskEXIT_CRITICAL();
 8009ace:	f7fd fd33 	bl	8007538 <vPortExitCritical>

	return pbcb;
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pbcb = (struct SERIALSENDTASKBCB*)calloc(1, sizeof(struct SERIALSENDTASKBCB));	
	if (pbcb == NULL){taskEXIT_CRITICAL(); return NULL;}

	/* Get byte buffer */
	pbuf = (uint8_t*)calloc(maxsize, sizeof(uint8_t));	
	if (pbuf == NULL) return NULL;
 8009ad6:	2000      	movs	r0, #0
	xSemaphoreGive(pbcb->semaphore); // Initialize

taskEXIT_CRITICAL();

	return pbcb;
}
 8009ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ada:	bf00      	nop

08009adc <yprintf_init>:
 * @brief	: Setup semaphore
 * @return	: 0 = init executed; -1 = init already done
 * ************************************************************************************** */
int yprintf_init(void)
{
	if (sw == 0)
 8009adc:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <yprintf_init+0x34>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	b993      	cbnz	r3, 8009b08 <yprintf_init+0x2c>
 *  int yprintf_init(void);
 * @brief	: Setup semaphore
 * @return	: 0 = init executed; -1 = init already done
 * ************************************************************************************** */
int yprintf_init(void)
{
 8009ae2:	b500      	push	{lr}
 8009ae4:	b083      	sub	sp, #12
	if (sw == 0)
	{
		sw = -1;
 8009ae6:	22ff      	movs	r2, #255	; 0xff
 8009ae8:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <yprintf_init+0x34>)
 8009aea:	701a      	strb	r2, [r3, #0]
		osSemaphoreDef(vsnprintfSemaphore);
 8009aec:	2300      	movs	r3, #0
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	9301      	str	r3, [sp, #4]
		vsnprintfSemaphoreHandle = osSemaphoreCreate(osSemaphore(vsnprintfSemaphore), 1);
 8009af2:	2101      	movs	r1, #1
 8009af4:	4668      	mov	r0, sp
 8009af6:	f7fd fb45 	bl	8007184 <osSemaphoreCreate>
 8009afa:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <yprintf_init+0x38>)
 8009afc:	6018      	str	r0, [r3, #0]
	}
	return sw;
}
 8009afe:	4b04      	ldr	r3, [pc, #16]	; (8009b10 <yprintf_init+0x34>)
 8009b00:	7818      	ldrb	r0, [r3, #0]
 8009b02:	b003      	add	sp, #12
 8009b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b08:	4b01      	ldr	r3, [pc, #4]	; (8009b10 <yprintf_init+0x34>)
 8009b0a:	7818      	ldrb	r0, [r3, #0]
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	20004f9c 	.word	0x20004f9c
 8009b14:	20006c44 	.word	0x20006c44

08009b18 <yprintf>:
 * @param	: format = usual printf format
 * @param	: ... = usual printf arguments
 * @return	: Number of chars "printed"
 * ************************************************************************************** */
int yprintf(struct SERIALSENDTASKBCB** ppbcb, const char *fmt, ...)
{
 8009b18:	b40e      	push	{r1, r2, r3}
 8009b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	4606      	mov	r6, r0
 8009b20:	ad07      	add	r5, sp, #28
 8009b22:	f855 7b04 	ldr.w	r7, [r5], #4
	struct SERIALSENDTASKBCB* pbcb = *ppbcb;
 8009b26:	6804      	ldr	r4, [r0, #0]
	va_list argp;

	yprintf_init();	// JIC not init'd
 8009b28:	f7ff ffd8 	bl	8009adc <yprintf_init>

	/* Block if this buffer is not available. SerialSendTask will 'give' the semaphore 
      when the buffer has been sent. */
	xSemaphoreTake(pbcb->semaphore, 6000);
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f241 7270 	movw	r2, #6000	; 0x1770
 8009b32:	4619      	mov	r1, r3
 8009b34:	68a0      	ldr	r0, [r4, #8]
 8009b36:	f7fb ff85 	bl	8005a44 <xQueueGenericReceive>

	/* Block if vsnprintf is being uses by someone else. */
	xSemaphoreTake( vsnprintfSemaphoreHandle, portMAX_DELAY );
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b40:	4619      	mov	r1, r3
 8009b42:	4812      	ldr	r0, [pc, #72]	; (8009b8c <yprintf+0x74>)
 8009b44:	6800      	ldr	r0, [r0, #0]
 8009b46:	f7fb ff7d 	bl	8005a44 <xQueueGenericReceive>

	/* Construct line of data.  Stop filling buffer if it is full. */
	va_start(argp, fmt);
	va_start(argp, fmt);
 8009b4a:	9501      	str	r5, [sp, #4]
	pbcb->size = vsnprintf((char*)(pbcb->pbuf),pbcb->maxsize, fmt, argp);
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	463a      	mov	r2, r7
 8009b50:	8a61      	ldrh	r1, [r4, #18]
 8009b52:	68e0      	ldr	r0, [r4, #12]
 8009b54:	f001 fcb6 	bl	800b4c4 <vsnprintf>
 8009b58:	8220      	strh	r0, [r4, #16]
	va_end(argp);

	/* Limit byte count in BCB to be put on queue, from vsnprintf to max buffer sizes. */
	if (pbcb->size > pbcb->maxsize) 
 8009b5a:	b280      	uxth	r0, r0
 8009b5c:	8a63      	ldrh	r3, [r4, #18]
 8009b5e:	4298      	cmp	r0, r3
 8009b60:	d900      	bls.n	8009b64 <yprintf+0x4c>
			pbcb->size = pbcb->maxsize;
 8009b62:	8223      	strh	r3, [r4, #16]

	/* Release semaphore controlling vsnprintf. */
	xSemaphoreGive( vsnprintfSemaphoreHandle );
 8009b64:	2300      	movs	r3, #0
 8009b66:	461a      	mov	r2, r3
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4808      	ldr	r0, [pc, #32]	; (8009b8c <yprintf+0x74>)
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f7fb fdd1 	bl	8005714 <xQueueGenericSend>

	/* JIC */
	if (pbcb->size == 0) return 0;
 8009b72:	8a23      	ldrh	r3, [r4, #16]
 8009b74:	b123      	cbz	r3, 8009b80 <yprintf+0x68>

	/* Place Buffer Control Block on queue to SerialTaskSend */
	vSerialTaskSendQueueBuf(ppbcb); // Place on queue
 8009b76:	4630      	mov	r0, r6
 8009b78:	f7ff fb36 	bl	80091e8 <vSerialTaskSendQueueBuf>

	return pbcb->size;
 8009b7c:	8a20      	ldrh	r0, [r4, #16]
 8009b7e:	e000      	b.n	8009b82 <yprintf+0x6a>

	/* Release semaphore controlling vsnprintf. */
	xSemaphoreGive( vsnprintfSemaphoreHandle );

	/* JIC */
	if (pbcb->size == 0) return 0;
 8009b80:	2000      	movs	r0, #0

	/* Place Buffer Control Block on queue to SerialTaskSend */
	vSerialTaskSendQueueBuf(ppbcb); // Place on queue

	return pbcb->size;
}
 8009b82:	b002      	add	sp, #8
 8009b84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009b88:	b003      	add	sp, #12
 8009b8a:	4770      	bx	lr
 8009b8c:	20006c44 	.word	0x20006c44

08009b90 <hex>:
 * static char* hex(char *p, u8 c)	// Convert 'c' to hex, placing in output *p.
 * ************************************************************************************** */
/* bin to ascii lookup table */
static const char h[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
static uint8_t* hex(uint8_t *p, uint8_t c)	// Convert 'c' to hex, placing in output *p.
{
 8009b90:	b410      	push	{r4}
		*p++ = h[((c >> 4) & 0x0f)];	// Hi order nibble
 8009b92:	090b      	lsrs	r3, r1, #4
 8009b94:	4a06      	ldr	r2, [pc, #24]	; (8009bb0 <hex+0x20>)
 8009b96:	5cd4      	ldrb	r4, [r2, r3]
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f803 4b02 	strb.w	r4, [r3], #2
		*p++ = h[(c & 0x0f)];		// Lo order nibble
 8009b9e:	f001 010f 	and.w	r1, r1, #15
 8009ba2:	5c52      	ldrb	r2, [r2, r1]
 8009ba4:	7042      	strb	r2, [r0, #1]
		return p;			// Return new output pointer position
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	0800ed80 	.word	0x0800ed80

08009bb4 <gateway_CANtoPC>:
 * @param	: pycb = pointer to poiner to buffer control block w buffer and uart handle
 * @param	: pcan = CAN msg
 * @return	: 
 * ************************************************************************************** */
void gateway_CANtoPC(struct SERIALSENDTASKBCB** ppbcb, struct CANRCVBUF* pcan)
{
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	460e      	mov	r6, r1
	struct SERIALSENDTASKBCB* pbcb = *ppbcb;
 8009bb8:	6807      	ldr	r7, [r0, #0]
	int i;
	uint32_t x = CHECKSUM_INITIAL;
	uint8_t* pout = pbcb->pbuf; // Pointer into output buffer

	/* Convert sequence number */
	x += seq;	// Checksum;
 8009bba:	4d24      	ldr	r5, [pc, #144]	; (8009c4c <gateway_CANtoPC+0x98>)
 8009bbc:	7829      	ldrb	r1, [r5, #0]
 8009bbe:	f501 4425 	add.w	r4, r1, #42240	; 0xa500
 8009bc2:	34a5      	adds	r4, #165	; 0xa5
	pout = hex(pout,seq);
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7ff ffe3 	bl	8009b90 <hex>
	seq += 1;
 8009bca:	782b      	ldrb	r3, [r5, #0]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	702b      	strb	r3, [r5, #0]

	/* Convert CAN ID */
	x += (pcan->id >>  0) & 0xff; pout = hex(pout, (pcan->id >>  0));
 8009bd0:	7831      	ldrb	r1, [r6, #0]
 8009bd2:	440c      	add	r4, r1
 8009bd4:	f7ff ffdc 	bl	8009b90 <hex>
	x += (pcan->id >>  8) & 0xff; pout = hex(pout, (pcan->id >>  8));
 8009bd8:	7871      	ldrb	r1, [r6, #1]
 8009bda:	440c      	add	r4, r1
 8009bdc:	f7ff ffd8 	bl	8009b90 <hex>
	x += (pcan->id >> 16) & 0xff; pout = hex(pout, (pcan->id >> 16));
 8009be0:	78b1      	ldrb	r1, [r6, #2]
 8009be2:	1865      	adds	r5, r4, r1
 8009be4:	f7ff ffd4 	bl	8009b90 <hex>
	x += (pcan->id >> 24) & 0xff; pout = hex(pout, (pcan->id >> 24));
 8009be8:	78f1      	ldrb	r1, [r6, #3]
 8009bea:	186c      	adds	r4, r5, r1
 8009bec:	f7ff ffd0 	bl	8009b90 <hex>

	/* Convert DLC */
	x += pcan->dlc & 0xf; pout = hex(pout, pcan->dlc);
 8009bf0:	6871      	ldr	r1, [r6, #4]
 8009bf2:	f001 050f 	and.w	r5, r1, #15
 8009bf6:	4425      	add	r5, r4
 8009bf8:	b2c9      	uxtb	r1, r1
 8009bfa:	f7ff ffc9 	bl	8009b90 <hex>

	/* Convert payload */
	if ((pcan->dlc & 0xf) > 8) pcan->dlc = 8; // Prevent bogus runaway
 8009bfe:	6873      	ldr	r3, [r6, #4]
 8009c00:	f003 030f 	and.w	r3, r3, #15
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d901      	bls.n	8009c0c <gateway_CANtoPC+0x58>
 8009c08:	2308      	movs	r3, #8
 8009c0a:	6073      	str	r3, [r6, #4]
 * @param	: pycb = pointer to poiner to buffer control block w buffer and uart handle
 * @param	: pcan = CAN msg
 * @return	: 
 * ************************************************************************************** */
void gateway_CANtoPC(struct SERIALSENDTASKBCB** ppbcb, struct CANRCVBUF* pcan)
{
 8009c0c:	2400      	movs	r4, #0
 8009c0e:	e005      	b.n	8009c1c <gateway_CANtoPC+0x68>

	/* Convert payload */
	if ((pcan->dlc & 0xf) > 8) pcan->dlc = 8; // Prevent bogus runaway
	for (i = 0; i < pcan->dlc; i++)
	{
		x += pcan->cd.uc[i];
 8009c10:	1933      	adds	r3, r6, r4
 8009c12:	7a19      	ldrb	r1, [r3, #8]
 8009c14:	440d      	add	r5, r1
		pout = hex(pout, pcan->cd.uc[i]);
 8009c16:	f7ff ffbb 	bl	8009b90 <hex>
	/* Convert DLC */
	x += pcan->dlc & 0xf; pout = hex(pout, pcan->dlc);

	/* Convert payload */
	if ((pcan->dlc & 0xf) > 8) pcan->dlc = 8; // Prevent bogus runaway
	for (i = 0; i < pcan->dlc; i++)
 8009c1a:	3401      	adds	r4, #1
 8009c1c:	6873      	ldr	r3, [r6, #4]
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	d8f6      	bhi.n	8009c10 <gateway_CANtoPC+0x5c>
		x += pcan->cd.uc[i];
		pout = hex(pout, pcan->cd.uc[i]);
	}

	/* Complete checksum */
	x += (x >> 16);	// Add carries into high half word
 8009c22:	eb05 4115 	add.w	r1, r5, r5, lsr #16
	x += (x >> 16);	// Add carry if previous add generated a carry
 8009c26:	eb01 4111 	add.w	r1, r1, r1, lsr #16
	x += (x >> 8);  // Add high byte of low half word
 8009c2a:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	x += (x >> 8);  // Add carry if previous add generated a carry
 8009c2e:	eb01 2111 	add.w	r1, r1, r1, lsr #8

	/* Convert checksum */
	pout = hex(pout, x);
 8009c32:	b2c9      	uxtb	r1, r1
 8009c34:	f7ff ffac 	bl	8009b90 <hex>

	/* Frame terminator */
	*pout++ = ASCIIMSGTERMINATOR;
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	220a      	movs	r2, #10
 8009c3c:	7002      	strb	r2, [r0, #0]
	
	/* String termination, jic */
	*pout = 0; // Note: no pointer advance
 8009c3e:	2200      	movs	r2, #0
 8009c40:	7042      	strb	r2, [r0, #1]

	/* Set byte count in output buffer */
	pbcb->size = pout - pbcb->pbuf;
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	823b      	strh	r3, [r7, #16]
 8009c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20004f9d 	.word	0x20004f9d

08009c50 <advancebuf>:
/* *************************************************************************
 * static void advancebuf(struct SERIALRCVBCB* prtmp);
 * @brief	: Advance to next line buffer
 * *************************************************************************/
static void advancebuf(struct SERIALRCVBCB* prtmp)
{		
 8009c50:	b500      	push	{lr}
 8009c52:	b085      	sub	sp, #20
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009c54:	2300      	movs	r3, #0
 8009c56:	9303      	str	r3, [sp, #12]

	/* Zero terminator addition. */
	*prtmp->pwork = 0; // Add string terminator
 8009c58:	6942      	ldr	r2, [r0, #20]
 8009c5a:	7013      	strb	r3, [r2, #0]
	
	/* Advance to beginning of next line buffer */
	prtmp->padd += prtmp->linesize;	// Step ahead one buffer length
 8009c5c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8009c5e:	68c2      	ldr	r2, [r0, #12]
 8009c60:	441a      	add	r2, r3
 8009c62:	60c2      	str	r2, [r0, #12]
	if (prtmp->padd == prtmp->pend) prtmp->padd = prtmp->pbegin;
 8009c64:	6881      	ldr	r1, [r0, #8]
 8009c66:	428a      	cmp	r2, r1
 8009c68:	d101      	bne.n	8009c6e <advancebuf+0x1e>
 8009c6a:	6842      	ldr	r2, [r0, #4]
 8009c6c:	60c2      	str	r2, [r0, #12]

	/* Initialize working char pointers */
	prtmp->pwork = prtmp->padd;	// Begin
 8009c6e:	68c2      	ldr	r2, [r0, #12]
 8009c70:	6142      	str	r2, [r0, #20]
	prtmp->pworkend = prtmp->padd + prtmp->linesize - 2; // End
 8009c72:	3b02      	subs	r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	6183      	str	r3, [r0, #24]

	/* Notify originating task know a line is ready. */
	xTaskNotifyFromISR(prtmp->tskhandle, 
 8009c78:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009c7a:	6a00      	ldr	r0, [r0, #32]
 8009c7c:	ab03      	add	r3, sp, #12
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	2300      	movs	r3, #0
 8009c82:	2201      	movs	r2, #1
 8009c84:	f7fc fede 	bl	8006a44 <xTaskGenericNotifyFromISR>
		prtmp->notebit,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken );

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	b13b      	cbz	r3, 8009c9c <advancebuf+0x4c>
 8009c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c90:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <advancebuf+0x54>)
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	f3bf 8f6f 	isb	sy
	return;
}
 8009c9c:	b005      	add	sp, #20
 8009c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca2:	bf00      	nop
 8009ca4:	e000ed04 	.word	0xe000ed04

08009ca8 <advanceptr>:
/* *************************************************************************
 * static void advanceptr(struct SERIALRCVBCB* prtmp);
 * @brief	: Advance pointer within the active line buffer
 * *************************************************************************/
static void advanceptr(struct SERIALRCVBCB* prtmp, char c)
{
 8009ca8:	b508      	push	{r3, lr}
	*prtmp->pwork++ = c;
 8009caa:	6943      	ldr	r3, [r0, #20]
 8009cac:	1c5a      	adds	r2, r3, #1
 8009cae:	6142      	str	r2, [r0, #20]
 8009cb0:	7019      	strb	r1, [r3, #0]
	if ((c == LINETERMINATOR) || (c == 0XD))
 8009cb2:	290a      	cmp	r1, #10
 8009cb4:	d001      	beq.n	8009cba <advanceptr+0x12>
 8009cb6:	290d      	cmp	r1, #13
 8009cb8:	d102      	bne.n	8009cc0 <advanceptr+0x18>
	{ // Here End of Line
		advancebuf(prtmp); // Advance to new line buffer and notify originator
 8009cba:	f7ff ffc9 	bl	8009c50 <advancebuf>
		return;
 8009cbe:	bd08      	pop	{r3, pc}
	}

	/* Here, just an ordinary char stored. */
	if (prtmp->pwork == prtmp->pworkend)
 8009cc0:	6942      	ldr	r2, [r0, #20]
 8009cc2:	6983      	ldr	r3, [r0, #24]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d101      	bne.n	8009ccc <advanceptr+0x24>
	{ // Here we are at end - 1 of line buffer
		advancebuf(prtmp); // Advance to new line buffer and notify originator
 8009cc8:	f7ff ffc2 	bl	8009c50 <advancebuf>
 8009ccc:	bd08      	pop	{r3, pc}
 8009cce:	bf00      	nop

08009cd0 <unloaddma>:
 * static void unloaddma(struct SERIALRCVBCB* prbcb);
 * @brief	: DMA: Check for line terminator and store; enter from task poll
 * @param	: prbcb = pointer to buffer control block for uart causing callback
 * *************************************************************************/
static void unloaddma(struct SERIALRCVBCB* prbcb)
{
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	4604      	mov	r4, r0
//		Diff = ( pctl->rxbuff_end - DMA_SNDTR(pctl->idma,pctl->rxdma_stream) - pctl->rxbuff_out );
//		if (Diff < 0)
//			Diff += pctl->rxbuff_size;  // Adjust for wrap

		/* Get number of data item count in DMA buffer "now" from DMA NDTR register. */
		dmandtr = __HAL_DMA_GET_COUNTER(prbcb->phuart->hdmarx); 
 8009cd4:	69c3      	ldr	r3, [r0, #28]
 8009cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685d      	ldr	r5, [r3, #4]

		/* Difference between where we are taking out chars, and where DMA is or was storing. */
		diff = prbcb->penddma - dmandtr - prbcb->ptakedma; 
 8009cdc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8009cde:	b2ad      	uxth	r5, r5
 8009ce0:	1b53      	subs	r3, r2, r5
 8009ce2:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (diff < 0)
 8009ce4:	1b5d      	subs	r5, r3, r5
 8009ce6:	d50f      	bpl.n	8009d08 <unloaddma+0x38>
		{ // Wrap around
			diff += prbcb->dmasize;
 8009ce8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8009cea:	441d      	add	r5, r3
 8009cec:	e00c      	b.n	8009d08 <unloaddma+0x38>
		}

		/* Copy dma circular buffer into buffered lines */
		while (diff > 0)
		{
			diff -= 1;
 8009cee:	3d01      	subs	r5, #1
			c = *prbcb->ptakedma++; // Get char from dma buffer
 8009cf0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009cf2:	1c53      	adds	r3, r2, #1
 8009cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8009cf6:	7811      	ldrb	r1, [r2, #0]
			if (prbcb->ptakedma == prbcb->penddma) prbcb->ptakedma = prbcb->pbegindma;
 8009cf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d101      	bne.n	8009d02 <unloaddma+0x32>
 8009cfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d00:	6363      	str	r3, [r4, #52]	; 0x34
			
			advanceptr(prbcb,c);
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff ffd0 	bl	8009ca8 <advanceptr>
		{ // Wrap around
			diff += prbcb->dmasize;
		}

		/* Copy dma circular buffer into buffered lines */
		while (diff > 0)
 8009d08:	2d00      	cmp	r5, #0
 8009d0a:	dcf0      	bgt.n	8009cee <unloaddma+0x1e>
			if (prbcb->ptakedma == prbcb->penddma) prbcb->ptakedma = prbcb->pbegindma;
			
			advanceptr(prbcb,c);
		}
		return;
}
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop

08009d10 <StartSerialTaskReceive>:
/* *************************************************************************
 * void StartSerialTaskReceive(void* argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartSerialTaskReceive(void* argument)
{
 8009d10:	b510      	push	{r4, lr}
	struct SERIALRCVBCB* prtmp = prbhd;
 8009d12:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <StartSerialTaskReceive+0x50>)
 8009d14:	681b      	ldr	r3, [r3, #0]
	
	/* Do nothing until at least one tasks calls 
      'xSerialTaskRxAdduart' and sets up the 
       uart and buffering. */

	while (prtmp == NULL)
 8009d16:	e004      	b.n	8009d22 <StartSerialTaskReceive+0x12>
	{
		osDelay(10);
 8009d18:	200a      	movs	r0, #10
 8009d1a:	f7fd f9d3 	bl	80070c4 <osDelay>
		prtmp = prbhd;
 8009d1e:	4b10      	ldr	r3, [pc, #64]	; (8009d60 <StartSerialTaskReceive+0x50>)
 8009d20:	681b      	ldr	r3, [r3, #0]
	
	/* Do nothing until at least one tasks calls 
      'xSerialTaskRxAdduart' and sets up the 
       uart and buffering. */

	while (prtmp == NULL)
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0f8      	beq.n	8009d18 <StartSerialTaskReceive+0x8>

  /* Infinite loop */
  for(;;)
  {
		/* Wait for one tick or notification from a dma callback */
		xTaskNotifyWait(0, 0, NULL, 2);
 8009d26:	2302      	movs	r3, #2
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	f7fc fdcb 	bl	80068c8 <xTaskNotifyWait>

		/* Go through list of receiving uarts and unload only dma uart buffers. */
		prtmp = prbhd;
 8009d32:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <StartSerialTaskReceive+0x50>)
 8009d34:	681c      	ldr	r4, [r3, #0]
 8009d36:	e000      	b.n	8009d3a <StartSerialTaskReceive+0x2a>
				{ // Here, straight ascii line buffers
					unloaddma(prtmp);
				}
			}
			prtmp2 = prtmp;
			prtmp = prtmp2->pnext;
 8009d38:	461c      	mov	r4, r3

		/* Go through list of receiving uarts and unload only dma uart buffers. */
		prtmp = prbhd;
		do
		{
			if (prtmp->dmaflag != 0)
 8009d3a:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 8009d3e:	b153      	cbz	r3, 8009d56 <StartSerialTaskReceive+0x46>
			{ // Here, dma mode
				if (prtmp->CANmode == 1)
 8009d40:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d103      	bne.n	8009d50 <StartSerialTaskReceive+0x40>
				{ // Here, convert to CAN msg buffers
					gateway_PCtoCAN_unloaddma(prtmp);
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 f915 	bl	8009f78 <gateway_PCtoCAN_unloaddma>
 8009d4e:	e002      	b.n	8009d56 <StartSerialTaskReceive+0x46>
				}
				else
				{ // Here, straight ascii line buffers
					unloaddma(prtmp);
 8009d50:	4620      	mov	r0, r4
 8009d52:	f7ff ffbd 	bl	8009cd0 <unloaddma>
				}
			}
			prtmp2 = prtmp;
			prtmp = prtmp2->pnext;
 8009d56:	6823      	ldr	r3, [r4, #0]
		} while (prtmp2->pnext != prtmp2);
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	d1ed      	bne.n	8009d38 <StartSerialTaskReceive+0x28>
 8009d5c:	e7e3      	b.n	8009d26 <StartSerialTaskReceive+0x16>
 8009d5e:	bf00      	nop
 8009d60:	20004fa0 	.word	0x20004fa0

08009d64 <xSerialTaskRxAdduart>:
		uint32_t* pnoteval,\
		uint8_t   numline,\
		uint8_t   linesize,\
		char  dmasize,\
		uint8_t   CANmode)
{
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	b085      	sub	sp, #20
 8009d6a:	9001      	str	r0, [sp, #4]
 8009d6c:	468a      	mov	sl, r1
 8009d6e:	9202      	str	r2, [sp, #8]
 8009d70:	9303      	str	r3, [sp, #12]
 8009d72:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
 8009d76:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8009d7a:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
 8009d7e:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
HAL_StatusTypeDef halret;

	struct GATEWAYPCTOCAN* pgptc; // Pointer to Gateway Pc To Can

	/* There can be a problem with Tasks not started if the calling task gets here first */
	osDelay(10);
 8009d82:	200a      	movs	r0, #10
 8009d84:	f7fd f99e 	bl	80070c4 <osDelay>

taskENTER_CRITICAL();
 8009d88:	f7fd fbb4 	bl	80074f4 <vPortEnterCritical>
	/* Add block with circular buffer pointers for this uart/usart to list */
	ptmp1 = (struct SERIALRCVBCB*)calloc(1, sizeof(struct SERIALRCVBCB));
 8009d8c:	214c      	movs	r1, #76	; 0x4c
 8009d8e:	2001      	movs	r0, #1
 8009d90:	f000 ffd2 	bl	800ad38 <calloc>
	if (ptmp1  == NULL) {taskEXIT_CRITICAL();return NULL;}
 8009d94:	b918      	cbnz	r0, 8009d9e <xSerialTaskRxAdduart+0x3a>
 8009d96:	f7fd fbcf 	bl	8007538 <vPortExitCritical>
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	e071      	b.n	8009e82 <xSerialTaskRxAdduart+0x11e>
 8009d9e:	4604      	mov	r4, r0
	if (prbhd  == NULL) // Is this the first?
 8009da0:	4b39      	ldr	r3, [pc, #228]	; (8009e88 <xSerialTaskRxAdduart+0x124>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	b923      	cbnz	r3, 8009db0 <xSerialTaskRxAdduart+0x4c>
	{ // Yes.  
		prbhd = ptmp1;	// Point head to first on list
 8009da6:	4b38      	ldr	r3, [pc, #224]	; (8009e88 <xSerialTaskRxAdduart+0x124>)
 8009da8:	6018      	str	r0, [r3, #0]
		ptmp1->pnext = ptmp1; // Point first (and last) item on list to self
 8009daa:	6020      	str	r0, [r4, #0]
 8009dac:	e005      	b.n	8009dba <xSerialTaskRxAdduart+0x56>
	}
	else
	{ // No. One or more have been added
		/* Find end of list */
		ptmp2 = prbhd;	// Start at head
		while (ptmp2 != ptmp2->pnext) ptmp2 = ptmp2->pnext;
 8009dae:	4613      	mov	r3, r2
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d1fb      	bne.n	8009dae <xSerialTaskRxAdduart+0x4a>
		ptmp2->pnext = ptmp1; // Last block points to added block
 8009db6:	601c      	str	r4, [r3, #0]
		ptmp1->pnext = ptmp1; // Added (and last) lock points to self
 8009db8:	6024      	str	r4, [r4, #0]
	}

	/* CAN msg conversion depends on line buffer size being large enough for CAN msg. */
	if ((CANmode != 0) && (linesize < sizeof(struct CANRCVBUFPLUS))) 
 8009dba:	f1b8 0f00 	cmp.w	r8, #0
 8009dbe:	d002      	beq.n	8009dc6 <xSerialTaskRxAdduart+0x62>
 8009dc0:	2d17      	cmp	r5, #23
 8009dc2:	d800      	bhi.n	8009dc6 <xSerialTaskRxAdduart+0x62>
	     linesize = sizeof(struct CANRCVBUFPLUS);
 8009dc4:	2518      	movs	r5, #24

	/* Get memory for an array of line buffers for this uart */	
	pbuf = (char*)calloc(numline*linesize, sizeof(char));
 8009dc6:	fb05 f709 	mul.w	r7, r5, r9
 8009dca:	2101      	movs	r1, #1
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f000 ffb3 	bl	800ad38 <calloc>
	if ( pbuf == NULL) {taskEXIT_CRITICAL();return NULL;}
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	b918      	cbnz	r0, 8009dde <xSerialTaskRxAdduart+0x7a>
 8009dd6:	f7fd fbaf 	bl	8007538 <vPortExitCritical>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e051      	b.n	8009e82 <xSerialTaskRxAdduart+0x11e>

	/* Save parameters */
	// ptmp1 points to last item on list
	ptmp1->numlinexsize = numline*linesize;
 8009dde:	63a7      	str	r7, [r4, #56]	; 0x38
	ptmp1->linesize  = linesize;
 8009de0:	87a5      	strh	r5, [r4, #60]	; 0x3c
	ptmp1->numline   = numline;
 8009de2:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
	ptmp1->dmaflag   = dmaflag;
 8009de6:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
	ptmp1->pnoteval  = pnoteval;
 8009dea:	9b03      	ldr	r3, [sp, #12]
 8009dec:	62a3      	str	r3, [r4, #40]	; 0x28
	ptmp1->notebit   = notebit;
 8009dee:	9b02      	ldr	r3, [sp, #8]
 8009df0:	6263      	str	r3, [r4, #36]	; 0x24
	ptmp1->phuart    = phuart;
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	61e3      	str	r3, [r4, #28]
	ptmp1->tskhandle = xTaskGetCurrentTaskHandle();
 8009df6:	f7fc fc95 	bl	8006724 <xTaskGetCurrentTaskHandle>
 8009dfa:	6220      	str	r0, [r4, #32]
	ptmp1->errorct   = 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	64a3      	str	r3, [r4, #72]	; 0x48

	/* Initialize line buffer pointers */
	ptmp1->pbegin = pbuf; // First line buffer beginning
 8009e00:	6066      	str	r6, [r4, #4]
	ptmp1->padd   = pbuf; // Pointer to where next line will be added
 8009e02:	60e6      	str	r6, [r4, #12]
	ptmp1->ptake  = pbuf; // Pointer to where next line will be taken
 8009e04:	6126      	str	r6, [r4, #16]
	ptmp1->pwork  = pbuf; // Pointer where next char in active line will be added
 8009e06:	6166      	str	r6, [r4, #20]
	ptmp1->pworkend = pbuf + linesize - 2; // End of 1st LINE buffer (allow for zero terminator)
 8009e08:	3d02      	subs	r5, #2
 8009e0a:	4435      	add	r5, r6
 8009e0c:	61a5      	str	r5, [r4, #24]
	ptmp1->pend = pbuf + numline*linesize; // End of line buffers + 1 line
 8009e0e:	4437      	add	r7, r6
 8009e10:	60a7      	str	r7, [r4, #8]
	ptmp1->CANmode = CANmode;
 8009e12:	f884 8042 	strb.w	r8, [r4, #66]	; 0x42

	if (dmaflag != 0)
 8009e16:	f1ba 0f00 	cmp.w	sl, #0
 8009e1a:	d022      	beq.n	8009e62 <xSerialTaskRxAdduart+0xfe>
	{ // Circular DMA buffer 
		pbuf = (char*)calloc((int)dmasize, sizeof(char));
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	4658      	mov	r0, fp
 8009e20:	f000 ff8a 	bl	800ad38 <calloc>
		if ( pbuf == NULL) return NULL;
 8009e24:	b360      	cbz	r0, 8009e80 <xSerialTaskRxAdduart+0x11c>
		ptmp1->pbegindma = pbuf;   // Pointer to beginning of DMA circular buffer
 8009e26:	62e0      	str	r0, [r4, #44]	; 0x2c
		ptmp1->penddma   = pbuf + dmasize; // Pointer to end + 1
 8009e28:	eb00 020b 	add.w	r2, r0, fp
 8009e2c:	6322      	str	r2, [r4, #48]	; 0x30
		ptmp1->ptakedma  = pbuf;   // "Take" Pointer into DMA buffer
 8009e2e:	6360      	str	r0, [r4, #52]	; 0x34
		ptmp1->dmasize   = dmasize; // Total number of chars in DMA buffer
 8009e30:	f8a4 b03e 	strh.w	fp, [r4, #62]	; 0x3e

		/* When CANmode is requested, the conversion control block is used */
		if (CANmode == 1)
 8009e34:	f1b8 0f01 	cmp.w	r8, #1
 8009e38:	d108      	bne.n	8009e4c <xSerialTaskRxAdduart+0xe8>
		{ // Initialize CAN conversion control block
			pgptc = gateway_PCtoCAN_init(ptmp1);
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 f88c 	bl	8009f58 <gateway_PCtoCAN_init>
			if (pgptc == NULL)  {taskEXIT_CRITICAL();return NULL;}
 8009e40:	b918      	cbnz	r0, 8009e4a <xSerialTaskRxAdduart+0xe6>
 8009e42:	f7fd fb79 	bl	8007538 <vPortExitCritical>
 8009e46:	2000      	movs	r0, #0
 8009e48:	e01b      	b.n	8009e82 <xSerialTaskRxAdduart+0x11e>
			ptmp1->pgptc = pgptc; // Save pointer to CAN conversion control block
 8009e4a:	6460      	str	r0, [r4, #68]	; 0x44
		}

		/* Start uart-dma circular mode.  Start once; run forever. */
		halret = HAL_UART_Receive_DMA(ptmp1->phuart, (uint8_t*)ptmp1->pbegindma, ptmp1->dmasize);
 8009e4c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009e4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009e50:	69e0      	ldr	r0, [r4, #28]
 8009e52:	f7fa fa03 	bl	800425c <HAL_UART_Receive_DMA>
		if (halret == HAL_ERROR)
 8009e56:	2801      	cmp	r0, #1
 8009e58:	d10e      	bne.n	8009e78 <xSerialTaskRxAdduart+0x114>
		{
			taskEXIT_CRITICAL();
 8009e5a:	f7fd fb6d 	bl	8007538 <vPortExitCritical>
			return NULL;
 8009e5e:	2000      	movs	r0, #0
 8009e60:	e00f      	b.n	8009e82 <xSerialTaskRxAdduart+0x11e>
		}
	}
	else
	{ // Start char-by-char mode. Restart upon each interrupt.
		halret = HAL_UART_Receive_IT(ptmp1->phuart, (uint8_t*)ptmp1->pwork, 1);
 8009e62:	2201      	movs	r2, #1
 8009e64:	4631      	mov	r1, r6
 8009e66:	69e0      	ldr	r0, [r4, #28]
 8009e68:	f7fa f988 	bl	800417c <HAL_UART_Receive_IT>
		if (halret == HAL_ERROR)
 8009e6c:	2801      	cmp	r0, #1
 8009e6e:	d103      	bne.n	8009e78 <xSerialTaskRxAdduart+0x114>
		{
			taskEXIT_CRITICAL();
 8009e70:	f7fd fb62 	bl	8007538 <vPortExitCritical>
			return NULL;
 8009e74:	2000      	movs	r0, #0
 8009e76:	e004      	b.n	8009e82 <xSerialTaskRxAdduart+0x11e>
		}
	}
taskEXIT_CRITICAL();
 8009e78:	f7fd fb5e 	bl	8007538 <vPortExitCritical>
	return ptmp1;	// Success return pointer to this 'BCB
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	e000      	b.n	8009e82 <xSerialTaskRxAdduart+0x11e>
	ptmp1->CANmode = CANmode;

	if (dmaflag != 0)
	{ // Circular DMA buffer 
		pbuf = (char*)calloc((int)dmasize, sizeof(char));
		if ( pbuf == NULL) return NULL;
 8009e80:	2000      	movs	r0, #0
			return NULL;
		}
	}
taskEXIT_CRITICAL();
	return ptmp1;	// Success return pointer to this 'BCB
}
 8009e82:	b005      	add	sp, #20
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	20004fa0 	.word	0x20004fa0

08009e8c <xSerialTaskReceiveCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: SerialTaskReceiveHandle
 * *************************************************************************/
 BaseType_t xSerialTaskReceiveCreate(uint32_t taskpriority)
{
 8009e8c:	b500      	push	{lr}
 8009e8e:	b083      	sub	sp, #12
unsigned short usStackDepth,
void *pvParameters,
UBaseType_t uxPriority,
TaskHandle_t *pxCreatedTask );
*/
	return xTaskCreate(StartSerialTaskReceive, "StartSerialTaskReceive",\
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <xSerialTaskReceiveCreate+0x1c>)
 8009e92:	9301      	str	r3, [sp, #4]
 8009e94:	9000      	str	r0, [sp, #0]
 8009e96:	2300      	movs	r3, #0
 8009e98:	2260      	movs	r2, #96	; 0x60
 8009e9a:	4904      	ldr	r1, [pc, #16]	; (8009eac <xSerialTaskReceiveCreate+0x20>)
 8009e9c:	4804      	ldr	r0, [pc, #16]	; (8009eb0 <xSerialTaskReceiveCreate+0x24>)
 8009e9e:	f7fc f857 	bl	8005f50 <xTaskCreate>
     96, NULL, taskpriority,\
     &SerialTaskReceiveHandle);
}
 8009ea2:	b003      	add	sp, #12
 8009ea4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ea8:	20004fa4 	.word	0x20004fa4
 8009eac:	0800ed90 	.word	0x0800ed90
 8009eb0:	08009d11 	.word	0x08009d11

08009eb4 <HAL_UART_RxCpltCallback>:
 *				: OR, char-by-char completion of sending
 * *************************************************************************/
/* DMA buffer complete, => OR <= char-by-char complete */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *phuart)
{
 8009eb4:	b530      	push	{r4, r5, lr}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	4605      	mov	r5, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9303      	str	r3, [sp, #12]

	/* Look up buffer control block, given uart handle */
	struct SERIALRCVBCB* prtmp = prbhd;
 8009ebe:	4b15      	ldr	r3, [pc, #84]	; (8009f14 <HAL_UART_RxCpltCallback+0x60>)
 8009ec0:	681c      	ldr	r4, [r3, #0]
	while (prtmp->phuart != phuart) prtmp++;
 8009ec2:	e000      	b.n	8009ec6 <HAL_UART_RxCpltCallback+0x12>
 8009ec4:	344c      	adds	r4, #76	; 0x4c
 8009ec6:	69e3      	ldr	r3, [r4, #28]
 8009ec8:	42ab      	cmp	r3, r5
 8009eca:	d1fb      	bne.n	8009ec4 <HAL_UART_RxCpltCallback+0x10>

	/* Note char-by-char mode from dma mode. */
	if (prtmp->dmaflag == 0)
 8009ecc:	f994 3041 	ldrsb.w	r3, [r4, #65]	; 0x41
 8009ed0:	b953      	cbnz	r3, 8009ee8 <HAL_UART_RxCpltCallback+0x34>
	{ // Here char-by-char interrupt mode

		// Note: char-by-char stores directly to line buffer
		advanceptr(prtmp,*prtmp->pwork); 
 8009ed2:	6963      	ldr	r3, [r4, #20]
 8009ed4:	7819      	ldrb	r1, [r3, #0]
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f7ff fee6 	bl	8009ca8 <advanceptr>

		/* Restart receiving one char. */
		HAL_UART_Receive_IT(phuart, (uint8_t*)prtmp->pwork, 1); // Get next char		
 8009edc:	2201      	movs	r2, #1
 8009ede:	6961      	ldr	r1, [r4, #20]
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f7fa f94b 	bl	800417c <HAL_UART_Receive_IT>
		return;
 8009ee6:	e012      	b.n	8009f0e <HAL_UART_RxCpltCallback+0x5a>
	}

	/* Trigger Recieve Task to poll dma uarts */
	xTaskNotifyFromISR(SerialTaskReceiveHandle, 
 8009ee8:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <HAL_UART_RxCpltCallback+0x64>)
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	ab03      	add	r3, sp, #12
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	f7fc fda5 	bl	8006a44 <xTaskGenericNotifyFromISR>
		0,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken ); 

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	b13b      	cbz	r3, 8009f0e <HAL_UART_RxCpltCallback+0x5a>
 8009efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f02:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <HAL_UART_RxCpltCallback+0x68>)
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	f3bf 8f6f 	isb	sy
	return;
}
 8009f0e:	b005      	add	sp, #20
 8009f10:	bd30      	pop	{r4, r5, pc}
 8009f12:	bf00      	nop
 8009f14:	20004fa0 	.word	0x20004fa0
 8009f18:	20004fa4 	.word	0x20004fa4
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <HAL_UART_RxHalfCpltCallback>:
 * *************************************************************************/
/* NOTE: under interrupt from callback. */

/* DMA Half buffer complete callback (dma only) */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *phuart)
{
 8009f20:	b508      	push	{r3, lr}
	HAL_UART_RxCpltCallback(phuart);
 8009f22:	f7ff ffc7 	bl	8009eb4 <HAL_UART_RxCpltCallback>
 8009f26:	bd08      	pop	{r3, pc}

08009f28 <HAL_UART_ErrorCallback>:
 * *************************************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *phuart)
{
	/* Look up buffer control block, given uart handle */
	/* Look up buffer control block, given uart handle */
	struct SERIALRCVBCB* prtmp = prbhd;
 8009f28:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <HAL_UART_ErrorCallback+0x18>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
	while (prtmp->phuart != phuart) prtmp++;
 8009f2c:	e000      	b.n	8009f30 <HAL_UART_ErrorCallback+0x8>
 8009f2e:	334c      	adds	r3, #76	; 0x4c
 8009f30:	69da      	ldr	r2, [r3, #28]
 8009f32:	4282      	cmp	r2, r0
 8009f34:	d1fb      	bne.n	8009f2e <HAL_UART_ErrorCallback+0x6>
	prtmp->errorct += 1;
 8009f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f38:	3201      	adds	r2, #1
 8009f3a:	649a      	str	r2, [r3, #72]	; 0x48
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	20004fa0 	.word	0x20004fa0

08009f44 <new_init>:
*/

static void new_init(struct GATEWAYPCTOCAN* p)
{
	/* Initialize for new CAN msg construction */
	p->state   = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	7283      	strb	r3, [r0, #10]
	p->error   = 0;
 8009f48:	72c3      	strb	r3, [r0, #11]
	p->ctr     = 0;
 8009f4a:	7383      	strb	r3, [r0, #14]
	p->odd     = 1;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	7343      	strb	r3, [r0, #13]
	p->chksumx = CHECKSUM_INITIAL;	// Checksum initial value
 8009f50:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 8009f54:	6043      	str	r3, [r0, #4]
 8009f56:	4770      	bx	lr

08009f58 <gateway_PCtoCAN_init>:
 * @brief	: Get decode block calloc'd and initialized
 * @param	: 
 * @return	: pointer: NULL = failed.
 * ************************************************************************************** */
struct GATEWAYPCTOCAN* gateway_PCtoCAN_init(struct SERIALRCVBCB* prbcb)
{
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4605      	mov	r5, r0
	struct GATEWAYPCTOCAN* p;

	/* Get control block for conversion to CAN */
	p = (struct GATEWAYPCTOCAN*)calloc(1,sizeof(struct GATEWAYPCTOCAN));
 8009f5c:	2110      	movs	r1, #16
 8009f5e:	2001      	movs	r0, #1
 8009f60:	f000 feea 	bl	800ad38 <calloc>
	if (p == NULL) return p;
 8009f64:	4604      	mov	r4, r0
 8009f66:	b120      	cbz	r0, 8009f72 <gateway_PCtoCAN_init+0x1a>
	prbcb->pgptc = p; // Save ptr in BCB for unloading dma
 8009f68:	6468      	str	r0, [r5, #68]	; 0x44

	new_init(p);	// Initialize for new (first) CAN msg construction
 8009f6a:	f7ff ffeb 	bl	8009f44 <new_init>
	p->pcanp = (struct CANRCVBUFPLUS*)prbcb->pbegin;
 8009f6e:	686b      	ldr	r3, [r5, #4]
 8009f70:	6023      	str	r3, [r4, #0]
	return p;
}
 8009f72:	4620      	mov	r0, r4
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop

08009f78 <gateway_PCtoCAN_unloaddma>:
/* 14  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
/* 15  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
};

void gateway_PCtoCAN_unloaddma(struct SERIALRCVBCB* prbcb)
{	// Here, a DMA interrupt means there is new data in the DMA buffer
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	4605      	mov	r5, r0

	struct GATEWAYPCTOCAN* p = prbcb->pgptc;	// Easy to use ptr
 8009f7e:	6c44      	ldr	r4, [r0, #68]	; 0x44
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	9303      	str	r3, [sp, #12]
	uint16_t dmandtr;	// Number of data items remaining in DMA NDTR register
	int32_t diff;
	char c;
		
	/* Get number of data items remaining in DMA buffer "now" from DMA NDTR register. */
	dmandtr = __HAL_DMA_GET_COUNTER(prbcb->phuart->hdmarx); 
 8009f84:	69c3      	ldr	r3, [r0, #28]
 8009f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685e      	ldr	r6, [r3, #4]

	/* Difference between where we are taking out chars, and where DMA is, or was, storing. */
	diff = prbcb->penddma - dmandtr - prbcb->ptakedma; 
 8009f8c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8009f8e:	b2b6      	uxth	r6, r6
 8009f90:	1b93      	subs	r3, r2, r6
 8009f92:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (diff < 0)
 8009f94:	1b9e      	subs	r6, r3, r6
 8009f96:	f140 80d8 	bpl.w	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
	{ // Wrap around
		diff += prbcb->dmasize;
 8009f9a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8009f9c:	441e      	add	r6, r3
 8009f9e:	e0d4      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
	}

	/* Remove DMA chars and construct CAN msg(s), using data available. */
	while (diff > 0) // Run until chars available are used up.
	{
		diff -= 1;
 8009fa0:	3e01      	subs	r6, #1
		c = *prbcb->ptakedma++; // XGet char from dma buffer and advance dma ptr
 8009fa2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	636a      	str	r2, [r5, #52]	; 0x34
 8009fa8:	781b      	ldrb	r3, [r3, #0]
		if (prbcb->ptakedma == prbcb->penddma) prbcb->ptakedma = prbcb->pbegindma;
 8009faa:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009fac:	428a      	cmp	r2, r1
 8009fae:	d101      	bne.n	8009fb4 <gateway_PCtoCAN_unloaddma+0x3c>
 8009fb0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8009fb2:	636a      	str	r2, [r5, #52]	; 0x34
			
		/* CAN msg ascii/hex separated with LINETERMINATOR. */
		// 0x0D takes care of someone typing in stuff with minicom
		if ((c == 0XD) || (c == LINETERMINATOR))
 8009fb4:	2b0d      	cmp	r3, #13
 8009fb6:	d001      	beq.n	8009fbc <gateway_PCtoCAN_unloaddma+0x44>
 8009fb8:	2b0a      	cmp	r3, #10
 8009fba:	d12d      	bne.n	800a018 <gateway_PCtoCAN_unloaddma+0xa0>
		{ // Here End of Line
			
			/* End of line signals end of CAN msg; beginning of new.  */
			if (p->state != 7) // Did it end correctly?
 8009fbc:	7aa3      	ldrb	r3, [r4, #10]
 8009fbe:	2b07      	cmp	r3, #7
 8009fc0:	d003      	beq.n	8009fca <gateway_PCtoCAN_unloaddma+0x52>
			{ // Here, no.
				p->error |= (1<<2);	// Line terminator came at wrong place.
 8009fc2:	7ae3      	ldrb	r3, [r4, #11]
 8009fc4:	f043 0304 	orr.w	r3, r3, #4
 8009fc8:	72e3      	strb	r3, [r4, #11]
			}

			/* Give the user of the CAN msg some info. */
			p->pcanp->seq   = p->binseq;
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	7a22      	ldrb	r2, [r4, #8]
 8009fce:	745a      	strb	r2, [r3, #17]
			p->pcanp->error = p->error;
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	7ae2      	ldrb	r2, [r4, #11]
 8009fd4:	741a      	strb	r2, [r3, #16]

			/* Advance to beginning of next CAN msg (line) buffer */
			prbcb->padd += prbcb->linesize;	// Step ahead one line buffer length
 8009fd6:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8009fd8:	68ea      	ldr	r2, [r5, #12]
 8009fda:	4413      	add	r3, r2
 8009fdc:	60eb      	str	r3, [r5, #12]
			if (prbcb->padd == prbcb->pend) prbcb->padd = prbcb->pbegin;
 8009fde:	68aa      	ldr	r2, [r5, #8]
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d101      	bne.n	8009fe8 <gateway_PCtoCAN_unloaddma+0x70>
 8009fe4:	686b      	ldr	r3, [r5, #4]
 8009fe6:	60eb      	str	r3, [r5, #12]

			/* Notify originating task that a CAN msg is ready. */
			xTaskNotifyFromISR(prbcb->tskhandle, 
 8009fe8:	ab03      	add	r3, sp, #12
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	2300      	movs	r3, #0
 8009fee:	2201      	movs	r2, #1
 8009ff0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8009ff2:	6a28      	ldr	r0, [r5, #32]
 8009ff4:	f7fc fd26 	bl	8006a44 <xTaskGenericNotifyFromISR>
				prbcb->notebit,	/* 'or' bit assigned to buffer to notification value. */
				eSetBits,         /* Use the 'or' option */
				&xHigherPriorityTaskWoken );

			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	b13b      	cbz	r3, 800a00c <gateway_PCtoCAN_unloaddma+0x94>
 8009ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a000:	4b54      	ldr	r3, [pc, #336]	; (800a154 <gateway_PCtoCAN_unloaddma+0x1dc>)
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	f3bf 8f6f 	isb	sy

			/* Initialize for next CAN msg */
			new_init(p);
 800a00c:	4620      	mov	r0, r4
 800a00e:	f7ff ff99 	bl	8009f44 <new_init>

			/* CAN msg starts at beginning of next "line" buffer. */
			p->pcanp = (struct CANRCVBUFPLUS*)prbcb->padd;
 800a012:	68eb      	ldr	r3, [r5, #12]
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	e098      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
		}
		else
		{ // Not end-of-line.  Convert ascii/hex to binary bytes
			if (p->odd == 1)
 800a018:	7b62      	ldrb	r2, [r4, #13]
 800a01a:	2a01      	cmp	r2, #1
 800a01c:	d106      	bne.n	800a02c <gateway_PCtoCAN_unloaddma+0xb4>
			{ // High order nibble
				p->odd = 0;
 800a01e:	2200      	movs	r2, #0
 800a020:	7362      	strb	r2, [r4, #13]
				p->bin = hexbin[(uint8_t)c] << 4; // Lookup binary, given ascii
 800a022:	4a4d      	ldr	r2, [pc, #308]	; (800a158 <gateway_PCtoCAN_unloaddma+0x1e0>)
 800a024:	5cd3      	ldrb	r3, [r2, r3]
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	7323      	strb	r3, [r4, #12]
 800a02a:	e08e      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
			}
			else
			{ // Low order nibble completes byte
				p->odd = 1;
 800a02c:	2201      	movs	r2, #1
 800a02e:	7362      	strb	r2, [r4, #13]
				p->bin |= hexbin[(uint8_t)c];
 800a030:	4a49      	ldr	r2, [pc, #292]	; (800a158 <gateway_PCtoCAN_unloaddma+0x1e0>)
 800a032:	5cd2      	ldrb	r2, [r2, r3]
 800a034:	7b23      	ldrb	r3, [r4, #12]
 800a036:	4313      	orrs	r3, r2
 800a038:	7323      	strb	r3, [r4, #12]
				
				/* Store binary bytes directly into CAN buffer location */
				/* Build checksum as we go. */
				switch(p->state)
 800a03a:	7aa2      	ldrb	r2, [r4, #10]
 800a03c:	2a07      	cmp	r2, #7
 800a03e:	f200 8084 	bhi.w	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
 800a042:	e8df f002 	tbb	[pc, r2]
 800a046:	0b04      	.short	0x0b04
 800a048:	3c2f2215 	.word	0x3c2f2215
 800a04c:	7e4f      	.short	0x7e4f
				{
				case 0: // Sequence number
					p->binseq   = p->bin;
 800a04e:	7223      	strb	r3, [r4, #8]
					p->chksumx += p->bin;
 800a050:	6861      	ldr	r1, [r4, #4]
 800a052:	440b      	add	r3, r1
 800a054:	6063      	str	r3, [r4, #4]
					p->state   += 1;
 800a056:	3201      	adds	r2, #1
 800a058:	72a2      	strb	r2, [r4, #10]
					break;
 800a05a:	e076      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
				case 1: // Low order byte of CAN id word
					p->pcanp->can.id   = (p->bin << 0);
 800a05c:	6822      	ldr	r2, [r4, #0]
 800a05e:	6013      	str	r3, [r2, #0]
					p->state   += 1;
 800a060:	7aa3      	ldrb	r3, [r4, #10]
 800a062:	3301      	adds	r3, #1
 800a064:	72a3      	strb	r3, [r4, #10]
					p->chksumx += p->bin;
 800a066:	7b23      	ldrb	r3, [r4, #12]
 800a068:	6862      	ldr	r2, [r4, #4]
 800a06a:	4413      	add	r3, r2
 800a06c:	6063      	str	r3, [r4, #4]
					break;
 800a06e:	e06c      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
				case 2:
					p->pcanp->can.id  |= (p->bin << 8);
 800a070:	6821      	ldr	r1, [r4, #0]
 800a072:	680a      	ldr	r2, [r1, #0]
 800a074:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800a078:	600b      	str	r3, [r1, #0]
					p->chksumx += p->bin;
 800a07a:	7b23      	ldrb	r3, [r4, #12]
 800a07c:	6862      	ldr	r2, [r4, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	6063      	str	r3, [r4, #4]
					p->state   += 1;
 800a082:	7aa3      	ldrb	r3, [r4, #10]
 800a084:	3301      	adds	r3, #1
 800a086:	72a3      	strb	r3, [r4, #10]
					break;
 800a088:	e05f      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
				case 3:
					p->pcanp->can.id  |= (p->bin << 16);
 800a08a:	6821      	ldr	r1, [r4, #0]
 800a08c:	680a      	ldr	r2, [r1, #0]
 800a08e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800a092:	600b      	str	r3, [r1, #0]
					p->chksumx += p->bin;
 800a094:	7b23      	ldrb	r3, [r4, #12]
 800a096:	6862      	ldr	r2, [r4, #4]
 800a098:	4413      	add	r3, r2
 800a09a:	6063      	str	r3, [r4, #4]
					p->state   += 1;
 800a09c:	7aa3      	ldrb	r3, [r4, #10]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	72a3      	strb	r3, [r4, #10]
					break;
 800a0a2:	e052      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
				case 4: // High order byte of CAN id word
					p->pcanp->can.id  |= (p->bin << 24);
 800a0a4:	6821      	ldr	r1, [r4, #0]
 800a0a6:	680a      	ldr	r2, [r1, #0]
 800a0a8:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800a0ac:	600b      	str	r3, [r1, #0]
					p->chksumx += p->bin;
 800a0ae:	7b23      	ldrb	r3, [r4, #12]
 800a0b0:	6862      	ldr	r2, [r4, #4]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	6063      	str	r3, [r4, #4]
					p->state   += 1;
 800a0b6:	7aa3      	ldrb	r3, [r4, #10]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	72a3      	strb	r3, [r4, #10]
					break;
 800a0bc:	e045      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
				case 5: // DLC byte -> CAN msg dlc word
					if (p->bin > 8)
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d905      	bls.n	800a0ce <gateway_PCtoCAN_unloaddma+0x156>
					{ // DLC too large.
						p->bin = 8; //Do not overrun array!
 800a0c2:	2308      	movs	r3, #8
 800a0c4:	7323      	strb	r3, [r4, #12]
						p->error |= (1<<5);
 800a0c6:	7ae3      	ldrb	r3, [r4, #11]
 800a0c8:	f043 0320 	orr.w	r3, r3, #32
 800a0cc:	72e3      	strb	r3, [r4, #11]
					}
					p->pcanp->can.dlc = p->bin;
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	7b22      	ldrb	r2, [r4, #12]
 800a0d2:	605a      	str	r2, [r3, #4]
					p->chksumx   += p->bin;
 800a0d4:	7b23      	ldrb	r3, [r4, #12]
 800a0d6:	6862      	ldr	r2, [r4, #4]
 800a0d8:	4413      	add	r3, r2
 800a0da:	6063      	str	r3, [r4, #4]
					p->state     += 1;
 800a0dc:	7aa3      	ldrb	r3, [r4, #10]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	72a3      	strb	r3, [r4, #10]
					break;
 800a0e2:	e032      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
				case 6: // Fill data bytes per dlc
					if (p->ctr < p->pcanp->can.dlc)
 800a0e4:	7ba2      	ldrb	r2, [r4, #14]
 800a0e6:	6821      	ldr	r1, [r4, #0]
 800a0e8:	6848      	ldr	r0, [r1, #4]
 800a0ea:	4282      	cmp	r2, r0
 800a0ec:	d209      	bcs.n	800a102 <gateway_PCtoCAN_unloaddma+0x18a>
					{
						p->pcanp->can.cd.uc[p->ctr] = p->bin;
 800a0ee:	440a      	add	r2, r1
 800a0f0:	7213      	strb	r3, [r2, #8]
						p->chksumx += p->bin;
 800a0f2:	7b23      	ldrb	r3, [r4, #12]
 800a0f4:	6862      	ldr	r2, [r4, #4]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	6063      	str	r3, [r4, #4]
						p->ctr     += 1;
 800a0fa:	7ba3      	ldrb	r3, [r4, #14]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	73a3      	strb	r3, [r4, #14]
						break;
 800a100:	e023      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>
					}
					/* Here, checksum check.  Complete checksum calculation. */
					p->chksumx += (p->chksumx >> 16); // Add carries into high half word
 800a102:	6862      	ldr	r2, [r4, #4]
 800a104:	eb02 4212 	add.w	r2, r2, r2, lsr #16
					p->chksumx += (p->chksumx >> 16); // Add carry if previous add generated a carry
 800a108:	eb02 4212 	add.w	r2, r2, r2, lsr #16
					p->chksumx += (p->chksumx >> 8);  // Add high byte of low half word
 800a10c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
					p->chksumx += (p->chksumx >> 8);  // Add carry if previous add generated a carry
 800a110:	eb02 2212 	add.w	r2, r2, r2, lsr #8
 800a114:	6062      	str	r2, [r4, #4]
					if ((p->chksumx & 0xff) != p->bin)
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	429a      	cmp	r2, r3
 800a11a:	d003      	beq.n	800a124 <gateway_PCtoCAN_unloaddma+0x1ac>
					{ // Here, checksums mismatch
						p->error |=  (1<<1);
 800a11c:	7ae3      	ldrb	r3, [r4, #11]
 800a11e:	f043 0302 	orr.w	r3, r3, #2
 800a122:	72e3      	strb	r3, [r4, #11]
					}

					/* Check for missing msgs. */
					p->ctrseq += 1;	// Advance software maintained sequence number
 800a124:	7a63      	ldrb	r3, [r4, #9]
 800a126:	3301      	adds	r3, #1
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	7263      	strb	r3, [r4, #9]
					if (p->binseq != p->ctrseq)
 800a12c:	7a22      	ldrb	r2, [r4, #8]
 800a12e:	4293      	cmp	r3, r2
 800a130:	d004      	beq.n	800a13c <gateway_PCtoCAN_unloaddma+0x1c4>
					{
						p->error  |= (1<<3);	// Sequence number mismatch
 800a132:	7ae3      	ldrb	r3, [r4, #11]
 800a134:	f043 0308 	orr.w	r3, r3, #8
 800a138:	72e3      	strb	r3, [r4, #11]
						p->ctrseq = p->binseq; // Reset
 800a13a:	7262      	strb	r2, [r4, #9]
					}
					p->state = 7;
 800a13c:	2307      	movs	r3, #7
 800a13e:	72a3      	strb	r3, [r4, #10]
					break;
 800a140:	e003      	b.n	800a14a <gateway_PCtoCAN_unloaddma+0x1d2>

				case 7:
					p->error |= (1<<4); // Too many chars
 800a142:	7ae3      	ldrb	r3, [r4, #11]
 800a144:	f043 0310 	orr.w	r3, r3, #16
 800a148:	72e3      	strb	r3, [r4, #11]
	{ // Wrap around
		diff += prbcb->dmasize;
	}

	/* Remove DMA chars and construct CAN msg(s), using data available. */
	while (diff > 0) // Run until chars available are used up.
 800a14a:	2e00      	cmp	r6, #0
 800a14c:	f73f af28 	bgt.w	8009fa0 <gateway_PCtoCAN_unloaddma+0x28>
				}		
			}
		}
	}
	return;
}
 800a150:	b004      	add	sp, #16
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	e000ed04 	.word	0xe000ed04
 800a158:	0800eda8 	.word	0x0800eda8

0800a15c <gateway_PCtoCAN_getCAN>:
struct CANRCVBUFPLUS* gateway_PCtoCAN_getCAN(struct SERIALRCVBCB* pbcb)
{
	struct CANRCVBUFPLUS* p = NULL;

	/* Check no new lines. */
	if (pbcb->ptake == pbcb->padd) return p;
 800a15c:	6903      	ldr	r3, [r0, #16]
 800a15e:	68c2      	ldr	r2, [r0, #12]
 800a160:	4293      	cmp	r3, r2
 800a162:	d009      	beq.n	800a178 <gateway_PCtoCAN_getCAN+0x1c>
	p = (struct CANRCVBUFPLUS*)pbcb->ptake;

	/* Advance 'take' pointer w wraparound check. */
	pbcb->ptake += pbcb->linesize;
 800a164:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800a166:	441a      	add	r2, r3
 800a168:	6102      	str	r2, [r0, #16]
	if (pbcb->ptake >= pbcb->pend) pbcb->ptake = pbcb->pbegin;
 800a16a:	6881      	ldr	r1, [r0, #8]
 800a16c:	428a      	cmp	r2, r1
 800a16e:	d305      	bcc.n	800a17c <gateway_PCtoCAN_getCAN+0x20>
 800a170:	6842      	ldr	r2, [r0, #4]
 800a172:	6102      	str	r2, [r0, #16]

	return p;
 800a174:	4618      	mov	r0, r3
 800a176:	4770      	bx	lr
struct CANRCVBUFPLUS* gateway_PCtoCAN_getCAN(struct SERIALRCVBCB* pbcb)
{
	struct CANRCVBUFPLUS* p = NULL;

	/* Check no new lines. */
	if (pbcb->ptake == pbcb->padd) return p;
 800a178:	2000      	movs	r0, #0
 800a17a:	4770      	bx	lr

	/* Advance 'take' pointer w wraparound check. */
	pbcb->ptake += pbcb->linesize;
	if (pbcb->ptake >= pbcb->pend) pbcb->ptake = pbcb->pbegin;

	return p;
 800a17c:	4618      	mov	r0, r3
}
 800a17e:	4770      	bx	lr

0800a180 <delay>:
 * @brief	: Delay based on DTW counter with LEDs ON
 * @param	: ticks = DTW count to delay
 * @param	: on = GPIO_PIN_SET or GPIO_PIN_RESET
 * *************************************************************************/
static void delay(uint32_t ticks, uint8_t on)
{
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	460d      	mov	r5, r1
	uint32_t tx = DTWTIME + ticks;
 800a184:	4b07      	ldr	r3, [pc, #28]	; (800a1a4 <delay+0x24>)
 800a186:	681c      	ldr	r4, [r3, #0]
 800a188:	4404      	add	r4, r0
	while ((int32_t)(tx - DTWTIME) > 0)
 800a18a:	e005      	b.n	800a198 <delay+0x18>
	{
			HAL_GPIO_WritePin(GPIOD, LEDALL, on); 
 800a18c:	462a      	mov	r2, r5
 800a18e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800a192:	4805      	ldr	r0, [pc, #20]	; (800a1a8 <delay+0x28>)
 800a194:	f7fa fe2c 	bl	8004df0 <HAL_GPIO_WritePin>
 * @param	: on = GPIO_PIN_SET or GPIO_PIN_RESET
 * *************************************************************************/
static void delay(uint32_t ticks, uint8_t on)
{
	uint32_t tx = DTWTIME + ticks;
	while ((int32_t)(tx - DTWTIME) > 0)
 800a198:	4b02      	ldr	r3, [pc, #8]	; (800a1a4 <delay+0x24>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	1ae3      	subs	r3, r4, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	dcf4      	bgt.n	800a18c <delay+0xc>
	{
			HAL_GPIO_WritePin(GPIOD, LEDALL, on); 
	}
	return;
}
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	e0001004 	.word	0xe0001004
 800a1a8:	40020c00 	.word	0x40020c00

0800a1ac <morse_generate>:
/* *************************************************************************
 * static void morse_generate(char c);
 *	@brief	: c = character to send as Morse cdoe
 * *************************************************************************/
static void morse_generate(char c)
{
 800a1ac:	b538      	push	{r3, r4, r5, lr}
	const struct MORSE_ELEMENT* ptbl = mrse;
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 800a1ae:	2200      	movs	r2, #0
 * static void morse_generate(char c);
 *	@brief	: c = character to send as Morse cdoe
 * *************************************************************************/
static void morse_generate(char c)
{
	const struct MORSE_ELEMENT* ptbl = mrse;
 800a1b0:	4b13      	ldr	r3, [pc, #76]	; (800a200 <morse_generate+0x54>)
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 800a1b2:	e022      	b.n	800a1fa <morse_generate+0x4e>
	{
		if (ptbl->c == c)
 800a1b4:	7819      	ldrb	r1, [r3, #0]
 800a1b6:	4281      	cmp	r1, r0
 800a1b8:	d11d      	bne.n	800a1f6 <morse_generate+0x4a>
		{
				ct = ptbl->ct;
 800a1ba:	789c      	ldrb	r4, [r3, #2]
				dd = ptbl->dd;	
 800a1bc:	785d      	ldrb	r5, [r3, #1]
				while (ct > 0)
 800a1be:	e013      	b.n	800a1e8 <morse_generate+0x3c>
				{
					if ((dd & 0x80) == 0)
 800a1c0:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a1c4:	d104      	bne.n	800a1d0 <morse_generate+0x24>
					{ // Here, dot
						delay(TIC_DIT, GPIO_PIN_SET);
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	480e      	ldr	r0, [pc, #56]	; (800a204 <morse_generate+0x58>)
 800a1ca:	f7ff ffd9 	bl	800a180 <delay>
 800a1ce:	e003      	b.n	800a1d8 <morse_generate+0x2c>
					}
					else
					{ // Here, dash
						delay(TIC_DAH, GPIO_PIN_SET);						
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	480d      	ldr	r0, [pc, #52]	; (800a208 <morse_generate+0x5c>)
 800a1d4:	f7ff ffd4 	bl	800a180 <delay>
					}
					delay(TIC_IDIT, GPIO_PIN_RESET);
 800a1d8:	2100      	movs	r1, #0
 800a1da:	480c      	ldr	r0, [pc, #48]	; (800a20c <morse_generate+0x60>)
 800a1dc:	f7ff ffd0 	bl	800a180 <delay>
					dd = dd << 1;
 800a1e0:	006d      	lsls	r5, r5, #1
 800a1e2:	b2ed      	uxtb	r5, r5
					ct -= 1;
 800a1e4:	3c01      	subs	r4, #1
 800a1e6:	b2e4      	uxtb	r4, r4
	{
		if (ptbl->c == c)
		{
				ct = ptbl->ct;
				dd = ptbl->dd;	
				while (ct > 0)
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	d1e9      	bne.n	800a1c0 <morse_generate+0x14>
					}
					delay(TIC_IDIT, GPIO_PIN_RESET);
					dd = dd << 1;
					ct -= 1;
				}
				delay(TIC_ICHAR,GPIO_PIN_RESET);
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	4808      	ldr	r0, [pc, #32]	; (800a210 <morse_generate+0x64>)
 800a1f0:	f7ff ffc6 	bl	800a180 <delay>
				return;
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
		}
		ptbl++;
 800a1f6:	3303      	adds	r3, #3
	const struct MORSE_ELEMENT* ptbl = mrse;
	int i;
	uint8_t ct;
	uint8_t dd;
	
	for (i = 0; i < (74 - 16); i++)
 800a1f8:	3201      	adds	r2, #1
 800a1fa:	2a39      	cmp	r2, #57	; 0x39
 800a1fc:	ddda      	ble.n	800a1b4 <morse_generate+0x8>
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}
 800a200:	0800eea8 	.word	0x0800eea8
 800a204:	01d905c0 	.word	0x01d905c0
 800a208:	07641700 	.word	0x07641700
 800a20c:	0266ede0 	.word	0x0266ede0
 800a210:	099bb780 	.word	0x099bb780

0800a214 <morse_number>:
 * void morse_number(uint32_t n);
 *	@brief	: Send a character string as Morse code
 * @param	: nx = number to send
 * *************************************************************************/
void morse_number(uint32_t nx)
{
 800a214:	b510      	push	{r4, lr}
 800a216:	b084      	sub	sp, #16
	char c[11];
	int i = 0;
 800a218:	2400      	movs	r4, #0
	do
	{
		c[i] = (nx % 10) + '0';
 800a21a:	4b10      	ldr	r3, [pc, #64]	; (800a25c <morse_number+0x48>)
 800a21c:	fba3 2300 	umull	r2, r3, r3, r0
 800a220:	08db      	lsrs	r3, r3, #3
 800a222:	461a      	mov	r2, r3
 800a224:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a228:	0059      	lsls	r1, r3, #1
 800a22a:	1a43      	subs	r3, r0, r1
 800a22c:	a904      	add	r1, sp, #16
 800a22e:	4421      	add	r1, r4
 800a230:	3330      	adds	r3, #48	; 0x30
 800a232:	f801 3c0c 	strb.w	r3, [r1, #-12]
		nx = nx/10;
 800a236:	4610      	mov	r0, r2
		i += 1;
 800a238:	3401      	adds	r4, #1
	} while (nx != 0);
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	d1ed      	bne.n	800a21a <morse_number+0x6>
 800a23e:	e005      	b.n	800a24c <morse_number+0x38>

	while (--i >= 0)
	{
		morse_generate(c[i]);
 800a240:	ab04      	add	r3, sp, #16
 800a242:	4423      	add	r3, r4
 800a244:	f813 0c0c 	ldrb.w	r0, [r3, #-12]
 800a248:	f7ff ffb0 	bl	800a1ac <morse_generate>
		c[i] = (nx % 10) + '0';
		nx = nx/10;
		i += 1;
	} while (nx != 0);

	while (--i >= 0)
 800a24c:	3c01      	subs	r4, #1
 800a24e:	d5f7      	bpl.n	800a240 <morse_number+0x2c>
	{
		morse_generate(c[i]);

	}
	delay(TIC_IWORD,GPIO_PIN_RESET);
 800a250:	2100      	movs	r1, #0
 800a252:	4803      	ldr	r0, [pc, #12]	; (800a260 <morse_number+0x4c>)
 800a254:	f7ff ff94 	bl	800a180 <delay>
	return;
}
 800a258:	b004      	add	sp, #16
 800a25a:	bd10      	pop	{r4, pc}
 800a25c:	cccccccd 	.word	0xcccccccd
 800a260:	1cd32680 	.word	0x1cd32680

0800a264 <morse_trap>:
 * void morse_trap(uint8_t x);
 *	@brief	: Disable interrupts, Send 'x' and endless loop
 * @param	: x = trap number to flash
 * *************************************************************************/
void morse_trap(uint8_t x)
{
 800a264:	b508      	push	{r3, lr}
 800a266:	4604      	mov	r4, r0
	/* Disable global interrupts */
__asm__ volatile ("CPSID I");
 800a268:	b672      	cpsid	i
	while(1==1)
	{
		morse_number(x);
 800a26a:	4620      	mov	r0, r4
 800a26c:	f7ff ffd2 	bl	800a214 <morse_number>
		delay(TIC_PAUSE,GPIO_PIN_RESET);	
 800a270:	2100      	movs	r1, #0
 800a272:	4802      	ldr	r0, [pc, #8]	; (800a27c <morse_trap+0x18>)
 800a274:	f7ff ff84 	bl	800a180 <delay>
 800a278:	e7f7      	b.n	800a26a <morse_trap+0x6>
 800a27a:	bf00      	nop
 800a27c:	0b162280 	.word	0x0b162280

0800a280 <payload_extract>:
 *	@brief	: Lookup CAN ID and load mailbox with extract payload reading(s)
 * @param	: pmbx  = pointer to mailbox
 * @param	: pncan = pointer to CAN msg in can_face.c circular buffer
 * *************************************************************************/
void payload_extract(struct MAILBOXCAN* pmbx, struct CANRCVBUFN* pncan)
{
 800a280:	b430      	push	{r4, r5}
	switch (pmbx->paytype)
 800a282:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a286:	3b01      	subs	r3, #1
 800a288:	2b19      	cmp	r3, #25
 800a28a:	d87f      	bhi.n	800a38c <payload_extract+0x10c>
 800a28c:	e8df f003 	tbb	[pc, r3]
 800a290:	730d730d 	.word	0x730d730d
 800a294:	34730d34 	.word	0x34730d34
 800a298:	25167e7e 	.word	0x25167e7e
 800a29c:	46462525 	.word	0x46462525
 800a2a0:	7e7e7e46 	.word	0x7e7e7e46
 800a2a4:	347e7e34 	.word	0x347e7e34
 800a2a8:	5b7e      	.short	0x5b7e
	{
	case FF:
	case U32:
	case S32:
		if (pmbx->ncan.can.dlc >= 4)
 800a2aa:	6843      	ldr	r3, [r0, #4]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d974      	bls.n	800a39a <payload_extract+0x11a>
		{ // Place 1st four bytes of payload in union
			pmbx->mbx.u.i32[0] = pmbx->ncan.can.cd.ui[0];
 800a2b0:	6883      	ldr	r3, [r0, #8]
 800a2b2:	6183      	str	r3, [r0, #24]
			pmbx->ctr +=1 ;
 800a2b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	6343      	str	r3, [r0, #52]	; 0x34
 800a2ba:	e06e      	b.n	800a39a <payload_extract+0x11a>
		}
		break;	
	case xFF:
		if (pmbx->ncan.can.dlc >= 5)
 800a2bc:	6843      	ldr	r3, [r0, #4]
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d96b      	bls.n	800a39a <payload_extract+0x11a>
		{ // Place [1]-[4] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[1];
 800a2c2:	7a43      	ldrb	r3, [r0, #9]
 800a2c4:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[2];
 800a2c6:	7a83      	ldrb	r3, [r0, #10]
 800a2c8:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[3];
 800a2ca:	7ac3      	ldrb	r3, [r0, #11]
 800a2cc:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[4];
 800a2ce:	7b03      	ldrb	r3, [r0, #12]
 800a2d0:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;
 800a2d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	6343      	str	r3, [r0, #52]	; 0x34
 800a2d8:	e05f      	b.n	800a39a <payload_extract+0x11a>
		}
		break;	
	case xxFF:
	case xxU32:
	case xxS32:
		if (pmbx->ncan.can.dlc >= 6)
 800a2da:	6843      	ldr	r3, [r0, #4]
 800a2dc:	2b05      	cmp	r3, #5
 800a2de:	d95c      	bls.n	800a39a <payload_extract+0x11a>
		{ // Place [2]-[5] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[2];
 800a2e0:	7a83      	ldrb	r3, [r0, #10]
 800a2e2:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[3];
 800a2e4:	7ac3      	ldrb	r3, [r0, #11]
 800a2e6:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[4];
 800a2e8:	7b03      	ldrb	r3, [r0, #12]
 800a2ea:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[5];
 800a2ec:	7b43      	ldrb	r3, [r0, #13]
 800a2ee:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;
 800a2f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	6343      	str	r3, [r0, #52]	; 0x34
 800a2f6:	e050      	b.n	800a39a <payload_extract+0x11a>
		break;
	case U8_FF:
	case U8_U32:
	case U8_S32:
	case UNIXTIME:
		if (pmbx->ncan.can.dlc >= 5)
 800a2f8:	6843      	ldr	r3, [r0, #4]
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d94d      	bls.n	800a39a <payload_extract+0x11a>
		{ 
			pmbx->mbx.pre8[0] = pmbx->ncan.can.cd.uc[0];
 800a2fe:	7a03      	ldrb	r3, [r0, #8]
 800a300:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			// Place [2]-[5] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[1];
 800a304:	7a43      	ldrb	r3, [r0, #9]
 800a306:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[2];
 800a308:	7a83      	ldrb	r3, [r0, #10]
 800a30a:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[3];
 800a30c:	7ac3      	ldrb	r3, [r0, #11]
 800a30e:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[4];
 800a310:	7b03      	ldrb	r3, [r0, #12]
 800a312:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;		
 800a314:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a316:	3301      	adds	r3, #1
 800a318:	6343      	str	r3, [r0, #52]	; 0x34
 800a31a:	e03e      	b.n	800a39a <payload_extract+0x11a>
		}
		break;	
	case U8_U8_FF:
	case U8_U8_U32:
	case U8_U8_S32:
		if (pmbx->ncan.can.dlc >= 6)
 800a31c:	6843      	ldr	r3, [r0, #4]
 800a31e:	2b05      	cmp	r3, #5
 800a320:	d93b      	bls.n	800a39a <payload_extract+0x11a>
		{ 
			pmbx->mbx.pre8[0] = pmbx->ncan.can.cd.uc[0];
 800a322:	7a03      	ldrb	r3, [r0, #8]
 800a324:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			pmbx->mbx.pre8[1] = pmbx->ncan.can.cd.uc[1];
 800a328:	7a43      	ldrb	r3, [r0, #9]
 800a32a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
			// Place [2]-[5] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[2];
 800a32e:	7a83      	ldrb	r3, [r0, #10]
 800a330:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[3];
 800a332:	7ac3      	ldrb	r3, [r0, #11]
 800a334:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[4];
 800a336:	7b03      	ldrb	r3, [r0, #12]
 800a338:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[5];
 800a33a:	7b43      	ldrb	r3, [r0, #13]
 800a33c:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;		
 800a33e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a340:	3301      	adds	r3, #1
 800a342:	6343      	str	r3, [r0, #52]	; 0x34
 800a344:	e029      	b.n	800a39a <payload_extract+0x11a>
		}
		break;
	case U8_U8_U8_U32:
		if (pmbx->ncan.can.dlc >= 7)
 800a346:	6843      	ldr	r3, [r0, #4]
 800a348:	2b06      	cmp	r3, #6
 800a34a:	d926      	bls.n	800a39a <payload_extract+0x11a>
		{ 
			pmbx->mbx.pre8[0] = pmbx->ncan.can.cd.uc[0];
 800a34c:	7a03      	ldrb	r3, [r0, #8]
 800a34e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			pmbx->mbx.pre8[1] = pmbx->ncan.can.cd.uc[1];
 800a352:	7a43      	ldrb	r3, [r0, #9]
 800a354:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
			pmbx->mbx.pre8[2] = pmbx->ncan.can.cd.uc[2];
 800a358:	7a83      	ldrb	r3, [r0, #10]
 800a35a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
			// Place [2]-[5] of payload in union 
			pmbx->mbx.u.i8[0] = pmbx->ncan.can.cd.uc[3];
 800a35e:	7ac3      	ldrb	r3, [r0, #11]
 800a360:	7603      	strb	r3, [r0, #24]
			pmbx->mbx.u.i8[1] = pmbx->ncan.can.cd.uc[4];
 800a362:	7b03      	ldrb	r3, [r0, #12]
 800a364:	7643      	strb	r3, [r0, #25]
			pmbx->mbx.u.i8[2] = pmbx->ncan.can.cd.uc[5];
 800a366:	7b43      	ldrb	r3, [r0, #13]
 800a368:	7683      	strb	r3, [r0, #26]
			pmbx->mbx.u.i8[3] = pmbx->ncan.can.cd.uc[6];
 800a36a:	7b83      	ldrb	r3, [r0, #14]
 800a36c:	76c3      	strb	r3, [r0, #27]
			pmbx->ctr +=1 ;		
 800a36e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a370:	3301      	adds	r3, #1
 800a372:	6343      	str	r3, [r0, #52]	; 0x34
 800a374:	e011      	b.n	800a39a <payload_extract+0x11a>
		}
		break;
	case FF_FF:		// Two four byte readings
	case U32_U32:
	case S32_S32:
		if (pmbx->ncan.can.dlc >= 8)
 800a376:	6843      	ldr	r3, [r0, #4]
 800a378:	2b07      	cmp	r3, #7
 800a37a:	d90e      	bls.n	800a39a <payload_extract+0x11a>
		{ // Place [0]-[7] of payload in union 
			pmbx->mbx.u.i64 = pmbx->ncan.can.cd.ull;
 800a37c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800a380:	e9c0 2306 	strd	r2, r3, [r0, #24]
			pmbx->ctr +=1 ;
 800a384:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a386:	3301      	adds	r3, #1
 800a388:	6343      	str	r3, [r0, #52]	; 0x34
 800a38a:	e006      	b.n	800a39a <payload_extract+0x11a>

	// Payload type not implemented
	case UNDEF:
	default: 
		{ // Place [0]-[7] of payload in union 
			pmbx->mbx.u.i64 = pmbx->ncan.can.cd.ull;
 800a38c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800a390:	e9c0 2306 	strd	r2, r3, [r0, #24]
			pmbx->ctr +=1 ;
 800a394:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a396:	3301      	adds	r3, #1
 800a398:	6343      	str	r3, [r0, #52]	; 0x34
		}
		break;	
	}

	/*  Copy struct to update CAN msg */
	pmbx->ncan = *pncan; 
 800a39a:	4604      	mov	r4, r0
 800a39c:	460d      	mov	r5, r1
 800a39e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a3a6:	e884 0003 	stmia.w	r4, {r0, r1}

	return;
}
 800a3aa:	bc30      	pop	{r4, r5}
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop

0800a3b0 <lookup>:
 *	@brief	: (Bonehead) Lookup CAN ID by a straight pass down the array of mailbox pointers
 * @param	: pmbxnum = pointer to mailbox control block
 * @param	: pncan = pointer to CAN msg in can_face.c circular buffer
 * *************************************************************************/
static struct MAILBOXCAN* lookup(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan)
{
 800a3b0:	b470      	push	{r4, r5, r6}
	struct MAILBOXCAN** ppmbx;
	struct MAILBOXCAN*   pmbx;
	int i;

	ppmbx = pmbxnum->pmbxarray;
 800a3b2:	6846      	ldr	r6, [r0, #4]
	for (i = 0; i < pmbxnum->arraysizecur; i++)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	e006      	b.n	800a3c6 <lookup+0x16>
	{
		pmbx = *(ppmbx + i); // Point to mailbox[i]
 800a3b8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
		if (pmbx->ncan.can.id == pncan->can.id)
 800a3bc:	6815      	ldr	r5, [r2, #0]
 800a3be:	680c      	ldr	r4, [r1, #0]
 800a3c0:	42a5      	cmp	r5, r4
 800a3c2:	d005      	beq.n	800a3d0 <lookup+0x20>
	struct MAILBOXCAN** ppmbx;
	struct MAILBOXCAN*   pmbx;
	int i;

	ppmbx = pmbxnum->pmbxarray;
	for (i = 0; i < pmbxnum->arraysizecur; i++)
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	8a42      	ldrh	r2, [r0, #18]
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	dbf5      	blt.n	800a3b8 <lookup+0x8>
		if (pmbx->ncan.can.id == pncan->can.id)
		{ // Here, found!
			return pmbx;
		}
	}
	return NULL;
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	e000      	b.n	800a3d2 <lookup+0x22>
	for (i = 0; i < pmbxnum->arraysizecur; i++)
	{
		pmbx = *(ppmbx + i); // Point to mailbox[i]
		if (pmbx->ncan.can.id == pncan->can.id)
		{ // Here, found!
			return pmbx;
 800a3d0:	4610      	mov	r0, r2
		}
	}
	return NULL;
}
 800a3d2:	bc70      	pop	{r4, r5, r6}
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop

0800a3d8 <loadmbx>:
 *	@brief	: Lookup CAN ID and load mailbox with extract payload reading(s)
 * @param	: pmbxnum = pointer to mailbox control block
 * @param	: pncan = pointer to CAN msg in can_face.c circular buffer
 * *************************************************************************/
static struct MAILBOXCAN* loadmbx(struct MAILBOXCANNUM* pmbxnum, struct CANRCVBUFN* pncan)
{
 800a3d8:	b530      	push	{r4, r5, lr}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	460c      	mov	r4, r1
	struct CANNOTIFYLIST* pnotetmp;	
	struct CANNOTIFYLIST* pnotex;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	9303      	str	r3, [sp, #12]

	/* Check if received CAN id is in the mailbox CAN id list. */
	// 'lookup' is a straight loop; use 'lookupq' for binary search (when implemented)
	struct MAILBOXCAN* pmbx = lookup(pmbxnum, pncan);
 800a3e2:	f7ff ffe5 	bl	800a3b0 <lookup>
	if (pmbx == NULL) return NULL; // Return: CAN id not in mailbox list
 800a3e6:	b1c0      	cbz	r0, 800a41a <loadmbx+0x42>
 800a3e8:	4605      	mov	r5, r0

	/* Here, this CAN msg has a mailbox. */
	// Copy CAN msg into mailbox, and extract payload
	payload_extract(pmbx, pncan);
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	f7ff ff48 	bl	800a280 <payload_extract>

	/* Execute notifications */
	pnotetmp = pmbx->pnote; // Get ptr to head of linked list
 800a3f0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	if (pnotetmp == NULL) return pmbx; // CANID found, but no notifications
 800a3f2:	b90c      	cbnz	r4, 800a3f8 <loadmbx+0x20>
 800a3f4:	e013      	b.n	800a41e <loadmbx+0x46>
				&xHigherPriorityTaskWoken );	
		}

		/* Step to next item in list. */
			pnotex   = pnotetmp;
			pnotetmp = pnotetmp->pnext;
 800a3f6:	461c      	mov	r4, r3
	
	// Traverse linked list making notifications
	do 
	{
		/* Make a notification if "not skip" and 'taskhandle and 'notebit' were setup */
		if ((pnotetmp->skip == 0) && (pnotetmp->tskhandle != NULL) && (pnotetmp->notebit != 0))
 800a3f8:	7b23      	ldrb	r3, [r4, #12]
 800a3fa:	b94b      	cbnz	r3, 800a410 <loadmbx+0x38>
 800a3fc:	6860      	ldr	r0, [r4, #4]
 800a3fe:	b138      	cbz	r0, 800a410 <loadmbx+0x38>
 800a400:	68a1      	ldr	r1, [r4, #8]
 800a402:	b129      	cbz	r1, 800a410 <loadmbx+0x38>
		{
			xTaskNotifyFromISR(pnotetmp->tskhandle,\
 800a404:	ab03      	add	r3, sp, #12
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	2300      	movs	r3, #0
 800a40a:	2201      	movs	r2, #1
 800a40c:	f7fc fb1a 	bl	8006a44 <xTaskGenericNotifyFromISR>
				&xHigherPriorityTaskWoken );	
		}

		/* Step to next item in list. */
			pnotex   = pnotetmp;
			pnotetmp = pnotetmp->pnext;
 800a410:	6823      	ldr	r3, [r4, #0]

	} while (pnotetmp != pnotex);
 800a412:	429c      	cmp	r4, r3
 800a414:	d1ef      	bne.n	800a3f6 <loadmbx+0x1e>

	return pmbx;
 800a416:	4628      	mov	r0, r5
 800a418:	e002      	b.n	800a420 <loadmbx+0x48>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	/* Check if received CAN id is in the mailbox CAN id list. */
	// 'lookup' is a straight loop; use 'lookupq' for binary search (when implemented)
	struct MAILBOXCAN* pmbx = lookup(pmbxnum, pncan);
	if (pmbx == NULL) return NULL; // Return: CAN id not in mailbox list
 800a41a:	2000      	movs	r0, #0
 800a41c:	e000      	b.n	800a420 <loadmbx+0x48>
	// Copy CAN msg into mailbox, and extract payload
	payload_extract(pmbx, pncan);

	/* Execute notifications */
	pnotetmp = pmbx->pnote; // Get ptr to head of linked list
	if (pnotetmp == NULL) return pmbx; // CANID found, but no notifications
 800a41e:	4628      	mov	r0, r5
			pnotetmp = pnotetmp->pnext;

	} while (pnotetmp != pnotex);

	return pmbx;
}
 800a420:	b005      	add	sp, #20
 800a422:	bd30      	pop	{r4, r5, pc}

0800a424 <StartMailboxTask>:
/* *************************************************************************
 * void StartMailboxTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartMailboxTask(void const * argument)
{
 800a424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a428:	b083      	sub	sp, #12
	int8_t flag;

//while(1==1) osDelay(10); // Debug: make task do nothing

	/* Get circular buffer pointers for each CAN module in list. */	
	for (i = 0; i < STM32MAXCANNUM; i++)
 800a42a:	2400      	movs	r4, #0
 800a42c:	e015      	b.n	800a45a <StartMailboxTask+0x36>
	{
		if (mbxcannum[i].pmbxarray != NULL)
 800a42e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a432:	0093      	lsls	r3, r2, #2
 800a434:	4a28      	ldr	r2, [pc, #160]	; (800a4d8 <StartMailboxTask+0xb4>)
 800a436:	4413      	add	r3, r2
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	b16b      	cbz	r3, 800a458 <StartMailboxTask+0x34>
		{ // Here, array of pointers was initialized
			ptake[i] = can_iface_mbx_init(mbxcannum[i].pctl, NULL, (1 << i));
 800a43c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a440:	0093      	lsls	r3, r2, #2
 800a442:	2201      	movs	r2, #1
 800a444:	40a2      	lsls	r2, r4
 800a446:	2100      	movs	r1, #0
 800a448:	4823      	ldr	r0, [pc, #140]	; (800a4d8 <StartMailboxTask+0xb4>)
 800a44a:	58c0      	ldr	r0, [r0, r3]
 800a44c:	f7ff f902 	bl	8009654 <can_iface_mbx_init>
			if (ptake[i] == NULL) morse_trap(22);
 800a450:	b910      	cbnz	r0, 800a458 <StartMailboxTask+0x34>
 800a452:	2016      	movs	r0, #22
 800a454:	f7ff ff06 	bl	800a264 <morse_trap>
	int8_t flag;

//while(1==1) osDelay(10); // Debug: make task do nothing

	/* Get circular buffer pointers for each CAN module in list. */	
	for (i = 0; i < STM32MAXCANNUM; i++)
 800a458:	3401      	adds	r4, #1
 800a45a:	2c01      	cmp	r4, #1
 800a45c:	dde7      	ble.n	800a42e <StartMailboxTask+0xa>
			if (ptake[i] == NULL) morse_trap(22);
		}
	}

	/* A notification copies the internal notification word to this. */
	uint32_t noteval = 0;    // Receives notification word upon an API notify
 800a45e:	2300      	movs	r3, #0
 800a460:	9301      	str	r3, [sp, #4]

	/* notification bits processed after a 'Wait. */
	uint32_t noteused = 0;
 800a462:	4698      	mov	r8, r3
  /* Infinite MailboxTask loop */
  for(;;)
  {
		/* Wait for a CAN module to load its circular buffer. */
		/* The notification bit identifies the CAN module. */
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
 800a464:	f04f 33ff 	mov.w	r3, #4294967295
 800a468:	aa01      	add	r2, sp, #4
 800a46a:	2100      	movs	r1, #0
 800a46c:	4640      	mov	r0, r8
 800a46e:	f7fc fa2b 	bl	80068c8 <xTaskNotifyWait>
		noteused = 0;	// Accumulate bits in 'noteval' processed.
 800a472:	f04f 0800 	mov.w	r8, #0

		/* Step through possible notification bits */
		for (i = 0; i < STM32MAXCANNUM; i++)
 800a476:	4644      	mov	r4, r8
 800a478:	e02b      	b.n	800a4d2 <StartMailboxTask+0xae>
		{
			flag = 0;
			if ((noteval & (1 << i)) != 0)
 800a47a:	2701      	movs	r7, #1
 800a47c:	40a7      	lsls	r7, r4
 800a47e:	9b01      	ldr	r3, [sp, #4]
 800a480:	421f      	tst	r7, r3
 800a482:	d025      	beq.n	800a4d0 <StartMailboxTask+0xac>
			{	
				noteused |= (1 << i);
 800a484:	ea48 0807 	orr.w	r8, r8, r7
				pmbxnum = &mbxcannum[i]; // Pt to CAN module mailbox control block
 800a488:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a48c:	0093      	lsls	r3, r2, #2
 800a48e:	4d12      	ldr	r5, [pc, #72]	; (800a4d8 <StartMailboxTask+0xb4>)
 800a490:	eb05 0903 	add.w	r9, r5, r3
		noteused = 0;	// Accumulate bits in 'noteval' processed.

		/* Step through possible notification bits */
		for (i = 0; i < STM32MAXCANNUM; i++)
		{
			flag = 0;
 800a494:	2600      	movs	r6, #0
				pmbxnum = &mbxcannum[i]; // Pt to CAN module mailbox control block
if (pmbxnum == NULL) morse_trap(77); // Debug trap
				do
				{
					/* Get a pointer to the circular buffer w CAN msgs. */
					pncan = can_iface_get_CANmsg(pmbxnum->ptake);
 800a496:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a49a:	0093      	lsls	r3, r2, #2
 800a49c:	4a0e      	ldr	r2, [pc, #56]	; (800a4d8 <StartMailboxTask+0xb4>)
 800a49e:	4413      	add	r3, r2
 800a4a0:	6898      	ldr	r0, [r3, #8]
 800a4a2:	f7ff f8e5 	bl	8009670 <can_iface_get_CANmsg>

					if (pncan != NULL)
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	b120      	cbz	r0, 800a4b4 <StartMailboxTask+0x90>
					{ // Here, CAN msg is available
						flag = 1;
						loadmbx(pmbxnum, pncan); // Load mailbox. if CANID is in list
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	4648      	mov	r0, r9
 800a4ae:	f7ff ff93 	bl	800a3d8 <loadmbx>
					/* Get a pointer to the circular buffer w CAN msgs. */
					pncan = can_iface_get_CANmsg(pmbxnum->ptake);

					if (pncan != NULL)
					{ // Here, CAN msg is available
						flag = 1;
 800a4b2:	2601      	movs	r6, #1
						loadmbx(pmbxnum, pncan); // Load mailbox. if CANID is in list
					}
				} while (pncan != NULL);
 800a4b4:	2d00      	cmp	r5, #0
 800a4b6:	d1ee      	bne.n	800a496 <StartMailboxTask+0x72>

				/* Notify GatewayTask that one or more CAN msgs in circular buffer. */
				if ( (GatewayTaskHandle != NULL) && ((noteval & (1 << i)) != 0) && (flag != 0) )
 800a4b8:	4b08      	ldr	r3, [pc, #32]	; (800a4dc <StartMailboxTask+0xb8>)
 800a4ba:	6818      	ldr	r0, [r3, #0]
 800a4bc:	b140      	cbz	r0, 800a4d0 <StartMailboxTask+0xac>
 800a4be:	9b01      	ldr	r3, [sp, #4]
 800a4c0:	421f      	tst	r7, r3
 800a4c2:	d005      	beq.n	800a4d0 <StartMailboxTask+0xac>
 800a4c4:	b126      	cbz	r6, 800a4d0 <StartMailboxTask+0xac>
				{
					xTaskNotify(GatewayTaskHandle, (1 << i), eSetBits);
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7fc fa48 	bl	8006960 <xTaskGenericNotify>
		/* The notification bit identifies the CAN module. */
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
		noteused = 0;	// Accumulate bits in 'noteval' processed.

		/* Step through possible notification bits */
		for (i = 0; i < STM32MAXCANNUM; i++)
 800a4d0:	3401      	adds	r4, #1
 800a4d2:	2c01      	cmp	r4, #1
 800a4d4:	ddd1      	ble.n	800a47a <StartMailboxTask+0x56>
 800a4d6:	e7c5      	b.n	800a464 <StartMailboxTask+0x40>
 800a4d8:	20004fa8 	.word	0x20004fa8
 800a4dc:	20006c4c 	.word	0x20006c4c

0800a4e0 <MailboxTask_add_CANlist>:
 * *************************************************************************/
struct MAILBOXCANNUM* MailboxTask_add_CANlist(struct CAN_CTLBLOCK* pctl, uint16_t arraysize)
{
	struct MAILBOXCAN** ppmbxarray; // Pointer to array of pointers to mailboxes

	if (pctl == NULL) return NULL; // Oops
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d046      	beq.n	800a572 <MailboxTask_add_CANlist+0x92>
 * @param	: arraysize = max number of mailboxes in sorted list
 * @return	: Pointer which probably will not be used; NULL = failed (more important)
 * NOTE: This is normally called in 'main' before the FreeRTOS scheduler starts.
 * *************************************************************************/
struct MAILBOXCANNUM* MailboxTask_add_CANlist(struct CAN_CTLBLOCK* pctl, uint16_t arraysize)
{
 800a4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e8:	4605      	mov	r5, r0
	struct MAILBOXCAN** ppmbxarray; // Pointer to array of pointers to mailboxes

	if (pctl == NULL) return NULL; // Oops

	if (arraysize == 0)return NULL; // Oops
 800a4ea:	2900      	cmp	r1, #0
 800a4ec:	d043      	beq.n	800a576 <MailboxTask_add_CANlist+0x96>
 800a4ee:	460e      	mov	r6, r1

taskENTER_CRITICAL();
 800a4f0:	f7fd f800 	bl	80074f4 <vPortEnterCritical>

	/* Save max number of mailboxes for this CAN module */
	mbxcannum[pctl->canidx].arraysizemax = arraysize;
 800a4f4:	f895 40b1 	ldrb.w	r4, [r5, #177]	; 0xb1
 800a4f8:	4920      	ldr	r1, [pc, #128]	; (800a57c <MailboxTask_add_CANlist+0x9c>)
 800a4fa:	00a3      	lsls	r3, r4, #2
 800a4fc:	4423      	add	r3, r4
 800a4fe:	009a      	lsls	r2, r3, #2
 800a500:	188b      	adds	r3, r1, r2
 800a502:	821e      	strh	r6, [r3, #16]

	/* This needed to find the CAN module in 'StartMailboxTask' */
	mbxcannum[pctl->canidx].pctl = pctl;
 800a504:	508d      	str	r5, [r1, r2]

	/* Get memory for the array of mailbox pointers */
	ppmbxarray = (struct MAILBOXCAN**)calloc(arraysize, sizeof(struct MAILBOXCAN*));
 800a506:	2104      	movs	r1, #4
 800a508:	4630      	mov	r0, r6
 800a50a:	f000 fc15 	bl	800ad38 <calloc>
	if (ppmbxarray == NULL) {taskEXIT_CRITICAL();return NULL;}
 800a50e:	4680      	mov	r8, r0
 800a510:	b920      	cbnz	r0, 800a51c <MailboxTask_add_CANlist+0x3c>
 800a512:	f7fd f811 	bl	8007538 <vPortExitCritical>
 800a516:	2000      	movs	r0, #0
 800a518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* xMailboxTaskCreate needs to be called before this 'add to list' */
	if (MailboxTaskHandle == NULL) {taskEXIT_CRITICAL();return NULL;}
 800a51c:	4b18      	ldr	r3, [pc, #96]	; (800a580 <MailboxTask_add_CANlist+0xa0>)
 800a51e:	6819      	ldr	r1, [r3, #0]
 800a520:	b921      	cbnz	r1, 800a52c <MailboxTask_add_CANlist+0x4c>
 800a522:	f7fd f809 	bl	8007538 <vPortExitCritical>
 800a526:	2000      	movs	r0, #0
 800a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Get a circular buffer 'take' pointer for this CAN module. */
	// The first three notification bits are reserved for CAN modules 
	mbxcannum[pctl->canidx].ptake = can_iface_mbx_init(pctl, MailboxTaskHandle, (1 << pctl->canidx) );
 800a52c:	2201      	movs	r2, #1
 800a52e:	40a2      	lsls	r2, r4
 800a530:	4628      	mov	r0, r5
 800a532:	f7ff f88f 	bl	8009654 <can_iface_mbx_init>
 800a536:	4f11      	ldr	r7, [pc, #68]	; (800a57c <MailboxTask_add_CANlist+0x9c>)
 800a538:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a53c:	00a3      	lsls	r3, r4, #2
 800a53e:	443b      	add	r3, r7
 800a540:	6098      	str	r0, [r3, #8]

	/* Save pointer to array of pointers to mailboxes. */
	mbxcannum[pctl->canidx].pmbxarray = ppmbxarray;
 800a542:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
 800a546:	0099      	lsls	r1, r3, #2
 800a548:	18c8      	adds	r0, r1, r3
 800a54a:	0082      	lsls	r2, r0, #2
 800a54c:	4610      	mov	r0, r2
 800a54e:	443a      	add	r2, r7
 800a550:	f8c2 8004 	str.w	r8, [r2, #4]

	/* Save number of mailbox pointers */
	mbxcannum[pctl->canidx].arraysizemax = arraysize; // Max
 800a554:	8216      	strh	r6, [r2, #16]

	/* Start with no mailboxes created. */
	mbxcannum[pctl->canidx].arraysizecur = 0;
 800a556:	4602      	mov	r2, r0
 800a558:	443a      	add	r2, r7
 800a55a:	2300      	movs	r3, #0
 800a55c:	8253      	strh	r3, [r2, #18]

	/* What is important to return a non-NULL pointer to show success. */
taskEXIT_CRITICAL();
 800a55e:	f7fc ffeb 	bl	8007538 <vPortExitCritical>
	return &mbxcannum[pctl->canidx];
 800a562:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
 800a566:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a56a:	0098      	lsls	r0, r3, #2
 800a56c:	4438      	add	r0, r7
 800a56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * *************************************************************************/
struct MAILBOXCANNUM* MailboxTask_add_CANlist(struct CAN_CTLBLOCK* pctl, uint16_t arraysize)
{
	struct MAILBOXCAN** ppmbxarray; // Pointer to array of pointers to mailboxes

	if (pctl == NULL) return NULL; // Oops
 800a572:	2000      	movs	r0, #0
	mbxcannum[pctl->canidx].arraysizecur = 0;

	/* What is important to return a non-NULL pointer to show success. */
taskEXIT_CRITICAL();
	return &mbxcannum[pctl->canidx];
}
 800a574:	4770      	bx	lr
{
	struct MAILBOXCAN** ppmbxarray; // Pointer to array of pointers to mailboxes

	if (pctl == NULL) return NULL; // Oops

	if (arraysize == 0)return NULL; // Oops
 800a576:	2000      	movs	r0, #0
	mbxcannum[pctl->canidx].arraysizecur = 0;

	/* What is important to return a non-NULL pointer to show success. */
taskEXIT_CRITICAL();
	return &mbxcannum[pctl->canidx];
}
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	20004fa8 	.word	0x20004fa8
 800a580:	20006c48 	.word	0x20006c48

0800a584 <xMailboxTaskCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: QueueHandle_t = queue handle
 * *************************************************************************/
osThreadId xMailboxTaskCreate(uint32_t taskpriority)
{
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	4606      	mov	r6, r0
 /* definition and creation of CanTask */
  osThreadDef(MailboxTask, StartMailboxTask, osPriorityNormal, 0, 256);
 800a58a:	ac01      	add	r4, sp, #4
 800a58c:	4d09      	ldr	r5, [pc, #36]	; (800a5b4 <xMailboxTaskCreate+0x30>)
 800a58e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a596:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  MailboxTaskHandle = osThreadCreate(osThread(MailboxTask), NULL);
 800a59a:	2100      	movs	r1, #0
 800a59c:	a801      	add	r0, sp, #4
 800a59e:	f7fc fd5b 	bl	8007058 <osThreadCreate>
 800a5a2:	4c05      	ldr	r4, [pc, #20]	; (800a5b8 <xMailboxTaskCreate+0x34>)
 800a5a4:	6020      	str	r0, [r4, #0]

	vTaskPrioritySet( MailboxTaskHandle, taskpriority );
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	f7fb fd06 	bl	8005fb8 <vTaskPrioritySet>
	return MailboxTaskHandle;
}
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	b008      	add	sp, #32
 800a5b0:	bd70      	pop	{r4, r5, r6, pc}
 800a5b2:	bf00      	nop
 800a5b4:	0800eb60 	.word	0x0800eb60
 800a5b8:	20006c48 	.word	0x20006c48

0800a5bc <StartGatewayTask>:
/* *************************************************************************
 * void StartGatewayTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartGatewayTask(void const * argument)
{
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	b092      	sub	sp, #72	; 0x48

	/* notification bits processed after a 'Wait. */
	uint32_t noteused = 0;

	/* A notification copies the internal notification word to this. */
	uint32_t noteval = 0;    // Receives notification word upon an API notify
 800a5c2:	2400      	movs	r4, #0
 800a5c4:	9411      	str	r4, [sp, #68]	; 0x44
	struct CANRCVBUFPLUS* pcanp;  // Basic CAN msg Plus error and seq number
	struct CANRCVBUFN* pncan;

	/* PC-to-CAN msg */
	struct CANTXQMSG testtx;
	testtx.pctl = pctl1;
 800a5c6:	4b51      	ldr	r3, [pc, #324]	; (800a70c <StartGatewayTask+0x150>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	9308      	str	r3, [sp, #32]

	/* Setup serial output buffers for uarts. */
	struct SERIALSENDTASKBCB* pbuf2 = getserialbuf(&huart6,128);
 800a5cc:	2180      	movs	r1, #128	; 0x80
 800a5ce:	4850      	ldr	r0, [pc, #320]	; (800a710 <StartGatewayTask+0x154>)
 800a5d0:	f7ff fa52 	bl	8009a78 <getserialbuf>
 800a5d4:	9007      	str	r0, [sp, #28]
	struct SERIALSENDTASKBCB* pbuf3 = getserialbuf(&huart2,128);
 800a5d6:	4d4f      	ldr	r5, [pc, #316]	; (800a714 <StartGatewayTask+0x158>)
 800a5d8:	2180      	movs	r1, #128	; 0x80
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f7ff fa4c 	bl	8009a78 <getserialbuf>
 800a5e0:	9006      	str	r0, [sp, #24]

	/* Pointers into the CAN  msg circular buffer for each CAN module. */
	struct CANTAKEPTR* ptake[STM32MAXCANNUM] = {NULL};
 800a5e2:	9404      	str	r4, [sp, #16]
 800a5e4:	9405      	str	r4, [sp, #20]
	/* Setup serial input buffering and line-ready notification */
     //   (ptr uart handle, dma flag, notiification bit, 
     //   ptr notification word, number line buffers, size of lines, 
     //   dma buffer size);
	/* PC-to-CAN ascii/hex incoming "lines" directly converts to CAN msgs. */
	prbcb2 = xSerialTaskRxAdduart(&huart2,1,TSKGATEWAYBITc1,\
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	9103      	str	r1, [sp, #12]
 800a5ea:	2380      	movs	r3, #128	; 0x80
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	2320      	movs	r3, #32
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	ab11      	add	r3, sp, #68	; 0x44
 800a5f8:	2208      	movs	r2, #8
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f7ff fbb2 	bl	8009d64 <xSerialTaskRxAdduart>
		&noteval,12,32,128,1); // buff 12 CAN, of 32 bytes, 192 total dma, /CAN mode
	if (prbcb2 == NULL) morse_trap(41);
 800a600:	4680      	mov	r8, r0
 800a602:	b910      	cbnz	r0, 800a60a <StartGatewayTask+0x4e>
 800a604:	2029      	movs	r0, #41	; 0x29
 800a606:	f7ff fe2d 	bl	800a264 <morse_trap>
/* *************************************************************************
 * void StartGatewayTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartGatewayTask(void const * argument)
{
 800a60a:	2400      	movs	r4, #0
 800a60c:	e014      	b.n	800a638 <StartGatewayTask+0x7c>
	if (prbcb2 == NULL) morse_trap(41);

	/* Get pointers to circular buffer pointers for each CAN module in list. */	
	for (i = 0; i < STM32MAXCANNUM; i++)
	{
		if ((mbxcannum[i].pmbxarray != NULL) && (mbxcannum[i].pctl != NULL))
 800a60e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a612:	0093      	lsls	r3, r2, #2
 800a614:	4a40      	ldr	r2, [pc, #256]	; (800a718 <StartGatewayTask+0x15c>)
 800a616:	4413      	add	r3, r2
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	b163      	cbz	r3, 800a636 <StartGatewayTask+0x7a>
 800a61c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a620:	0093      	lsls	r3, r2, #2
 800a622:	4a3d      	ldr	r2, [pc, #244]	; (800a718 <StartGatewayTask+0x15c>)
 800a624:	58d0      	ldr	r0, [r2, r3]
 800a626:	b130      	cbz	r0, 800a636 <StartGatewayTask+0x7a>
		{
			ptake[i] = can_iface_add_take(mbxcannum[i].pctl);
 800a628:	f7fe fffc 	bl	8009624 <can_iface_add_take>
 800a62c:	ab12      	add	r3, sp, #72	; 0x48
 800a62e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a632:	f843 0c38 	str.w	r0, [r3, #-56]
	prbcb2 = xSerialTaskRxAdduart(&huart2,1,TSKGATEWAYBITc1,\
		&noteval,12,32,128,1); // buff 12 CAN, of 32 bytes, 192 total dma, /CAN mode
	if (prbcb2 == NULL) morse_trap(41);

	/* Get pointers to circular buffer pointers for each CAN module in list. */	
	for (i = 0; i < STM32MAXCANNUM; i++)
 800a636:	3401      	adds	r4, #1
 800a638:	2c01      	cmp	r4, #1
 800a63a:	dde8      	ble.n	800a60e <StartGatewayTask+0x52>
 800a63c:	2700      	movs	r7, #0

  /* Infinite RTOS Task loop */
  for(;;)
  {
		/* Wait for either PC line completion, or 'MailboxTask' notifications. */
		xTaskNotifyWait(noteused, 0, &GatewayTask_noteval, portMAX_DELAY);
 800a63e:	f04f 33ff 	mov.w	r3, #4294967295
 800a642:	4a36      	ldr	r2, [pc, #216]	; (800a71c <StartGatewayTask+0x160>)
 800a644:	2100      	movs	r1, #0
 800a646:	4638      	mov	r0, r7
 800a648:	f7fc f93e 	bl	80068c8 <xTaskNotifyWait>
		noteused = 0;	// Accumulate bits in 'noteval' processed.
 800a64c:	2700      	movs	r7, #0

		/* CAN->PC: Check notification bit for each CAN module */
		for (i = 0; i < STM32MAXCANNUM; i++)
 800a64e:	463e      	mov	r6, r7
 800a650:	e023      	b.n	800a69a <StartGatewayTask+0xde>
		{
			if ((GatewayTask_noteval & (1 << i)) != 0)
 800a652:	2301      	movs	r3, #1
 800a654:	40b3      	lsls	r3, r6
 800a656:	4a31      	ldr	r2, [pc, #196]	; (800a71c <StartGatewayTask+0x160>)
 800a658:	6812      	ldr	r2, [r2, #0]
 800a65a:	4013      	ands	r3, r2
 800a65c:	d01c      	beq.n	800a698 <StartGatewayTask+0xdc>
			{
				noteused |= (GatewayTask_noteval & (1 << i)); // We handled the bit
 800a65e:	431f      	orrs	r7, r3
				
				do
				{
					/* Get pointer into CAN msg circular buffer */
					pncan = can_iface_get_CANmsg(ptake[i]);
 800a660:	ab12      	add	r3, sp, #72	; 0x48
 800a662:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a666:	f853 0c38 	ldr.w	r0, [r3, #-56]
 800a66a:	f7ff f801 	bl	8009670 <can_iface_get_CANmsg>
					if (pncan != NULL)
 800a66e:	4605      	mov	r5, r0
 800a670:	b180      	cbz	r0, 800a694 <StartGatewayTask+0xd8>
					{						
						/* Convert binary to the ascii/hex format for PC. */
						xSemaphoreTake(pbuf3->semaphore, 5000);
 800a672:	ac12      	add	r4, sp, #72	; 0x48
 800a674:	f854 0d30 	ldr.w	r0, [r4, #-48]!
 800a678:	2300      	movs	r3, #0
 800a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67e:	4619      	mov	r1, r3
 800a680:	6880      	ldr	r0, [r0, #8]
 800a682:	f7fb f9df 	bl	8005a44 <xQueueGenericReceive>
						gateway_CANtoPC(&pbuf3, &pncan->can);
 800a686:	4629      	mov	r1, r5
 800a688:	4620      	mov	r0, r4
 800a68a:	f7ff fa93 	bl	8009bb4 <gateway_CANtoPC>
						vSerialTaskSendQueueBuf(&pbuf3); // Place on queue for usart2 sending
 800a68e:	4620      	mov	r0, r4
 800a690:	f7fe fdaa 	bl	80091e8 <vSerialTaskSendQueueBuf>
					}
				} while (pncan != NULL);	// Drain the buffer
 800a694:	2d00      	cmp	r5, #0
 800a696:	d1e3      	bne.n	800a660 <StartGatewayTask+0xa4>
		/* Wait for either PC line completion, or 'MailboxTask' notifications. */
		xTaskNotifyWait(noteused, 0, &GatewayTask_noteval, portMAX_DELAY);
		noteused = 0;	// Accumulate bits in 'noteval' processed.

		/* CAN->PC: Check notification bit for each CAN module */
		for (i = 0; i < STM32MAXCANNUM; i++)
 800a698:	3601      	adds	r6, #1
 800a69a:	2e01      	cmp	r6, #1
 800a69c:	ddd9      	ble.n	800a652 <StartGatewayTask+0x96>
				} while (pncan != NULL);	// Drain the buffer
			}
		}

		/* PC->CAN: Handle incoming usart2 carrying ascii/hex CAN msgs */
		if ((GatewayTask_noteval & TSKGATEWAYBITc1) != 0)
 800a69e:	4b1f      	ldr	r3, [pc, #124]	; (800a71c <StartGatewayTask+0x160>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f013 0f08 	tst.w	r3, #8
 800a6a6:	d0ca      	beq.n	800a63e <StartGatewayTask+0x82>
		{ // Here, one or more CAN msgs have been received
			noteused |= TSKGATEWAYBITc1; // We handled the bit
 800a6a8:	f047 0708 	orr.w	r7, r7, #8

			/* Get incoming CAN msgs from PC and queue for output to CAN bus. */
			do
			{
				pcanp = gateway_PCtoCAN_getCAN(prbcb2);
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	f7ff fd55 	bl	800a15c <gateway_PCtoCAN_getCAN>
				if (pcanp != NULL)
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	b330      	cbz	r0, 800a704 <StartGatewayTask+0x148>
				{
					/* Check for errors */
					if (pcanp->error == 0)
 800a6b6:	7c03      	ldrb	r3, [r0, #16]
 800a6b8:	b963      	cbnz	r3, 800a6d4 <StartGatewayTask+0x118>
					{
						/* Place CAN msg on queue for sending to CAN bus */
						testtx.can = pcanp->can;
 800a6ba:	ad0a      	add	r5, sp, #40	; 0x28
 800a6bc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800a6be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
						xQueueSendToBack(CanTxQHandle,&testtx,portMAX_DELAY);
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c8:	a908      	add	r1, sp, #32
 800a6ca:	4815      	ldr	r0, [pc, #84]	; (800a720 <StartGatewayTask+0x164>)
 800a6cc:	6800      	ldr	r0, [r0, #0]
 800a6ce:	f7fb f821 	bl	8005714 <xQueueGenericSend>
 800a6d2:	e017      	b.n	800a704 <StartGatewayTask+0x148>
					}
					else
					{ // Here, one or more errors. List for the hapless Op to ponder
						yprintf(&pbuf2,"\n\r@@@@@ PC CAN ERROR: %i 0X%04X, 0X%08X 0X%02X 0X%08X %i 0X%02X 0X%02X %s",pcanp->seq, pcanp->error,\
 800a6d4:	7c42      	ldrb	r2, [r0, #17]
 800a6d6:	6881      	ldr	r1, [r0, #8]
 800a6d8:	9102      	str	r1, [sp, #8]
 800a6da:	6841      	ldr	r1, [r0, #4]
 800a6dc:	9101      	str	r1, [sp, #4]
 800a6de:	6801      	ldr	r1, [r0, #0]
 800a6e0:	9100      	str	r1, [sp, #0]
 800a6e2:	4910      	ldr	r1, [pc, #64]	; (800a724 <StartGatewayTask+0x168>)
 800a6e4:	a807      	add	r0, sp, #28
 800a6e6:	f7ff fa17 	bl	8009b18 <yprintf>
							pcanp->can.id,pcanp->can.dlc,pcanp->can.cd.ui[0]);

						/* For test purposes: Place CAN msg on queue for sending to CAN bus */
						testtx.can = pcanp->can;
 800a6ea:	ad0a      	add	r5, sp, #40	; 0x28
 800a6ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a6f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
						xQueueSendToBack(CanTxQHandle,&testtx,portMAX_DELAY);
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fa:	a908      	add	r1, sp, #32
 800a6fc:	4808      	ldr	r0, [pc, #32]	; (800a720 <StartGatewayTask+0x164>)
 800a6fe:	6800      	ldr	r0, [r0, #0]
 800a700:	f7fb f808 	bl	8005714 <xQueueGenericSend>
					}
				}
			} while ( pcanp != NULL);
 800a704:	2c00      	cmp	r4, #0
 800a706:	d1d1      	bne.n	800a6ac <StartGatewayTask+0xf0>
 800a708:	e799      	b.n	800a63e <StartGatewayTask+0x82>
 800a70a:	bf00      	nop
 800a70c:	20005198 	.word	0x20005198
 800a710:	20005290 	.word	0x20005290
 800a714:	200052f0 	.word	0x200052f0
 800a718:	20004fa8 	.word	0x20004fa8
 800a71c:	20004fd0 	.word	0x20004fd0
 800a720:	20006c30 	.word	0x20006c30
 800a724:	0800ef44 	.word	0x0800ef44

0800a728 <xGatewayTaskCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: GatewayHandle
 * *************************************************************************/
osThreadId xGatewayTaskCreate(uint32_t taskpriority)
{
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	b088      	sub	sp, #32
 800a72c:	4606      	mov	r6, r0
 /* definition and creation of CanTask */
  osThreadDef(GatewayTask, StartGatewayTask, osPriorityNormal, 0, 256);
 800a72e:	ac01      	add	r4, sp, #4
 800a730:	4d09      	ldr	r5, [pc, #36]	; (800a758 <xGatewayTaskCreate+0x30>)
 800a732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a736:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a73a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GatewayTaskHandle = osThreadCreate(osThread(GatewayTask), NULL);
 800a73e:	2100      	movs	r1, #0
 800a740:	a801      	add	r0, sp, #4
 800a742:	f7fc fc89 	bl	8007058 <osThreadCreate>
 800a746:	4c05      	ldr	r4, [pc, #20]	; (800a75c <xGatewayTaskCreate+0x34>)
 800a748:	6020      	str	r0, [r4, #0]
	vTaskPrioritySet( GatewayTaskHandle, taskpriority );
 800a74a:	4631      	mov	r1, r6
 800a74c:	f7fb fc34 	bl	8005fb8 <vTaskPrioritySet>

	return GatewayTaskHandle;
}
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	b008      	add	sp, #32
 800a754:	bd70      	pop	{r4, r5, r6, pc}
 800a756:	bf00      	nop
 800a758:	0800eb7c 	.word	0x0800eb7c
 800a75c:	20006c4c 	.word	0x20006c4c

0800a760 <adctask_init>:

struct ADCDMATSKBLK* adctask_init(ADC_HandleTypeDef* phadc,\
	uint32_t  notebit1,\
	uint32_t  notebit2,\
	uint32_t* pnoteval)
{
 800a760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t* pdma;
	struct ADCDMATSKBLK* pblk = &adc1dmatskblk[0]; // ADC1 only for now

	/* 'adcparams.h' MUST match what STM32CubeMX set up. */
	if (ADC1IDX_ADCSCANSIZE != phadc->Init.NbrOfConversion) return NULL;
 800a764:	69c4      	ldr	r4, [r0, #28]
 800a766:	2c0a      	cmp	r4, #10
 800a768:	d12c      	bne.n	800a7c4 <adctask_init+0x64>
 800a76a:	461f      	mov	r7, r3
 800a76c:	4690      	mov	r8, r2
 800a76e:	4689      	mov	r9, r1
 800a770:	4605      	mov	r5, r0

	/* ADC DMA summation length must match 1/2 DMA buffer sizing. */
	if (ADCFASTSUM16SIZE != ADC1DMANUMSEQ) return NULL;

	/* length = total number of uint16_t in dma buffer */
	uint32_t length = ADC1DMANUMSEQ * 2 * phadc->Init.NbrOfConversion;
 800a772:	ea4f 1a44 	mov.w	sl, r4, lsl #5

taskENTER_CRITICAL();
 800a776:	f7fc febd 	bl	80074f4 <vPortEnterCritical>

	/* Initialize params for ADC. */
	adcparams_init();
 800a77a:	f000 f8cb 	bl	800a914 <adcparams_init>

	/* Get dma buffer allocated */
	pdma = (uint16_t*)calloc(length, sizeof(uint16_t));
 800a77e:	2102      	movs	r1, #2
 800a780:	4650      	mov	r0, sl
 800a782:	f000 fad9 	bl	800ad38 <calloc>
	if (pdma == NULL) {taskEXIT_CRITICAL();return NULL;}
 800a786:	b920      	cbnz	r0, 800a792 <adctask_init+0x32>
 800a788:	f7fc fed6 	bl	8007538 <vPortExitCritical>
 800a78c:	2000      	movs	r0, #0
 800a78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t* psum;     // Pointer summed 1/2 dma buffer
	uint16_t  dmact;    // Number of sequences in 1/2 dma buffer
};

*/
	pblk->phadc    = phadc;
 800a792:	4c0e      	ldr	r4, [pc, #56]	; (800a7cc <adctask_init+0x6c>)
 800a794:	6065      	str	r5, [r4, #4]
	pblk->notebit1 = notebit1;
 800a796:	f8c4 9008 	str.w	r9, [r4, #8]
	pblk->notebit2 = notebit2;
 800a79a:	f8c4 800c 	str.w	r8, [r4, #12]
	pblk->pnoteval = pnoteval;
 800a79e:	6127      	str	r7, [r4, #16]
	pblk->pdma1    = pdma;
 800a7a0:	6160      	str	r0, [r4, #20]
	pblk->pdma2    = pdma + (ADC1DMANUMSEQ * phadc->Init.NbrOfConversion);
 800a7a2:	69eb      	ldr	r3, [r5, #28]
 800a7a4:	eb00 1643 	add.w	r6, r0, r3, lsl #5
 800a7a8:	61a6      	str	r6, [r4, #24]
	pblk->adctaskHandle = ADCTaskHandle;
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <adctask_init+0x70>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	61e3      	str	r3, [r4, #28]
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */

taskEXIT_CRITICAL();
 800a7b0:	f7fc fec2 	bl	8007538 <vPortExitCritical>
	
	HAL_ADC_Start_DMA(pblk->phadc, (uint32_t*)pblk->pdma1, length);
 800a7b4:	4652      	mov	r2, sl
 800a7b6:	6961      	ldr	r1, [r4, #20]
 800a7b8:	6860      	ldr	r0, [r4, #4]
 800a7ba:	f7fe f9df 	bl	8008b7c <HAL_ADC_Start_DMA>
	return pblk;
 800a7be:	4620      	mov	r0, r4
 800a7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
	uint16_t* pdma;
	struct ADCDMATSKBLK* pblk = &adc1dmatskblk[0]; // ADC1 only for now

	/* 'adcparams.h' MUST match what STM32CubeMX set up. */
	if (ADC1IDX_ADCSCANSIZE != phadc->Init.NbrOfConversion) return NULL;
 800a7c4:	2000      	movs	r0, #0

taskEXIT_CRITICAL();
	
	HAL_ADC_Start_DMA(pblk->phadc, (uint32_t*)pblk->pdma1, length);
	return pblk;
}
 800a7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20006c50 	.word	0x20006c50
 800a7d0:	20006cb0 	.word	0x20006cb0

0800a7d4 <HAL_ADC_ConvHalfCpltCallback>:
/* *************************************************************************
 * void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc);
 *	@brief	: Call back from stm32f4xx_hal_adc: Halfway point of dma buffer
 * *************************************************************************/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a7d4:	b500      	push	{lr}
 800a7d6:	b085      	sub	sp, #20
	adcommon.dmact += 1; // Running count
 800a7d8:	4a0e      	ldr	r2, [pc, #56]	; (800a814 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800a7da:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a7dc:	3301      	adds	r3, #1
 800a7de:	6393      	str	r3, [r2, #56]	; 0x38
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9303      	str	r3, [sp, #12]
	struct ADCDMATSKBLK* ptmp = &adc1dmatskblk[0];

	/* Trigger Recieve Task to poll dma uarts */
	if( ptmp->adctaskHandle == NULL) return; // Skip task has not been created
 800a7e4:	4b0c      	ldr	r3, [pc, #48]	; (800a818 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 800a7e6:	69d8      	ldr	r0, [r3, #28]
 800a7e8:	b180      	cbz	r0, 800a80c <HAL_ADC_ConvHalfCpltCallback+0x38>
	xTaskNotifyFromISR(ptmp->adctaskHandle, 
 800a7ea:	6899      	ldr	r1, [r3, #8]
 800a7ec:	ab03      	add	r3, sp, #12
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f7fc f926 	bl	8006a44 <xTaskGenericNotifyFromISR>
		ptmp->notebit1,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken ); 

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a7f8:	9b03      	ldr	r3, [sp, #12]
 800a7fa:	b13b      	cbz	r3, 800a80c <HAL_ADC_ConvHalfCpltCallback+0x38>
 800a7fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a800:	4b06      	ldr	r3, [pc, #24]	; (800a81c <HAL_ADC_ConvHalfCpltCallback+0x48>)
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	f3bf 8f6f 	isb	sy
	return;
}
 800a80c:	b005      	add	sp, #20
 800a80e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a812:	bf00      	nop
 800a814:	20006e90 	.word	0x20006e90
 800a818:	20006c50 	.word	0x20006c50
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <HAL_ADC_ConvCpltCallback>:
/* *************************************************************************
 * void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc);
 *	@brief	: Call back from stm32f4xx_hal_adc: End point of dma buffer
 * *************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a820:	b500      	push	{lr}
 800a822:	b085      	sub	sp, #20
	adcommon.dmact += 1; // Running count
 800a824:	4a0e      	ldr	r2, [pc, #56]	; (800a860 <HAL_ADC_ConvCpltCallback+0x40>)
 800a826:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a828:	3301      	adds	r3, #1
 800a82a:	6393      	str	r3, [r2, #56]	; 0x38
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a82c:	2300      	movs	r3, #0
 800a82e:	9303      	str	r3, [sp, #12]
	struct ADCDMATSKBLK* ptmp = &adc1dmatskblk[0];

	/* Trigger Recieve Task to poll dma uarts */
	if( ptmp->adctaskHandle == NULL) return; // Skip task has not been created
 800a830:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <HAL_ADC_ConvCpltCallback+0x44>)
 800a832:	69d8      	ldr	r0, [r3, #28]
 800a834:	b180      	cbz	r0, 800a858 <HAL_ADC_ConvCpltCallback+0x38>
	xTaskNotifyFromISR(ptmp->adctaskHandle, 
 800a836:	68d9      	ldr	r1, [r3, #12]
 800a838:	ab03      	add	r3, sp, #12
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	2300      	movs	r3, #0
 800a83e:	2201      	movs	r2, #1
 800a840:	f7fc f900 	bl	8006a44 <xTaskGenericNotifyFromISR>
		ptmp->notebit2,	/* 'or' bit assigned to buffer to notification value. */
		eSetBits,      /* Set 'or' option */
		&xHigherPriorityTaskWoken ); 

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	b13b      	cbz	r3, 800a858 <HAL_ADC_ConvCpltCallback+0x38>
 800a848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84c:	4b06      	ldr	r3, [pc, #24]	; (800a868 <HAL_ADC_ConvCpltCallback+0x48>)
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	f3bf 8f6f 	isb	sy
	return;
}
 800a858:	b005      	add	sp, #20
 800a85a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a85e:	bf00      	nop
 800a860:	20006e90 	.word	0x20006e90
 800a864:	20006c50 	.word	0x20006c50
 800a868:	e000ed04 	.word	0xe000ed04

0800a86c <StartADCTask>:
/* *************************************************************************
 * void StartADCTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartADCTask(void const * argument)
{
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	b082      	sub	sp, #8
	#define TSK02BIT03	(1 << 1)  // Task notification bit for ADC dma end (adctask.c)

	uint16_t* pdma;

	/* A notification copies the internal notification word to this. */
	uint32_t noteval = 0;    // Receives notification word upon an API notify
 800a870:	ab02      	add	r3, sp, #8
 800a872:	2200      	movs	r2, #0
 800a874:	f843 2d04 	str.w	r2, [r3, #-4]!

	/* notification bits processed after a 'Wait. */
	uint32_t noteused = 0;

	/* Get buffers, "our" control block, and start ADC/DMA running. */
	struct ADCDMATSKBLK* pblk = adctask_init(&hadc1,TSK02BIT02,TSK02BIT03,&noteval);
 800a878:	2202      	movs	r2, #2
 800a87a:	2101      	movs	r1, #1
 800a87c:	4813      	ldr	r0, [pc, #76]	; (800a8cc <StartADCTask+0x60>)
 800a87e:	f7ff ff6f 	bl	800a760 <adctask_init>
	if (pblk == NULL) {morse_trap(15);}
 800a882:	4606      	mov	r6, r0
 800a884:	b910      	cbnz	r0, 800a88c <StartADCTask+0x20>
 800a886:	200f      	movs	r0, #15
 800a888:	f7ff fcec 	bl	800a264 <morse_trap>
/* *************************************************************************
 * void StartADCTask(void const * argument);
 *	@brief	: Task startup
 * *************************************************************************/
void StartADCTask(void const * argument)
{
 800a88c:	2400      	movs	r4, #0

  /* Infinite loop */
  for(;;)
  {
		/* Wait for DMA interrupt */
		xTaskNotifyWait(noteused, 0, &noteval, portMAX_DELAY);
 800a88e:	f04f 33ff 	mov.w	r3, #4294967295
 800a892:	aa01      	add	r2, sp, #4
 800a894:	2100      	movs	r1, #0
 800a896:	4620      	mov	r0, r4
 800a898:	f7fc f816 	bl	80068c8 <xTaskNotifyWait>
		noteused = 0;	// Accumulate bits in 'noteval' processed.

		/* We handled one, or both, noteval bits */
		noteused |= (pblk->notebit1 | pblk->notebit2);
 800a89c:	68b4      	ldr	r4, [r6, #8]
 800a89e:	68f3      	ldr	r3, [r6, #12]
 800a8a0:	431c      	orrs	r4, r3

		if (noteval & TSK02BIT02)
 800a8a2:	9b01      	ldr	r3, [sp, #4]
 800a8a4:	f013 0f01 	tst.w	r3, #1
 800a8a8:	d002      	beq.n	800a8b0 <StartADCTask+0x44>
		{
			pdma = adc1dmatskblk[0].pdma1;
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <StartADCTask+0x64>)
 800a8ac:	6959      	ldr	r1, [r3, #20]
 800a8ae:	e001      	b.n	800a8b4 <StartADCTask+0x48>
		}
		else
		{
			pdma = adc1dmatskblk[0].pdma2;
 800a8b0:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <StartADCTask+0x64>)
 800a8b2:	6999      	ldr	r1, [r3, #24]
		}

		/* Sum the readings 1/2 of DMA buffer to an array. */
		adcfastsum16(&adc1data.adcs1sum[0], pdma);
 800a8b4:	4d07      	ldr	r5, [pc, #28]	; (800a8d4 <StartADCTask+0x68>)
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 f8a2 	bl	800aa00 <adcfastsum16>

		/* Compute internal reference and temperature adjustments. */
		adcparams_internal(&adcommon, &adc1data.adcs1sum[ADC1IDX_INTERNALTEMP],&adc1data.adcs1sum[ADC1IDX_INTERNALVREF]);
 800a8bc:	f105 0212 	add.w	r2, r5, #18
 800a8c0:	f105 0110 	add.w	r1, r5, #16
 800a8c4:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <StartADCTask+0x6c>)
 800a8c6:	f000 f831 	bl	800a92c <adcparams_internal>

  }
 800a8ca:	e7e0      	b.n	800a88e <StartADCTask+0x22>
 800a8cc:	20005150 	.word	0x20005150
 800a8d0:	20006c50 	.word	0x20006c50
 800a8d4:	20006e7c 	.word	0x20006e7c
 800a8d8:	20006e90 	.word	0x20006e90

0800a8dc <xADCTaskCreate>:
 * @brief	: Create task; task handle created is global for all to enjoy!
 * @param	: taskpriority = Task priority (just as it says!)
 * @return	: ADCTaskHandle
 * *************************************************************************/
osThreadId xADCTaskCreate(uint32_t taskpriority)
{
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	b088      	sub	sp, #32
 800a8e0:	4606      	mov	r6, r0
 	osThreadDef(ADCTask, StartADCTask, osPriorityNormal, 0, 128);
 800a8e2:	ac01      	add	r4, sp, #4
 800a8e4:	4d09      	ldr	r5, [pc, #36]	; (800a90c <xADCTaskCreate+0x30>)
 800a8e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a8ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	a801      	add	r0, sp, #4
 800a8f6:	f7fc fbaf 	bl	8007058 <osThreadCreate>
 800a8fa:	4c05      	ldr	r4, [pc, #20]	; (800a910 <xADCTaskCreate+0x34>)
 800a8fc:	6020      	str	r0, [r4, #0]
	vTaskPrioritySet( ADCTaskHandle, taskpriority );
 800a8fe:	4631      	mov	r1, r6
 800a900:	f7fb fb5a 	bl	8005fb8 <vTaskPrioritySet>
	return ADCTaskHandle;

}
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	b008      	add	sp, #32
 800a908:	bd70      	pop	{r4, r5, r6, pc}
 800a90a:	bf00      	nop
 800a90c:	0800eb98 	.word	0x0800eb98
 800a910:	20006cb0 	.word	0x20006cb0

0800a914 <adcparams_init>:
 * void adcparams_init(void);
 *	@brief	: Copy parameters into structs
 * NOTE: => ASSUMES ADC1 ONLY <==
 * *************************************************************************/
void adcparams_init(void)
{
 800a914:	b508      	push	{r3, lr}
	/* Common to board */
	adcparamsinit_init_common(&adcommon);
 800a916:	4803      	ldr	r0, [pc, #12]	; (800a924 <adcparams_init+0x10>)
 800a918:	f000 f8bc 	bl	800aa94 <adcparamsinit_init_common>

	/* Load parameter values for ADC channels. */
	adcparamsinit_init(adc1channelstuff);
 800a91c:	4802      	ldr	r0, [pc, #8]	; (800a928 <adcparams_init+0x14>)
 800a91e:	f000 f90b 	bl	800ab38 <adcparamsinit_init>
 800a922:	bd08      	pop	{r3, pc}
 800a924:	20006e90 	.word	0x20006e90
 800a928:	20006cb8 	.word	0x20006cb8

0800a92c <adcparams_internal>:
 * @param	: pvref = Pointer to summed Vref reading
 * *************************************************************************/
uint32_t adcdbg1;
uint32_t adcdbg2;
void adcparams_internal(struct ADCCALCOMMON* pacom, uint16_t* ptemp, uint16_t* pvref)
{
 800a92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92e:	4605      	mov	r5, r0
	
	/* Temperature computed from internal sensor using factory 
      calibrations @ Vdd = 3.3v, and adjusted for measured Vdd. */
//	pacom->degC = (pacom->ts_80caldiff) * ( (float)(*ptemp) * ( ( pacom->fvdd * (1.0/3.3) ) ) - pacom->ts_cal1)  + 30;

adcdbg1 = DTWTIME;
 800a930:	4f25      	ldr	r7, [pc, #148]	; (800a9c8 <adcparams_internal+0x9c>)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	4e25      	ldr	r6, [pc, #148]	; (800a9cc <adcparams_internal+0xa0>)
 800a936:	6033      	str	r3, [r6, #0]
	
/* The following two computaions with ints uses 119 machines cycles. */
	pacom->ivdd = (3300 * ADC1DMANUMSEQ) * (*PVREFINT_CAL) / (*pvref);
 800a938:	4b25      	ldr	r3, [pc, #148]	; (800a9d0 <adcparams_internal+0xa4>)
 800a93a:	881c      	ldrh	r4, [r3, #0]
 800a93c:	f64c 6340 	movw	r3, #52800	; 0xce40
 800a940:	fb03 f304 	mul.w	r3, r3, r4
 800a944:	8814      	ldrh	r4, [r2, #0]
 800a946:	fb93 f4f4 	sdiv	r4, r3, r4
 800a94a:	b2a4      	uxth	r4, r4
 800a94c:	8284      	strh	r4, [r0, #20]

	pacom->ui_tmp = (pacom->ivdd * (*ptemp) ) / 3300; // Adjust for Vdd not at 3.3v calibration
 800a94e:	880b      	ldrh	r3, [r1, #0]
 800a950:	fb03 f304 	mul.w	r3, r3, r4
 800a954:	4a1f      	ldr	r2, [pc, #124]	; (800a9d4 <adcparams_internal+0xa8>)
 800a956:	fb82 1203 	smull	r1, r2, r2, r3
 800a95a:	441a      	add	r2, r3
 800a95c:	17db      	asrs	r3, r3, #31
 800a95e:	ebc3 23e2 	rsb	r3, r3, r2, asr #11
 800a962:	64c3      	str	r3, [r0, #76]	; 0x4c
	pacom->degC  = pacom->ll_80caldiff * (pacom->ui_tmp - pacom->ui_cal1) + (30 * SCALE1 * ADC1DMANUMSEQ);
 800a964:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a966:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800a968:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800a96a:	1a5b      	subs	r3, r3, r1
 800a96c:	fba3 0100 	umull	r0, r1, r3, r0
 800a970:	fb03 1102 	mla	r1, r3, r2, r1
 800a974:	f110 70f0 	adds.w	r0, r0, #31457280	; 0x1e00000
 800a978:	f141 0100 	adc.w	r1, r1, #0
 800a97c:	f7f6 fb20 	bl	8000fc0 <__aeabi_l2f>
	pacom->degC *= (1.0/(SCALE1*ADC1DMANUMSEQ)); // Fast because power of two.
 800a980:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800a9d8 <adcparams_internal+0xac>
 800a984:	ee07 0a90 	vmov	s15, r0
 800a988:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a98c:	ed85 7a0d 	vstr	s14, [r5, #52]	; 0x34

	pacom->fvdd = pacom->ivdd;
 800a990:	ee07 4a90 	vmov	s15, r4
 800a994:	eef8 7a67 	vcvt.f32.u32	s15, s15
	pacom->fvdd = pacom->fvdd + pacom->tcoef * (pacom->degC - 30);
 800a998:	ed95 0a02 	vldr	s0, [r5, #8]
 800a99c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800a9a0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a9a4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a9a8:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a9ac:	ed85 0a03 	vstr	s0, [r5, #12]

	pacom->fvddfilt = iir_f1_f(&adc1channelstuff[ADC1IDX_INTERNALVREF].fpw.iir_f1, pacom->fvdd);
 800a9b0:	480a      	ldr	r0, [pc, #40]	; (800a9dc <adcparams_internal+0xb0>)
 800a9b2:	f000 f97b 	bl	800acac <iir_f1_f>
 800a9b6:	ed85 0a04 	vstr	s0, [r5, #16]

	pacom->fvddcomp = pacom->fvddfilt * pacom->sensor5vcalVdd;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	6832      	ldr	r2, [r6, #0]
 800a9be:	1a9b      	subs	r3, r3, r2
 800a9c0:	4a07      	ldr	r2, [pc, #28]	; (800a9e0 <adcparams_internal+0xb4>)
 800a9c2:	6013      	str	r3, [r2, #0]
 800a9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	e0001004 	.word	0xe0001004
 800a9cc:	20006e4c 	.word	0x20006e4c
 800a9d0:	1fff7a2a 	.word	0x1fff7a2a
 800a9d4:	9ee009ef 	.word	0x9ee009ef
 800a9d8:	35800000 	.word	0x35800000
 800a9dc:	20006e34 	.word	0x20006e34
 800a9e0:	20006e48 	.word	0x20006e48

0800a9e4 <stackwatermark_show>:
 * @param	: TaskHandle = task handle for stackwatermark check  
 * @param	: pycb = pointer to stuct to pointer with uart pointers and buffer parameters
 * @param	: pchar = pointer to text string to precede stack value number
 * *************************************************************************/
void stackwatermark_show(osThreadId TaskHandle, struct SERIALSENDTASKBCB** ppbcb, char* pchar)
{
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	4615      	mov	r5, r2
	UBaseType_t stackwatermark; // For unused task stack space

		/* Get stack high water mark for tasks of interest. */
		stackwatermark = uxTaskGetStackHighWaterMark( TaskHandle );
 800a9ea:	f7fb fe8f 	bl	800670c <uxTaskGetStackHighWaterMark>

		yprintf(ppbcb, "\n\rStack: %s %3d",pchar, (int)stackwatermark);
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	462a      	mov	r2, r5
 800a9f2:	4902      	ldr	r1, [pc, #8]	; (800a9fc <stackwatermark_show+0x18>)
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f7ff f88f 	bl	8009b18 <yprintf>
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	0800efa4 	.word	0x0800efa4

0800aa00 <adcfastsum16>:
 *	@brief	: Inline fast summation: ASSUMES 16 ADC sequences: channels: ADC1IDX_ADCSCANSIZE
 * @param	: psum = pointer to sum
 * @param	: pdma = pointer to dma buffer
 * *************************************************************************/
void adcfastsum16(uint16_t* psum, uint16_t* pdma)
{
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	b087      	sub	sp, #28
 800aa06:	4686      	mov	lr, r0
 800aa08:	468c      	mov	ip, r1
	uint16_t* pend = psum + ADC1IDX_ADCSCANSIZE;
 800aa0a:	f100 0314 	add.w	r3, r0, #20
 800aa0e:	9305      	str	r3, [sp, #20]
	do
	{
		*psum = *pdma
 800aa10:	f8bc b000 	ldrh.w	fp, [ip]
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 1)
 800aa14:	f8bc 3014 	ldrh.w	r3, [ip, #20]
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 2)
 800aa18:	f8bc a028 	ldrh.w	sl, [ip, #40]	; 0x28
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 3)
 800aa1c:	f8bc 903c 	ldrh.w	r9, [ip, #60]	; 0x3c
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 4)
 800aa20:	f8bc 8050 	ldrh.w	r8, [ip, #80]	; 0x50
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 5)
 800aa24:	f8bc 7064 	ldrh.w	r7, [ip, #100]	; 0x64
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 6)
 800aa28:	f8bc 6078 	ldrh.w	r6, [ip, #120]	; 0x78
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 7)
 800aa2c:	f8bc 508c 	ldrh.w	r5, [ip, #140]	; 0x8c
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 8)
 800aa30:	f8bc 20a0 	ldrh.w	r2, [ip, #160]	; 0xa0
 800aa34:	9201      	str	r2, [sp, #4]
		 + *(pdma + ADC1IDX_ADCSCANSIZE * 9)
 800aa36:	f8bc 10b4 	ldrh.w	r1, [ip, #180]	; 0xb4
 800aa3a:	9102      	str	r1, [sp, #8]
		 + *(pdma + ADC1IDX_ADCSCANSIZE *10)
 800aa3c:	f8bc 00c8 	ldrh.w	r0, [ip, #200]	; 0xc8
 800aa40:	9003      	str	r0, [sp, #12]
		 + *(pdma + ADC1IDX_ADCSCANSIZE *11)
 800aa42:	f8bc 40dc 	ldrh.w	r4, [ip, #220]	; 0xdc
 800aa46:	9404      	str	r4, [sp, #16]
		 + *(pdma + ADC1IDX_ADCSCANSIZE *12)
 800aa48:	f8bc 40f0 	ldrh.w	r4, [ip, #240]	; 0xf0
		 + *(pdma + ADC1IDX_ADCSCANSIZE *13)
 800aa4c:	f8bc 0104 	ldrh.w	r0, [ip, #260]	; 0x104
		 + *(pdma + ADC1IDX_ADCSCANSIZE *14)
 800aa50:	f8bc 1118 	ldrh.w	r1, [ip, #280]	; 0x118
		 + *(pdma + ADC1IDX_ADCSCANSIZE *15);
 800aa54:	f8bc 212c 	ldrh.w	r2, [ip, #300]	; 0x12c
void adcfastsum16(uint16_t* psum, uint16_t* pdma)
{
	uint16_t* pend = psum + ADC1IDX_ADCSCANSIZE;
	do
	{
		*psum = *pdma
 800aa58:	445b      	add	r3, fp
 800aa5a:	4453      	add	r3, sl
 800aa5c:	444b      	add	r3, r9
 800aa5e:	4443      	add	r3, r8
 800aa60:	443b      	add	r3, r7
 800aa62:	4433      	add	r3, r6
 800aa64:	442b      	add	r3, r5
 800aa66:	9d01      	ldr	r5, [sp, #4]
 800aa68:	442b      	add	r3, r5
 800aa6a:	9d02      	ldr	r5, [sp, #8]
 800aa6c:	442b      	add	r3, r5
 800aa6e:	9d03      	ldr	r5, [sp, #12]
 800aa70:	442b      	add	r3, r5
 800aa72:	9d04      	ldr	r5, [sp, #16]
 800aa74:	442b      	add	r3, r5
 800aa76:	441c      	add	r4, r3
 800aa78:	4420      	add	r0, r4
 800aa7a:	4401      	add	r1, r0
 800aa7c:	440a      	add	r2, r1
 800aa7e:	f82e 2b02 	strh.w	r2, [lr], #2
		 + *(pdma + ADC1IDX_ADCSCANSIZE *13)
		 + *(pdma + ADC1IDX_ADCSCANSIZE *14)
		 + *(pdma + ADC1IDX_ADCSCANSIZE *15);

		psum += 1;
		pdma += 1;
 800aa82:	f10c 0c02 	add.w	ip, ip, #2
	} while (psum != pend);
 800aa86:	9b05      	ldr	r3, [sp, #20]
 800aa88:	4573      	cmp	r3, lr
 800aa8a:	d1c1      	bne.n	800aa10 <adcfastsum16+0x10>
	return;
}
 800aa8c:	b007      	add	sp, #28
 800aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa92:	bf00      	nop

0800aa94 <adcparamsinit_init_common>:
 * void adcparamsinit_init_common(struct ADCCALCOMMON* padccommon);
 *	@brief	: Initialize struct with parameters common to all ADC for this =>board<=
 * @param	: padccommon = pointer to struct holding parameters
 * *************************************************************************/
void adcparamsinit_init_common(struct ADCCALCOMMON* padccommon)
{
 800aa94:	b410      	push	{r4}

	padccommon->sensor5vcal = 0.54 / ADCSEQNUM;	// 5v->Vdd divide ratio
 800aa96:	4b21      	ldr	r3, [pc, #132]	; (800ab1c <adcparamsinit_init_common+0x88>)
 800aa98:	6003      	str	r3, [r0, #0]
	padccommon->sensor5vcalVdd = padccommon->sensor5vcal / 3.3; // Precompute: adjust for Vdd

 800aa9a:	4b21      	ldr	r3, [pc, #132]	; (800ab20 <adcparamsinit_init_common+0x8c>)
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	82c3      	strh	r3, [r0, #22]
	padccommon->ts_vref = *PVREFINT_CAL; // Factory calibration
 800aaa0:	4b20      	ldr	r3, [pc, #128]	; (800ab24 <adcparamsinit_init_common+0x90>)
 800aaa2:	6083      	str	r3, [r0, #8]
	padccommon->tcoef   = 30E-6; // 30 typ, 50 max, (ppm/deg C)

 800aaa4:	4a20      	ldr	r2, [pc, #128]	; (800ab28 <adcparamsinit_init_common+0x94>)
 800aaa6:	8813      	ldrh	r3, [r2, #0]
 800aaa8:	ee07 3a10 	vmov	s14, r3
 800aaac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aab0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800aab4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800aab8:	ed80 7a06 	vstr	s14, [r0, #24]
	padccommon->ts_cal1      = (float)(*PTS_CAL1) * (float)ADC1DMANUMSEQ; // Factory calibration
 800aabc:	491b      	ldr	r1, [pc, #108]	; (800ab2c <adcparamsinit_init_common+0x98>)
 800aabe:	880b      	ldrh	r3, [r1, #0]
 800aac0:	ee07 3a10 	vmov	s14, r3
 800aac4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800aac8:	ed80 7a07 	vstr	s14, [r0, #28]
	padccommon->ts_cal2      = *PTS_CAL2; // Factory calibration
 800aacc:	880b      	ldrh	r3, [r1, #0]
 800aace:	8814      	ldrh	r4, [r2, #0]
 800aad0:	1b1b      	subs	r3, r3, r4
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aada:	edc0 7a08 	vstr	s15, [r0, #32]
	padccommon->ts_caldiff   = *PTS_CAL2 - *PTS_CAL1; // Pre-compute
 800aade:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800aae2:	eddf 6a13 	vldr	s13, [pc, #76]	; 800ab30 <adcparamsinit_init_common+0x9c>
 800aae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaea:	ed80 7a09 	vstr	s14, [r0, #36]	; 0x24
	padccommon->ts_80caldiff = (80.0 / (padccommon->ts_caldiff *(float)ADC1DMANUMSEQ)); // Pre-compute

 800aaee:	880b      	ldrh	r3, [r1, #0]
 800aaf0:	8811      	ldrh	r1, [r2, #0]
 800aaf2:	1a5b      	subs	r3, r3, r1
 800aaf4:	63c3      	str	r3, [r0, #60]	; 0x3c
	padccommon->uicaldiff    = *PTS_CAL2 - *PTS_CAL1; // Pre-compute
 800aaf6:	f44f 01a0 	mov.w	r1, #5242880	; 0x500000
 800aafa:	fbb1 f3f3 	udiv	r3, r1, r3
 800aafe:	6403      	str	r3, [r0, #64]	; 0x40
 800ab00:	2300      	movs	r3, #0
 800ab02:	6443      	str	r3, [r0, #68]	; 0x44
	padccommon->ll_80caldiff = (80 * SCALE1) /(padccommon->uicaldiff);
 800ab04:	8813      	ldrh	r3, [r2, #0]
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	6483      	str	r3, [r0, #72]	; 0x48
	padccommon->ui_cal1      =	(*PTS_CAL1) * ADC1DMANUMSEQ;

	/* Data sheet gave these values.  May not need them. */
 800ab0a:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <adcparamsinit_init_common+0xa0>)
 800ab0c:	6283      	str	r3, [r0, #40]	; 0x28
	padccommon->v25     = 0.76; // Voltage at 25 °C, typ
 800ab0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab12:	62c3      	str	r3, [r0, #44]	; 0x2c
	padccommon->slope   = 2.0;  // Average slope (mv/deg C), typ

	return;
 800ab14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	3f0a3d71 	.word	0x3f0a3d71
 800ab20:	1fff7a2a 	.word	0x1fff7a2a
 800ab24:	37fba882 	.word	0x37fba882
 800ab28:	1fff7a2c 	.word	0x1fff7a2c
 800ab2c:	1fff7a2e 	.word	0x1fff7a2e
 800ab30:	42a00000 	.word	0x42a00000
 800ab34:	3f428f5c 	.word	0x3f428f5c

0800ab38 <adcparamsinit_init>:
/* *************************************************************************
 * void adcparamsinit_init(struct ADCCHANNELSTUFF* pacsx);
 *	@brief	: Load structs for compensation, calibration and filtering for ADC channels
 * @param	: pacsx = Pointer to struct "everything" for this ADC module
 * *************************************************************************/
void adcparamsinit_init(struct ADCCHANNELSTUFF* pacsx)
 800ab38:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ADCCHANNELSTUFF* pacs; // Use pointer for convenience

/* IN18 - Internal voltage reference */
	pacs = pacsx + ADC1IDX_INTERNALVREF; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f880 3168 	strb.w	r3, [r0, #360]	; 0x168
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;      // Single pole IIR
 800ab40:	2200      	movs	r2, #0
 800ab42:	f880 2169 	strb.w	r2, [r0, #361]	; 0x169
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_RAW; // Raw; no calibration applied
 800ab46:	f880 216a 	strb.w	r2, [r0, #362]	; 0x16a
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_NONE; // No temperature compenstaion

	// Calibration coefficients.
 800ab4a:	2500      	movs	r5, #0
 800ab4c:	f8c0 516c 	str.w	r5, [r0, #364]	; 0x16c
	pacs->cal.f[0] = 0.0;  // Offset
 800ab50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ab54:	f8c0 1170 	str.w	r1, [r0, #368]	; 0x170
	pacs->cal.f[1] = 1.0;  // Scale (jic calibration not skipped)

	// Filter initialize, coefficients, and pre-computed value. */
 800ab58:	f640 14c4 	movw	r4, #2500	; 0x9c4
 800ab5c:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	pacs->fpw.iir_f1.skipctr  = 2500; 	 // Initial readings skip count
 800ab60:	4c47      	ldr	r4, [pc, #284]	; (800ac80 <adcparamsinit_init+0x148>)
 800ab62:	f8c0 417c 	str.w	r4, [r0, #380]	; 0x17c
	pacs->fpw.iir_f1.coef     = 0.999;  // Filter coefficient (< 1.0)
 800ab66:	4c47      	ldr	r4, [pc, #284]	; (800ac84 <adcparamsinit_init+0x14c>)
 800ab68:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
	pacs->fpw.iir_f1.onemcoef = (1 - pacs->fpw.iir_f1.coef);

/* IN17 - Internal temperature sensor */
	pacs = pacsx + ADC1IDX_INTERNALTEMP; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800ab6c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;      // Single pole IIR
 800ab70:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_RAW; // Raw; no calibration applied
 800ab74:	f880 2142 	strb.w	r2, [r0, #322]	; 0x142
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_NONE; // No temperature compenstaion

	// Calibration coefficients.
 800ab78:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
	pacs->cal.f[0] = 0.0;  // Offset
 800ab7c:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
	pacs->cal.f[1] = 1.0;  // Scale (jic calibration not skipped)

	// Filter initialize, coefficients, and pre-computed value. */
 800ab80:	2204      	movs	r2, #4
 800ab82:	f8a0 2160 	strh.w	r2, [r0, #352]	; 0x160
	pacs->fpw.iir_f1.skipctr  = 4; 	 // Initial readings skip count
 800ab86:	4c40      	ldr	r4, [pc, #256]	; (800ac88 <adcparamsinit_init+0x150>)
 800ab88:	f8c0 4154 	str.w	r4, [r0, #340]	; 0x154
	pacs->fpw.iir_f1.coef     = 0.9;  // Filter coefficient (< 1.0)
 800ab8c:	493f      	ldr	r1, [pc, #252]	; (800ac8c <adcparamsinit_init+0x154>)
 800ab8e:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
	pacs->fpw.iir_f1.onemcoef = (1 - pacs->fpw.iir_f1.coef);

/* Hall effect lever.  5v supply. */
	pacs = pacsx + ADC1IDX_HALLLEVER; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800ab92:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;        // Single pole IIR
 800ab96:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_OFSC;  // Offset & scale (poly ord 0 & 1)
 800ab9a:	f04f 0e02 	mov.w	lr, #2
 800ab9e:	f880 e0ca 	strb.w	lr, [r0, #202]	; 0xca
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_VOLT5A; // 5v sensor; Vref w 5v supply reading compensation

	// Calibration coefficients.
 800aba2:	f8c0 50cc 	str.w	r5, [r0, #204]	; 0xcc
	pacs->cal.f[0] = 0.0;     // Offset
 800aba6:	4f3a      	ldr	r7, [pc, #232]	; (800ac90 <adcparamsinit_init+0x158>)
 800aba8:	f8c0 70d0 	str.w	r7, [r0, #208]	; 0xd0
	pacs->cal.f[1] = 0.5465; // Scale (volts) (3.9K - 4.7K)

	// Filter initialize, coefficients, and pre-computed value. */
 800abac:	f8a0 20e8 	strh.w	r2, [r0, #232]	; 0xe8
	pacs->fpw.iir_f1.skipctr  = 4; 	 // Initial readings skip count
 800abb0:	f8c0 40dc 	str.w	r4, [r0, #220]	; 0xdc
	pacs->fpw.iir_f1.coef     = 0.9;   // Filter coefficient (< 1.0)
 800abb4:	f8c0 10e0 	str.w	r1, [r0, #224]	; 0xe0
	pacs->fpw.iir_f1.onemcoef = (1 - pacs->fpw.iir_f1.coef);

/* Resistor pot connected to 3.3v (Vdd) supply. */
	pacs = pacsx + ADC1IDX_RESISRPOT; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800abb8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;        // Single pole IIR
 800abbc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_OFSC;  // Offset & scale (poly ord 0 & 1)
 800abc0:	2603      	movs	r6, #3
 800abc2:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_VOLT3AT; // 5v sensor; Vref abs w temp

	// Calibration coefficients.
 800abc6:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
	pacs->cal.f[0] = 0.0;           // Offset
 800abca:	4e32      	ldr	r6, [pc, #200]	; (800ac94 <adcparamsinit_init+0x15c>)
 800abcc:	f8c0 60a8 	str.w	r6, [r0, #168]	; 0xa8
	pacs->cal.f[1] = (100.0/4095); // Scale

	// Filter initialize, coefficients, and pre-computed value. */
 800abd0:	f8a0 20c0 	strh.w	r2, [r0, #192]	; 0xc0
	pacs->fpw.iir_f1.skipctr  = 4; 	 // Initial readings skip count
 800abd4:	f8c0 40b4 	str.w	r4, [r0, #180]	; 0xb4
	pacs->fpw.iir_f1.coef     = 0.9;   // Filter coefficient (< 1.0)
 800abd8:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
	pacs->fpw.iir_f1.onemcoef = (1 - pacs->fpw.iir_f1.coef);

/* Total battery current sensor. */
	pacs = pacsx + ADC1IDX_CURRENTTOTAL; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800abdc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;        // Single pole IIR
 800abe0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_OFSC;  // Offset & scale (poly ord 0 & 1)
 800abe4:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_VOLT5AT; // 5v w Vref abs w temp

	// Calibration coefficients.
 800abe8:	4e2b      	ldr	r6, [pc, #172]	; (800ac98 <adcparamsinit_init+0x160>)
 800abea:	62c6      	str	r6, [r0, #44]	; 0x2c
	pacs->cal.f[0] = 2047.5; // Offset
 800abec:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800aca4 <adcparamsinit_init+0x16c>
 800abf0:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
	pacs->cal.f[1] = 0.1086; // Scale (200a @saturation)

	// Filter initialize, coefficients, and pre-computed value. */
 800abf4:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
	pacs->fpw.iir_f1.skipctr  = 4; 	 // Initial readings skip count
 800abf8:	63c4      	str	r4, [r0, #60]	; 0x3c
	pacs->fpw.iir_f1.coef     = 0.9;   // Filter coefficient (< 1.0)
 800abfa:	6401      	str	r1, [r0, #64]	; 0x40
	pacs->fpw.iir_f1.onemcoef = (1 - pacs->fpw.iir_f1.coef);

/* Current sensor: motor #1 */
	pacs = pacsx + ADC1IDX_CURRENTMOTOR1; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800abfc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;        // Single pole IIR
 800ac00:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_OFSC;  // Offset & scale (poly ord 0 & 1)
 800ac04:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_VOLT5AT; // 5v w Vref abs w temp

	// Calibration coefficients.
 800ac08:	6546      	str	r6, [r0, #84]	; 0x54
	pacs->cal.f[0] = 2047.5;  // Offset
 800ac0a:	f8df c09c 	ldr.w	ip, [pc, #156]	; 800aca8 <adcparamsinit_init+0x170>
 800ac0e:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
	pacs->cal.f[1] = 0.3257;  // Scale (600a @saturation)

	// Filter initialize, coefficients, and pre-computed value. */
 800ac12:	f8a0 2070 	strh.w	r2, [r0, #112]	; 0x70
	pacs->fpw.iir_f1.skipctr  = 4; 	 // Initial readings skip count
 800ac16:	6644      	str	r4, [r0, #100]	; 0x64
	pacs->fpw.iir_f1.coef     = 0.9;   // Filter coefficient (< 1.0)
 800ac18:	6681      	str	r1, [r0, #104]	; 0x68
	pacs->fpw.iir_f1.onemcoef = (1 - pacs->fpw.iir_f1.coef);

/* Current sensor: motor #2 */
	pacs = pacsx + ADC1IDX_CURRENTMOTOR2; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800ac1a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;        // Single pole IIR
 800ac1e:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_OFSC;  // Offset & scale (poly ord 0 & 1)
 800ac22:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_VOLT5AT; // 5v w Vref abs w temp

	// Calibration coefficients.
 800ac26:	67c6      	str	r6, [r0, #124]	; 0x7c
	pacs->cal.f[0] = 2047.5;  // Offset
 800ac28:	4e1c      	ldr	r6, [pc, #112]	; (800ac9c <adcparamsinit_init+0x164>)
 800ac2a:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
	pacs->cal.f[1] = 0.2172;  // Scale (400a @saturation)

	// Filter initialize, coefficients, and pre-computed value. */
 800ac2e:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
	pacs->fpw.iir_f1.skipctr  = 4; 	 // Initial readings skip count
 800ac32:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
	pacs->fpw.iir_f1.coef     = 0.9;   // Filter coefficient (< 1.0)
 800ac36:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
	pacs->fpw.iir_f1.onemcoef = (1 - pacs->fpw.iir_f1.coef);

/* +12v supply voltage */
	pacs = pacsx + ADC1IDX_12VRAWSUPPLY; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800ac3a:	f880 30f0 	strb.w	r3, [r0, #240]	; 0xf0
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;        // Single pole IIR
 800ac3e:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_OFSC;  // Offset & scale (poly ord 0 & 1)
 800ac42:	f880 20f2 	strb.w	r2, [r0, #242]	; 0xf2
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_VOLT5AT; // 5v w Vref abs w temp

	// Calibration coefficients.
 800ac46:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
	pacs->cal.f[0] = 0.0;     // Offset
 800ac4a:	4e15      	ldr	r6, [pc, #84]	; (800aca0 <adcparamsinit_init+0x168>)
 800ac4c:	f8c0 60f8 	str.w	r6, [r0, #248]	; 0xf8
	pacs->cal.f[1] = 0.1525; // Scale (volts) (1.8K-10K)

	// Filter initialize, coefficients, and pre-computed value. */
 800ac50:	f8a0 2110 	strh.w	r2, [r0, #272]	; 0x110
	pacs->fpw.iir_f1.skipctr  = 4; 	 // Initial readings skip count
 800ac54:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	pacs->fpw.iir_f1.coef     = 0.9;   // Filter coefficient (< 1.0)
 800ac58:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108


/* 5v supply. */
	pacs = pacsx + ADC1IDX_5VOLTSUPPLY; // Point to "stuff" for this ADC channel

	// Filter type, calibration option, compensation option. */
 800ac5c:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	pacs->xprms.filttype  = ADCFILTERTYPE_IIR1;        // Single pole IIR
 800ac60:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
	pacs->xprms.calibtype = ADC1PARAM_CALIBTYPE_OFSC;  // Offset & scale (poly ord 0 & 1)
 800ac64:	f880 e11a 	strb.w	lr, [r0, #282]	; 0x11a
	pacs->xprms.comptype  = ADC1PARAM_COMPTYPE_VOLT5A; // 5v sensor; Vref w 5v supply reading compensation

	// Calibration coefficients.
 800ac68:	f8c0 511c 	str.w	r5, [r0, #284]	; 0x11c
	pacs->cal.f[0] = 0.0;    // Offset
 800ac6c:	f8c0 7120 	str.w	r7, [r0, #288]	; 0x120
	pacs->cal.f[1] = 0.5465; // Scale (volts) (3.9K - 4.7K)

	// Filter initialize, coefficients, and pre-computed value. */
 800ac70:	f8a0 2138 	strh.w	r2, [r0, #312]	; 0x138
	pacs->fpw.iir_f1.skipctr  = 4; 	 // Initial readings skip count
 800ac74:	f8c0 412c 	str.w	r4, [r0, #300]	; 0x12c
	pacs->fpw.iir_f1.coef     = 0.9;   // Filter coefficient (< 1.0)
 800ac78:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 800ac7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	3f7fbe77 	.word	0x3f7fbe77
 800ac84:	3a831200 	.word	0x3a831200
 800ac88:	3f666666 	.word	0x3f666666
 800ac8c:	3dccccd0 	.word	0x3dccccd0
 800ac90:	3f0be76d 	.word	0x3f0be76d
 800ac94:	3cc80c81 	.word	0x3cc80c81
 800ac98:	44fff000 	.word	0x44fff000
 800ac9c:	3e5e69ad 	.word	0x3e5e69ad
 800aca0:	3e1c28f6 	.word	0x3e1c28f6
 800aca4:	3dde69ad 	.word	0x3dde69ad
 800aca8:	3ea6c227 	.word	0x3ea6c227

0800acac <iir_f1_f>:
 * @param	: flt = float new value input to filter
 * @param	: filter output, given new input
 * *************************************************************************/
float iir_f1_f(struct FILTERIIRF1* pfc, float flt)
{
	if (pfc->skipctr > 0)
 800acac:	8983      	ldrh	r3, [r0, #12]
 800acae:	b143      	cbz	r3, 800acc2 <iir_f1_f+0x16>
	{ // Here, skip starting filter until a few readings
		pfc->skipctr -= 1;
 800acb0:	3b01      	subs	r3, #1
 800acb2:	8183      	strh	r3, [r0, #12]
		pfc->z1 = flt / pfc->onemcoef;
 800acb4:	ed90 7a01 	vldr	s14, [r0, #4]
 800acb8:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800acbc:	edc0 7a02 	vstr	s15, [r0, #8]
 800acc0:	e009      	b.n	800acd6 <iir_f1_f+0x2a>
	}
	else
	{
		pfc->z1 = (flt + pfc->z1 * pfc->coef);
 800acc2:	edd0 7a02 	vldr	s15, [r0, #8]
 800acc6:	ed90 7a00 	vldr	s14, [r0]
 800acca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acce:	ee30 0a27 	vadd.f32	s0, s0, s15
 800acd2:	ed80 0a02 	vstr	s0, [r0, #8]
	}
	return ( pfc->z1 * pfc->onemcoef);
 800acd6:	ed90 0a02 	vldr	s0, [r0, #8]
 800acda:	edd0 7a01 	vldr	s15, [r0, #4]
}
 800acde:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ace2:	4770      	bx	lr

0800ace4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ace4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ad1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ace8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800acea:	e003      	b.n	800acf4 <LoopCopyDataInit>

0800acec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800acec:	4b0c      	ldr	r3, [pc, #48]	; (800ad20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800acee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800acf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800acf2:	3104      	adds	r1, #4

0800acf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800acf4:	480b      	ldr	r0, [pc, #44]	; (800ad24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800acf6:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800acf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800acfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800acfc:	d3f6      	bcc.n	800acec <CopyDataInit>
  ldr  r2, =_sbss
 800acfe:	4a0b      	ldr	r2, [pc, #44]	; (800ad2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ad00:	e002      	b.n	800ad08 <LoopFillZerobss>

0800ad02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ad02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ad04:	f842 3b04 	str.w	r3, [r2], #4

0800ad08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ad08:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ad0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ad0c:	d3f9      	bcc.n	800ad02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ad0e:	f7fa fb27 	bl	8005360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ad12:	f000 f849 	bl	800ada8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ad16:	f7f6 fe15 	bl	8001944 <main>
  bx  lr    
 800ad1a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ad1c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800ad20:	0800f254 	.word	0x0800f254
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ad24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ad28:	20000b08 	.word	0x20000b08
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800ad2c:	20000b08 	.word	0x20000b08
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ad30:	20006ee4 	.word	0x20006ee4

0800ad34 <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ad34:	e7fe      	b.n	800ad34 <CAN1_SCE_IRQHandler>
	...

0800ad38 <calloc>:
 800ad38:	4b02      	ldr	r3, [pc, #8]	; (800ad44 <calloc+0xc>)
 800ad3a:	460a      	mov	r2, r1
 800ad3c:	4601      	mov	r1, r0
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	f000 b802 	b.w	800ad48 <_calloc_r>
 800ad44:	20000588 	.word	0x20000588

0800ad48 <_calloc_r>:
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	fb02 f101 	mul.w	r1, r2, r1
 800ad4e:	f000 f863 	bl	800ae18 <_malloc_r>
 800ad52:	4604      	mov	r4, r0
 800ad54:	b1d8      	cbz	r0, 800ad8e <_calloc_r+0x46>
 800ad56:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ad5a:	f022 0203 	bic.w	r2, r2, #3
 800ad5e:	3a04      	subs	r2, #4
 800ad60:	2a24      	cmp	r2, #36	; 0x24
 800ad62:	d818      	bhi.n	800ad96 <_calloc_r+0x4e>
 800ad64:	2a13      	cmp	r2, #19
 800ad66:	d914      	bls.n	800ad92 <_calloc_r+0x4a>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2a1b      	cmp	r2, #27
 800ad6c:	6003      	str	r3, [r0, #0]
 800ad6e:	6043      	str	r3, [r0, #4]
 800ad70:	d916      	bls.n	800ada0 <_calloc_r+0x58>
 800ad72:	2a24      	cmp	r2, #36	; 0x24
 800ad74:	6083      	str	r3, [r0, #8]
 800ad76:	60c3      	str	r3, [r0, #12]
 800ad78:	bf11      	iteee	ne
 800ad7a:	f100 0210 	addne.w	r2, r0, #16
 800ad7e:	6103      	streq	r3, [r0, #16]
 800ad80:	6143      	streq	r3, [r0, #20]
 800ad82:	f100 0218 	addeq.w	r2, r0, #24
 800ad86:	2300      	movs	r3, #0
 800ad88:	6013      	str	r3, [r2, #0]
 800ad8a:	6053      	str	r3, [r2, #4]
 800ad8c:	6093      	str	r3, [r2, #8]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	bd10      	pop	{r4, pc}
 800ad92:	4602      	mov	r2, r0
 800ad94:	e7f7      	b.n	800ad86 <_calloc_r+0x3e>
 800ad96:	2100      	movs	r1, #0
 800ad98:	f000 faf6 	bl	800b388 <memset>
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	bd10      	pop	{r4, pc}
 800ada0:	f100 0208 	add.w	r2, r0, #8
 800ada4:	e7ef      	b.n	800ad86 <_calloc_r+0x3e>
 800ada6:	bf00      	nop

0800ada8 <__libc_init_array>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	4e0f      	ldr	r6, [pc, #60]	; (800ade8 <__libc_init_array+0x40>)
 800adac:	4d0f      	ldr	r5, [pc, #60]	; (800adec <__libc_init_array+0x44>)
 800adae:	1b76      	subs	r6, r6, r5
 800adb0:	10b6      	asrs	r6, r6, #2
 800adb2:	bf18      	it	ne
 800adb4:	2400      	movne	r4, #0
 800adb6:	d005      	beq.n	800adc4 <__libc_init_array+0x1c>
 800adb8:	3401      	adds	r4, #1
 800adba:	f855 3b04 	ldr.w	r3, [r5], #4
 800adbe:	4798      	blx	r3
 800adc0:	42a6      	cmp	r6, r4
 800adc2:	d1f9      	bne.n	800adb8 <__libc_init_array+0x10>
 800adc4:	4e0a      	ldr	r6, [pc, #40]	; (800adf0 <__libc_init_array+0x48>)
 800adc6:	4d0b      	ldr	r5, [pc, #44]	; (800adf4 <__libc_init_array+0x4c>)
 800adc8:	1b76      	subs	r6, r6, r5
 800adca:	f003 fe7d 	bl	800eac8 <_init>
 800adce:	10b6      	asrs	r6, r6, #2
 800add0:	bf18      	it	ne
 800add2:	2400      	movne	r4, #0
 800add4:	d006      	beq.n	800ade4 <__libc_init_array+0x3c>
 800add6:	3401      	adds	r4, #1
 800add8:	f855 3b04 	ldr.w	r3, [r5], #4
 800addc:	4798      	blx	r3
 800adde:	42a6      	cmp	r6, r4
 800ade0:	d1f9      	bne.n	800add6 <__libc_init_array+0x2e>
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	bd70      	pop	{r4, r5, r6, pc}
 800ade6:	bf00      	nop
 800ade8:	0800f248 	.word	0x0800f248
 800adec:	0800f248 	.word	0x0800f248
 800adf0:	0800f250 	.word	0x0800f250
 800adf4:	0800f248 	.word	0x0800f248

0800adf8 <malloc>:
 800adf8:	4b02      	ldr	r3, [pc, #8]	; (800ae04 <malloc+0xc>)
 800adfa:	4601      	mov	r1, r0
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f000 b80b 	b.w	800ae18 <_malloc_r>
 800ae02:	bf00      	nop
 800ae04:	20000588 	.word	0x20000588

0800ae08 <free>:
 800ae08:	4b02      	ldr	r3, [pc, #8]	; (800ae14 <free+0xc>)
 800ae0a:	4601      	mov	r1, r0
 800ae0c:	6818      	ldr	r0, [r3, #0]
 800ae0e:	f000 bbdb 	b.w	800b5c8 <_free_r>
 800ae12:	bf00      	nop
 800ae14:	20000588 	.word	0x20000588

0800ae18 <_malloc_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	f101 050b 	add.w	r5, r1, #11
 800ae20:	2d16      	cmp	r5, #22
 800ae22:	b083      	sub	sp, #12
 800ae24:	4606      	mov	r6, r0
 800ae26:	f240 809f 	bls.w	800af68 <_malloc_r+0x150>
 800ae2a:	f035 0507 	bics.w	r5, r5, #7
 800ae2e:	f100 80bf 	bmi.w	800afb0 <_malloc_r+0x198>
 800ae32:	42a9      	cmp	r1, r5
 800ae34:	f200 80bc 	bhi.w	800afb0 <_malloc_r+0x198>
 800ae38:	f000 faf4 	bl	800b424 <__malloc_lock>
 800ae3c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800ae40:	f0c0 829c 	bcc.w	800b37c <_malloc_r+0x564>
 800ae44:	0a6b      	lsrs	r3, r5, #9
 800ae46:	f000 80ba 	beq.w	800afbe <_malloc_r+0x1a6>
 800ae4a:	2b04      	cmp	r3, #4
 800ae4c:	f200 8183 	bhi.w	800b156 <_malloc_r+0x33e>
 800ae50:	09a8      	lsrs	r0, r5, #6
 800ae52:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800ae56:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800ae5a:	3038      	adds	r0, #56	; 0x38
 800ae5c:	4fc4      	ldr	r7, [pc, #784]	; (800b170 <_malloc_r+0x358>)
 800ae5e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ae62:	f1a3 0108 	sub.w	r1, r3, #8
 800ae66:	685c      	ldr	r4, [r3, #4]
 800ae68:	42a1      	cmp	r1, r4
 800ae6a:	d107      	bne.n	800ae7c <_malloc_r+0x64>
 800ae6c:	e0ac      	b.n	800afc8 <_malloc_r+0x1b0>
 800ae6e:	2a00      	cmp	r2, #0
 800ae70:	f280 80ac 	bge.w	800afcc <_malloc_r+0x1b4>
 800ae74:	68e4      	ldr	r4, [r4, #12]
 800ae76:	42a1      	cmp	r1, r4
 800ae78:	f000 80a6 	beq.w	800afc8 <_malloc_r+0x1b0>
 800ae7c:	6863      	ldr	r3, [r4, #4]
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	1b5a      	subs	r2, r3, r5
 800ae84:	2a0f      	cmp	r2, #15
 800ae86:	ddf2      	ble.n	800ae6e <_malloc_r+0x56>
 800ae88:	49b9      	ldr	r1, [pc, #740]	; (800b170 <_malloc_r+0x358>)
 800ae8a:	693c      	ldr	r4, [r7, #16]
 800ae8c:	f101 0e08 	add.w	lr, r1, #8
 800ae90:	4574      	cmp	r4, lr
 800ae92:	f000 81b3 	beq.w	800b1fc <_malloc_r+0x3e4>
 800ae96:	6863      	ldr	r3, [r4, #4]
 800ae98:	f023 0303 	bic.w	r3, r3, #3
 800ae9c:	1b5a      	subs	r2, r3, r5
 800ae9e:	2a0f      	cmp	r2, #15
 800aea0:	f300 8199 	bgt.w	800b1d6 <_malloc_r+0x3be>
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	f8c1 e014 	str.w	lr, [r1, #20]
 800aeaa:	f8c1 e010 	str.w	lr, [r1, #16]
 800aeae:	f280 809e 	bge.w	800afee <_malloc_r+0x1d6>
 800aeb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeb6:	f080 8167 	bcs.w	800b188 <_malloc_r+0x370>
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f103 0c01 	add.w	ip, r3, #1
 800aec0:	2201      	movs	r2, #1
 800aec2:	109b      	asrs	r3, r3, #2
 800aec4:	fa02 f303 	lsl.w	r3, r2, r3
 800aec8:	684a      	ldr	r2, [r1, #4]
 800aeca:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 800aece:	f8c4 8008 	str.w	r8, [r4, #8]
 800aed2:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800aed6:	431a      	orrs	r2, r3
 800aed8:	f1a9 0308 	sub.w	r3, r9, #8
 800aedc:	60e3      	str	r3, [r4, #12]
 800aede:	604a      	str	r2, [r1, #4]
 800aee0:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800aee4:	f8c8 400c 	str.w	r4, [r8, #12]
 800aee8:	1083      	asrs	r3, r0, #2
 800aeea:	2401      	movs	r4, #1
 800aeec:	409c      	lsls	r4, r3
 800aeee:	4294      	cmp	r4, r2
 800aef0:	f200 808a 	bhi.w	800b008 <_malloc_r+0x1f0>
 800aef4:	4214      	tst	r4, r2
 800aef6:	d106      	bne.n	800af06 <_malloc_r+0xee>
 800aef8:	f020 0003 	bic.w	r0, r0, #3
 800aefc:	0064      	lsls	r4, r4, #1
 800aefe:	4214      	tst	r4, r2
 800af00:	f100 0004 	add.w	r0, r0, #4
 800af04:	d0fa      	beq.n	800aefc <_malloc_r+0xe4>
 800af06:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800af0a:	46cc      	mov	ip, r9
 800af0c:	4680      	mov	r8, r0
 800af0e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800af12:	458c      	cmp	ip, r1
 800af14:	d107      	bne.n	800af26 <_malloc_r+0x10e>
 800af16:	e173      	b.n	800b200 <_malloc_r+0x3e8>
 800af18:	2a00      	cmp	r2, #0
 800af1a:	f280 8181 	bge.w	800b220 <_malloc_r+0x408>
 800af1e:	68c9      	ldr	r1, [r1, #12]
 800af20:	458c      	cmp	ip, r1
 800af22:	f000 816d 	beq.w	800b200 <_malloc_r+0x3e8>
 800af26:	684b      	ldr	r3, [r1, #4]
 800af28:	f023 0303 	bic.w	r3, r3, #3
 800af2c:	1b5a      	subs	r2, r3, r5
 800af2e:	2a0f      	cmp	r2, #15
 800af30:	ddf2      	ble.n	800af18 <_malloc_r+0x100>
 800af32:	460c      	mov	r4, r1
 800af34:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800af38:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800af3c:	194b      	adds	r3, r1, r5
 800af3e:	f045 0501 	orr.w	r5, r5, #1
 800af42:	604d      	str	r5, [r1, #4]
 800af44:	f042 0101 	orr.w	r1, r2, #1
 800af48:	f8c8 c00c 	str.w	ip, [r8, #12]
 800af4c:	4630      	mov	r0, r6
 800af4e:	f8cc 8008 	str.w	r8, [ip, #8]
 800af52:	617b      	str	r3, [r7, #20]
 800af54:	613b      	str	r3, [r7, #16]
 800af56:	f8c3 e00c 	str.w	lr, [r3, #12]
 800af5a:	f8c3 e008 	str.w	lr, [r3, #8]
 800af5e:	6059      	str	r1, [r3, #4]
 800af60:	509a      	str	r2, [r3, r2]
 800af62:	f000 fa61 	bl	800b428 <__malloc_unlock>
 800af66:	e01f      	b.n	800afa8 <_malloc_r+0x190>
 800af68:	2910      	cmp	r1, #16
 800af6a:	d821      	bhi.n	800afb0 <_malloc_r+0x198>
 800af6c:	f000 fa5a 	bl	800b424 <__malloc_lock>
 800af70:	2510      	movs	r5, #16
 800af72:	2306      	movs	r3, #6
 800af74:	2002      	movs	r0, #2
 800af76:	4f7e      	ldr	r7, [pc, #504]	; (800b170 <_malloc_r+0x358>)
 800af78:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800af7c:	f1a3 0208 	sub.w	r2, r3, #8
 800af80:	685c      	ldr	r4, [r3, #4]
 800af82:	4294      	cmp	r4, r2
 800af84:	f000 8145 	beq.w	800b212 <_malloc_r+0x3fa>
 800af88:	6863      	ldr	r3, [r4, #4]
 800af8a:	68e1      	ldr	r1, [r4, #12]
 800af8c:	68a5      	ldr	r5, [r4, #8]
 800af8e:	f023 0303 	bic.w	r3, r3, #3
 800af92:	4423      	add	r3, r4
 800af94:	4630      	mov	r0, r6
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	60e9      	str	r1, [r5, #12]
 800af9a:	f042 0201 	orr.w	r2, r2, #1
 800af9e:	608d      	str	r5, [r1, #8]
 800afa0:	605a      	str	r2, [r3, #4]
 800afa2:	f000 fa41 	bl	800b428 <__malloc_unlock>
 800afa6:	3408      	adds	r4, #8
 800afa8:	4620      	mov	r0, r4
 800afaa:	b003      	add	sp, #12
 800afac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb0:	2400      	movs	r4, #0
 800afb2:	230c      	movs	r3, #12
 800afb4:	4620      	mov	r0, r4
 800afb6:	6033      	str	r3, [r6, #0]
 800afb8:	b003      	add	sp, #12
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	2380      	movs	r3, #128	; 0x80
 800afc0:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800afc4:	203f      	movs	r0, #63	; 0x3f
 800afc6:	e749      	b.n	800ae5c <_malloc_r+0x44>
 800afc8:	4670      	mov	r0, lr
 800afca:	e75d      	b.n	800ae88 <_malloc_r+0x70>
 800afcc:	4423      	add	r3, r4
 800afce:	68e1      	ldr	r1, [r4, #12]
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	68a5      	ldr	r5, [r4, #8]
 800afd4:	f042 0201 	orr.w	r2, r2, #1
 800afd8:	60e9      	str	r1, [r5, #12]
 800afda:	4630      	mov	r0, r6
 800afdc:	608d      	str	r5, [r1, #8]
 800afde:	605a      	str	r2, [r3, #4]
 800afe0:	f000 fa22 	bl	800b428 <__malloc_unlock>
 800afe4:	3408      	adds	r4, #8
 800afe6:	4620      	mov	r0, r4
 800afe8:	b003      	add	sp, #12
 800afea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afee:	4423      	add	r3, r4
 800aff0:	4630      	mov	r0, r6
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	f042 0201 	orr.w	r2, r2, #1
 800aff8:	605a      	str	r2, [r3, #4]
 800affa:	f000 fa15 	bl	800b428 <__malloc_unlock>
 800affe:	3408      	adds	r4, #8
 800b000:	4620      	mov	r0, r4
 800b002:	b003      	add	sp, #12
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	68bc      	ldr	r4, [r7, #8]
 800b00a:	6863      	ldr	r3, [r4, #4]
 800b00c:	f023 0803 	bic.w	r8, r3, #3
 800b010:	45a8      	cmp	r8, r5
 800b012:	d304      	bcc.n	800b01e <_malloc_r+0x206>
 800b014:	ebc5 0308 	rsb	r3, r5, r8
 800b018:	2b0f      	cmp	r3, #15
 800b01a:	f300 808c 	bgt.w	800b136 <_malloc_r+0x31e>
 800b01e:	4b55      	ldr	r3, [pc, #340]	; (800b174 <_malloc_r+0x35c>)
 800b020:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800b184 <_malloc_r+0x36c>
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	f8d9 3000 	ldr.w	r3, [r9]
 800b02a:	3301      	adds	r3, #1
 800b02c:	442a      	add	r2, r5
 800b02e:	eb04 0a08 	add.w	sl, r4, r8
 800b032:	f000 8160 	beq.w	800b2f6 <_malloc_r+0x4de>
 800b036:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b03a:	320f      	adds	r2, #15
 800b03c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800b040:	f022 020f 	bic.w	r2, r2, #15
 800b044:	4611      	mov	r1, r2
 800b046:	4630      	mov	r0, r6
 800b048:	9201      	str	r2, [sp, #4]
 800b04a:	f000 f9ef 	bl	800b42c <_sbrk_r>
 800b04e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b052:	4683      	mov	fp, r0
 800b054:	9a01      	ldr	r2, [sp, #4]
 800b056:	f000 8158 	beq.w	800b30a <_malloc_r+0x4f2>
 800b05a:	4582      	cmp	sl, r0
 800b05c:	f200 80fc 	bhi.w	800b258 <_malloc_r+0x440>
 800b060:	4b45      	ldr	r3, [pc, #276]	; (800b178 <_malloc_r+0x360>)
 800b062:	6819      	ldr	r1, [r3, #0]
 800b064:	45da      	cmp	sl, fp
 800b066:	4411      	add	r1, r2
 800b068:	6019      	str	r1, [r3, #0]
 800b06a:	f000 8153 	beq.w	800b314 <_malloc_r+0x4fc>
 800b06e:	f8d9 0000 	ldr.w	r0, [r9]
 800b072:	f8df e110 	ldr.w	lr, [pc, #272]	; 800b184 <_malloc_r+0x36c>
 800b076:	3001      	adds	r0, #1
 800b078:	bf1b      	ittet	ne
 800b07a:	ebca 0a0b 	rsbne	sl, sl, fp
 800b07e:	4451      	addne	r1, sl
 800b080:	f8ce b000 	streq.w	fp, [lr]
 800b084:	6019      	strne	r1, [r3, #0]
 800b086:	f01b 0107 	ands.w	r1, fp, #7
 800b08a:	f000 8117 	beq.w	800b2bc <_malloc_r+0x4a4>
 800b08e:	f1c1 0008 	rsb	r0, r1, #8
 800b092:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800b096:	4483      	add	fp, r0
 800b098:	3108      	adds	r1, #8
 800b09a:	445a      	add	r2, fp
 800b09c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800b0a0:	ebc2 0901 	rsb	r9, r2, r1
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	f000 f9bf 	bl	800b42c <_sbrk_r>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	9b01      	ldr	r3, [sp, #4]
 800b0b2:	f000 813f 	beq.w	800b334 <_malloc_r+0x51c>
 800b0b6:	ebcb 0200 	rsb	r2, fp, r0
 800b0ba:	444a      	add	r2, r9
 800b0bc:	f042 0201 	orr.w	r2, r2, #1
 800b0c0:	6819      	ldr	r1, [r3, #0]
 800b0c2:	f8c7 b008 	str.w	fp, [r7, #8]
 800b0c6:	4449      	add	r1, r9
 800b0c8:	42bc      	cmp	r4, r7
 800b0ca:	f8cb 2004 	str.w	r2, [fp, #4]
 800b0ce:	6019      	str	r1, [r3, #0]
 800b0d0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800b178 <_malloc_r+0x360>
 800b0d4:	d016      	beq.n	800b104 <_malloc_r+0x2ec>
 800b0d6:	f1b8 0f0f 	cmp.w	r8, #15
 800b0da:	f240 80fd 	bls.w	800b2d8 <_malloc_r+0x4c0>
 800b0de:	6862      	ldr	r2, [r4, #4]
 800b0e0:	f1a8 030c 	sub.w	r3, r8, #12
 800b0e4:	f023 0307 	bic.w	r3, r3, #7
 800b0e8:	18e0      	adds	r0, r4, r3
 800b0ea:	f002 0201 	and.w	r2, r2, #1
 800b0ee:	f04f 0e05 	mov.w	lr, #5
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	2b0f      	cmp	r3, #15
 800b0f6:	6062      	str	r2, [r4, #4]
 800b0f8:	f8c0 e004 	str.w	lr, [r0, #4]
 800b0fc:	f8c0 e008 	str.w	lr, [r0, #8]
 800b100:	f200 811c 	bhi.w	800b33c <_malloc_r+0x524>
 800b104:	4b1d      	ldr	r3, [pc, #116]	; (800b17c <_malloc_r+0x364>)
 800b106:	68bc      	ldr	r4, [r7, #8]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	4291      	cmp	r1, r2
 800b10c:	bf88      	it	hi
 800b10e:	6019      	strhi	r1, [r3, #0]
 800b110:	4b1b      	ldr	r3, [pc, #108]	; (800b180 <_malloc_r+0x368>)
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	4291      	cmp	r1, r2
 800b116:	6862      	ldr	r2, [r4, #4]
 800b118:	bf88      	it	hi
 800b11a:	6019      	strhi	r1, [r3, #0]
 800b11c:	f022 0203 	bic.w	r2, r2, #3
 800b120:	4295      	cmp	r5, r2
 800b122:	eba2 0305 	sub.w	r3, r2, r5
 800b126:	d801      	bhi.n	800b12c <_malloc_r+0x314>
 800b128:	2b0f      	cmp	r3, #15
 800b12a:	dc04      	bgt.n	800b136 <_malloc_r+0x31e>
 800b12c:	4630      	mov	r0, r6
 800b12e:	f000 f97b 	bl	800b428 <__malloc_unlock>
 800b132:	2400      	movs	r4, #0
 800b134:	e738      	b.n	800afa8 <_malloc_r+0x190>
 800b136:	1962      	adds	r2, r4, r5
 800b138:	f043 0301 	orr.w	r3, r3, #1
 800b13c:	f045 0501 	orr.w	r5, r5, #1
 800b140:	6065      	str	r5, [r4, #4]
 800b142:	4630      	mov	r0, r6
 800b144:	60ba      	str	r2, [r7, #8]
 800b146:	6053      	str	r3, [r2, #4]
 800b148:	f000 f96e 	bl	800b428 <__malloc_unlock>
 800b14c:	3408      	adds	r4, #8
 800b14e:	4620      	mov	r0, r4
 800b150:	b003      	add	sp, #12
 800b152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b156:	2b14      	cmp	r3, #20
 800b158:	d971      	bls.n	800b23e <_malloc_r+0x426>
 800b15a:	2b54      	cmp	r3, #84	; 0x54
 800b15c:	f200 80a4 	bhi.w	800b2a8 <_malloc_r+0x490>
 800b160:	0b28      	lsrs	r0, r5, #12
 800b162:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800b166:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800b16a:	306e      	adds	r0, #110	; 0x6e
 800b16c:	e676      	b.n	800ae5c <_malloc_r+0x44>
 800b16e:	bf00      	nop
 800b170:	2000058c 	.word	0x2000058c
 800b174:	20004fdc 	.word	0x20004fdc
 800b178:	20004fe0 	.word	0x20004fe0
 800b17c:	20004fd8 	.word	0x20004fd8
 800b180:	20004fd4 	.word	0x20004fd4
 800b184:	20000998 	.word	0x20000998
 800b188:	0a5a      	lsrs	r2, r3, #9
 800b18a:	2a04      	cmp	r2, #4
 800b18c:	d95e      	bls.n	800b24c <_malloc_r+0x434>
 800b18e:	2a14      	cmp	r2, #20
 800b190:	f200 80b3 	bhi.w	800b2fa <_malloc_r+0x4e2>
 800b194:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800b198:	0049      	lsls	r1, r1, #1
 800b19a:	325b      	adds	r2, #91	; 0x5b
 800b19c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800b1a0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800b1a4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800b384 <_malloc_r+0x56c>
 800b1a8:	f1ac 0c08 	sub.w	ip, ip, #8
 800b1ac:	458c      	cmp	ip, r1
 800b1ae:	f000 8088 	beq.w	800b2c2 <_malloc_r+0x4aa>
 800b1b2:	684a      	ldr	r2, [r1, #4]
 800b1b4:	f022 0203 	bic.w	r2, r2, #3
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d202      	bcs.n	800b1c2 <_malloc_r+0x3aa>
 800b1bc:	6889      	ldr	r1, [r1, #8]
 800b1be:	458c      	cmp	ip, r1
 800b1c0:	d1f7      	bne.n	800b1b2 <_malloc_r+0x39a>
 800b1c2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	f8c4 c00c 	str.w	ip, [r4, #12]
 800b1cc:	60a1      	str	r1, [r4, #8]
 800b1ce:	f8cc 4008 	str.w	r4, [ip, #8]
 800b1d2:	60cc      	str	r4, [r1, #12]
 800b1d4:	e688      	b.n	800aee8 <_malloc_r+0xd0>
 800b1d6:	1963      	adds	r3, r4, r5
 800b1d8:	f042 0701 	orr.w	r7, r2, #1
 800b1dc:	f045 0501 	orr.w	r5, r5, #1
 800b1e0:	6065      	str	r5, [r4, #4]
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	614b      	str	r3, [r1, #20]
 800b1e6:	610b      	str	r3, [r1, #16]
 800b1e8:	f8c3 e00c 	str.w	lr, [r3, #12]
 800b1ec:	f8c3 e008 	str.w	lr, [r3, #8]
 800b1f0:	605f      	str	r7, [r3, #4]
 800b1f2:	509a      	str	r2, [r3, r2]
 800b1f4:	3408      	adds	r4, #8
 800b1f6:	f000 f917 	bl	800b428 <__malloc_unlock>
 800b1fa:	e6d5      	b.n	800afa8 <_malloc_r+0x190>
 800b1fc:	684a      	ldr	r2, [r1, #4]
 800b1fe:	e673      	b.n	800aee8 <_malloc_r+0xd0>
 800b200:	f108 0801 	add.w	r8, r8, #1
 800b204:	f018 0f03 	tst.w	r8, #3
 800b208:	f10c 0c08 	add.w	ip, ip, #8
 800b20c:	f47f ae7f 	bne.w	800af0e <_malloc_r+0xf6>
 800b210:	e030      	b.n	800b274 <_malloc_r+0x45c>
 800b212:	68dc      	ldr	r4, [r3, #12]
 800b214:	42a3      	cmp	r3, r4
 800b216:	bf08      	it	eq
 800b218:	3002      	addeq	r0, #2
 800b21a:	f43f ae35 	beq.w	800ae88 <_malloc_r+0x70>
 800b21e:	e6b3      	b.n	800af88 <_malloc_r+0x170>
 800b220:	440b      	add	r3, r1
 800b222:	460c      	mov	r4, r1
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	68c9      	ldr	r1, [r1, #12]
 800b228:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800b22c:	f042 0201 	orr.w	r2, r2, #1
 800b230:	605a      	str	r2, [r3, #4]
 800b232:	4630      	mov	r0, r6
 800b234:	60e9      	str	r1, [r5, #12]
 800b236:	608d      	str	r5, [r1, #8]
 800b238:	f000 f8f6 	bl	800b428 <__malloc_unlock>
 800b23c:	e6b4      	b.n	800afa8 <_malloc_r+0x190>
 800b23e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800b242:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800b246:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800b24a:	e607      	b.n	800ae5c <_malloc_r+0x44>
 800b24c:	099a      	lsrs	r2, r3, #6
 800b24e:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800b252:	0049      	lsls	r1, r1, #1
 800b254:	3238      	adds	r2, #56	; 0x38
 800b256:	e7a1      	b.n	800b19c <_malloc_r+0x384>
 800b258:	42bc      	cmp	r4, r7
 800b25a:	4b4a      	ldr	r3, [pc, #296]	; (800b384 <_malloc_r+0x56c>)
 800b25c:	f43f af00 	beq.w	800b060 <_malloc_r+0x248>
 800b260:	689c      	ldr	r4, [r3, #8]
 800b262:	6862      	ldr	r2, [r4, #4]
 800b264:	f022 0203 	bic.w	r2, r2, #3
 800b268:	e75a      	b.n	800b120 <_malloc_r+0x308>
 800b26a:	f859 3908 	ldr.w	r3, [r9], #-8
 800b26e:	4599      	cmp	r9, r3
 800b270:	f040 8082 	bne.w	800b378 <_malloc_r+0x560>
 800b274:	f010 0f03 	tst.w	r0, #3
 800b278:	f100 30ff 	add.w	r0, r0, #4294967295
 800b27c:	d1f5      	bne.n	800b26a <_malloc_r+0x452>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	ea23 0304 	bic.w	r3, r3, r4
 800b284:	607b      	str	r3, [r7, #4]
 800b286:	0064      	lsls	r4, r4, #1
 800b288:	429c      	cmp	r4, r3
 800b28a:	f63f aebd 	bhi.w	800b008 <_malloc_r+0x1f0>
 800b28e:	2c00      	cmp	r4, #0
 800b290:	f43f aeba 	beq.w	800b008 <_malloc_r+0x1f0>
 800b294:	421c      	tst	r4, r3
 800b296:	4640      	mov	r0, r8
 800b298:	f47f ae35 	bne.w	800af06 <_malloc_r+0xee>
 800b29c:	0064      	lsls	r4, r4, #1
 800b29e:	421c      	tst	r4, r3
 800b2a0:	f100 0004 	add.w	r0, r0, #4
 800b2a4:	d0fa      	beq.n	800b29c <_malloc_r+0x484>
 800b2a6:	e62e      	b.n	800af06 <_malloc_r+0xee>
 800b2a8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b2ac:	d818      	bhi.n	800b2e0 <_malloc_r+0x4c8>
 800b2ae:	0be8      	lsrs	r0, r5, #15
 800b2b0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800b2b4:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800b2b8:	3077      	adds	r0, #119	; 0x77
 800b2ba:	e5cf      	b.n	800ae5c <_malloc_r+0x44>
 800b2bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b2c0:	e6eb      	b.n	800b09a <_malloc_r+0x282>
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2c8:	1092      	asrs	r2, r2, #2
 800b2ca:	fa01 f202 	lsl.w	r2, r1, r2
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	f8c8 2004 	str.w	r2, [r8, #4]
 800b2d4:	4661      	mov	r1, ip
 800b2d6:	e777      	b.n	800b1c8 <_malloc_r+0x3b0>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	f8cb 3004 	str.w	r3, [fp, #4]
 800b2de:	e725      	b.n	800b12c <_malloc_r+0x314>
 800b2e0:	f240 5254 	movw	r2, #1364	; 0x554
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d820      	bhi.n	800b32a <_malloc_r+0x512>
 800b2e8:	0ca8      	lsrs	r0, r5, #18
 800b2ea:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800b2ee:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800b2f2:	307c      	adds	r0, #124	; 0x7c
 800b2f4:	e5b2      	b.n	800ae5c <_malloc_r+0x44>
 800b2f6:	3210      	adds	r2, #16
 800b2f8:	e6a4      	b.n	800b044 <_malloc_r+0x22c>
 800b2fa:	2a54      	cmp	r2, #84	; 0x54
 800b2fc:	d826      	bhi.n	800b34c <_malloc_r+0x534>
 800b2fe:	0b1a      	lsrs	r2, r3, #12
 800b300:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800b304:	0049      	lsls	r1, r1, #1
 800b306:	326e      	adds	r2, #110	; 0x6e
 800b308:	e748      	b.n	800b19c <_malloc_r+0x384>
 800b30a:	68bc      	ldr	r4, [r7, #8]
 800b30c:	6862      	ldr	r2, [r4, #4]
 800b30e:	f022 0203 	bic.w	r2, r2, #3
 800b312:	e705      	b.n	800b120 <_malloc_r+0x308>
 800b314:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800b318:	2800      	cmp	r0, #0
 800b31a:	f47f aea8 	bne.w	800b06e <_malloc_r+0x256>
 800b31e:	4442      	add	r2, r8
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	f042 0201 	orr.w	r2, r2, #1
 800b326:	605a      	str	r2, [r3, #4]
 800b328:	e6ec      	b.n	800b104 <_malloc_r+0x2ec>
 800b32a:	23fe      	movs	r3, #254	; 0xfe
 800b32c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800b330:	207e      	movs	r0, #126	; 0x7e
 800b332:	e593      	b.n	800ae5c <_malloc_r+0x44>
 800b334:	2201      	movs	r2, #1
 800b336:	f04f 0900 	mov.w	r9, #0
 800b33a:	e6c1      	b.n	800b0c0 <_malloc_r+0x2a8>
 800b33c:	f104 0108 	add.w	r1, r4, #8
 800b340:	4630      	mov	r0, r6
 800b342:	f000 f941 	bl	800b5c8 <_free_r>
 800b346:	f8d9 1000 	ldr.w	r1, [r9]
 800b34a:	e6db      	b.n	800b104 <_malloc_r+0x2ec>
 800b34c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b350:	d805      	bhi.n	800b35e <_malloc_r+0x546>
 800b352:	0bda      	lsrs	r2, r3, #15
 800b354:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800b358:	0049      	lsls	r1, r1, #1
 800b35a:	3277      	adds	r2, #119	; 0x77
 800b35c:	e71e      	b.n	800b19c <_malloc_r+0x384>
 800b35e:	f240 5154 	movw	r1, #1364	; 0x554
 800b362:	428a      	cmp	r2, r1
 800b364:	d805      	bhi.n	800b372 <_malloc_r+0x55a>
 800b366:	0c9a      	lsrs	r2, r3, #18
 800b368:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800b36c:	0049      	lsls	r1, r1, #1
 800b36e:	327c      	adds	r2, #124	; 0x7c
 800b370:	e714      	b.n	800b19c <_malloc_r+0x384>
 800b372:	21fe      	movs	r1, #254	; 0xfe
 800b374:	227e      	movs	r2, #126	; 0x7e
 800b376:	e711      	b.n	800b19c <_malloc_r+0x384>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	e784      	b.n	800b286 <_malloc_r+0x46e>
 800b37c:	08e8      	lsrs	r0, r5, #3
 800b37e:	1c43      	adds	r3, r0, #1
 800b380:	005b      	lsls	r3, r3, #1
 800b382:	e5f8      	b.n	800af76 <_malloc_r+0x15e>
 800b384:	2000058c 	.word	0x2000058c

0800b388 <memset>:
 800b388:	b470      	push	{r4, r5, r6}
 800b38a:	0784      	lsls	r4, r0, #30
 800b38c:	d046      	beq.n	800b41c <memset+0x94>
 800b38e:	1e54      	subs	r4, r2, #1
 800b390:	2a00      	cmp	r2, #0
 800b392:	d041      	beq.n	800b418 <memset+0x90>
 800b394:	b2cd      	uxtb	r5, r1
 800b396:	4603      	mov	r3, r0
 800b398:	e002      	b.n	800b3a0 <memset+0x18>
 800b39a:	1e62      	subs	r2, r4, #1
 800b39c:	b3e4      	cbz	r4, 800b418 <memset+0x90>
 800b39e:	4614      	mov	r4, r2
 800b3a0:	f803 5b01 	strb.w	r5, [r3], #1
 800b3a4:	079a      	lsls	r2, r3, #30
 800b3a6:	d1f8      	bne.n	800b39a <memset+0x12>
 800b3a8:	2c03      	cmp	r4, #3
 800b3aa:	d92e      	bls.n	800b40a <memset+0x82>
 800b3ac:	b2cd      	uxtb	r5, r1
 800b3ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800b3b2:	2c0f      	cmp	r4, #15
 800b3b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800b3b8:	d919      	bls.n	800b3ee <memset+0x66>
 800b3ba:	f103 0210 	add.w	r2, r3, #16
 800b3be:	4626      	mov	r6, r4
 800b3c0:	3e10      	subs	r6, #16
 800b3c2:	2e0f      	cmp	r6, #15
 800b3c4:	f842 5c10 	str.w	r5, [r2, #-16]
 800b3c8:	f842 5c0c 	str.w	r5, [r2, #-12]
 800b3cc:	f842 5c08 	str.w	r5, [r2, #-8]
 800b3d0:	f842 5c04 	str.w	r5, [r2, #-4]
 800b3d4:	f102 0210 	add.w	r2, r2, #16
 800b3d8:	d8f2      	bhi.n	800b3c0 <memset+0x38>
 800b3da:	f1a4 0210 	sub.w	r2, r4, #16
 800b3de:	f022 020f 	bic.w	r2, r2, #15
 800b3e2:	f004 040f 	and.w	r4, r4, #15
 800b3e6:	3210      	adds	r2, #16
 800b3e8:	2c03      	cmp	r4, #3
 800b3ea:	4413      	add	r3, r2
 800b3ec:	d90d      	bls.n	800b40a <memset+0x82>
 800b3ee:	461e      	mov	r6, r3
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	3a04      	subs	r2, #4
 800b3f4:	2a03      	cmp	r2, #3
 800b3f6:	f846 5b04 	str.w	r5, [r6], #4
 800b3fa:	d8fa      	bhi.n	800b3f2 <memset+0x6a>
 800b3fc:	1f22      	subs	r2, r4, #4
 800b3fe:	f022 0203 	bic.w	r2, r2, #3
 800b402:	3204      	adds	r2, #4
 800b404:	4413      	add	r3, r2
 800b406:	f004 0403 	and.w	r4, r4, #3
 800b40a:	b12c      	cbz	r4, 800b418 <memset+0x90>
 800b40c:	b2c9      	uxtb	r1, r1
 800b40e:	441c      	add	r4, r3
 800b410:	f803 1b01 	strb.w	r1, [r3], #1
 800b414:	42a3      	cmp	r3, r4
 800b416:	d1fb      	bne.n	800b410 <memset+0x88>
 800b418:	bc70      	pop	{r4, r5, r6}
 800b41a:	4770      	bx	lr
 800b41c:	4614      	mov	r4, r2
 800b41e:	4603      	mov	r3, r0
 800b420:	e7c2      	b.n	800b3a8 <memset+0x20>
 800b422:	bf00      	nop

0800b424 <__malloc_lock>:
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop

0800b428 <__malloc_unlock>:
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop

0800b42c <_sbrk_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4c07      	ldr	r4, [pc, #28]	; (800b44c <_sbrk_r+0x20>)
 800b430:	2300      	movs	r3, #0
 800b432:	4605      	mov	r5, r0
 800b434:	4608      	mov	r0, r1
 800b436:	6023      	str	r3, [r4, #0]
 800b438:	f003 fb38 	bl	800eaac <_sbrk>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d000      	beq.n	800b442 <_sbrk_r+0x16>
 800b440:	bd38      	pop	{r3, r4, r5, pc}
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0fb      	beq.n	800b440 <_sbrk_r+0x14>
 800b448:	602b      	str	r3, [r5, #0]
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	20006ee0 	.word	0x20006ee0

0800b450 <_vsnprintf_r>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	2a00      	cmp	r2, #0
 800b454:	b09a      	sub	sp, #104	; 0x68
 800b456:	4605      	mov	r5, r0
 800b458:	db2f      	blt.n	800b4ba <_vsnprintf_r+0x6a>
 800b45a:	4614      	mov	r4, r2
 800b45c:	461a      	mov	r2, r3
 800b45e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b462:	9100      	str	r1, [sp, #0]
 800b464:	9104      	str	r1, [sp, #16]
 800b466:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b46a:	d011      	beq.n	800b490 <_vsnprintf_r+0x40>
 800b46c:	3c01      	subs	r4, #1
 800b46e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800b472:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b474:	9402      	str	r4, [sp, #8]
 800b476:	4669      	mov	r1, sp
 800b478:	9405      	str	r4, [sp, #20]
 800b47a:	f8ad 600e 	strh.w	r6, [sp, #14]
 800b47e:	f000 f98b 	bl	800b798 <_svfprintf_r>
 800b482:	1c42      	adds	r2, r0, #1
 800b484:	db12      	blt.n	800b4ac <_vsnprintf_r+0x5c>
 800b486:	9b00      	ldr	r3, [sp, #0]
 800b488:	2200      	movs	r2, #0
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	b01a      	add	sp, #104	; 0x68
 800b48e:	bd70      	pop	{r4, r5, r6, pc}
 800b490:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b492:	9402      	str	r4, [sp, #8]
 800b494:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800b498:	4669      	mov	r1, sp
 800b49a:	9405      	str	r4, [sp, #20]
 800b49c:	f8ad 600e 	strh.w	r6, [sp, #14]
 800b4a0:	f000 f97a 	bl	800b798 <_svfprintf_r>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	db04      	blt.n	800b4b2 <_vsnprintf_r+0x62>
 800b4a8:	b01a      	add	sp, #104	; 0x68
 800b4aa:	bd70      	pop	{r4, r5, r6, pc}
 800b4ac:	238b      	movs	r3, #139	; 0x8b
 800b4ae:	602b      	str	r3, [r5, #0]
 800b4b0:	e7e9      	b.n	800b486 <_vsnprintf_r+0x36>
 800b4b2:	238b      	movs	r3, #139	; 0x8b
 800b4b4:	602b      	str	r3, [r5, #0]
 800b4b6:	b01a      	add	sp, #104	; 0x68
 800b4b8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ba:	238b      	movs	r3, #139	; 0x8b
 800b4bc:	6003      	str	r3, [r0, #0]
 800b4be:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c2:	e7f1      	b.n	800b4a8 <_vsnprintf_r+0x58>

0800b4c4 <vsnprintf>:
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	4c05      	ldr	r4, [pc, #20]	; (800b4e0 <vsnprintf+0x1c>)
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	6824      	ldr	r4, [r4, #0]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	460a      	mov	r2, r1
 800b4d2:	4601      	mov	r1, r0
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7ff ffbb 	bl	800b450 <_vsnprintf_r>
 800b4da:	b002      	add	sp, #8
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000588 	.word	0x20000588

0800b4e4 <register_fini>:
 800b4e4:	4b02      	ldr	r3, [pc, #8]	; (800b4f0 <register_fini+0xc>)
 800b4e6:	b113      	cbz	r3, 800b4ee <register_fini+0xa>
 800b4e8:	4802      	ldr	r0, [pc, #8]	; (800b4f4 <register_fini+0x10>)
 800b4ea:	f000 b805 	b.w	800b4f8 <atexit>
 800b4ee:	4770      	bx	lr
 800b4f0:	00000000 	.word	0x00000000
 800b4f4:	0800b505 	.word	0x0800b505

0800b4f8 <atexit>:
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	4618      	mov	r0, r3
 800b500:	f001 bcbc 	b.w	800ce7c <__register_exitproc>

0800b504 <__libc_fini_array>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d07      	ldr	r5, [pc, #28]	; (800b524 <__libc_fini_array+0x20>)
 800b508:	4c07      	ldr	r4, [pc, #28]	; (800b528 <__libc_fini_array+0x24>)
 800b50a:	1b2c      	subs	r4, r5, r4
 800b50c:	10a4      	asrs	r4, r4, #2
 800b50e:	d005      	beq.n	800b51c <__libc_fini_array+0x18>
 800b510:	3c01      	subs	r4, #1
 800b512:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b516:	4798      	blx	r3
 800b518:	2c00      	cmp	r4, #0
 800b51a:	d1f9      	bne.n	800b510 <__libc_fini_array+0xc>
 800b51c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b520:	f003 bad8 	b.w	800ead4 <_fini>
 800b524:	0800f254 	.word	0x0800f254
 800b528:	0800f250 	.word	0x0800f250

0800b52c <_malloc_trim_r>:
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	4f23      	ldr	r7, [pc, #140]	; (800b5bc <_malloc_trim_r+0x90>)
 800b530:	460c      	mov	r4, r1
 800b532:	4606      	mov	r6, r0
 800b534:	f7ff ff76 	bl	800b424 <__malloc_lock>
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	685d      	ldr	r5, [r3, #4]
 800b53c:	f025 0503 	bic.w	r5, r5, #3
 800b540:	1b29      	subs	r1, r5, r4
 800b542:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800b546:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800b54a:	f021 010f 	bic.w	r1, r1, #15
 800b54e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800b552:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800b556:	db07      	blt.n	800b568 <_malloc_trim_r+0x3c>
 800b558:	2100      	movs	r1, #0
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7ff ff66 	bl	800b42c <_sbrk_r>
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	442b      	add	r3, r5
 800b564:	4298      	cmp	r0, r3
 800b566:	d004      	beq.n	800b572 <_malloc_trim_r+0x46>
 800b568:	4630      	mov	r0, r6
 800b56a:	f7ff ff5d 	bl	800b428 <__malloc_unlock>
 800b56e:	2000      	movs	r0, #0
 800b570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b572:	4261      	negs	r1, r4
 800b574:	4630      	mov	r0, r6
 800b576:	f7ff ff59 	bl	800b42c <_sbrk_r>
 800b57a:	3001      	adds	r0, #1
 800b57c:	d00d      	beq.n	800b59a <_malloc_trim_r+0x6e>
 800b57e:	4b10      	ldr	r3, [pc, #64]	; (800b5c0 <_malloc_trim_r+0x94>)
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	6819      	ldr	r1, [r3, #0]
 800b584:	1b2d      	subs	r5, r5, r4
 800b586:	f045 0501 	orr.w	r5, r5, #1
 800b58a:	4630      	mov	r0, r6
 800b58c:	1b09      	subs	r1, r1, r4
 800b58e:	6055      	str	r5, [r2, #4]
 800b590:	6019      	str	r1, [r3, #0]
 800b592:	f7ff ff49 	bl	800b428 <__malloc_unlock>
 800b596:	2001      	movs	r0, #1
 800b598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b59a:	2100      	movs	r1, #0
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff ff45 	bl	800b42c <_sbrk_r>
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	1a83      	subs	r3, r0, r2
 800b5a6:	2b0f      	cmp	r3, #15
 800b5a8:	ddde      	ble.n	800b568 <_malloc_trim_r+0x3c>
 800b5aa:	4c06      	ldr	r4, [pc, #24]	; (800b5c4 <_malloc_trim_r+0x98>)
 800b5ac:	4904      	ldr	r1, [pc, #16]	; (800b5c0 <_malloc_trim_r+0x94>)
 800b5ae:	6824      	ldr	r4, [r4, #0]
 800b5b0:	f043 0301 	orr.w	r3, r3, #1
 800b5b4:	1b00      	subs	r0, r0, r4
 800b5b6:	6053      	str	r3, [r2, #4]
 800b5b8:	6008      	str	r0, [r1, #0]
 800b5ba:	e7d5      	b.n	800b568 <_malloc_trim_r+0x3c>
 800b5bc:	2000058c 	.word	0x2000058c
 800b5c0:	20004fe0 	.word	0x20004fe0
 800b5c4:	20000998 	.word	0x20000998

0800b5c8 <_free_r>:
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	d045      	beq.n	800b658 <_free_r+0x90>
 800b5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d0:	460d      	mov	r5, r1
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	f7ff ff26 	bl	800b424 <__malloc_lock>
 800b5d8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800b5dc:	496a      	ldr	r1, [pc, #424]	; (800b788 <_free_r+0x1c0>)
 800b5de:	f027 0301 	bic.w	r3, r7, #1
 800b5e2:	f1a5 0408 	sub.w	r4, r5, #8
 800b5e6:	18e2      	adds	r2, r4, r3
 800b5e8:	688e      	ldr	r6, [r1, #8]
 800b5ea:	6850      	ldr	r0, [r2, #4]
 800b5ec:	42b2      	cmp	r2, r6
 800b5ee:	f020 0003 	bic.w	r0, r0, #3
 800b5f2:	d062      	beq.n	800b6ba <_free_r+0xf2>
 800b5f4:	07fe      	lsls	r6, r7, #31
 800b5f6:	6050      	str	r0, [r2, #4]
 800b5f8:	d40b      	bmi.n	800b612 <_free_r+0x4a>
 800b5fa:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800b5fe:	1be4      	subs	r4, r4, r7
 800b600:	f101 0e08 	add.w	lr, r1, #8
 800b604:	68a5      	ldr	r5, [r4, #8]
 800b606:	4575      	cmp	r5, lr
 800b608:	443b      	add	r3, r7
 800b60a:	d06f      	beq.n	800b6ec <_free_r+0x124>
 800b60c:	68e7      	ldr	r7, [r4, #12]
 800b60e:	60ef      	str	r7, [r5, #12]
 800b610:	60bd      	str	r5, [r7, #8]
 800b612:	1815      	adds	r5, r2, r0
 800b614:	686d      	ldr	r5, [r5, #4]
 800b616:	07ed      	lsls	r5, r5, #31
 800b618:	d542      	bpl.n	800b6a0 <_free_r+0xd8>
 800b61a:	f043 0201 	orr.w	r2, r3, #1
 800b61e:	6062      	str	r2, [r4, #4]
 800b620:	50e3      	str	r3, [r4, r3]
 800b622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b626:	d218      	bcs.n	800b65a <_free_r+0x92>
 800b628:	08db      	lsrs	r3, r3, #3
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	684d      	ldr	r5, [r1, #4]
 800b62e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800b632:	60a7      	str	r7, [r4, #8]
 800b634:	2001      	movs	r0, #1
 800b636:	109b      	asrs	r3, r3, #2
 800b638:	fa00 f303 	lsl.w	r3, r0, r3
 800b63c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800b640:	431d      	orrs	r5, r3
 800b642:	3808      	subs	r0, #8
 800b644:	60e0      	str	r0, [r4, #12]
 800b646:	604d      	str	r5, [r1, #4]
 800b648:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 800b64c:	60fc      	str	r4, [r7, #12]
 800b64e:	4640      	mov	r0, r8
 800b650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b654:	f7ff bee8 	b.w	800b428 <__malloc_unlock>
 800b658:	4770      	bx	lr
 800b65a:	0a5a      	lsrs	r2, r3, #9
 800b65c:	2a04      	cmp	r2, #4
 800b65e:	d853      	bhi.n	800b708 <_free_r+0x140>
 800b660:	099a      	lsrs	r2, r3, #6
 800b662:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800b666:	007f      	lsls	r7, r7, #1
 800b668:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800b66c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800b670:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 800b674:	4944      	ldr	r1, [pc, #272]	; (800b788 <_free_r+0x1c0>)
 800b676:	3808      	subs	r0, #8
 800b678:	4290      	cmp	r0, r2
 800b67a:	d04d      	beq.n	800b718 <_free_r+0x150>
 800b67c:	6851      	ldr	r1, [r2, #4]
 800b67e:	f021 0103 	bic.w	r1, r1, #3
 800b682:	428b      	cmp	r3, r1
 800b684:	d202      	bcs.n	800b68c <_free_r+0xc4>
 800b686:	6892      	ldr	r2, [r2, #8]
 800b688:	4290      	cmp	r0, r2
 800b68a:	d1f7      	bne.n	800b67c <_free_r+0xb4>
 800b68c:	68d0      	ldr	r0, [r2, #12]
 800b68e:	60e0      	str	r0, [r4, #12]
 800b690:	60a2      	str	r2, [r4, #8]
 800b692:	6084      	str	r4, [r0, #8]
 800b694:	60d4      	str	r4, [r2, #12]
 800b696:	4640      	mov	r0, r8
 800b698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69c:	f7ff bec4 	b.w	800b428 <__malloc_unlock>
 800b6a0:	6895      	ldr	r5, [r2, #8]
 800b6a2:	4f3a      	ldr	r7, [pc, #232]	; (800b78c <_free_r+0x1c4>)
 800b6a4:	42bd      	cmp	r5, r7
 800b6a6:	4403      	add	r3, r0
 800b6a8:	d03f      	beq.n	800b72a <_free_r+0x162>
 800b6aa:	68d0      	ldr	r0, [r2, #12]
 800b6ac:	60e8      	str	r0, [r5, #12]
 800b6ae:	f043 0201 	orr.w	r2, r3, #1
 800b6b2:	6085      	str	r5, [r0, #8]
 800b6b4:	6062      	str	r2, [r4, #4]
 800b6b6:	50e3      	str	r3, [r4, r3]
 800b6b8:	e7b3      	b.n	800b622 <_free_r+0x5a>
 800b6ba:	07ff      	lsls	r7, r7, #31
 800b6bc:	4403      	add	r3, r0
 800b6be:	d407      	bmi.n	800b6d0 <_free_r+0x108>
 800b6c0:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800b6c4:	1aa4      	subs	r4, r4, r2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	68a0      	ldr	r0, [r4, #8]
 800b6ca:	68e2      	ldr	r2, [r4, #12]
 800b6cc:	60c2      	str	r2, [r0, #12]
 800b6ce:	6090      	str	r0, [r2, #8]
 800b6d0:	4a2f      	ldr	r2, [pc, #188]	; (800b790 <_free_r+0x1c8>)
 800b6d2:	6812      	ldr	r2, [r2, #0]
 800b6d4:	f043 0001 	orr.w	r0, r3, #1
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	6060      	str	r0, [r4, #4]
 800b6dc:	608c      	str	r4, [r1, #8]
 800b6de:	d3b6      	bcc.n	800b64e <_free_r+0x86>
 800b6e0:	4b2c      	ldr	r3, [pc, #176]	; (800b794 <_free_r+0x1cc>)
 800b6e2:	4640      	mov	r0, r8
 800b6e4:	6819      	ldr	r1, [r3, #0]
 800b6e6:	f7ff ff21 	bl	800b52c <_malloc_trim_r>
 800b6ea:	e7b0      	b.n	800b64e <_free_r+0x86>
 800b6ec:	1811      	adds	r1, r2, r0
 800b6ee:	6849      	ldr	r1, [r1, #4]
 800b6f0:	07c9      	lsls	r1, r1, #31
 800b6f2:	d444      	bmi.n	800b77e <_free_r+0x1b6>
 800b6f4:	6891      	ldr	r1, [r2, #8]
 800b6f6:	68d2      	ldr	r2, [r2, #12]
 800b6f8:	60ca      	str	r2, [r1, #12]
 800b6fa:	4403      	add	r3, r0
 800b6fc:	f043 0001 	orr.w	r0, r3, #1
 800b700:	6091      	str	r1, [r2, #8]
 800b702:	6060      	str	r0, [r4, #4]
 800b704:	50e3      	str	r3, [r4, r3]
 800b706:	e7a2      	b.n	800b64e <_free_r+0x86>
 800b708:	2a14      	cmp	r2, #20
 800b70a:	d817      	bhi.n	800b73c <_free_r+0x174>
 800b70c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800b710:	007f      	lsls	r7, r7, #1
 800b712:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800b716:	e7a9      	b.n	800b66c <_free_r+0xa4>
 800b718:	10aa      	asrs	r2, r5, #2
 800b71a:	684b      	ldr	r3, [r1, #4]
 800b71c:	2501      	movs	r5, #1
 800b71e:	fa05 f202 	lsl.w	r2, r5, r2
 800b722:	4313      	orrs	r3, r2
 800b724:	604b      	str	r3, [r1, #4]
 800b726:	4602      	mov	r2, r0
 800b728:	e7b1      	b.n	800b68e <_free_r+0xc6>
 800b72a:	f043 0201 	orr.w	r2, r3, #1
 800b72e:	614c      	str	r4, [r1, #20]
 800b730:	610c      	str	r4, [r1, #16]
 800b732:	60e5      	str	r5, [r4, #12]
 800b734:	60a5      	str	r5, [r4, #8]
 800b736:	6062      	str	r2, [r4, #4]
 800b738:	50e3      	str	r3, [r4, r3]
 800b73a:	e788      	b.n	800b64e <_free_r+0x86>
 800b73c:	2a54      	cmp	r2, #84	; 0x54
 800b73e:	d806      	bhi.n	800b74e <_free_r+0x186>
 800b740:	0b1a      	lsrs	r2, r3, #12
 800b742:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800b746:	007f      	lsls	r7, r7, #1
 800b748:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 800b74c:	e78e      	b.n	800b66c <_free_r+0xa4>
 800b74e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b752:	d806      	bhi.n	800b762 <_free_r+0x19a>
 800b754:	0bda      	lsrs	r2, r3, #15
 800b756:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800b75a:	007f      	lsls	r7, r7, #1
 800b75c:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800b760:	e784      	b.n	800b66c <_free_r+0xa4>
 800b762:	f240 5054 	movw	r0, #1364	; 0x554
 800b766:	4282      	cmp	r2, r0
 800b768:	d806      	bhi.n	800b778 <_free_r+0x1b0>
 800b76a:	0c9a      	lsrs	r2, r3, #18
 800b76c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800b770:	007f      	lsls	r7, r7, #1
 800b772:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800b776:	e779      	b.n	800b66c <_free_r+0xa4>
 800b778:	27fe      	movs	r7, #254	; 0xfe
 800b77a:	257e      	movs	r5, #126	; 0x7e
 800b77c:	e776      	b.n	800b66c <_free_r+0xa4>
 800b77e:	f043 0201 	orr.w	r2, r3, #1
 800b782:	6062      	str	r2, [r4, #4]
 800b784:	50e3      	str	r3, [r4, r3]
 800b786:	e762      	b.n	800b64e <_free_r+0x86>
 800b788:	2000058c 	.word	0x2000058c
 800b78c:	20000594 	.word	0x20000594
 800b790:	20000994 	.word	0x20000994
 800b794:	20004fdc 	.word	0x20004fdc

0800b798 <_svfprintf_r>:
 800b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79c:	b0c1      	sub	sp, #260	; 0x104
 800b79e:	460c      	mov	r4, r1
 800b7a0:	9105      	str	r1, [sp, #20]
 800b7a2:	4615      	mov	r5, r2
 800b7a4:	930a      	str	r3, [sp, #40]	; 0x28
 800b7a6:	9006      	str	r0, [sp, #24]
 800b7a8:	f002 fb68 	bl	800de7c <_localeconv_r>
 800b7ac:	6803      	ldr	r3, [r0, #0]
 800b7ae:	9313      	str	r3, [sp, #76]	; 0x4c
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7f4 fde5 	bl	8000380 <strlen>
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	9012      	str	r0, [sp, #72]	; 0x48
 800b7ba:	061e      	lsls	r6, r3, #24
 800b7bc:	d503      	bpl.n	800b7c6 <_svfprintf_r+0x2e>
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f001 8131 	beq.w	800ca28 <_svfprintf_r+0x1290>
 800b7c6:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ba60 <_svfprintf_r+0x2c8>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b7d0:	930e      	str	r3, [sp, #56]	; 0x38
 800b7d2:	9325      	str	r3, [sp, #148]	; 0x94
 800b7d4:	9324      	str	r3, [sp, #144]	; 0x90
 800b7d6:	9315      	str	r3, [sp, #84]	; 0x54
 800b7d8:	9307      	str	r3, [sp, #28]
 800b7da:	f8df a290 	ldr.w	sl, [pc, #656]	; 800ba6c <_svfprintf_r+0x2d4>
 800b7de:	ab30      	add	r3, sp, #192	; 0xc0
 800b7e0:	9323      	str	r3, [sp, #140]	; 0x8c
 800b7e2:	4699      	mov	r9, r3
 800b7e4:	46a8      	mov	r8, r5
 800b7e6:	f898 3000 	ldrb.w	r3, [r8]
 800b7ea:	4644      	mov	r4, r8
 800b7ec:	b1eb      	cbz	r3, 800b82a <_svfprintf_r+0x92>
 800b7ee:	2b25      	cmp	r3, #37	; 0x25
 800b7f0:	d102      	bne.n	800b7f8 <_svfprintf_r+0x60>
 800b7f2:	e01a      	b.n	800b82a <_svfprintf_r+0x92>
 800b7f4:	2b25      	cmp	r3, #37	; 0x25
 800b7f6:	d003      	beq.n	800b800 <_svfprintf_r+0x68>
 800b7f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1f9      	bne.n	800b7f4 <_svfprintf_r+0x5c>
 800b800:	ebc8 0504 	rsb	r5, r8, r4
 800b804:	b18d      	cbz	r5, 800b82a <_svfprintf_r+0x92>
 800b806:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b808:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b80a:	f8c9 8000 	str.w	r8, [r9]
 800b80e:	3301      	adds	r3, #1
 800b810:	442a      	add	r2, r5
 800b812:	2b07      	cmp	r3, #7
 800b814:	f8c9 5004 	str.w	r5, [r9, #4]
 800b818:	9225      	str	r2, [sp, #148]	; 0x94
 800b81a:	9324      	str	r3, [sp, #144]	; 0x90
 800b81c:	f300 80a6 	bgt.w	800b96c <_svfprintf_r+0x1d4>
 800b820:	f109 0908 	add.w	r9, r9, #8
 800b824:	9b07      	ldr	r3, [sp, #28]
 800b826:	442b      	add	r3, r5
 800b828:	9307      	str	r3, [sp, #28]
 800b82a:	7823      	ldrb	r3, [r4, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f000 80a6 	beq.w	800b97e <_svfprintf_r+0x1e6>
 800b832:	2300      	movs	r3, #0
 800b834:	461a      	mov	r2, r3
 800b836:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b83a:	4619      	mov	r1, r3
 800b83c:	9308      	str	r3, [sp, #32]
 800b83e:	9303      	str	r3, [sp, #12]
 800b840:	f04f 3bff 	mov.w	fp, #4294967295
 800b844:	7863      	ldrb	r3, [r4, #1]
 800b846:	f104 0801 	add.w	r8, r4, #1
 800b84a:	465d      	mov	r5, fp
 800b84c:	f108 0801 	add.w	r8, r8, #1
 800b850:	f1a3 0020 	sub.w	r0, r3, #32
 800b854:	2858      	cmp	r0, #88	; 0x58
 800b856:	f200 8434 	bhi.w	800c0c2 <_svfprintf_r+0x92a>
 800b85a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b85e:	03a0      	.short	0x03a0
 800b860:	04320432 	.word	0x04320432
 800b864:	043203a8 	.word	0x043203a8
 800b868:	04320432 	.word	0x04320432
 800b86c:	04320432 	.word	0x04320432
 800b870:	03af0432 	.word	0x03af0432
 800b874:	043203bd 	.word	0x043203bd
 800b878:	00e2005d 	.word	0x00e2005d
 800b87c:	01090432 	.word	0x01090432
 800b880:	01100110 	.word	0x01100110
 800b884:	01100110 	.word	0x01100110
 800b888:	01100110 	.word	0x01100110
 800b88c:	01100110 	.word	0x01100110
 800b890:	04320110 	.word	0x04320110
 800b894:	04320432 	.word	0x04320432
 800b898:	04320432 	.word	0x04320432
 800b89c:	04320432 	.word	0x04320432
 800b8a0:	04320432 	.word	0x04320432
 800b8a4:	01200432 	.word	0x01200432
 800b8a8:	04320286 	.word	0x04320286
 800b8ac:	04320286 	.word	0x04320286
 800b8b0:	04320432 	.word	0x04320432
 800b8b4:	02d40432 	.word	0x02d40432
 800b8b8:	04320432 	.word	0x04320432
 800b8bc:	043202e5 	.word	0x043202e5
 800b8c0:	04320432 	.word	0x04320432
 800b8c4:	04320432 	.word	0x04320432
 800b8c8:	0432030f 	.word	0x0432030f
 800b8cc:	033d0432 	.word	0x033d0432
 800b8d0:	04320432 	.word	0x04320432
 800b8d4:	04320432 	.word	0x04320432
 800b8d8:	04320432 	.word	0x04320432
 800b8dc:	04320432 	.word	0x04320432
 800b8e0:	04320432 	.word	0x04320432
 800b8e4:	0391037e 	.word	0x0391037e
 800b8e8:	02860286 	.word	0x02860286
 800b8ec:	03990286 	.word	0x03990286
 800b8f0:	04320391 	.word	0x04320391
 800b8f4:	04070432 	.word	0x04070432
 800b8f8:	04120432 	.word	0x04120432
 800b8fc:	006400a3 	.word	0x006400a3
 800b900:	043203c2 	.word	0x043203c2
 800b904:	043203c9 	.word	0x043203c9
 800b908:	043203ea 	.word	0x043203ea
 800b90c:	03f20432 	.word	0x03f20432
 800b910:	9808      	ldr	r0, [sp, #32]
 800b912:	930a      	str	r3, [sp, #40]	; 0x28
 800b914:	4240      	negs	r0, r0
 800b916:	9008      	str	r0, [sp, #32]
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	f043 0304 	orr.w	r3, r3, #4
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	f898 3000 	ldrb.w	r3, [r8]
 800b924:	e792      	b.n	800b84c <_svfprintf_r+0xb4>
 800b926:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b928:	46ab      	mov	fp, r5
 800b92a:	2100      	movs	r1, #0
 800b92c:	6804      	ldr	r4, [r0, #0]
 800b92e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800b932:	1d07      	adds	r7, r0, #4
 800b934:	9803      	ldr	r0, [sp, #12]
 800b936:	2330      	movs	r3, #48	; 0x30
 800b938:	2278      	movs	r2, #120	; 0x78
 800b93a:	458b      	cmp	fp, r1
 800b93c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800b940:	f04f 0500 	mov.w	r5, #0
 800b944:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800b948:	f040 0302 	orr.w	r3, r0, #2
 800b94c:	f2c0 83d6 	blt.w	800c0fc <_svfprintf_r+0x964>
 800b950:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800b954:	f043 0302 	orr.w	r3, r3, #2
 800b958:	9303      	str	r3, [sp, #12]
 800b95a:	ea54 0305 	orrs.w	r3, r4, r5
 800b95e:	970a      	str	r7, [sp, #40]	; 0x28
 800b960:	f000 83a2 	beq.w	800c0a8 <_svfprintf_r+0x910>
 800b964:	460f      	mov	r7, r1
 800b966:	920d      	str	r2, [sp, #52]	; 0x34
 800b968:	483f      	ldr	r0, [pc, #252]	; (800ba68 <_svfprintf_r+0x2d0>)
 800b96a:	e2e6      	b.n	800bf3a <_svfprintf_r+0x7a2>
 800b96c:	aa23      	add	r2, sp, #140	; 0x8c
 800b96e:	9905      	ldr	r1, [sp, #20]
 800b970:	9806      	ldr	r0, [sp, #24]
 800b972:	f002 fdb9 	bl	800e4e8 <__ssprint_r>
 800b976:	b948      	cbnz	r0, 800b98c <_svfprintf_r+0x1f4>
 800b978:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800b97c:	e752      	b.n	800b824 <_svfprintf_r+0x8c>
 800b97e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b980:	b123      	cbz	r3, 800b98c <_svfprintf_r+0x1f4>
 800b982:	9806      	ldr	r0, [sp, #24]
 800b984:	9905      	ldr	r1, [sp, #20]
 800b986:	aa23      	add	r2, sp, #140	; 0x8c
 800b988:	f002 fdae 	bl	800e4e8 <__ssprint_r>
 800b98c:	9b05      	ldr	r3, [sp, #20]
 800b98e:	899b      	ldrh	r3, [r3, #12]
 800b990:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b994:	9b07      	ldr	r3, [sp, #28]
 800b996:	bf18      	it	ne
 800b998:	f04f 33ff 	movne.w	r3, #4294967295
 800b99c:	4618      	mov	r0, r3
 800b99e:	b041      	add	sp, #260	; 0x104
 800b9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a4:	930d      	str	r3, [sp, #52]	; 0x34
 800b9a6:	46ab      	mov	fp, r5
 800b9a8:	2a00      	cmp	r2, #0
 800b9aa:	f041 8233 	bne.w	800ce14 <_svfprintf_r+0x167c>
 800b9ae:	9a03      	ldr	r2, [sp, #12]
 800b9b0:	f012 0320 	ands.w	r3, r2, #32
 800b9b4:	f000 8246 	beq.w	800be44 <_svfprintf_r+0x6ac>
 800b9b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b9ba:	3707      	adds	r7, #7
 800b9bc:	f027 0307 	bic.w	r3, r7, #7
 800b9c0:	2700      	movs	r7, #0
 800b9c2:	f103 0108 	add.w	r1, r3, #8
 800b9c6:	45bb      	cmp	fp, r7
 800b9c8:	910a      	str	r1, [sp, #40]	; 0x28
 800b9ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b9ce:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800b9d2:	f2c0 8762 	blt.w	800c89a <_svfprintf_r+0x1102>
 800b9d6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800b9da:	9303      	str	r3, [sp, #12]
 800b9dc:	ea54 0305 	orrs.w	r3, r4, r5
 800b9e0:	f000 8384 	beq.w	800c0ec <_svfprintf_r+0x954>
 800b9e4:	ae30      	add	r6, sp, #192	; 0xc0
 800b9e6:	08e2      	lsrs	r2, r4, #3
 800b9e8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800b9ec:	08e9      	lsrs	r1, r5, #3
 800b9ee:	f004 0307 	and.w	r3, r4, #7
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	4614      	mov	r4, r2
 800b9f6:	3330      	adds	r3, #48	; 0x30
 800b9f8:	ea54 0205 	orrs.w	r2, r4, r5
 800b9fc:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800ba00:	d1f1      	bne.n	800b9e6 <_svfprintf_r+0x24e>
 800ba02:	9a03      	ldr	r2, [sp, #12]
 800ba04:	07d1      	lsls	r1, r2, #31
 800ba06:	f140 808f 	bpl.w	800bb28 <_svfprintf_r+0x390>
 800ba0a:	2b30      	cmp	r3, #48	; 0x30
 800ba0c:	f000 808c 	beq.w	800bb28 <_svfprintf_r+0x390>
 800ba10:	2230      	movs	r2, #48	; 0x30
 800ba12:	1e73      	subs	r3, r6, #1
 800ba14:	f806 2c01 	strb.w	r2, [r6, #-1]
 800ba18:	aa30      	add	r2, sp, #192	; 0xc0
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba1e:	461e      	mov	r6, r3
 800ba20:	e085      	b.n	800bb2e <_svfprintf_r+0x396>
 800ba22:	f898 3000 	ldrb.w	r3, [r8]
 800ba26:	2b2a      	cmp	r3, #42	; 0x2a
 800ba28:	f108 0401 	add.w	r4, r8, #1
 800ba2c:	f001 81e4 	beq.w	800cdf8 <_svfprintf_r+0x1660>
 800ba30:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ba34:	2809      	cmp	r0, #9
 800ba36:	bf98      	it	ls
 800ba38:	2500      	movls	r5, #0
 800ba3a:	f201 8186 	bhi.w	800cd4a <_svfprintf_r+0x15b2>
 800ba3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ba46:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ba4a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ba4e:	2809      	cmp	r0, #9
 800ba50:	d9f5      	bls.n	800ba3e <_svfprintf_r+0x2a6>
 800ba52:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800ba56:	46a0      	mov	r8, r4
 800ba58:	e6fa      	b.n	800b850 <_svfprintf_r+0xb8>
 800ba5a:	bf00      	nop
 800ba5c:	f3af 8000 	nop.w
	...
 800ba68:	0800efec 	.word	0x0800efec
 800ba6c:	0800efb8 	.word	0x0800efb8
 800ba70:	9b03      	ldr	r3, [sp, #12]
 800ba72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba76:	9303      	str	r3, [sp, #12]
 800ba78:	f898 3000 	ldrb.w	r3, [r8]
 800ba7c:	e6e6      	b.n	800b84c <_svfprintf_r+0xb4>
 800ba7e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ba82:	2300      	movs	r3, #0
 800ba84:	461c      	mov	r4, r3
 800ba86:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba8a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800ba8e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ba92:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ba96:	2809      	cmp	r0, #9
 800ba98:	d9f5      	bls.n	800ba86 <_svfprintf_r+0x2ee>
 800ba9a:	9408      	str	r4, [sp, #32]
 800ba9c:	e6d8      	b.n	800b850 <_svfprintf_r+0xb8>
 800ba9e:	930d      	str	r3, [sp, #52]	; 0x34
 800baa0:	46ab      	mov	fp, r5
 800baa2:	2a00      	cmp	r2, #0
 800baa4:	f041 81c4 	bne.w	800ce30 <_svfprintf_r+0x1698>
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	f043 0310 	orr.w	r3, r3, #16
 800baae:	9303      	str	r3, [sp, #12]
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	069c      	lsls	r4, r3, #26
 800bab4:	f140 8537 	bpl.w	800c526 <_svfprintf_r+0xd8e>
 800bab8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800baba:	3707      	adds	r7, #7
 800babc:	f027 0707 	bic.w	r7, r7, #7
 800bac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bac4:	f107 0108 	add.w	r1, r7, #8
 800bac8:	910a      	str	r1, [sp, #40]	; 0x28
 800baca:	4614      	mov	r4, r2
 800bacc:	461d      	mov	r5, r3
 800bace:	2a00      	cmp	r2, #0
 800bad0:	f173 0300 	sbcs.w	r3, r3, #0
 800bad4:	f2c0 8562 	blt.w	800c59c <_svfprintf_r+0xe04>
 800bad8:	f1bb 0f00 	cmp.w	fp, #0
 800badc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800bae0:	f2c0 853f 	blt.w	800c562 <_svfprintf_r+0xdca>
 800bae4:	9b03      	ldr	r3, [sp, #12]
 800bae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	ea54 0305 	orrs.w	r3, r4, r5
 800baf0:	f000 81e8 	beq.w	800bec4 <_svfprintf_r+0x72c>
 800baf4:	2d00      	cmp	r5, #0
 800baf6:	bf08      	it	eq
 800baf8:	2c0a      	cmpeq	r4, #10
 800bafa:	f0c0 81e8 	bcc.w	800bece <_svfprintf_r+0x736>
 800bafe:	ae30      	add	r6, sp, #192	; 0xc0
 800bb00:	4620      	mov	r0, r4
 800bb02:	4629      	mov	r1, r5
 800bb04:	220a      	movs	r2, #10
 800bb06:	2300      	movs	r3, #0
 800bb08:	f7f5 fa98 	bl	800103c <__aeabi_uldivmod>
 800bb0c:	3230      	adds	r2, #48	; 0x30
 800bb0e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800bb12:	4620      	mov	r0, r4
 800bb14:	4629      	mov	r1, r5
 800bb16:	2300      	movs	r3, #0
 800bb18:	220a      	movs	r2, #10
 800bb1a:	f7f5 fa8f 	bl	800103c <__aeabi_uldivmod>
 800bb1e:	4604      	mov	r4, r0
 800bb20:	460d      	mov	r5, r1
 800bb22:	ea54 0305 	orrs.w	r3, r4, r5
 800bb26:	d1eb      	bne.n	800bb00 <_svfprintf_r+0x368>
 800bb28:	ab30      	add	r3, sp, #192	; 0xc0
 800bb2a:	1b9b      	subs	r3, r3, r6
 800bb2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb30:	455b      	cmp	r3, fp
 800bb32:	bfb8      	it	lt
 800bb34:	465b      	movlt	r3, fp
 800bb36:	9304      	str	r3, [sp, #16]
 800bb38:	2300      	movs	r3, #0
 800bb3a:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb3c:	b117      	cbz	r7, 800bb44 <_svfprintf_r+0x3ac>
 800bb3e:	9b04      	ldr	r3, [sp, #16]
 800bb40:	3301      	adds	r3, #1
 800bb42:	9304      	str	r3, [sp, #16]
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	f013 0302 	ands.w	r3, r3, #2
 800bb4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb4c:	d002      	beq.n	800bb54 <_svfprintf_r+0x3bc>
 800bb4e:	9b04      	ldr	r3, [sp, #16]
 800bb50:	3302      	adds	r3, #2
 800bb52:	9304      	str	r3, [sp, #16]
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800bb5a:	930c      	str	r3, [sp, #48]	; 0x30
 800bb5c:	f040 82db 	bne.w	800c116 <_svfprintf_r+0x97e>
 800bb60:	9b08      	ldr	r3, [sp, #32]
 800bb62:	9a04      	ldr	r2, [sp, #16]
 800bb64:	1a9d      	subs	r5, r3, r2
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	f340 82d5 	ble.w	800c116 <_svfprintf_r+0x97e>
 800bb6c:	2d10      	cmp	r5, #16
 800bb6e:	9925      	ldr	r1, [sp, #148]	; 0x94
 800bb70:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bb72:	4fa8      	ldr	r7, [pc, #672]	; (800be14 <_svfprintf_r+0x67c>)
 800bb74:	dd27      	ble.n	800bbc6 <_svfprintf_r+0x42e>
 800bb76:	9614      	str	r6, [sp, #80]	; 0x50
 800bb78:	4648      	mov	r0, r9
 800bb7a:	2410      	movs	r4, #16
 800bb7c:	46b9      	mov	r9, r7
 800bb7e:	9e05      	ldr	r6, [sp, #20]
 800bb80:	462f      	mov	r7, r5
 800bb82:	9d06      	ldr	r5, [sp, #24]
 800bb84:	e004      	b.n	800bb90 <_svfprintf_r+0x3f8>
 800bb86:	3f10      	subs	r7, #16
 800bb88:	2f10      	cmp	r7, #16
 800bb8a:	f100 0008 	add.w	r0, r0, #8
 800bb8e:	dd16      	ble.n	800bbbe <_svfprintf_r+0x426>
 800bb90:	3201      	adds	r2, #1
 800bb92:	4ba0      	ldr	r3, [pc, #640]	; (800be14 <_svfprintf_r+0x67c>)
 800bb94:	9224      	str	r2, [sp, #144]	; 0x90
 800bb96:	3110      	adds	r1, #16
 800bb98:	2a07      	cmp	r2, #7
 800bb9a:	9125      	str	r1, [sp, #148]	; 0x94
 800bb9c:	e880 0018 	stmia.w	r0, {r3, r4}
 800bba0:	ddf1      	ble.n	800bb86 <_svfprintf_r+0x3ee>
 800bba2:	aa23      	add	r2, sp, #140	; 0x8c
 800bba4:	4631      	mov	r1, r6
 800bba6:	4628      	mov	r0, r5
 800bba8:	f002 fc9e 	bl	800e4e8 <__ssprint_r>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	f47f aeed 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800bbb2:	3f10      	subs	r7, #16
 800bbb4:	2f10      	cmp	r7, #16
 800bbb6:	9925      	ldr	r1, [sp, #148]	; 0x94
 800bbb8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bbba:	a830      	add	r0, sp, #192	; 0xc0
 800bbbc:	dce8      	bgt.n	800bb90 <_svfprintf_r+0x3f8>
 800bbbe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800bbc0:	463d      	mov	r5, r7
 800bbc2:	464f      	mov	r7, r9
 800bbc4:	4681      	mov	r9, r0
 800bbc6:	3201      	adds	r2, #1
 800bbc8:	186c      	adds	r4, r5, r1
 800bbca:	2a07      	cmp	r2, #7
 800bbcc:	9425      	str	r4, [sp, #148]	; 0x94
 800bbce:	9224      	str	r2, [sp, #144]	; 0x90
 800bbd0:	f8c9 7000 	str.w	r7, [r9]
 800bbd4:	f8c9 5004 	str.w	r5, [r9, #4]
 800bbd8:	f300 842d 	bgt.w	800c436 <_svfprintf_r+0xc9e>
 800bbdc:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800bbe0:	f109 0908 	add.w	r9, r9, #8
 800bbe4:	b177      	cbz	r7, 800bc04 <_svfprintf_r+0x46c>
 800bbe6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bbe8:	3301      	adds	r3, #1
 800bbea:	3401      	adds	r4, #1
 800bbec:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	2b07      	cmp	r3, #7
 800bbf4:	9425      	str	r4, [sp, #148]	; 0x94
 800bbf6:	9324      	str	r3, [sp, #144]	; 0x90
 800bbf8:	e889 0006 	stmia.w	r9, {r1, r2}
 800bbfc:	f300 83a5 	bgt.w	800c34a <_svfprintf_r+0xbb2>
 800bc00:	f109 0908 	add.w	r9, r9, #8
 800bc04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc06:	b16b      	cbz	r3, 800bc24 <_svfprintf_r+0x48c>
 800bc08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	3402      	adds	r4, #2
 800bc0e:	a91c      	add	r1, sp, #112	; 0x70
 800bc10:	2202      	movs	r2, #2
 800bc12:	2b07      	cmp	r3, #7
 800bc14:	9425      	str	r4, [sp, #148]	; 0x94
 800bc16:	9324      	str	r3, [sp, #144]	; 0x90
 800bc18:	e889 0006 	stmia.w	r9, {r1, r2}
 800bc1c:	f300 83a1 	bgt.w	800c362 <_svfprintf_r+0xbca>
 800bc20:	f109 0908 	add.w	r9, r9, #8
 800bc24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc26:	2b80      	cmp	r3, #128	; 0x80
 800bc28:	f000 82e1 	beq.w	800c1ee <_svfprintf_r+0xa56>
 800bc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2e:	ebc3 070b 	rsb	r7, r3, fp
 800bc32:	2f00      	cmp	r7, #0
 800bc34:	dd33      	ble.n	800bc9e <_svfprintf_r+0x506>
 800bc36:	4a78      	ldr	r2, [pc, #480]	; (800be18 <_svfprintf_r+0x680>)
 800bc38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc3a:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc3c:	2f10      	cmp	r7, #16
 800bc3e:	dd22      	ble.n	800bc86 <_svfprintf_r+0x4ee>
 800bc40:	4622      	mov	r2, r4
 800bc42:	f04f 0b10 	mov.w	fp, #16
 800bc46:	9d06      	ldr	r5, [sp, #24]
 800bc48:	9c05      	ldr	r4, [sp, #20]
 800bc4a:	e004      	b.n	800bc56 <_svfprintf_r+0x4be>
 800bc4c:	3f10      	subs	r7, #16
 800bc4e:	2f10      	cmp	r7, #16
 800bc50:	f109 0908 	add.w	r9, r9, #8
 800bc54:	dd16      	ble.n	800bc84 <_svfprintf_r+0x4ec>
 800bc56:	3301      	adds	r3, #1
 800bc58:	3210      	adds	r2, #16
 800bc5a:	2b07      	cmp	r3, #7
 800bc5c:	9225      	str	r2, [sp, #148]	; 0x94
 800bc5e:	9324      	str	r3, [sp, #144]	; 0x90
 800bc60:	e889 0c00 	stmia.w	r9, {sl, fp}
 800bc64:	ddf2      	ble.n	800bc4c <_svfprintf_r+0x4b4>
 800bc66:	aa23      	add	r2, sp, #140	; 0x8c
 800bc68:	4621      	mov	r1, r4
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	f002 fc3c 	bl	800e4e8 <__ssprint_r>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	f47f ae8b 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800bc76:	3f10      	subs	r7, #16
 800bc78:	2f10      	cmp	r7, #16
 800bc7a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800bc7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc7e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bc82:	dce8      	bgt.n	800bc56 <_svfprintf_r+0x4be>
 800bc84:	4614      	mov	r4, r2
 800bc86:	3301      	adds	r3, #1
 800bc88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc8a:	9324      	str	r3, [sp, #144]	; 0x90
 800bc8c:	443c      	add	r4, r7
 800bc8e:	2b07      	cmp	r3, #7
 800bc90:	9425      	str	r4, [sp, #148]	; 0x94
 800bc92:	e889 0084 	stmia.w	r9, {r2, r7}
 800bc96:	f300 834c 	bgt.w	800c332 <_svfprintf_r+0xb9a>
 800bc9a:	f109 0908 	add.w	r9, r9, #8
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	05da      	lsls	r2, r3, #23
 800bca2:	f100 823a 	bmi.w	800c11a <_svfprintf_r+0x982>
 800bca6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcaa:	f8c9 6000 	str.w	r6, [r9]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	440c      	add	r4, r1
 800bcb2:	2b07      	cmp	r3, #7
 800bcb4:	9425      	str	r4, [sp, #148]	; 0x94
 800bcb6:	f8c9 1004 	str.w	r1, [r9, #4]
 800bcba:	9324      	str	r3, [sp, #144]	; 0x90
 800bcbc:	f300 8323 	bgt.w	800c306 <_svfprintf_r+0xb6e>
 800bcc0:	f109 0908 	add.w	r9, r9, #8
 800bcc4:	9b03      	ldr	r3, [sp, #12]
 800bcc6:	0759      	lsls	r1, r3, #29
 800bcc8:	d53f      	bpl.n	800bd4a <_svfprintf_r+0x5b2>
 800bcca:	9b08      	ldr	r3, [sp, #32]
 800bccc:	9a04      	ldr	r2, [sp, #16]
 800bcce:	1a9d      	subs	r5, r3, r2
 800bcd0:	2d00      	cmp	r5, #0
 800bcd2:	dd3a      	ble.n	800bd4a <_svfprintf_r+0x5b2>
 800bcd4:	2d10      	cmp	r5, #16
 800bcd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bcd8:	4f4e      	ldr	r7, [pc, #312]	; (800be14 <_svfprintf_r+0x67c>)
 800bcda:	dd23      	ble.n	800bd24 <_svfprintf_r+0x58c>
 800bcdc:	4622      	mov	r2, r4
 800bcde:	2610      	movs	r6, #16
 800bce0:	f8dd b018 	ldr.w	fp, [sp, #24]
 800bce4:	9c05      	ldr	r4, [sp, #20]
 800bce6:	e004      	b.n	800bcf2 <_svfprintf_r+0x55a>
 800bce8:	3d10      	subs	r5, #16
 800bcea:	2d10      	cmp	r5, #16
 800bcec:	f109 0908 	add.w	r9, r9, #8
 800bcf0:	dd17      	ble.n	800bd22 <_svfprintf_r+0x58a>
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	4947      	ldr	r1, [pc, #284]	; (800be14 <_svfprintf_r+0x67c>)
 800bcf6:	9324      	str	r3, [sp, #144]	; 0x90
 800bcf8:	3210      	adds	r2, #16
 800bcfa:	2b07      	cmp	r3, #7
 800bcfc:	9225      	str	r2, [sp, #148]	; 0x94
 800bcfe:	e889 0042 	stmia.w	r9, {r1, r6}
 800bd02:	ddf1      	ble.n	800bce8 <_svfprintf_r+0x550>
 800bd04:	aa23      	add	r2, sp, #140	; 0x8c
 800bd06:	4621      	mov	r1, r4
 800bd08:	4658      	mov	r0, fp
 800bd0a:	f002 fbed 	bl	800e4e8 <__ssprint_r>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	f47f ae3c 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800bd14:	3d10      	subs	r5, #16
 800bd16:	2d10      	cmp	r5, #16
 800bd18:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800bd1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd1c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bd20:	dce7      	bgt.n	800bcf2 <_svfprintf_r+0x55a>
 800bd22:	4614      	mov	r4, r2
 800bd24:	3301      	adds	r3, #1
 800bd26:	442c      	add	r4, r5
 800bd28:	2b07      	cmp	r3, #7
 800bd2a:	9425      	str	r4, [sp, #148]	; 0x94
 800bd2c:	9324      	str	r3, [sp, #144]	; 0x90
 800bd2e:	f8c9 7000 	str.w	r7, [r9]
 800bd32:	f8c9 5004 	str.w	r5, [r9, #4]
 800bd36:	dd08      	ble.n	800bd4a <_svfprintf_r+0x5b2>
 800bd38:	aa23      	add	r2, sp, #140	; 0x8c
 800bd3a:	9905      	ldr	r1, [sp, #20]
 800bd3c:	9806      	ldr	r0, [sp, #24]
 800bd3e:	f002 fbd3 	bl	800e4e8 <__ssprint_r>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	f47f ae22 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800bd48:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800bd4a:	9b07      	ldr	r3, [sp, #28]
 800bd4c:	9a08      	ldr	r2, [sp, #32]
 800bd4e:	9904      	ldr	r1, [sp, #16]
 800bd50:	428a      	cmp	r2, r1
 800bd52:	bfac      	ite	ge
 800bd54:	189b      	addge	r3, r3, r2
 800bd56:	185b      	addlt	r3, r3, r1
 800bd58:	9307      	str	r3, [sp, #28]
 800bd5a:	2c00      	cmp	r4, #0
 800bd5c:	f040 82df 	bne.w	800c31e <_svfprintf_r+0xb86>
 800bd60:	2300      	movs	r3, #0
 800bd62:	9324      	str	r3, [sp, #144]	; 0x90
 800bd64:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800bd68:	e53d      	b.n	800b7e6 <_svfprintf_r+0x4e>
 800bd6a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd6c:	46ab      	mov	fp, r5
 800bd6e:	2a00      	cmp	r2, #0
 800bd70:	f041 8062 	bne.w	800ce38 <_svfprintf_r+0x16a0>
 800bd74:	9b03      	ldr	r3, [sp, #12]
 800bd76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bd78:	071a      	lsls	r2, r3, #28
 800bd7a:	f107 0707 	add.w	r7, r7, #7
 800bd7e:	f140 8574 	bpl.w	800c86a <_svfprintf_r+0x10d2>
 800bd82:	f027 0307 	bic.w	r3, r7, #7
 800bd86:	ed93 7b00 	vldr	d7, [r3]
 800bd8a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bd8e:	f103 0208 	add.w	r2, r3, #8
 800bd92:	920a      	str	r2, [sp, #40]	; 0x28
 800bd94:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 800bd98:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800bd9c:	9116      	str	r1, [sp, #88]	; 0x58
 800bd9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bda0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 800bda4:	f04f 32ff 	mov.w	r2, #4294967295
 800bda8:	4620      	mov	r0, r4
 800bdaa:	4629      	mov	r1, r5
 800bdac:	4b1b      	ldr	r3, [pc, #108]	; (800be1c <_svfprintf_r+0x684>)
 800bdae:	f7f4 fff9 	bl	8000da4 <__aeabi_dcmpun>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	f040 84da 	bne.w	800c76c <_svfprintf_r+0xfd4>
 800bdb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdbc:	4b17      	ldr	r3, [pc, #92]	; (800be1c <_svfprintf_r+0x684>)
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	f7f4 ffd1 	bl	8000d68 <__aeabi_dcmple>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f040 84d0 	bne.w	800c76c <_svfprintf_r+0xfd4>
 800bdcc:	2200      	movs	r2, #0
 800bdce:	2300      	movs	r3, #0
 800bdd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdd4:	f7f4 ffbe 	bl	8000d54 <__aeabi_dcmplt>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	f040 8752 	bne.w	800cc82 <_svfprintf_r+0x14ea>
 800bdde:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800bde2:	4e0f      	ldr	r6, [pc, #60]	; (800be20 <_svfprintf_r+0x688>)
 800bde4:	4b0f      	ldr	r3, [pc, #60]	; (800be24 <_svfprintf_r+0x68c>)
 800bde6:	9903      	ldr	r1, [sp, #12]
 800bde8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bdec:	9103      	str	r1, [sp, #12]
 800bdee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bdf0:	2203      	movs	r2, #3
 800bdf2:	f04f 0b00 	mov.w	fp, #0
 800bdf6:	9204      	str	r2, [sp, #16]
 800bdf8:	2947      	cmp	r1, #71	; 0x47
 800bdfa:	bfd8      	it	le
 800bdfc:	461e      	movle	r6, r3
 800bdfe:	9209      	str	r2, [sp, #36]	; 0x24
 800be00:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800be04:	e69a      	b.n	800bb3c <_svfprintf_r+0x3a4>
 800be06:	9b03      	ldr	r3, [sp, #12]
 800be08:	f043 0308 	orr.w	r3, r3, #8
 800be0c:	9303      	str	r3, [sp, #12]
 800be0e:	f898 3000 	ldrb.w	r3, [r8]
 800be12:	e51b      	b.n	800b84c <_svfprintf_r+0xb4>
 800be14:	0800f00c 	.word	0x0800f00c
 800be18:	0800efb8 	.word	0x0800efb8
 800be1c:	7fefffff 	.word	0x7fefffff
 800be20:	0800efcc 	.word	0x0800efcc
 800be24:	0800efc8 	.word	0x0800efc8
 800be28:	930d      	str	r3, [sp, #52]	; 0x34
 800be2a:	46ab      	mov	fp, r5
 800be2c:	2a00      	cmp	r2, #0
 800be2e:	f041 800f 	bne.w	800ce50 <_svfprintf_r+0x16b8>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	f043 0310 	orr.w	r3, r3, #16
 800be38:	9303      	str	r3, [sp, #12]
 800be3a:	9a03      	ldr	r2, [sp, #12]
 800be3c:	f012 0320 	ands.w	r3, r2, #32
 800be40:	f47f adba 	bne.w	800b9b8 <_svfprintf_r+0x220>
 800be44:	9903      	ldr	r1, [sp, #12]
 800be46:	f011 0210 	ands.w	r2, r1, #16
 800be4a:	f000 845b 	beq.w	800c704 <_svfprintf_r+0xf6c>
 800be4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800be50:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800be54:	f1bb 0f00 	cmp.w	fp, #0
 800be58:	6804      	ldr	r4, [r0, #0]
 800be5a:	f100 0704 	add.w	r7, r0, #4
 800be5e:	f04f 0500 	mov.w	r5, #0
 800be62:	f2c0 8519 	blt.w	800c898 <_svfprintf_r+0x1100>
 800be66:	460a      	mov	r2, r1
 800be68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be6c:	9203      	str	r2, [sp, #12]
 800be6e:	ea54 0205 	orrs.w	r2, r4, r5
 800be72:	970a      	str	r7, [sp, #40]	; 0x28
 800be74:	f000 813a 	beq.w	800c0ec <_svfprintf_r+0x954>
 800be78:	461f      	mov	r7, r3
 800be7a:	e5b3      	b.n	800b9e4 <_svfprintf_r+0x24c>
 800be7c:	930d      	str	r3, [sp, #52]	; 0x34
 800be7e:	46ab      	mov	fp, r5
 800be80:	2a00      	cmp	r2, #0
 800be82:	f040 87e1 	bne.w	800ce48 <_svfprintf_r+0x16b0>
 800be86:	9b03      	ldr	r3, [sp, #12]
 800be88:	f043 0310 	orr.w	r3, r3, #16
 800be8c:	9303      	str	r3, [sp, #12]
 800be8e:	9a03      	ldr	r2, [sp, #12]
 800be90:	f012 0320 	ands.w	r3, r2, #32
 800be94:	f000 832c 	beq.w	800c4f0 <_svfprintf_r+0xd58>
 800be98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800be9a:	3707      	adds	r7, #7
 800be9c:	f027 0307 	bic.w	r3, r7, #7
 800bea0:	2700      	movs	r7, #0
 800bea2:	f103 0108 	add.w	r1, r3, #8
 800bea6:	45bb      	cmp	fp, r7
 800bea8:	910a      	str	r1, [sp, #40]	; 0x28
 800beaa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800beae:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800beb2:	f2c0 8356 	blt.w	800c562 <_svfprintf_r+0xdca>
 800beb6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800beba:	9303      	str	r3, [sp, #12]
 800bebc:	ea54 0305 	orrs.w	r3, r4, r5
 800bec0:	f47f ae18 	bne.w	800baf4 <_svfprintf_r+0x35c>
 800bec4:	f1bb 0f00 	cmp.w	fp, #0
 800bec8:	f000 80f5 	beq.w	800c0b6 <_svfprintf_r+0x91e>
 800becc:	2400      	movs	r4, #0
 800bece:	ae40      	add	r6, sp, #256	; 0x100
 800bed0:	3430      	adds	r4, #48	; 0x30
 800bed2:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800bed6:	e627      	b.n	800bb28 <_svfprintf_r+0x390>
 800bed8:	930d      	str	r3, [sp, #52]	; 0x34
 800beda:	46ab      	mov	fp, r5
 800bedc:	2a00      	cmp	r2, #0
 800bede:	f040 87af 	bne.w	800ce40 <_svfprintf_r+0x16a8>
 800bee2:	9b03      	ldr	r3, [sp, #12]
 800bee4:	48af      	ldr	r0, [pc, #700]	; (800c1a4 <_svfprintf_r+0xa0c>)
 800bee6:	069d      	lsls	r5, r3, #26
 800bee8:	f140 80b5 	bpl.w	800c056 <_svfprintf_r+0x8be>
 800beec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800beee:	3707      	adds	r7, #7
 800bef0:	f027 0307 	bic.w	r3, r7, #7
 800bef4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bef8:	f103 0208 	add.w	r2, r3, #8
 800befc:	920a      	str	r2, [sp, #40]	; 0x28
 800befe:	9a03      	ldr	r2, [sp, #12]
 800bf00:	f012 0701 	ands.w	r7, r2, #1
 800bf04:	f000 8239 	beq.w	800c37a <_svfprintf_r+0xbe2>
 800bf08:	ea54 0305 	orrs.w	r3, r4, r5
 800bf0c:	f000 8502 	beq.w	800c914 <_svfprintf_r+0x117c>
 800bf10:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800bf14:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
 800bf18:	2700      	movs	r7, #0
 800bf1a:	9a03      	ldr	r2, [sp, #12]
 800bf1c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800bf20:	2330      	movs	r3, #48	; 0x30
 800bf22:	45bb      	cmp	fp, r7
 800bf24:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800bf28:	f042 0302 	orr.w	r3, r2, #2
 800bf2c:	f2c0 86ae 	blt.w	800cc8c <_svfprintf_r+0x14f4>
 800bf30:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800bf34:	f043 0302 	orr.w	r3, r3, #2
 800bf38:	9303      	str	r3, [sp, #12]
 800bf3a:	ae30      	add	r6, sp, #192	; 0xc0
 800bf3c:	0923      	lsrs	r3, r4, #4
 800bf3e:	f004 010f 	and.w	r1, r4, #15
 800bf42:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800bf46:	092a      	lsrs	r2, r5, #4
 800bf48:	461c      	mov	r4, r3
 800bf4a:	4615      	mov	r5, r2
 800bf4c:	5c43      	ldrb	r3, [r0, r1]
 800bf4e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800bf52:	ea54 0305 	orrs.w	r3, r4, r5
 800bf56:	d1f1      	bne.n	800bf3c <_svfprintf_r+0x7a4>
 800bf58:	e5e6      	b.n	800bb28 <_svfprintf_r+0x390>
 800bf5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf5c:	930d      	str	r3, [sp, #52]	; 0x34
 800bf5e:	680a      	ldr	r2, [r1, #0]
 800bf60:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800bf64:	2300      	movs	r3, #0
 800bf66:	460a      	mov	r2, r1
 800bf68:	461f      	mov	r7, r3
 800bf6a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800bf6e:	3204      	adds	r2, #4
 800bf70:	2301      	movs	r3, #1
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	46bb      	mov	fp, r7
 800bf76:	970f      	str	r7, [sp, #60]	; 0x3c
 800bf78:	920a      	str	r2, [sp, #40]	; 0x28
 800bf7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf7c:	ae26      	add	r6, sp, #152	; 0x98
 800bf7e:	e5e1      	b.n	800bb44 <_svfprintf_r+0x3ac>
 800bf80:	930d      	str	r3, [sp, #52]	; 0x34
 800bf82:	46ab      	mov	fp, r5
 800bf84:	2a00      	cmp	r2, #0
 800bf86:	f43f ad93 	beq.w	800bab0 <_svfprintf_r+0x318>
 800bf8a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800bf8e:	e58f      	b.n	800bab0 <_svfprintf_r+0x318>
 800bf90:	9b03      	ldr	r3, [sp, #12]
 800bf92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf96:	9303      	str	r3, [sp, #12]
 800bf98:	f898 3000 	ldrb.w	r3, [r8]
 800bf9c:	e456      	b.n	800b84c <_svfprintf_r+0xb4>
 800bf9e:	f898 3000 	ldrb.w	r3, [r8]
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	f47f ac52 	bne.w	800b84c <_svfprintf_r+0xb4>
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	2120      	movs	r1, #32
 800bfac:	e44e      	b.n	800b84c <_svfprintf_r+0xb4>
 800bfae:	9b03      	ldr	r3, [sp, #12]
 800bfb0:	f043 0301 	orr.w	r3, r3, #1
 800bfb4:	9303      	str	r3, [sp, #12]
 800bfb6:	f898 3000 	ldrb.w	r3, [r8]
 800bfba:	e447      	b.n	800b84c <_svfprintf_r+0xb4>
 800bfbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	9308      	str	r3, [sp, #32]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	4623      	mov	r3, r4
 800bfc8:	f103 0304 	add.w	r3, r3, #4
 800bfcc:	f6ff aca0 	blt.w	800b910 <_svfprintf_r+0x178>
 800bfd0:	930a      	str	r3, [sp, #40]	; 0x28
 800bfd2:	f898 3000 	ldrb.w	r3, [r8]
 800bfd6:	e439      	b.n	800b84c <_svfprintf_r+0xb4>
 800bfd8:	f898 3000 	ldrb.w	r3, [r8]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	212b      	movs	r1, #43	; 0x2b
 800bfe0:	e434      	b.n	800b84c <_svfprintf_r+0xb4>
 800bfe2:	9b03      	ldr	r3, [sp, #12]
 800bfe4:	f043 0320 	orr.w	r3, r3, #32
 800bfe8:	9303      	str	r3, [sp, #12]
 800bfea:	f898 3000 	ldrb.w	r3, [r8]
 800bfee:	e42d      	b.n	800b84c <_svfprintf_r+0xb4>
 800bff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bff2:	930d      	str	r3, [sp, #52]	; 0x34
 800bff4:	6816      	ldr	r6, [r2, #0]
 800bff6:	2400      	movs	r4, #0
 800bff8:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 800bffc:	1d17      	adds	r7, r2, #4
 800bffe:	2e00      	cmp	r6, #0
 800c000:	f000 861c 	beq.w	800cc3c <_svfprintf_r+0x14a4>
 800c004:	2d00      	cmp	r5, #0
 800c006:	f2c0 8561 	blt.w	800cacc <_svfprintf_r+0x1334>
 800c00a:	462a      	mov	r2, r5
 800c00c:	4621      	mov	r1, r4
 800c00e:	4630      	mov	r0, r6
 800c010:	f7f4 fa26 	bl	8000460 <memchr>
 800c014:	2800      	cmp	r0, #0
 800c016:	f000 8663 	beq.w	800cce0 <_svfprintf_r+0x1548>
 800c01a:	1b83      	subs	r3, r0, r6
 800c01c:	9309      	str	r3, [sp, #36]	; 0x24
 800c01e:	46a3      	mov	fp, r4
 800c020:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c024:	970a      	str	r7, [sp, #40]	; 0x28
 800c026:	9304      	str	r3, [sp, #16]
 800c028:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800c02c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800c030:	e584      	b.n	800bb3c <_svfprintf_r+0x3a4>
 800c032:	930d      	str	r3, [sp, #52]	; 0x34
 800c034:	46ab      	mov	fp, r5
 800c036:	2a00      	cmp	r2, #0
 800c038:	f43f af29 	beq.w	800be8e <_svfprintf_r+0x6f6>
 800c03c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800c040:	e725      	b.n	800be8e <_svfprintf_r+0x6f6>
 800c042:	930d      	str	r3, [sp, #52]	; 0x34
 800c044:	46ab      	mov	fp, r5
 800c046:	2a00      	cmp	r2, #0
 800c048:	f040 870e 	bne.w	800ce68 <_svfprintf_r+0x16d0>
 800c04c:	9b03      	ldr	r3, [sp, #12]
 800c04e:	4856      	ldr	r0, [pc, #344]	; (800c1a8 <_svfprintf_r+0xa10>)
 800c050:	069d      	lsls	r5, r3, #26
 800c052:	f53f af4b 	bmi.w	800beec <_svfprintf_r+0x754>
 800c056:	9b03      	ldr	r3, [sp, #12]
 800c058:	06dc      	lsls	r4, r3, #27
 800c05a:	f140 843e 	bpl.w	800c8da <_svfprintf_r+0x1142>
 800c05e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c060:	4613      	mov	r3, r2
 800c062:	3304      	adds	r3, #4
 800c064:	6814      	ldr	r4, [r2, #0]
 800c066:	930a      	str	r3, [sp, #40]	; 0x28
 800c068:	2500      	movs	r5, #0
 800c06a:	e748      	b.n	800befe <_svfprintf_r+0x766>
 800c06c:	f898 3000 	ldrb.w	r3, [r8]
 800c070:	2b6c      	cmp	r3, #108	; 0x6c
 800c072:	f000 84c2 	beq.w	800c9fa <_svfprintf_r+0x1262>
 800c076:	9803      	ldr	r0, [sp, #12]
 800c078:	f040 0010 	orr.w	r0, r0, #16
 800c07c:	9003      	str	r0, [sp, #12]
 800c07e:	f7ff bbe5 	b.w	800b84c <_svfprintf_r+0xb4>
 800c082:	2a00      	cmp	r2, #0
 800c084:	f040 86ec 	bne.w	800ce60 <_svfprintf_r+0x16c8>
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	069b      	lsls	r3, r3, #26
 800c08c:	f140 8357 	bpl.w	800c73e <_svfprintf_r+0xfa6>
 800c090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c092:	9907      	ldr	r1, [sp, #28]
 800c094:	6813      	ldr	r3, [r2, #0]
 800c096:	17cd      	asrs	r5, r1, #31
 800c098:	4608      	mov	r0, r1
 800c09a:	3204      	adds	r2, #4
 800c09c:	4629      	mov	r1, r5
 800c09e:	920a      	str	r2, [sp, #40]	; 0x28
 800c0a0:	e9c3 0100 	strd	r0, r1, [r3]
 800c0a4:	f7ff bb9f 	b.w	800b7e6 <_svfprintf_r+0x4e>
 800c0a8:	483f      	ldr	r0, [pc, #252]	; (800c1a8 <_svfprintf_r+0xa10>)
 800c0aa:	920d      	str	r2, [sp, #52]	; 0x34
 800c0ac:	f1bb 0f00 	cmp.w	fp, #0
 800c0b0:	f040 8174 	bne.w	800c39c <_svfprintf_r+0xc04>
 800c0b4:	465f      	mov	r7, fp
 800c0b6:	f04f 0b00 	mov.w	fp, #0
 800c0ba:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c0be:	ae30      	add	r6, sp, #192	; 0xc0
 800c0c0:	e535      	b.n	800bb2e <_svfprintf_r+0x396>
 800c0c2:	930d      	str	r3, [sp, #52]	; 0x34
 800c0c4:	2a00      	cmp	r2, #0
 800c0c6:	f040 86c7 	bne.w	800ce58 <_svfprintf_r+0x16c0>
 800c0ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0cc:	2a00      	cmp	r2, #0
 800c0ce:	f43f ac56 	beq.w	800b97e <_svfprintf_r+0x1e6>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	461f      	mov	r7, r3
 800c0d8:	9104      	str	r1, [sp, #16]
 800c0da:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 800c0de:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800c0e2:	469b      	mov	fp, r3
 800c0e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0e6:	9109      	str	r1, [sp, #36]	; 0x24
 800c0e8:	ae26      	add	r6, sp, #152	; 0x98
 800c0ea:	e52b      	b.n	800bb44 <_svfprintf_r+0x3ac>
 800c0ec:	f1bb 0f00 	cmp.w	fp, #0
 800c0f0:	f000 860e 	beq.w	800cd10 <_svfprintf_r+0x1578>
 800c0f4:	2700      	movs	r7, #0
 800c0f6:	2400      	movs	r4, #0
 800c0f8:	2500      	movs	r5, #0
 800c0fa:	e473      	b.n	800b9e4 <_svfprintf_r+0x24c>
 800c0fc:	482a      	ldr	r0, [pc, #168]	; (800c1a8 <_svfprintf_r+0xa10>)
 800c0fe:	9303      	str	r3, [sp, #12]
 800c100:	920d      	str	r2, [sp, #52]	; 0x34
 800c102:	ea54 0305 	orrs.w	r3, r4, r5
 800c106:	970a      	str	r7, [sp, #40]	; 0x28
 800c108:	f04f 0700 	mov.w	r7, #0
 800c10c:	f47f af15 	bne.w	800bf3a <_svfprintf_r+0x7a2>
 800c110:	2400      	movs	r4, #0
 800c112:	2500      	movs	r5, #0
 800c114:	e711      	b.n	800bf3a <_svfprintf_r+0x7a2>
 800c116:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c118:	e564      	b.n	800bbe4 <_svfprintf_r+0x44c>
 800c11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c11c:	2b65      	cmp	r3, #101	; 0x65
 800c11e:	f340 80aa 	ble.w	800c276 <_svfprintf_r+0xade>
 800c122:	2200      	movs	r2, #0
 800c124:	2300      	movs	r3, #0
 800c126:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c12a:	f7f4 fe09 	bl	8000d40 <__aeabi_dcmpeq>
 800c12e:	2800      	cmp	r0, #0
 800c130:	f000 8136 	beq.w	800c3a0 <_svfprintf_r+0xc08>
 800c134:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c136:	4a1d      	ldr	r2, [pc, #116]	; (800c1ac <_svfprintf_r+0xa14>)
 800c138:	f8c9 2000 	str.w	r2, [r9]
 800c13c:	3301      	adds	r3, #1
 800c13e:	3401      	adds	r4, #1
 800c140:	2201      	movs	r2, #1
 800c142:	2b07      	cmp	r3, #7
 800c144:	9425      	str	r4, [sp, #148]	; 0x94
 800c146:	9324      	str	r3, [sp, #144]	; 0x90
 800c148:	f8c9 2004 	str.w	r2, [r9, #4]
 800c14c:	f300 83ee 	bgt.w	800c92c <_svfprintf_r+0x1194>
 800c150:	f109 0908 	add.w	r9, r9, #8
 800c154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c158:	4293      	cmp	r3, r2
 800c15a:	db03      	blt.n	800c164 <_svfprintf_r+0x9cc>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	07db      	lsls	r3, r3, #31
 800c160:	f57f adb0 	bpl.w	800bcc4 <_svfprintf_r+0x52c>
 800c164:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c166:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c168:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c16a:	f8c9 2000 	str.w	r2, [r9]
 800c16e:	3301      	adds	r3, #1
 800c170:	440c      	add	r4, r1
 800c172:	2b07      	cmp	r3, #7
 800c174:	9425      	str	r4, [sp, #148]	; 0x94
 800c176:	f8c9 1004 	str.w	r1, [r9, #4]
 800c17a:	9324      	str	r3, [sp, #144]	; 0x90
 800c17c:	f300 8447 	bgt.w	800ca0e <_svfprintf_r+0x1276>
 800c180:	f109 0908 	add.w	r9, r9, #8
 800c184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c186:	1e5d      	subs	r5, r3, #1
 800c188:	2d00      	cmp	r5, #0
 800c18a:	f77f ad9b 	ble.w	800bcc4 <_svfprintf_r+0x52c>
 800c18e:	4a08      	ldr	r2, [pc, #32]	; (800c1b0 <_svfprintf_r+0xa18>)
 800c190:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c192:	920b      	str	r2, [sp, #44]	; 0x2c
 800c194:	2d10      	cmp	r5, #16
 800c196:	f340 81e9 	ble.w	800c56c <_svfprintf_r+0xdd4>
 800c19a:	2610      	movs	r6, #16
 800c19c:	9f06      	ldr	r7, [sp, #24]
 800c19e:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c1a2:	e00d      	b.n	800c1c0 <_svfprintf_r+0xa28>
 800c1a4:	0800efd8 	.word	0x0800efd8
 800c1a8:	0800efec 	.word	0x0800efec
 800c1ac:	0800f008 	.word	0x0800f008
 800c1b0:	0800efb8 	.word	0x0800efb8
 800c1b4:	f109 0908 	add.w	r9, r9, #8
 800c1b8:	3d10      	subs	r5, #16
 800c1ba:	2d10      	cmp	r5, #16
 800c1bc:	f340 81d6 	ble.w	800c56c <_svfprintf_r+0xdd4>
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	3410      	adds	r4, #16
 800c1c4:	2b07      	cmp	r3, #7
 800c1c6:	9425      	str	r4, [sp, #148]	; 0x94
 800c1c8:	9324      	str	r3, [sp, #144]	; 0x90
 800c1ca:	f8c9 a000 	str.w	sl, [r9]
 800c1ce:	f8c9 6004 	str.w	r6, [r9, #4]
 800c1d2:	ddef      	ble.n	800c1b4 <_svfprintf_r+0xa1c>
 800c1d4:	aa23      	add	r2, sp, #140	; 0x8c
 800c1d6:	4659      	mov	r1, fp
 800c1d8:	4638      	mov	r0, r7
 800c1da:	f002 f985 	bl	800e4e8 <__ssprint_r>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	f47f abd4 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c1e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c1e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c1e8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c1ec:	e7e4      	b.n	800c1b8 <_svfprintf_r+0xa20>
 800c1ee:	9b08      	ldr	r3, [sp, #32]
 800c1f0:	9a04      	ldr	r2, [sp, #16]
 800c1f2:	1a9f      	subs	r7, r3, r2
 800c1f4:	2f00      	cmp	r7, #0
 800c1f6:	f77f ad19 	ble.w	800bc2c <_svfprintf_r+0x494>
 800c1fa:	4abc      	ldr	r2, [pc, #752]	; (800c4ec <_svfprintf_r+0xd54>)
 800c1fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c1fe:	920b      	str	r2, [sp, #44]	; 0x2c
 800c200:	2f10      	cmp	r7, #16
 800c202:	dd2b      	ble.n	800c25c <_svfprintf_r+0xac4>
 800c204:	464a      	mov	r2, r9
 800c206:	4621      	mov	r1, r4
 800c208:	46b9      	mov	r9, r7
 800c20a:	2510      	movs	r5, #16
 800c20c:	4637      	mov	r7, r6
 800c20e:	9c06      	ldr	r4, [sp, #24]
 800c210:	9e05      	ldr	r6, [sp, #20]
 800c212:	e006      	b.n	800c222 <_svfprintf_r+0xa8a>
 800c214:	f1a9 0910 	sub.w	r9, r9, #16
 800c218:	f1b9 0f10 	cmp.w	r9, #16
 800c21c:	f102 0208 	add.w	r2, r2, #8
 800c220:	dd18      	ble.n	800c254 <_svfprintf_r+0xabc>
 800c222:	3301      	adds	r3, #1
 800c224:	3110      	adds	r1, #16
 800c226:	2b07      	cmp	r3, #7
 800c228:	9125      	str	r1, [sp, #148]	; 0x94
 800c22a:	9324      	str	r3, [sp, #144]	; 0x90
 800c22c:	f8c2 a000 	str.w	sl, [r2]
 800c230:	6055      	str	r5, [r2, #4]
 800c232:	ddef      	ble.n	800c214 <_svfprintf_r+0xa7c>
 800c234:	aa23      	add	r2, sp, #140	; 0x8c
 800c236:	4631      	mov	r1, r6
 800c238:	4620      	mov	r0, r4
 800c23a:	f002 f955 	bl	800e4e8 <__ssprint_r>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f47f aba4 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c244:	f1a9 0910 	sub.w	r9, r9, #16
 800c248:	f1b9 0f10 	cmp.w	r9, #16
 800c24c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800c24e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c250:	aa30      	add	r2, sp, #192	; 0xc0
 800c252:	dce6      	bgt.n	800c222 <_svfprintf_r+0xa8a>
 800c254:	463e      	mov	r6, r7
 800c256:	460c      	mov	r4, r1
 800c258:	464f      	mov	r7, r9
 800c25a:	4691      	mov	r9, r2
 800c25c:	3301      	adds	r3, #1
 800c25e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c260:	9324      	str	r3, [sp, #144]	; 0x90
 800c262:	443c      	add	r4, r7
 800c264:	2b07      	cmp	r3, #7
 800c266:	9425      	str	r4, [sp, #148]	; 0x94
 800c268:	e889 0084 	stmia.w	r9, {r2, r7}
 800c26c:	f300 823d 	bgt.w	800c6ea <_svfprintf_r+0xf52>
 800c270:	f109 0908 	add.w	r9, r9, #8
 800c274:	e4da      	b.n	800bc2c <_svfprintf_r+0x494>
 800c276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c278:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	f340 820a 	ble.w	800c694 <_svfprintf_r+0xefc>
 800c280:	3501      	adds	r5, #1
 800c282:	3401      	adds	r4, #1
 800c284:	2301      	movs	r3, #1
 800c286:	2d07      	cmp	r5, #7
 800c288:	9425      	str	r4, [sp, #148]	; 0x94
 800c28a:	9524      	str	r5, [sp, #144]	; 0x90
 800c28c:	f8c9 6000 	str.w	r6, [r9]
 800c290:	f8c9 3004 	str.w	r3, [r9, #4]
 800c294:	f300 820f 	bgt.w	800c6b6 <_svfprintf_r+0xf1e>
 800c298:	f109 0908 	add.w	r9, r9, #8
 800c29c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c29e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2a0:	f8c9 3000 	str.w	r3, [r9]
 800c2a4:	3501      	adds	r5, #1
 800c2a6:	4414      	add	r4, r2
 800c2a8:	2d07      	cmp	r5, #7
 800c2aa:	9425      	str	r4, [sp, #148]	; 0x94
 800c2ac:	9524      	str	r5, [sp, #144]	; 0x90
 800c2ae:	f8c9 2004 	str.w	r2, [r9, #4]
 800c2b2:	f300 820d 	bgt.w	800c6d0 <_svfprintf_r+0xf38>
 800c2b6:	f109 0908 	add.w	r9, r9, #8
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	2200      	movs	r2, #0
 800c2be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c2c2:	f7f4 fd3d 	bl	8000d40 <__aeabi_dcmpeq>
 800c2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	f040 80c3 	bne.w	800c454 <_svfprintf_r+0xcbc>
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	3501      	adds	r5, #1
 800c2d2:	3601      	adds	r6, #1
 800c2d4:	441c      	add	r4, r3
 800c2d6:	2d07      	cmp	r5, #7
 800c2d8:	9524      	str	r5, [sp, #144]	; 0x90
 800c2da:	9425      	str	r4, [sp, #148]	; 0x94
 800c2dc:	f8c9 6000 	str.w	r6, [r9]
 800c2e0:	f8c9 3004 	str.w	r3, [r9, #4]
 800c2e4:	f300 80f5 	bgt.w	800c4d2 <_svfprintf_r+0xd3a>
 800c2e8:	f109 0908 	add.w	r9, r9, #8
 800c2ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c2ee:	f8c9 2004 	str.w	r2, [r9, #4]
 800c2f2:	3501      	adds	r5, #1
 800c2f4:	4414      	add	r4, r2
 800c2f6:	ab1f      	add	r3, sp, #124	; 0x7c
 800c2f8:	2d07      	cmp	r5, #7
 800c2fa:	9425      	str	r4, [sp, #148]	; 0x94
 800c2fc:	9524      	str	r5, [sp, #144]	; 0x90
 800c2fe:	f8c9 3000 	str.w	r3, [r9]
 800c302:	f77f acdd 	ble.w	800bcc0 <_svfprintf_r+0x528>
 800c306:	aa23      	add	r2, sp, #140	; 0x8c
 800c308:	9905      	ldr	r1, [sp, #20]
 800c30a:	9806      	ldr	r0, [sp, #24]
 800c30c:	f002 f8ec 	bl	800e4e8 <__ssprint_r>
 800c310:	2800      	cmp	r0, #0
 800c312:	f47f ab3b 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c316:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c318:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c31c:	e4d2      	b.n	800bcc4 <_svfprintf_r+0x52c>
 800c31e:	aa23      	add	r2, sp, #140	; 0x8c
 800c320:	9905      	ldr	r1, [sp, #20]
 800c322:	9806      	ldr	r0, [sp, #24]
 800c324:	f002 f8e0 	bl	800e4e8 <__ssprint_r>
 800c328:	2800      	cmp	r0, #0
 800c32a:	f43f ad19 	beq.w	800bd60 <_svfprintf_r+0x5c8>
 800c32e:	f7ff bb2d 	b.w	800b98c <_svfprintf_r+0x1f4>
 800c332:	aa23      	add	r2, sp, #140	; 0x8c
 800c334:	9905      	ldr	r1, [sp, #20]
 800c336:	9806      	ldr	r0, [sp, #24]
 800c338:	f002 f8d6 	bl	800e4e8 <__ssprint_r>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	f47f ab25 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c342:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c344:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c348:	e4a9      	b.n	800bc9e <_svfprintf_r+0x506>
 800c34a:	aa23      	add	r2, sp, #140	; 0x8c
 800c34c:	9905      	ldr	r1, [sp, #20]
 800c34e:	9806      	ldr	r0, [sp, #24]
 800c350:	f002 f8ca 	bl	800e4e8 <__ssprint_r>
 800c354:	2800      	cmp	r0, #0
 800c356:	f47f ab19 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c35a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c35c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c360:	e450      	b.n	800bc04 <_svfprintf_r+0x46c>
 800c362:	aa23      	add	r2, sp, #140	; 0x8c
 800c364:	9905      	ldr	r1, [sp, #20]
 800c366:	9806      	ldr	r0, [sp, #24]
 800c368:	f002 f8be 	bl	800e4e8 <__ssprint_r>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	f47f ab0d 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c372:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c374:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c378:	e454      	b.n	800bc24 <_svfprintf_r+0x48c>
 800c37a:	f1bb 0f00 	cmp.w	fp, #0
 800c37e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800c382:	f2c0 82df 	blt.w	800c944 <_svfprintf_r+0x11ac>
 800c386:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	ea54 0305 	orrs.w	r3, r4, r5
 800c390:	f47f add3 	bne.w	800bf3a <_svfprintf_r+0x7a2>
 800c394:	f1bb 0f00 	cmp.w	fp, #0
 800c398:	f43f ae8c 	beq.w	800c0b4 <_svfprintf_r+0x91c>
 800c39c:	2700      	movs	r7, #0
 800c39e:	e6b7      	b.n	800c110 <_svfprintf_r+0x978>
 800c3a0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c3a2:	2d00      	cmp	r5, #0
 800c3a4:	f340 82d1 	ble.w	800c94a <_svfprintf_r+0x11b2>
 800c3a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	bfa8      	it	ge
 800c3b0:	4613      	movge	r3, r2
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	461d      	mov	r5, r3
 800c3b6:	dd0d      	ble.n	800c3d4 <_svfprintf_r+0xc3c>
 800c3b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c3ba:	f8c9 6000 	str.w	r6, [r9]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	442c      	add	r4, r5
 800c3c2:	2b07      	cmp	r3, #7
 800c3c4:	9425      	str	r4, [sp, #148]	; 0x94
 800c3c6:	f8c9 5004 	str.w	r5, [r9, #4]
 800c3ca:	9324      	str	r3, [sp, #144]	; 0x90
 800c3cc:	f300 83a9 	bgt.w	800cb22 <_svfprintf_r+0x138a>
 800c3d0:	f109 0908 	add.w	r9, r9, #8
 800c3d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	bfa8      	it	ge
 800c3da:	1b5b      	subge	r3, r3, r5
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	461d      	mov	r5, r3
 800c3e0:	f340 80f8 	ble.w	800c5d4 <_svfprintf_r+0xe3c>
 800c3e4:	4a41      	ldr	r2, [pc, #260]	; (800c4ec <_svfprintf_r+0xd54>)
 800c3e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c3e8:	920b      	str	r2, [sp, #44]	; 0x2c
 800c3ea:	2d10      	cmp	r5, #16
 800c3ec:	f340 8283 	ble.w	800c8f6 <_svfprintf_r+0x115e>
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	2710      	movs	r7, #16
 800c3f4:	f8dd b018 	ldr.w	fp, [sp, #24]
 800c3f8:	9c05      	ldr	r4, [sp, #20]
 800c3fa:	e005      	b.n	800c408 <_svfprintf_r+0xc70>
 800c3fc:	f109 0908 	add.w	r9, r9, #8
 800c400:	3d10      	subs	r5, #16
 800c402:	2d10      	cmp	r5, #16
 800c404:	f340 8276 	ble.w	800c8f4 <_svfprintf_r+0x115c>
 800c408:	3301      	adds	r3, #1
 800c40a:	3210      	adds	r2, #16
 800c40c:	2b07      	cmp	r3, #7
 800c40e:	9225      	str	r2, [sp, #148]	; 0x94
 800c410:	9324      	str	r3, [sp, #144]	; 0x90
 800c412:	f8c9 a000 	str.w	sl, [r9]
 800c416:	f8c9 7004 	str.w	r7, [r9, #4]
 800c41a:	ddef      	ble.n	800c3fc <_svfprintf_r+0xc64>
 800c41c:	aa23      	add	r2, sp, #140	; 0x8c
 800c41e:	4621      	mov	r1, r4
 800c420:	4658      	mov	r0, fp
 800c422:	f002 f861 	bl	800e4e8 <__ssprint_r>
 800c426:	2800      	cmp	r0, #0
 800c428:	f47f aab0 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c42c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c42e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c430:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c434:	e7e4      	b.n	800c400 <_svfprintf_r+0xc68>
 800c436:	aa23      	add	r2, sp, #140	; 0x8c
 800c438:	9905      	ldr	r1, [sp, #20]
 800c43a:	9806      	ldr	r0, [sp, #24]
 800c43c:	f002 f854 	bl	800e4e8 <__ssprint_r>
 800c440:	2800      	cmp	r0, #0
 800c442:	f47f aaa3 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c446:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800c44a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c44c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c450:	f7ff bbc8 	b.w	800bbe4 <_svfprintf_r+0x44c>
 800c454:	1e5e      	subs	r6, r3, #1
 800c456:	2e00      	cmp	r6, #0
 800c458:	f77f af48 	ble.w	800c2ec <_svfprintf_r+0xb54>
 800c45c:	4b23      	ldr	r3, [pc, #140]	; (800c4ec <_svfprintf_r+0xd54>)
 800c45e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c460:	2e10      	cmp	r6, #16
 800c462:	dd2c      	ble.n	800c4be <_svfprintf_r+0xd26>
 800c464:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800c468:	2710      	movs	r7, #16
 800c46a:	46b0      	mov	r8, r6
 800c46c:	f8dd b018 	ldr.w	fp, [sp, #24]
 800c470:	9e05      	ldr	r6, [sp, #20]
 800c472:	e006      	b.n	800c482 <_svfprintf_r+0xcea>
 800c474:	f1a8 0810 	sub.w	r8, r8, #16
 800c478:	f1b8 0f10 	cmp.w	r8, #16
 800c47c:	f109 0908 	add.w	r9, r9, #8
 800c480:	dd1a      	ble.n	800c4b8 <_svfprintf_r+0xd20>
 800c482:	3501      	adds	r5, #1
 800c484:	3410      	adds	r4, #16
 800c486:	2d07      	cmp	r5, #7
 800c488:	9425      	str	r4, [sp, #148]	; 0x94
 800c48a:	9524      	str	r5, [sp, #144]	; 0x90
 800c48c:	f8c9 a000 	str.w	sl, [r9]
 800c490:	f8c9 7004 	str.w	r7, [r9, #4]
 800c494:	ddee      	ble.n	800c474 <_svfprintf_r+0xcdc>
 800c496:	aa23      	add	r2, sp, #140	; 0x8c
 800c498:	4631      	mov	r1, r6
 800c49a:	4658      	mov	r0, fp
 800c49c:	f002 f824 	bl	800e4e8 <__ssprint_r>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f47f aa73 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c4a6:	f1a8 0810 	sub.w	r8, r8, #16
 800c4aa:	f1b8 0f10 	cmp.w	r8, #16
 800c4ae:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c4b0:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c4b2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c4b6:	dce4      	bgt.n	800c482 <_svfprintf_r+0xcea>
 800c4b8:	4646      	mov	r6, r8
 800c4ba:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800c4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	4434      	add	r4, r6
 800c4c4:	2d07      	cmp	r5, #7
 800c4c6:	9425      	str	r4, [sp, #148]	; 0x94
 800c4c8:	9524      	str	r5, [sp, #144]	; 0x90
 800c4ca:	e889 0048 	stmia.w	r9, {r3, r6}
 800c4ce:	f77f af0b 	ble.w	800c2e8 <_svfprintf_r+0xb50>
 800c4d2:	aa23      	add	r2, sp, #140	; 0x8c
 800c4d4:	9905      	ldr	r1, [sp, #20]
 800c4d6:	9806      	ldr	r0, [sp, #24]
 800c4d8:	f002 f806 	bl	800e4e8 <__ssprint_r>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	f47f aa55 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c4e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c4e4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c4e6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c4ea:	e6ff      	b.n	800c2ec <_svfprintf_r+0xb54>
 800c4ec:	0800efb8 	.word	0x0800efb8
 800c4f0:	9903      	ldr	r1, [sp, #12]
 800c4f2:	f011 0210 	ands.w	r2, r1, #16
 800c4f6:	f000 81d3 	beq.w	800c8a0 <_svfprintf_r+0x1108>
 800c4fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c4fc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800c500:	f1bb 0f00 	cmp.w	fp, #0
 800c504:	6804      	ldr	r4, [r0, #0]
 800c506:	f100 0704 	add.w	r7, r0, #4
 800c50a:	f04f 0500 	mov.w	r5, #0
 800c50e:	db26      	blt.n	800c55e <_svfprintf_r+0xdc6>
 800c510:	460a      	mov	r2, r1
 800c512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c516:	9203      	str	r2, [sp, #12]
 800c518:	ea54 0205 	orrs.w	r2, r4, r5
 800c51c:	970a      	str	r7, [sp, #40]	; 0x28
 800c51e:	461f      	mov	r7, r3
 800c520:	f47f aae8 	bne.w	800baf4 <_svfprintf_r+0x35c>
 800c524:	e4ce      	b.n	800bec4 <_svfprintf_r+0x72c>
 800c526:	9b03      	ldr	r3, [sp, #12]
 800c528:	06d8      	lsls	r0, r3, #27
 800c52a:	d42a      	bmi.n	800c582 <_svfprintf_r+0xdea>
 800c52c:	9b03      	ldr	r3, [sp, #12]
 800c52e:	0659      	lsls	r1, r3, #25
 800c530:	d527      	bpl.n	800c582 <_svfprintf_r+0xdea>
 800c532:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c534:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c538:	3104      	adds	r1, #4
 800c53a:	17e5      	asrs	r5, r4, #31
 800c53c:	4622      	mov	r2, r4
 800c53e:	462b      	mov	r3, r5
 800c540:	910a      	str	r1, [sp, #40]	; 0x28
 800c542:	f7ff bac4 	b.w	800bace <_svfprintf_r+0x336>
 800c546:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c548:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800c54c:	f1bb 0f00 	cmp.w	fp, #0
 800c550:	680c      	ldr	r4, [r1, #0]
 800c552:	f101 0704 	add.w	r7, r1, #4
 800c556:	f04f 0500 	mov.w	r5, #0
 800c55a:	f280 824c 	bge.w	800c9f6 <_svfprintf_r+0x125e>
 800c55e:	970a      	str	r7, [sp, #40]	; 0x28
 800c560:	461f      	mov	r7, r3
 800c562:	ea54 0305 	orrs.w	r3, r4, r5
 800c566:	f47f aac5 	bne.w	800baf4 <_svfprintf_r+0x35c>
 800c56a:	e4b0      	b.n	800bece <_svfprintf_r+0x736>
 800c56c:	3301      	adds	r3, #1
 800c56e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c570:	9324      	str	r3, [sp, #144]	; 0x90
 800c572:	442c      	add	r4, r5
 800c574:	2b07      	cmp	r3, #7
 800c576:	9425      	str	r4, [sp, #148]	; 0x94
 800c578:	e889 0024 	stmia.w	r9, {r2, r5}
 800c57c:	f77f aba0 	ble.w	800bcc0 <_svfprintf_r+0x528>
 800c580:	e6c1      	b.n	800c306 <_svfprintf_r+0xb6e>
 800c582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c584:	6814      	ldr	r4, [r2, #0]
 800c586:	4613      	mov	r3, r2
 800c588:	3304      	adds	r3, #4
 800c58a:	17e5      	asrs	r5, r4, #31
 800c58c:	4622      	mov	r2, r4
 800c58e:	930a      	str	r3, [sp, #40]	; 0x28
 800c590:	2a00      	cmp	r2, #0
 800c592:	462b      	mov	r3, r5
 800c594:	f173 0300 	sbcs.w	r3, r3, #0
 800c598:	f6bf aa9e 	bge.w	800bad8 <_svfprintf_r+0x340>
 800c59c:	4264      	negs	r4, r4
 800c59e:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800c5a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800c5a6:	f1bb 0f00 	cmp.w	fp, #0
 800c5aa:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800c5ae:	f6ff aaa1 	blt.w	800baf4 <_svfprintf_r+0x35c>
 800c5b2:	9b03      	ldr	r3, [sp, #12]
 800c5b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5b8:	9303      	str	r3, [sp, #12]
 800c5ba:	f7ff ba9b 	b.w	800baf4 <_svfprintf_r+0x35c>
 800c5be:	aa23      	add	r2, sp, #140	; 0x8c
 800c5c0:	9905      	ldr	r1, [sp, #20]
 800c5c2:	9806      	ldr	r0, [sp, #24]
 800c5c4:	f001 ff90 	bl	800e4e8 <__ssprint_r>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	f47f a9df 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c5ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c5d0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c5d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5d8:	4432      	add	r2, r6
 800c5da:	4617      	mov	r7, r2
 800c5dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	db47      	blt.n	800c672 <_svfprintf_r+0xeda>
 800c5e2:	9a03      	ldr	r2, [sp, #12]
 800c5e4:	07d5      	lsls	r5, r2, #31
 800c5e6:	d444      	bmi.n	800c672 <_svfprintf_r+0xeda>
 800c5e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c5ea:	440e      	add	r6, r1
 800c5ec:	1bf5      	subs	r5, r6, r7
 800c5ee:	1acb      	subs	r3, r1, r3
 800c5f0:	429d      	cmp	r5, r3
 800c5f2:	bfa8      	it	ge
 800c5f4:	461d      	movge	r5, r3
 800c5f6:	2d00      	cmp	r5, #0
 800c5f8:	462e      	mov	r6, r5
 800c5fa:	dd0d      	ble.n	800c618 <_svfprintf_r+0xe80>
 800c5fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c5fe:	f8c9 7000 	str.w	r7, [r9]
 800c602:	3201      	adds	r2, #1
 800c604:	442c      	add	r4, r5
 800c606:	2a07      	cmp	r2, #7
 800c608:	9425      	str	r4, [sp, #148]	; 0x94
 800c60a:	f8c9 5004 	str.w	r5, [r9, #4]
 800c60e:	9224      	str	r2, [sp, #144]	; 0x90
 800c610:	f300 82fe 	bgt.w	800cc10 <_svfprintf_r+0x1478>
 800c614:	f109 0908 	add.w	r9, r9, #8
 800c618:	2e00      	cmp	r6, #0
 800c61a:	bfac      	ite	ge
 800c61c:	1b9d      	subge	r5, r3, r6
 800c61e:	461d      	movlt	r5, r3
 800c620:	2d00      	cmp	r5, #0
 800c622:	f77f ab4f 	ble.w	800bcc4 <_svfprintf_r+0x52c>
 800c626:	4aba      	ldr	r2, [pc, #744]	; (800c910 <_svfprintf_r+0x1178>)
 800c628:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c62a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c62c:	2d10      	cmp	r5, #16
 800c62e:	dd9d      	ble.n	800c56c <_svfprintf_r+0xdd4>
 800c630:	2610      	movs	r6, #16
 800c632:	9f06      	ldr	r7, [sp, #24]
 800c634:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c638:	e004      	b.n	800c644 <_svfprintf_r+0xeac>
 800c63a:	f109 0908 	add.w	r9, r9, #8
 800c63e:	3d10      	subs	r5, #16
 800c640:	2d10      	cmp	r5, #16
 800c642:	dd93      	ble.n	800c56c <_svfprintf_r+0xdd4>
 800c644:	3301      	adds	r3, #1
 800c646:	3410      	adds	r4, #16
 800c648:	2b07      	cmp	r3, #7
 800c64a:	9425      	str	r4, [sp, #148]	; 0x94
 800c64c:	9324      	str	r3, [sp, #144]	; 0x90
 800c64e:	f8c9 a000 	str.w	sl, [r9]
 800c652:	f8c9 6004 	str.w	r6, [r9, #4]
 800c656:	ddf0      	ble.n	800c63a <_svfprintf_r+0xea2>
 800c658:	aa23      	add	r2, sp, #140	; 0x8c
 800c65a:	4659      	mov	r1, fp
 800c65c:	4638      	mov	r0, r7
 800c65e:	f001 ff43 	bl	800e4e8 <__ssprint_r>
 800c662:	2800      	cmp	r0, #0
 800c664:	f47f a992 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c668:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c66a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c66c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c670:	e7e5      	b.n	800c63e <_svfprintf_r+0xea6>
 800c672:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c674:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c676:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c678:	f8c9 1000 	str.w	r1, [r9]
 800c67c:	3201      	adds	r2, #1
 800c67e:	4404      	add	r4, r0
 800c680:	2a07      	cmp	r2, #7
 800c682:	9425      	str	r4, [sp, #148]	; 0x94
 800c684:	f8c9 0004 	str.w	r0, [r9, #4]
 800c688:	9224      	str	r2, [sp, #144]	; 0x90
 800c68a:	f300 82b4 	bgt.w	800cbf6 <_svfprintf_r+0x145e>
 800c68e:	f109 0908 	add.w	r9, r9, #8
 800c692:	e7a9      	b.n	800c5e8 <_svfprintf_r+0xe50>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	07d8      	lsls	r0, r3, #31
 800c698:	f53f adf2 	bmi.w	800c280 <_svfprintf_r+0xae8>
 800c69c:	3501      	adds	r5, #1
 800c69e:	3401      	adds	r4, #1
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	2d07      	cmp	r5, #7
 800c6a4:	9425      	str	r4, [sp, #148]	; 0x94
 800c6a6:	9524      	str	r5, [sp, #144]	; 0x90
 800c6a8:	f8c9 6000 	str.w	r6, [r9]
 800c6ac:	f8c9 3004 	str.w	r3, [r9, #4]
 800c6b0:	f77f ae1a 	ble.w	800c2e8 <_svfprintf_r+0xb50>
 800c6b4:	e70d      	b.n	800c4d2 <_svfprintf_r+0xd3a>
 800c6b6:	aa23      	add	r2, sp, #140	; 0x8c
 800c6b8:	9905      	ldr	r1, [sp, #20]
 800c6ba:	9806      	ldr	r0, [sp, #24]
 800c6bc:	f001 ff14 	bl	800e4e8 <__ssprint_r>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	f47f a963 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c6c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c6c8:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c6ca:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c6ce:	e5e5      	b.n	800c29c <_svfprintf_r+0xb04>
 800c6d0:	aa23      	add	r2, sp, #140	; 0x8c
 800c6d2:	9905      	ldr	r1, [sp, #20]
 800c6d4:	9806      	ldr	r0, [sp, #24]
 800c6d6:	f001 ff07 	bl	800e4e8 <__ssprint_r>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	f47f a956 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c6e0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c6e2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c6e4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c6e8:	e5e7      	b.n	800c2ba <_svfprintf_r+0xb22>
 800c6ea:	aa23      	add	r2, sp, #140	; 0x8c
 800c6ec:	9905      	ldr	r1, [sp, #20]
 800c6ee:	9806      	ldr	r0, [sp, #24]
 800c6f0:	f001 fefa 	bl	800e4e8 <__ssprint_r>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	f47f a949 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c6fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c6fc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c700:	f7ff ba94 	b.w	800bc2c <_svfprintf_r+0x494>
 800c704:	9903      	ldr	r1, [sp, #12]
 800c706:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800c70a:	f000 80b9 	beq.w	800c880 <_svfprintf_r+0x10e8>
 800c70e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c710:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800c714:	4603      	mov	r3, r0
 800c716:	f1bb 0f00 	cmp.w	fp, #0
 800c71a:	f103 0304 	add.w	r3, r3, #4
 800c71e:	8804      	ldrh	r4, [r0, #0]
 800c720:	f04f 0500 	mov.w	r5, #0
 800c724:	f2c0 81c0 	blt.w	800caa8 <_svfprintf_r+0x1310>
 800c728:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c72c:	9103      	str	r1, [sp, #12]
 800c72e:	ea54 0105 	orrs.w	r1, r4, r5
 800c732:	930a      	str	r3, [sp, #40]	; 0x28
 800c734:	f43f acda 	beq.w	800c0ec <_svfprintf_r+0x954>
 800c738:	4617      	mov	r7, r2
 800c73a:	f7ff b953 	b.w	800b9e4 <_svfprintf_r+0x24c>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	06df      	lsls	r7, r3, #27
 800c742:	d40b      	bmi.n	800c75c <_svfprintf_r+0xfc4>
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	065e      	lsls	r6, r3, #25
 800c748:	d508      	bpl.n	800c75c <_svfprintf_r+0xfc4>
 800c74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c74c:	6813      	ldr	r3, [r2, #0]
 800c74e:	3204      	adds	r2, #4
 800c750:	920a      	str	r2, [sp, #40]	; 0x28
 800c752:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c756:	801a      	strh	r2, [r3, #0]
 800c758:	f7ff b845 	b.w	800b7e6 <_svfprintf_r+0x4e>
 800c75c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c75e:	6813      	ldr	r3, [r2, #0]
 800c760:	3204      	adds	r2, #4
 800c762:	920a      	str	r2, [sp, #40]	; 0x28
 800c764:	9a07      	ldr	r2, [sp, #28]
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	f7ff b83d 	b.w	800b7e6 <_svfprintf_r+0x4e>
 800c76c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c770:	4602      	mov	r2, r0
 800c772:	460b      	mov	r3, r1
 800c774:	f7f4 fb16 	bl	8000da4 <__aeabi_dcmpun>
 800c778:	2800      	cmp	r0, #0
 800c77a:	f040 82fd 	bne.w	800cd78 <_svfprintf_r+0x15e0>
 800c77e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c780:	f1bb 3fff 	cmp.w	fp, #4294967295
 800c784:	f023 0720 	bic.w	r7, r3, #32
 800c788:	f000 8267 	beq.w	800cc5a <_svfprintf_r+0x14c2>
 800c78c:	2f47      	cmp	r7, #71	; 0x47
 800c78e:	f000 8182 	beq.w	800ca96 <_svfprintf_r+0x12fe>
 800c792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c794:	9a03      	ldr	r2, [sp, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c79c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c79e:	f2c0 8278 	blt.w	800cc92 <_svfprintf_r+0x14fa>
 800c7a2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800c7a6:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	9304      	str	r3, [sp, #16]
 800c7ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7b0:	2b66      	cmp	r3, #102	; 0x66
 800c7b2:	f000 8255 	beq.w	800cc60 <_svfprintf_r+0x14c8>
 800c7b6:	2b46      	cmp	r3, #70	; 0x46
 800c7b8:	f000 8145 	beq.w	800ca46 <_svfprintf_r+0x12ae>
 800c7bc:	2f45      	cmp	r7, #69	; 0x45
 800c7be:	bf0c      	ite	eq
 800c7c0:	f10b 0501 	addeq.w	r5, fp, #1
 800c7c4:	465d      	movne	r5, fp
 800c7c6:	aa21      	add	r2, sp, #132	; 0x84
 800c7c8:	ab1e      	add	r3, sp, #120	; 0x78
 800c7ca:	9201      	str	r2, [sp, #4]
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	462a      	mov	r2, r5
 800c7d0:	ab1d      	add	r3, sp, #116	; 0x74
 800c7d2:	2102      	movs	r1, #2
 800c7d4:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 800c7d8:	9806      	ldr	r0, [sp, #24]
 800c7da:	f000 fc35 	bl	800d048 <_dtoa_r>
 800c7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7e0:	2b67      	cmp	r3, #103	; 0x67
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	f040 826b 	bne.w	800ccbe <_svfprintf_r+0x1526>
 800c7e8:	9b03      	ldr	r3, [sp, #12]
 800c7ea:	07da      	lsls	r2, r3, #31
 800c7ec:	f140 82b9 	bpl.w	800cd62 <_svfprintf_r+0x15ca>
 800c7f0:	1974      	adds	r4, r6, r5
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800c7fa:	f7f4 faa1 	bl	8000d40 <__aeabi_dcmpeq>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	f040 818d 	bne.w	800cb1e <_svfprintf_r+0x1386>
 800c804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c806:	429c      	cmp	r4, r3
 800c808:	d906      	bls.n	800c818 <_svfprintf_r+0x1080>
 800c80a:	2130      	movs	r1, #48	; 0x30
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	9221      	str	r2, [sp, #132]	; 0x84
 800c810:	7019      	strb	r1, [r3, #0]
 800c812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c814:	429c      	cmp	r4, r3
 800c816:	d8f9      	bhi.n	800c80c <_svfprintf_r+0x1074>
 800c818:	1b9b      	subs	r3, r3, r6
 800c81a:	2f47      	cmp	r7, #71	; 0x47
 800c81c:	930e      	str	r3, [sp, #56]	; 0x38
 800c81e:	f000 8177 	beq.w	800cb10 <_svfprintf_r+0x1378>
 800c822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c824:	2b65      	cmp	r3, #101	; 0x65
 800c826:	f340 8259 	ble.w	800ccdc <_svfprintf_r+0x1544>
 800c82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c82c:	2b66      	cmp	r3, #102	; 0x66
 800c82e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c830:	930f      	str	r3, [sp, #60]	; 0x3c
 800c832:	f000 8260 	beq.w	800ccf6 <_svfprintf_r+0x155e>
 800c836:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c838:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c83a:	428a      	cmp	r2, r1
 800c83c:	f2c0 8232 	blt.w	800cca4 <_svfprintf_r+0x150c>
 800c840:	9b03      	ldr	r3, [sp, #12]
 800c842:	07d9      	lsls	r1, r3, #31
 800c844:	f100 828f 	bmi.w	800cd66 <_svfprintf_r+0x15ce>
 800c848:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c84c:	9209      	str	r2, [sp, #36]	; 0x24
 800c84e:	2267      	movs	r2, #103	; 0x67
 800c850:	920d      	str	r2, [sp, #52]	; 0x34
 800c852:	9a04      	ldr	r2, [sp, #16]
 800c854:	2a00      	cmp	r2, #0
 800c856:	f040 812f 	bne.w	800cab8 <_svfprintf_r+0x1320>
 800c85a:	9304      	str	r3, [sp, #16]
 800c85c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c85e:	9303      	str	r3, [sp, #12]
 800c860:	4693      	mov	fp, r2
 800c862:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800c866:	f7ff b969 	b.w	800bb3c <_svfprintf_r+0x3a4>
 800c86a:	f027 0707 	bic.w	r7, r7, #7
 800c86e:	ed97 7b00 	vldr	d7, [r7]
 800c872:	f107 0308 	add.w	r3, r7, #8
 800c876:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c87a:	930a      	str	r3, [sp, #40]	; 0x28
 800c87c:	f7ff ba8a 	b.w	800bd94 <_svfprintf_r+0x5fc>
 800c880:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c882:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800c886:	f1bb 0f00 	cmp.w	fp, #0
 800c88a:	680c      	ldr	r4, [r1, #0]
 800c88c:	f101 0704 	add.w	r7, r1, #4
 800c890:	f04f 0500 	mov.w	r5, #0
 800c894:	f280 80ac 	bge.w	800c9f0 <_svfprintf_r+0x1258>
 800c898:	970a      	str	r7, [sp, #40]	; 0x28
 800c89a:	2700      	movs	r7, #0
 800c89c:	f7ff b8a2 	b.w	800b9e4 <_svfprintf_r+0x24c>
 800c8a0:	9903      	ldr	r1, [sp, #12]
 800c8a2:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800c8a6:	f43f ae4e 	beq.w	800c546 <_svfprintf_r+0xdae>
 800c8aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c8ac:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	f1bb 0f00 	cmp.w	fp, #0
 800c8b6:	f103 0304 	add.w	r3, r3, #4
 800c8ba:	8804      	ldrh	r4, [r0, #0]
 800c8bc:	f04f 0500 	mov.w	r5, #0
 800c8c0:	f2c0 80ef 	blt.w	800caa2 <_svfprintf_r+0x130a>
 800c8c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c8c8:	9103      	str	r1, [sp, #12]
 800c8ca:	ea54 0105 	orrs.w	r1, r4, r5
 800c8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c8d0:	4617      	mov	r7, r2
 800c8d2:	f47f a90f 	bne.w	800baf4 <_svfprintf_r+0x35c>
 800c8d6:	f7ff baf5 	b.w	800bec4 <_svfprintf_r+0x72c>
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8de:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	f000 80e2 	beq.w	800caac <_svfprintf_r+0x1314>
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	8814      	ldrh	r4, [r2, #0]
 800c8ec:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ee:	2500      	movs	r5, #0
 800c8f0:	f7ff bb05 	b.w	800befe <_svfprintf_r+0x766>
 800c8f4:	4614      	mov	r4, r2
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8fa:	9324      	str	r3, [sp, #144]	; 0x90
 800c8fc:	442c      	add	r4, r5
 800c8fe:	2b07      	cmp	r3, #7
 800c900:	9425      	str	r4, [sp, #148]	; 0x94
 800c902:	e889 0024 	stmia.w	r9, {r2, r5}
 800c906:	f73f ae5a 	bgt.w	800c5be <_svfprintf_r+0xe26>
 800c90a:	f109 0908 	add.w	r9, r9, #8
 800c90e:	e661      	b.n	800c5d4 <_svfprintf_r+0xe3c>
 800c910:	0800efb8 	.word	0x0800efb8
 800c914:	2700      	movs	r7, #0
 800c916:	45bb      	cmp	fp, r7
 800c918:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800c91c:	f6ff abf8 	blt.w	800c110 <_svfprintf_r+0x978>
 800c920:	9b03      	ldr	r3, [sp, #12]
 800c922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c926:	9303      	str	r3, [sp, #12]
 800c928:	f7ff bbc0 	b.w	800c0ac <_svfprintf_r+0x914>
 800c92c:	aa23      	add	r2, sp, #140	; 0x8c
 800c92e:	9905      	ldr	r1, [sp, #20]
 800c930:	9806      	ldr	r0, [sp, #24]
 800c932:	f001 fdd9 	bl	800e4e8 <__ssprint_r>
 800c936:	2800      	cmp	r0, #0
 800c938:	f47f a828 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c93c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800c93e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c942:	e407      	b.n	800c154 <_svfprintf_r+0x9bc>
 800c944:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c946:	f7ff bbdc 	b.w	800c102 <_svfprintf_r+0x96a>
 800c94a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c94c:	4ab8      	ldr	r2, [pc, #736]	; (800cc30 <_svfprintf_r+0x1498>)
 800c94e:	f8c9 2000 	str.w	r2, [r9]
 800c952:	3301      	adds	r3, #1
 800c954:	3401      	adds	r4, #1
 800c956:	2201      	movs	r2, #1
 800c958:	2b07      	cmp	r3, #7
 800c95a:	9425      	str	r4, [sp, #148]	; 0x94
 800c95c:	9324      	str	r3, [sp, #144]	; 0x90
 800c95e:	f8c9 2004 	str.w	r2, [r9, #4]
 800c962:	f300 808b 	bgt.w	800ca7c <_svfprintf_r+0x12e4>
 800c966:	f109 0908 	add.w	r9, r9, #8
 800c96a:	b92d      	cbnz	r5, 800c978 <_svfprintf_r+0x11e0>
 800c96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c96e:	b91b      	cbnz	r3, 800c978 <_svfprintf_r+0x11e0>
 800c970:	9b03      	ldr	r3, [sp, #12]
 800c972:	07df      	lsls	r7, r3, #31
 800c974:	f57f a9a6 	bpl.w	800bcc4 <_svfprintf_r+0x52c>
 800c978:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c97a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c97c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c97e:	f8c9 2000 	str.w	r2, [r9]
 800c982:	3301      	adds	r3, #1
 800c984:	440c      	add	r4, r1
 800c986:	2b07      	cmp	r3, #7
 800c988:	9425      	str	r4, [sp, #148]	; 0x94
 800c98a:	f8c9 1004 	str.w	r1, [r9, #4]
 800c98e:	9324      	str	r3, [sp, #144]	; 0x90
 800c990:	f300 81cd 	bgt.w	800cd2e <_svfprintf_r+0x1596>
 800c994:	f109 0908 	add.w	r9, r9, #8
 800c998:	426d      	negs	r5, r5
 800c99a:	2d00      	cmp	r5, #0
 800c99c:	f340 80aa 	ble.w	800caf4 <_svfprintf_r+0x135c>
 800c9a0:	4aa4      	ldr	r2, [pc, #656]	; (800cc34 <_svfprintf_r+0x149c>)
 800c9a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800c9a4:	2d10      	cmp	r5, #16
 800c9a6:	f340 80c9 	ble.w	800cb3c <_svfprintf_r+0x13a4>
 800c9aa:	4622      	mov	r2, r4
 800c9ac:	2710      	movs	r7, #16
 800c9ae:	f8dd b018 	ldr.w	fp, [sp, #24]
 800c9b2:	9c05      	ldr	r4, [sp, #20]
 800c9b4:	e005      	b.n	800c9c2 <_svfprintf_r+0x122a>
 800c9b6:	f109 0908 	add.w	r9, r9, #8
 800c9ba:	3d10      	subs	r5, #16
 800c9bc:	2d10      	cmp	r5, #16
 800c9be:	f340 80bc 	ble.w	800cb3a <_svfprintf_r+0x13a2>
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	3210      	adds	r2, #16
 800c9c6:	2b07      	cmp	r3, #7
 800c9c8:	9225      	str	r2, [sp, #148]	; 0x94
 800c9ca:	9324      	str	r3, [sp, #144]	; 0x90
 800c9cc:	f8c9 a000 	str.w	sl, [r9]
 800c9d0:	f8c9 7004 	str.w	r7, [r9, #4]
 800c9d4:	ddef      	ble.n	800c9b6 <_svfprintf_r+0x121e>
 800c9d6:	aa23      	add	r2, sp, #140	; 0x8c
 800c9d8:	4621      	mov	r1, r4
 800c9da:	4658      	mov	r0, fp
 800c9dc:	f001 fd84 	bl	800e4e8 <__ssprint_r>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	f47e afd3 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800c9e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800c9e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c9ea:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800c9ee:	e7e4      	b.n	800c9ba <_svfprintf_r+0x1222>
 800c9f0:	9a03      	ldr	r2, [sp, #12]
 800c9f2:	f7ff ba39 	b.w	800be68 <_svfprintf_r+0x6d0>
 800c9f6:	9a03      	ldr	r2, [sp, #12]
 800c9f8:	e58b      	b.n	800c512 <_svfprintf_r+0xd7a>
 800c9fa:	9b03      	ldr	r3, [sp, #12]
 800c9fc:	f043 0320 	orr.w	r3, r3, #32
 800ca00:	9303      	str	r3, [sp, #12]
 800ca02:	f108 0801 	add.w	r8, r8, #1
 800ca06:	f898 3000 	ldrb.w	r3, [r8]
 800ca0a:	f7fe bf1f 	b.w	800b84c <_svfprintf_r+0xb4>
 800ca0e:	aa23      	add	r2, sp, #140	; 0x8c
 800ca10:	9905      	ldr	r1, [sp, #20]
 800ca12:	9806      	ldr	r0, [sp, #24]
 800ca14:	f001 fd68 	bl	800e4e8 <__ssprint_r>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	f47e afb7 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800ca1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ca20:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ca24:	f7ff bbae 	b.w	800c184 <_svfprintf_r+0x9ec>
 800ca28:	2140      	movs	r1, #64	; 0x40
 800ca2a:	9806      	ldr	r0, [sp, #24]
 800ca2c:	f7fe f9f4 	bl	800ae18 <_malloc_r>
 800ca30:	9a05      	ldr	r2, [sp, #20]
 800ca32:	6010      	str	r0, [r2, #0]
 800ca34:	6110      	str	r0, [r2, #16]
 800ca36:	2800      	cmp	r0, #0
 800ca38:	f000 81f3 	beq.w	800ce22 <_svfprintf_r+0x168a>
 800ca3c:	9a05      	ldr	r2, [sp, #20]
 800ca3e:	2340      	movs	r3, #64	; 0x40
 800ca40:	6153      	str	r3, [r2, #20]
 800ca42:	f7fe bec0 	b.w	800b7c6 <_svfprintf_r+0x2e>
 800ca46:	aa21      	add	r2, sp, #132	; 0x84
 800ca48:	ab1e      	add	r3, sp, #120	; 0x78
 800ca4a:	9201      	str	r2, [sp, #4]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	465a      	mov	r2, fp
 800ca50:	ab1d      	add	r3, sp, #116	; 0x74
 800ca52:	2103      	movs	r1, #3
 800ca54:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 800ca58:	9806      	ldr	r0, [sp, #24]
 800ca5a:	f000 faf5 	bl	800d048 <_dtoa_r>
 800ca5e:	465d      	mov	r5, fp
 800ca60:	4606      	mov	r6, r0
 800ca62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca64:	2b46      	cmp	r3, #70	; 0x46
 800ca66:	eb06 0405 	add.w	r4, r6, r5
 800ca6a:	f47f aec2 	bne.w	800c7f2 <_svfprintf_r+0x105a>
 800ca6e:	7833      	ldrb	r3, [r6, #0]
 800ca70:	2b30      	cmp	r3, #48	; 0x30
 800ca72:	f000 8187 	beq.w	800cd84 <_svfprintf_r+0x15ec>
 800ca76:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ca78:	442c      	add	r4, r5
 800ca7a:	e6ba      	b.n	800c7f2 <_svfprintf_r+0x105a>
 800ca7c:	aa23      	add	r2, sp, #140	; 0x8c
 800ca7e:	9905      	ldr	r1, [sp, #20]
 800ca80:	9806      	ldr	r0, [sp, #24]
 800ca82:	f001 fd31 	bl	800e4e8 <__ssprint_r>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	f47e af80 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800ca8c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ca8e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800ca90:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800ca94:	e769      	b.n	800c96a <_svfprintf_r+0x11d2>
 800ca96:	f1bb 0f00 	cmp.w	fp, #0
 800ca9a:	bf08      	it	eq
 800ca9c:	f04f 0b01 	moveq.w	fp, #1
 800caa0:	e677      	b.n	800c792 <_svfprintf_r+0xffa>
 800caa2:	930a      	str	r3, [sp, #40]	; 0x28
 800caa4:	4617      	mov	r7, r2
 800caa6:	e55c      	b.n	800c562 <_svfprintf_r+0xdca>
 800caa8:	930a      	str	r3, [sp, #40]	; 0x28
 800caaa:	e6f6      	b.n	800c89a <_svfprintf_r+0x1102>
 800caac:	3304      	adds	r3, #4
 800caae:	6814      	ldr	r4, [r2, #0]
 800cab0:	930a      	str	r3, [sp, #40]	; 0x28
 800cab2:	2500      	movs	r5, #0
 800cab4:	f7ff ba23 	b.w	800befe <_svfprintf_r+0x766>
 800cab8:	272d      	movs	r7, #45	; 0x2d
 800caba:	9304      	str	r3, [sp, #16]
 800cabc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cabe:	9303      	str	r3, [sp, #12]
 800cac0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800cac4:	f04f 0b00 	mov.w	fp, #0
 800cac8:	f7ff b839 	b.w	800bb3e <_svfprintf_r+0x3a6>
 800cacc:	4630      	mov	r0, r6
 800cace:	f7f3 fc57 	bl	8000380 <strlen>
 800cad2:	46a3      	mov	fp, r4
 800cad4:	4603      	mov	r3, r0
 800cad6:	9009      	str	r0, [sp, #36]	; 0x24
 800cad8:	f7ff baa2 	b.w	800c020 <_svfprintf_r+0x888>
 800cadc:	aa23      	add	r2, sp, #140	; 0x8c
 800cade:	9905      	ldr	r1, [sp, #20]
 800cae0:	9806      	ldr	r0, [sp, #24]
 800cae2:	f001 fd01 	bl	800e4e8 <__ssprint_r>
 800cae6:	2800      	cmp	r0, #0
 800cae8:	f47e af50 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800caec:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800caee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800caf0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800caf4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800caf6:	f8c9 6000 	str.w	r6, [r9]
 800cafa:	3301      	adds	r3, #1
 800cafc:	440c      	add	r4, r1
 800cafe:	2b07      	cmp	r3, #7
 800cb00:	9425      	str	r4, [sp, #148]	; 0x94
 800cb02:	9324      	str	r3, [sp, #144]	; 0x90
 800cb04:	f8c9 1004 	str.w	r1, [r9, #4]
 800cb08:	f77f a8da 	ble.w	800bcc0 <_svfprintf_r+0x528>
 800cb0c:	f7ff bbfb 	b.w	800c306 <_svfprintf_r+0xb6e>
 800cb10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb12:	1cdd      	adds	r5, r3, #3
 800cb14:	db1e      	blt.n	800cb54 <_svfprintf_r+0x13bc>
 800cb16:	459b      	cmp	fp, r3
 800cb18:	db1c      	blt.n	800cb54 <_svfprintf_r+0x13bc>
 800cb1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb1c:	e68b      	b.n	800c836 <_svfprintf_r+0x109e>
 800cb1e:	4623      	mov	r3, r4
 800cb20:	e67a      	b.n	800c818 <_svfprintf_r+0x1080>
 800cb22:	aa23      	add	r2, sp, #140	; 0x8c
 800cb24:	9905      	ldr	r1, [sp, #20]
 800cb26:	9806      	ldr	r0, [sp, #24]
 800cb28:	f001 fcde 	bl	800e4e8 <__ssprint_r>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	f47e af2d 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800cb32:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800cb34:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800cb38:	e44c      	b.n	800c3d4 <_svfprintf_r+0xc3c>
 800cb3a:	4614      	mov	r4, r2
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb40:	9324      	str	r3, [sp, #144]	; 0x90
 800cb42:	442c      	add	r4, r5
 800cb44:	2b07      	cmp	r3, #7
 800cb46:	9425      	str	r4, [sp, #148]	; 0x94
 800cb48:	e889 0024 	stmia.w	r9, {r2, r5}
 800cb4c:	dcc6      	bgt.n	800cadc <_svfprintf_r+0x1344>
 800cb4e:	f109 0908 	add.w	r9, r9, #8
 800cb52:	e7cf      	b.n	800caf4 <_svfprintf_r+0x135c>
 800cb54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb56:	3a02      	subs	r2, #2
 800cb58:	920d      	str	r2, [sp, #52]	; 0x34
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800cb62:	931d      	str	r3, [sp, #116]	; 0x74
 800cb64:	bfb8      	it	lt
 800cb66:	425b      	neglt	r3, r3
 800cb68:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
 800cb6c:	bfb4      	ite	lt
 800cb6e:	222d      	movlt	r2, #45	; 0x2d
 800cb70:	222b      	movge	r2, #43	; 0x2b
 800cb72:	2b09      	cmp	r3, #9
 800cb74:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800cb78:	f340 80eb 	ble.w	800cd52 <_svfprintf_r+0x15ba>
 800cb7c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 800cb80:	4604      	mov	r4, r0
 800cb82:	4a2d      	ldr	r2, [pc, #180]	; (800cc38 <_svfprintf_r+0x14a0>)
 800cb84:	fb82 2103 	smull	r2, r1, r2, r3
 800cb88:	17da      	asrs	r2, r3, #31
 800cb8a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800cb8e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800cb92:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800cb96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb9a:	2a09      	cmp	r2, #9
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800cba2:	dcee      	bgt.n	800cb82 <_svfprintf_r+0x13ea>
 800cba4:	4621      	mov	r1, r4
 800cba6:	3330      	adds	r3, #48	; 0x30
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800cbae:	4288      	cmp	r0, r1
 800cbb0:	f240 8134 	bls.w	800ce1c <_svfprintf_r+0x1684>
 800cbb4:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
 800cbb8:	4623      	mov	r3, r4
 800cbba:	e001      	b.n	800cbc0 <_svfprintf_r+0x1428>
 800cbbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbc0:	f801 2b01 	strb.w	r2, [r1], #1
 800cbc4:	4298      	cmp	r0, r3
 800cbc6:	d1f9      	bne.n	800cbbc <_svfprintf_r+0x1424>
 800cbc8:	1c43      	adds	r3, r0, #1
 800cbca:	1b1b      	subs	r3, r3, r4
 800cbcc:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800cbd0:	4413      	add	r3, r2
 800cbd2:	aa1f      	add	r2, sp, #124	; 0x7c
 800cbd4:	1a9b      	subs	r3, r3, r2
 800cbd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbd8:	9315      	str	r3, [sp, #84]	; 0x54
 800cbda:	2a01      	cmp	r2, #1
 800cbdc:	4413      	add	r3, r2
 800cbde:	9309      	str	r3, [sp, #36]	; 0x24
 800cbe0:	f340 80e7 	ble.w	800cdb2 <_svfprintf_r+0x161a>
 800cbe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cbe8:	4413      	add	r3, r2
 800cbea:	2200      	movs	r2, #0
 800cbec:	9309      	str	r3, [sp, #36]	; 0x24
 800cbee:	920f      	str	r2, [sp, #60]	; 0x3c
 800cbf0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cbf4:	e62d      	b.n	800c852 <_svfprintf_r+0x10ba>
 800cbf6:	aa23      	add	r2, sp, #140	; 0x8c
 800cbf8:	9905      	ldr	r1, [sp, #20]
 800cbfa:	9806      	ldr	r0, [sp, #24]
 800cbfc:	f001 fc74 	bl	800e4e8 <__ssprint_r>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	f47e aec3 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800cc06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc08:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800cc0a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800cc0e:	e4eb      	b.n	800c5e8 <_svfprintf_r+0xe50>
 800cc10:	aa23      	add	r2, sp, #140	; 0x8c
 800cc12:	9905      	ldr	r1, [sp, #20]
 800cc14:	9806      	ldr	r0, [sp, #24]
 800cc16:	f001 fc67 	bl	800e4e8 <__ssprint_r>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	f47e aeb6 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800cc20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc24:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800cc2c:	e4f4      	b.n	800c618 <_svfprintf_r+0xe80>
 800cc2e:	bf00      	nop
 800cc30:	0800f008 	.word	0x0800f008
 800cc34:	0800efb8 	.word	0x0800efb8
 800cc38:	66666667 	.word	0x66666667
 800cc3c:	2d06      	cmp	r5, #6
 800cc3e:	462b      	mov	r3, r5
 800cc40:	bf28      	it	cs
 800cc42:	2306      	movcs	r3, #6
 800cc44:	9309      	str	r3, [sp, #36]	; 0x24
 800cc46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc4a:	46b3      	mov	fp, r6
 800cc4c:	970a      	str	r7, [sp, #40]	; 0x28
 800cc4e:	960f      	str	r6, [sp, #60]	; 0x3c
 800cc50:	4637      	mov	r7, r6
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	4e86      	ldr	r6, [pc, #536]	; (800ce70 <_svfprintf_r+0x16d8>)
 800cc56:	f7fe bf71 	b.w	800bb3c <_svfprintf_r+0x3a4>
 800cc5a:	f04f 0b06 	mov.w	fp, #6
 800cc5e:	e598      	b.n	800c792 <_svfprintf_r+0xffa>
 800cc60:	aa21      	add	r2, sp, #132	; 0x84
 800cc62:	ab1e      	add	r3, sp, #120	; 0x78
 800cc64:	9201      	str	r2, [sp, #4]
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	465a      	mov	r2, fp
 800cc6a:	ab1d      	add	r3, sp, #116	; 0x74
 800cc6c:	2103      	movs	r1, #3
 800cc6e:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 800cc72:	9806      	ldr	r0, [sp, #24]
 800cc74:	f000 f9e8 	bl	800d048 <_dtoa_r>
 800cc78:	465d      	mov	r5, fp
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	eb00 040b 	add.w	r4, r0, fp
 800cc80:	e6f5      	b.n	800ca6e <_svfprintf_r+0x12d6>
 800cc82:	272d      	movs	r7, #45	; 0x2d
 800cc84:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
 800cc88:	f7ff b8ab 	b.w	800bde2 <_svfprintf_r+0x64a>
 800cc8c:	9303      	str	r3, [sp, #12]
 800cc8e:	f7ff b954 	b.w	800bf3a <_svfprintf_r+0x7a2>
 800cc92:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 800cc96:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800cc9a:	9319      	str	r3, [sp, #100]	; 0x64
 800cc9c:	232d      	movs	r3, #45	; 0x2d
 800cc9e:	9118      	str	r1, [sp, #96]	; 0x60
 800cca0:	9304      	str	r3, [sp, #16]
 800cca2:	e584      	b.n	800c7ae <_svfprintf_r+0x1016>
 800cca4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cca8:	4413      	add	r3, r2
 800ccaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccac:	9309      	str	r3, [sp, #36]	; 0x24
 800ccae:	2a00      	cmp	r2, #0
 800ccb0:	f340 8089 	ble.w	800cdc6 <_svfprintf_r+0x162e>
 800ccb4:	2267      	movs	r2, #103	; 0x67
 800ccb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ccba:	920d      	str	r2, [sp, #52]	; 0x34
 800ccbc:	e5c9      	b.n	800c852 <_svfprintf_r+0x10ba>
 800ccbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccc0:	2b47      	cmp	r3, #71	; 0x47
 800ccc2:	f47f ad95 	bne.w	800c7f0 <_svfprintf_r+0x1058>
 800ccc6:	9b03      	ldr	r3, [sp, #12]
 800ccc8:	07db      	lsls	r3, r3, #31
 800ccca:	f53f aeca 	bmi.w	800ca62 <_svfprintf_r+0x12ca>
 800ccce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccd0:	2f47      	cmp	r7, #71	; 0x47
 800ccd2:	eba3 0306 	sub.w	r3, r3, r6
 800ccd6:	930e      	str	r3, [sp, #56]	; 0x38
 800ccd8:	f43f af1a 	beq.w	800cb10 <_svfprintf_r+0x1378>
 800ccdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccde:	e73c      	b.n	800cb5a <_svfprintf_r+0x13c2>
 800cce0:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800cce4:	970a      	str	r7, [sp, #40]	; 0x28
 800cce6:	9304      	str	r3, [sp, #16]
 800cce8:	9509      	str	r5, [sp, #36]	; 0x24
 800ccea:	4683      	mov	fp, r0
 800ccec:	900f      	str	r0, [sp, #60]	; 0x3c
 800ccee:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800ccf2:	f7fe bf23 	b.w	800bb3c <_svfprintf_r+0x3a4>
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	dd6d      	ble.n	800cdd6 <_svfprintf_r+0x163e>
 800ccfa:	f1bb 0f00 	cmp.w	fp, #0
 800ccfe:	d14f      	bne.n	800cda0 <_svfprintf_r+0x1608>
 800cd00:	9a03      	ldr	r2, [sp, #12]
 800cd02:	07d4      	lsls	r4, r2, #31
 800cd04:	d44c      	bmi.n	800cda0 <_svfprintf_r+0x1608>
 800cd06:	461a      	mov	r2, r3
 800cd08:	9209      	str	r2, [sp, #36]	; 0x24
 800cd0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd0e:	e5a0      	b.n	800c852 <_svfprintf_r+0x10ba>
 800cd10:	9b03      	ldr	r3, [sp, #12]
 800cd12:	07db      	lsls	r3, r3, #31
 800cd14:	465f      	mov	r7, fp
 800cd16:	d505      	bpl.n	800cd24 <_svfprintf_r+0x158c>
 800cd18:	ae40      	add	r6, sp, #256	; 0x100
 800cd1a:	2330      	movs	r3, #48	; 0x30
 800cd1c:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800cd20:	f7fe bf02 	b.w	800bb28 <_svfprintf_r+0x390>
 800cd24:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800cd28:	ae30      	add	r6, sp, #192	; 0xc0
 800cd2a:	f7fe bf00 	b.w	800bb2e <_svfprintf_r+0x396>
 800cd2e:	aa23      	add	r2, sp, #140	; 0x8c
 800cd30:	9905      	ldr	r1, [sp, #20]
 800cd32:	9806      	ldr	r0, [sp, #24]
 800cd34:	f001 fbd8 	bl	800e4e8 <__ssprint_r>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	f47e ae27 	bne.w	800b98c <_svfprintf_r+0x1f4>
 800cd3e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800cd40:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800cd42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cd44:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 800cd48:	e626      	b.n	800c998 <_svfprintf_r+0x1200>
 800cd4a:	46a0      	mov	r8, r4
 800cd4c:	2500      	movs	r5, #0
 800cd4e:	f7fe bd7f 	b.w	800b850 <_svfprintf_r+0xb8>
 800cd52:	3330      	adds	r3, #48	; 0x30
 800cd54:	2230      	movs	r2, #48	; 0x30
 800cd56:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800cd5a:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 800cd5e:	ab20      	add	r3, sp, #128	; 0x80
 800cd60:	e737      	b.n	800cbd2 <_svfprintf_r+0x143a>
 800cd62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd64:	e558      	b.n	800c818 <_svfprintf_r+0x1080>
 800cd66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd6a:	4413      	add	r3, r2
 800cd6c:	2267      	movs	r2, #103	; 0x67
 800cd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd70:	920d      	str	r2, [sp, #52]	; 0x34
 800cd72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd76:	e56c      	b.n	800c852 <_svfprintf_r+0x10ba>
 800cd78:	4e3e      	ldr	r6, [pc, #248]	; (800ce74 <_svfprintf_r+0x16dc>)
 800cd7a:	4b3f      	ldr	r3, [pc, #252]	; (800ce78 <_svfprintf_r+0x16e0>)
 800cd7c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
 800cd80:	f7ff b831 	b.w	800bde6 <_svfprintf_r+0x64e>
 800cd84:	2200      	movs	r2, #0
 800cd86:	2300      	movs	r3, #0
 800cd88:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800cd8c:	f7f3 ffd8 	bl	8000d40 <__aeabi_dcmpeq>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	f47f ae70 	bne.w	800ca76 <_svfprintf_r+0x12de>
 800cd96:	f1c5 0501 	rsb	r5, r5, #1
 800cd9a:	951d      	str	r5, [sp, #116]	; 0x74
 800cd9c:	442c      	add	r4, r5
 800cd9e:	e528      	b.n	800c7f2 <_svfprintf_r+0x105a>
 800cda0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cda2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cda4:	189d      	adds	r5, r3, r2
 800cda6:	eb05 030b 	add.w	r3, r5, fp
 800cdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800cdac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cdb0:	e54f      	b.n	800c852 <_svfprintf_r+0x10ba>
 800cdb2:	9b03      	ldr	r3, [sp, #12]
 800cdb4:	f013 0301 	ands.w	r3, r3, #1
 800cdb8:	f47f af14 	bne.w	800cbe4 <_svfprintf_r+0x144c>
 800cdbc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cdc4:	e545      	b.n	800c852 <_svfprintf_r+0x10ba>
 800cdc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdca:	f1c3 0301 	rsb	r3, r3, #1
 800cdce:	441a      	add	r2, r3
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	9209      	str	r2, [sp, #36]	; 0x24
 800cdd4:	e76e      	b.n	800ccb4 <_svfprintf_r+0x151c>
 800cdd6:	f1bb 0f00 	cmp.w	fp, #0
 800cdda:	d102      	bne.n	800cde2 <_svfprintf_r+0x164a>
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	07d8      	lsls	r0, r3, #31
 800cde0:	d507      	bpl.n	800cdf2 <_svfprintf_r+0x165a>
 800cde2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cde4:	1c5d      	adds	r5, r3, #1
 800cde6:	eb05 030b 	add.w	r3, r5, fp
 800cdea:	9309      	str	r3, [sp, #36]	; 0x24
 800cdec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cdf0:	e52f      	b.n	800c852 <_svfprintf_r+0x10ba>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf6:	e52c      	b.n	800c852 <_svfprintf_r+0x10ba>
 800cdf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cdfa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cdfe:	6805      	ldr	r5, [r0, #0]
 800ce00:	3004      	adds	r0, #4
 800ce02:	2d00      	cmp	r5, #0
 800ce04:	900a      	str	r0, [sp, #40]	; 0x28
 800ce06:	46a0      	mov	r8, r4
 800ce08:	f6be ad20 	bge.w	800b84c <_svfprintf_r+0xb4>
 800ce0c:	f04f 35ff 	mov.w	r5, #4294967295
 800ce10:	f7fe bd1c 	b.w	800b84c <_svfprintf_r+0xb4>
 800ce14:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce18:	f7fe bdc9 	b.w	800b9ae <_svfprintf_r+0x216>
 800ce1c:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800ce20:	e6d7      	b.n	800cbd2 <_svfprintf_r+0x143a>
 800ce22:	9a06      	ldr	r2, [sp, #24]
 800ce24:	230c      	movs	r3, #12
 800ce26:	6013      	str	r3, [r2, #0]
 800ce28:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2c:	f7fe bdb7 	b.w	800b99e <_svfprintf_r+0x206>
 800ce30:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce34:	f7fe be38 	b.w	800baa8 <_svfprintf_r+0x310>
 800ce38:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce3c:	f7fe bf9a 	b.w	800bd74 <_svfprintf_r+0x5dc>
 800ce40:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce44:	f7ff b84d 	b.w	800bee2 <_svfprintf_r+0x74a>
 800ce48:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce4c:	f7ff b81b 	b.w	800be86 <_svfprintf_r+0x6ee>
 800ce50:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce54:	f7fe bfed 	b.w	800be32 <_svfprintf_r+0x69a>
 800ce58:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce5c:	f7ff b935 	b.w	800c0ca <_svfprintf_r+0x932>
 800ce60:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce64:	f7ff b910 	b.w	800c088 <_svfprintf_r+0x8f0>
 800ce68:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800ce6c:	f7ff b8ee 	b.w	800c04c <_svfprintf_r+0x8b4>
 800ce70:	0800f000 	.word	0x0800f000
 800ce74:	0800efd4 	.word	0x0800efd4
 800ce78:	0800efd0 	.word	0x0800efd0

0800ce7c <__register_exitproc>:
 800ce7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce80:	4c25      	ldr	r4, [pc, #148]	; (800cf18 <__register_exitproc+0x9c>)
 800ce82:	6825      	ldr	r5, [r4, #0]
 800ce84:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800ce88:	4606      	mov	r6, r0
 800ce8a:	4688      	mov	r8, r1
 800ce8c:	4692      	mov	sl, r2
 800ce8e:	4699      	mov	r9, r3
 800ce90:	b3c4      	cbz	r4, 800cf04 <__register_exitproc+0x88>
 800ce92:	6860      	ldr	r0, [r4, #4]
 800ce94:	281f      	cmp	r0, #31
 800ce96:	dc17      	bgt.n	800cec8 <__register_exitproc+0x4c>
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	b176      	cbz	r6, 800ceba <__register_exitproc+0x3e>
 800ce9c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800cea0:	2201      	movs	r2, #1
 800cea2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800cea6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 800ceaa:	4082      	lsls	r2, r0
 800ceac:	4311      	orrs	r1, r2
 800ceae:	2e02      	cmp	r6, #2
 800ceb0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 800ceb4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800ceb8:	d01e      	beq.n	800cef8 <__register_exitproc+0x7c>
 800ceba:	3002      	adds	r0, #2
 800cebc:	6063      	str	r3, [r4, #4]
 800cebe:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800cec2:	2000      	movs	r0, #0
 800cec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec8:	4b14      	ldr	r3, [pc, #80]	; (800cf1c <__register_exitproc+0xa0>)
 800ceca:	b303      	cbz	r3, 800cf0e <__register_exitproc+0x92>
 800cecc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ced0:	f7fd ff92 	bl	800adf8 <malloc>
 800ced4:	4604      	mov	r4, r0
 800ced6:	b1d0      	cbz	r0, 800cf0e <__register_exitproc+0x92>
 800ced8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800cedc:	2700      	movs	r7, #0
 800cede:	e880 0088 	stmia.w	r0, {r3, r7}
 800cee2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800cee6:	4638      	mov	r0, r7
 800cee8:	2301      	movs	r3, #1
 800ceea:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800ceee:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800cef2:	2e00      	cmp	r6, #0
 800cef4:	d0e1      	beq.n	800ceba <__register_exitproc+0x3e>
 800cef6:	e7d1      	b.n	800ce9c <__register_exitproc+0x20>
 800cef8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800cefc:	430a      	orrs	r2, r1
 800cefe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800cf02:	e7da      	b.n	800ceba <__register_exitproc+0x3e>
 800cf04:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800cf08:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800cf0c:	e7c1      	b.n	800ce92 <__register_exitproc+0x16>
 800cf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf16:	bf00      	nop
 800cf18:	0800efb4 	.word	0x0800efb4
 800cf1c:	0800adf9 	.word	0x0800adf9

0800cf20 <quorem>:
 800cf20:	6902      	ldr	r2, [r0, #16]
 800cf22:	690b      	ldr	r3, [r1, #16]
 800cf24:	4293      	cmp	r3, r2
 800cf26:	f300 808d 	bgt.w	800d044 <quorem+0x124>
 800cf2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2e:	f103 38ff 	add.w	r8, r3, #4294967295
 800cf32:	f101 0714 	add.w	r7, r1, #20
 800cf36:	f100 0b14 	add.w	fp, r0, #20
 800cf3a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800cf3e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800cf42:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800cf46:	b083      	sub	sp, #12
 800cf48:	3201      	adds	r2, #1
 800cf4a:	fbb3 f9f2 	udiv	r9, r3, r2
 800cf4e:	eb0b 0304 	add.w	r3, fp, r4
 800cf52:	9400      	str	r4, [sp, #0]
 800cf54:	eb07 0a04 	add.w	sl, r7, r4
 800cf58:	9301      	str	r3, [sp, #4]
 800cf5a:	f1b9 0f00 	cmp.w	r9, #0
 800cf5e:	d039      	beq.n	800cfd4 <quorem+0xb4>
 800cf60:	2500      	movs	r5, #0
 800cf62:	46bc      	mov	ip, r7
 800cf64:	46de      	mov	lr, fp
 800cf66:	462b      	mov	r3, r5
 800cf68:	f85c 6b04 	ldr.w	r6, [ip], #4
 800cf6c:	f8de 2000 	ldr.w	r2, [lr]
 800cf70:	b2b4      	uxth	r4, r6
 800cf72:	fb09 5504 	mla	r5, r9, r4, r5
 800cf76:	0c36      	lsrs	r6, r6, #16
 800cf78:	0c2c      	lsrs	r4, r5, #16
 800cf7a:	fb09 4406 	mla	r4, r9, r6, r4
 800cf7e:	b2ad      	uxth	r5, r5
 800cf80:	1b5b      	subs	r3, r3, r5
 800cf82:	b2a6      	uxth	r6, r4
 800cf84:	fa13 f382 	uxtah	r3, r3, r2
 800cf88:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800cf8c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800cf96:	45e2      	cmp	sl, ip
 800cf98:	f84e 3b04 	str.w	r3, [lr], #4
 800cf9c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 800cfa0:	ea4f 4326 	mov.w	r3, r6, asr #16
 800cfa4:	d2e0      	bcs.n	800cf68 <quorem+0x48>
 800cfa6:	9b00      	ldr	r3, [sp, #0]
 800cfa8:	f85b 3003 	ldr.w	r3, [fp, r3]
 800cfac:	b993      	cbnz	r3, 800cfd4 <quorem+0xb4>
 800cfae:	9c01      	ldr	r4, [sp, #4]
 800cfb0:	1f23      	subs	r3, r4, #4
 800cfb2:	459b      	cmp	fp, r3
 800cfb4:	d20c      	bcs.n	800cfd0 <quorem+0xb0>
 800cfb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cfba:	b94b      	cbnz	r3, 800cfd0 <quorem+0xb0>
 800cfbc:	f1a4 0308 	sub.w	r3, r4, #8
 800cfc0:	e002      	b.n	800cfc8 <quorem+0xa8>
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	3b04      	subs	r3, #4
 800cfc6:	b91a      	cbnz	r2, 800cfd0 <quorem+0xb0>
 800cfc8:	459b      	cmp	fp, r3
 800cfca:	f108 38ff 	add.w	r8, r8, #4294967295
 800cfce:	d3f8      	bcc.n	800cfc2 <quorem+0xa2>
 800cfd0:	f8c0 8010 	str.w	r8, [r0, #16]
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	f001 f97d 	bl	800e2d4 <__mcmp>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	db2e      	blt.n	800d03c <quorem+0x11c>
 800cfde:	f109 0901 	add.w	r9, r9, #1
 800cfe2:	465d      	mov	r5, fp
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f857 1b04 	ldr.w	r1, [r7], #4
 800cfea:	6828      	ldr	r0, [r5, #0]
 800cfec:	b28a      	uxth	r2, r1
 800cfee:	1a9a      	subs	r2, r3, r2
 800cff0:	0c09      	lsrs	r1, r1, #16
 800cff2:	fa12 f280 	uxtah	r2, r2, r0
 800cff6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800cffa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800cffe:	b291      	uxth	r1, r2
 800d000:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d004:	45ba      	cmp	sl, r7
 800d006:	f845 1b04 	str.w	r1, [r5], #4
 800d00a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800d00e:	d2ea      	bcs.n	800cfe6 <quorem+0xc6>
 800d010:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 800d014:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 800d018:	b982      	cbnz	r2, 800d03c <quorem+0x11c>
 800d01a:	1f1a      	subs	r2, r3, #4
 800d01c:	4593      	cmp	fp, r2
 800d01e:	d20b      	bcs.n	800d038 <quorem+0x118>
 800d020:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d024:	b942      	cbnz	r2, 800d038 <quorem+0x118>
 800d026:	3b08      	subs	r3, #8
 800d028:	e002      	b.n	800d030 <quorem+0x110>
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	3b04      	subs	r3, #4
 800d02e:	b91a      	cbnz	r2, 800d038 <quorem+0x118>
 800d030:	459b      	cmp	fp, r3
 800d032:	f108 38ff 	add.w	r8, r8, #4294967295
 800d036:	d3f8      	bcc.n	800d02a <quorem+0x10a>
 800d038:	f8c4 8010 	str.w	r8, [r4, #16]
 800d03c:	4648      	mov	r0, r9
 800d03e:	b003      	add	sp, #12
 800d040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d044:	2000      	movs	r0, #0
 800d046:	4770      	bx	lr

0800d048 <_dtoa_r>:
 800d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	ec57 6b10 	vmov	r6, r7, d0
 800d050:	b09b      	sub	sp, #108	; 0x6c
 800d052:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800d054:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800d056:	9100      	str	r1, [sp, #0]
 800d058:	4681      	mov	r9, r0
 800d05a:	9205      	str	r2, [sp, #20]
 800d05c:	9303      	str	r3, [sp, #12]
 800d05e:	ee10 aa10 	vmov	sl, s0
 800d062:	46bb      	mov	fp, r7
 800d064:	b154      	cbz	r4, 800d07c <_dtoa_r+0x34>
 800d066:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d068:	6062      	str	r2, [r4, #4]
 800d06a:	2301      	movs	r3, #1
 800d06c:	4093      	lsls	r3, r2
 800d06e:	60a3      	str	r3, [r4, #8]
 800d070:	4621      	mov	r1, r4
 800d072:	f000 ff4d 	bl	800df10 <_Bfree>
 800d076:	2300      	movs	r3, #0
 800d078:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800d07c:	f1bb 0f00 	cmp.w	fp, #0
 800d080:	465c      	mov	r4, fp
 800d082:	db34      	blt.n	800d0ee <_dtoa_r+0xa6>
 800d084:	2300      	movs	r3, #0
 800d086:	602b      	str	r3, [r5, #0]
 800d088:	4ba1      	ldr	r3, [pc, #644]	; (800d310 <_dtoa_r+0x2c8>)
 800d08a:	461a      	mov	r2, r3
 800d08c:	4023      	ands	r3, r4
 800d08e:	4293      	cmp	r3, r2
 800d090:	d016      	beq.n	800d0c0 <_dtoa_r+0x78>
 800d092:	2200      	movs	r2, #0
 800d094:	2300      	movs	r3, #0
 800d096:	4650      	mov	r0, sl
 800d098:	4659      	mov	r1, fp
 800d09a:	f7f3 fe51 	bl	8000d40 <__aeabi_dcmpeq>
 800d09e:	4656      	mov	r6, sl
 800d0a0:	465f      	mov	r7, fp
 800d0a2:	4680      	mov	r8, r0
 800d0a4:	b348      	cbz	r0, 800d0fa <_dtoa_r+0xb2>
 800d0a6:	9a03      	ldr	r2, [sp, #12]
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	6013      	str	r3, [r2, #0]
 800d0ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f000 80be 	beq.w	800d230 <_dtoa_r+0x1e8>
 800d0b4:	4897      	ldr	r0, [pc, #604]	; (800d314 <_dtoa_r+0x2cc>)
 800d0b6:	6018      	str	r0, [r3, #0]
 800d0b8:	3801      	subs	r0, #1
 800d0ba:	b01b      	add	sp, #108	; 0x6c
 800d0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c0:	9a03      	ldr	r2, [sp, #12]
 800d0c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	f1ba 0f00 	cmp.w	sl, #0
 800d0cc:	f000 809a 	beq.w	800d204 <_dtoa_r+0x1bc>
 800d0d0:	4891      	ldr	r0, [pc, #580]	; (800d318 <_dtoa_r+0x2d0>)
 800d0d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d0f0      	beq.n	800d0ba <_dtoa_r+0x72>
 800d0d8:	78c3      	ldrb	r3, [r0, #3]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f000 80aa 	beq.w	800d234 <_dtoa_r+0x1ec>
 800d0e0:	f100 0308 	add.w	r3, r0, #8
 800d0e4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	b01b      	add	sp, #108	; 0x6c
 800d0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 800d0f4:	602b      	str	r3, [r5, #0]
 800d0f6:	46a3      	mov	fp, r4
 800d0f8:	e7c6      	b.n	800d088 <_dtoa_r+0x40>
 800d0fa:	aa18      	add	r2, sp, #96	; 0x60
 800d0fc:	a919      	add	r1, sp, #100	; 0x64
 800d0fe:	ec47 6b10 	vmov	d0, r6, r7
 800d102:	4648      	mov	r0, r9
 800d104:	f001 f992 	bl	800e42c <__d2b>
 800d108:	0d25      	lsrs	r5, r4, #20
 800d10a:	900a      	str	r0, [sp, #40]	; 0x28
 800d10c:	f040 8083 	bne.w	800d216 <_dtoa_r+0x1ce>
 800d110:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800d112:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d114:	442e      	add	r6, r5
 800d116:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800d11a:	2b20      	cmp	r3, #32
 800d11c:	f340 8288 	ble.w	800d630 <_dtoa_r+0x5e8>
 800d120:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d124:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800d128:	409c      	lsls	r4, r3
 800d12a:	fa2a f000 	lsr.w	r0, sl, r0
 800d12e:	4320      	orrs	r0, r4
 800d130:	f7f3 fb28 	bl	8000784 <__aeabi_ui2d>
 800d134:	2301      	movs	r3, #1
 800d136:	1e74      	subs	r4, r6, #1
 800d138:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d13c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d13e:	2200      	movs	r2, #0
 800d140:	4b76      	ldr	r3, [pc, #472]	; (800d31c <_dtoa_r+0x2d4>)
 800d142:	f7f3 f9e1 	bl	8000508 <__aeabi_dsub>
 800d146:	a36c      	add	r3, pc, #432	; (adr r3, 800d2f8 <_dtoa_r+0x2b0>)
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	f7f3 fb90 	bl	8000870 <__aeabi_dmul>
 800d150:	a36b      	add	r3, pc, #428	; (adr r3, 800d300 <_dtoa_r+0x2b8>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	f7f3 f9d9 	bl	800050c <__adddf3>
 800d15a:	4606      	mov	r6, r0
 800d15c:	4620      	mov	r0, r4
 800d15e:	460f      	mov	r7, r1
 800d160:	f7f3 fb20 	bl	80007a4 <__aeabi_i2d>
 800d164:	a368      	add	r3, pc, #416	; (adr r3, 800d308 <_dtoa_r+0x2c0>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	f7f3 fb81 	bl	8000870 <__aeabi_dmul>
 800d16e:	4602      	mov	r2, r0
 800d170:	460b      	mov	r3, r1
 800d172:	4630      	mov	r0, r6
 800d174:	4639      	mov	r1, r7
 800d176:	f7f3 f9c9 	bl	800050c <__adddf3>
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	f7f3 fe27 	bl	8000dd0 <__aeabi_d2iz>
 800d182:	2200      	movs	r2, #0
 800d184:	9004      	str	r0, [sp, #16]
 800d186:	2300      	movs	r3, #0
 800d188:	4630      	mov	r0, r6
 800d18a:	4639      	mov	r1, r7
 800d18c:	f7f3 fde2 	bl	8000d54 <__aeabi_dcmplt>
 800d190:	2800      	cmp	r0, #0
 800d192:	f040 8228 	bne.w	800d5e6 <_dtoa_r+0x59e>
 800d196:	9e04      	ldr	r6, [sp, #16]
 800d198:	2e16      	cmp	r6, #22
 800d19a:	f200 8221 	bhi.w	800d5e0 <_dtoa_r+0x598>
 800d19e:	4b60      	ldr	r3, [pc, #384]	; (800d320 <_dtoa_r+0x2d8>)
 800d1a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d1a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1a8:	4652      	mov	r2, sl
 800d1aa:	465b      	mov	r3, fp
 800d1ac:	f7f3 fdf0 	bl	8000d90 <__aeabi_dcmpgt>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	f000 8242 	beq.w	800d63a <_dtoa_r+0x5f2>
 800d1b6:	1e73      	subs	r3, r6, #1
 800d1b8:	9304      	str	r3, [sp, #16]
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	930d      	str	r3, [sp, #52]	; 0x34
 800d1be:	1b2d      	subs	r5, r5, r4
 800d1c0:	f1b5 0801 	subs.w	r8, r5, #1
 800d1c4:	f100 822a 	bmi.w	800d61c <_dtoa_r+0x5d4>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	9307      	str	r3, [sp, #28]
 800d1cc:	9b04      	ldr	r3, [sp, #16]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f2c0 821b 	blt.w	800d60a <_dtoa_r+0x5c2>
 800d1d4:	4498      	add	r8, r3
 800d1d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d1d8:	2300      	movs	r3, #0
 800d1da:	9306      	str	r3, [sp, #24]
 800d1dc:	9b00      	ldr	r3, [sp, #0]
 800d1de:	2b09      	cmp	r3, #9
 800d1e0:	d82a      	bhi.n	800d238 <_dtoa_r+0x1f0>
 800d1e2:	2b05      	cmp	r3, #5
 800d1e4:	f340 8644 	ble.w	800de70 <_dtoa_r+0xe28>
 800d1e8:	3b04      	subs	r3, #4
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	2600      	movs	r6, #0
 800d1ee:	9b00      	ldr	r3, [sp, #0]
 800d1f0:	3b02      	subs	r3, #2
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	f200 8623 	bhi.w	800de3e <_dtoa_r+0xdf6>
 800d1f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d1fc:	0224032b 	.word	0x0224032b
 800d200:	04500336 	.word	0x04500336
 800d204:	4b44      	ldr	r3, [pc, #272]	; (800d318 <_dtoa_r+0x2d0>)
 800d206:	4a47      	ldr	r2, [pc, #284]	; (800d324 <_dtoa_r+0x2dc>)
 800d208:	f3c4 0013 	ubfx	r0, r4, #0, #20
 800d20c:	2800      	cmp	r0, #0
 800d20e:	bf14      	ite	ne
 800d210:	4618      	movne	r0, r3
 800d212:	4610      	moveq	r0, r2
 800d214:	e75d      	b.n	800d0d2 <_dtoa_r+0x8a>
 800d216:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d21a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d21e:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800d222:	4650      	mov	r0, sl
 800d224:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800d228:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d22c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800d22e:	e786      	b.n	800d13e <_dtoa_r+0xf6>
 800d230:	483d      	ldr	r0, [pc, #244]	; (800d328 <_dtoa_r+0x2e0>)
 800d232:	e742      	b.n	800d0ba <_dtoa_r+0x72>
 800d234:	1cc3      	adds	r3, r0, #3
 800d236:	e755      	b.n	800d0e4 <_dtoa_r+0x9c>
 800d238:	2100      	movs	r1, #0
 800d23a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800d23e:	4648      	mov	r0, r9
 800d240:	460c      	mov	r4, r1
 800d242:	9100      	str	r1, [sp, #0]
 800d244:	f000 fe3e 	bl	800dec4 <_Balloc>
 800d248:	f04f 33ff 	mov.w	r3, #4294967295
 800d24c:	9308      	str	r3, [sp, #32]
 800d24e:	930e      	str	r3, [sp, #56]	; 0x38
 800d250:	2301      	movs	r3, #1
 800d252:	9009      	str	r0, [sp, #36]	; 0x24
 800d254:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800d258:	9405      	str	r4, [sp, #20]
 800d25a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d25c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f2c0 80d0 	blt.w	800d404 <_dtoa_r+0x3bc>
 800d264:	9a04      	ldr	r2, [sp, #16]
 800d266:	2a0e      	cmp	r2, #14
 800d268:	f300 80cc 	bgt.w	800d404 <_dtoa_r+0x3bc>
 800d26c:	4b2c      	ldr	r3, [pc, #176]	; (800d320 <_dtoa_r+0x2d8>)
 800d26e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d272:	ed93 7b00 	vldr	d7, [r3]
 800d276:	9b05      	ldr	r3, [sp, #20]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	ed8d 7b00 	vstr	d7, [sp]
 800d27e:	f2c0 82fe 	blt.w	800d87e <_dtoa_r+0x836>
 800d282:	4656      	mov	r6, sl
 800d284:	465f      	mov	r7, fp
 800d286:	e9dd ab00 	ldrd	sl, fp, [sp]
 800d28a:	4630      	mov	r0, r6
 800d28c:	4652      	mov	r2, sl
 800d28e:	465b      	mov	r3, fp
 800d290:	4639      	mov	r1, r7
 800d292:	f7f3 fc17 	bl	8000ac4 <__aeabi_ddiv>
 800d296:	f7f3 fd9b 	bl	8000dd0 <__aeabi_d2iz>
 800d29a:	4604      	mov	r4, r0
 800d29c:	f7f3 fa82 	bl	80007a4 <__aeabi_i2d>
 800d2a0:	4652      	mov	r2, sl
 800d2a2:	465b      	mov	r3, fp
 800d2a4:	f7f3 fae4 	bl	8000870 <__aeabi_dmul>
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f7f3 f92a 	bl	8000508 <__aeabi_dsub>
 800d2b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d2b6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800d2ba:	702b      	strb	r3, [r5, #0]
 800d2bc:	9b08      	ldr	r3, [sp, #32]
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	460f      	mov	r7, r1
 800d2c4:	f105 0501 	add.w	r5, r5, #1
 800d2c8:	d061      	beq.n	800d38e <_dtoa_r+0x346>
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	4b17      	ldr	r3, [pc, #92]	; (800d32c <_dtoa_r+0x2e4>)
 800d2ce:	f7f3 facf 	bl	8000870 <__aeabi_dmul>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	460f      	mov	r7, r1
 800d2da:	f7f3 fd31 	bl	8000d40 <__aeabi_dcmpeq>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d17d      	bne.n	800d3de <_dtoa_r+0x396>
 800d2e2:	f8cd 9014 	str.w	r9, [sp, #20]
 800d2e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d2ea:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800d2ee:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d2f2:	e028      	b.n	800d346 <_dtoa_r+0x2fe>
 800d2f4:	f3af 8000 	nop.w
 800d2f8:	636f4361 	.word	0x636f4361
 800d2fc:	3fd287a7 	.word	0x3fd287a7
 800d300:	8b60c8b3 	.word	0x8b60c8b3
 800d304:	3fc68a28 	.word	0x3fc68a28
 800d308:	509f79fb 	.word	0x509f79fb
 800d30c:	3fd34413 	.word	0x3fd34413
 800d310:	7ff00000 	.word	0x7ff00000
 800d314:	0800f009 	.word	0x0800f009
 800d318:	0800f028 	.word	0x0800f028
 800d31c:	3ff80000 	.word	0x3ff80000
 800d320:	0800f040 	.word	0x0800f040
 800d324:	0800f01c 	.word	0x0800f01c
 800d328:	0800f008 	.word	0x0800f008
 800d32c:	40240000 	.word	0x40240000
 800d330:	f7f3 fa9e 	bl	8000870 <__aeabi_dmul>
 800d334:	2200      	movs	r2, #0
 800d336:	2300      	movs	r3, #0
 800d338:	4606      	mov	r6, r0
 800d33a:	460f      	mov	r7, r1
 800d33c:	f7f3 fd00 	bl	8000d40 <__aeabi_dcmpeq>
 800d340:	2800      	cmp	r0, #0
 800d342:	f040 83ae 	bne.w	800daa2 <_dtoa_r+0xa5a>
 800d346:	4642      	mov	r2, r8
 800d348:	464b      	mov	r3, r9
 800d34a:	4630      	mov	r0, r6
 800d34c:	4639      	mov	r1, r7
 800d34e:	f7f3 fbb9 	bl	8000ac4 <__aeabi_ddiv>
 800d352:	f7f3 fd3d 	bl	8000dd0 <__aeabi_d2iz>
 800d356:	4604      	mov	r4, r0
 800d358:	f7f3 fa24 	bl	80007a4 <__aeabi_i2d>
 800d35c:	4642      	mov	r2, r8
 800d35e:	464b      	mov	r3, r9
 800d360:	f7f3 fa86 	bl	8000870 <__aeabi_dmul>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4630      	mov	r0, r6
 800d36a:	4639      	mov	r1, r7
 800d36c:	f7f3 f8cc 	bl	8000508 <__aeabi_dsub>
 800d370:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800d374:	f805 eb01 	strb.w	lr, [r5], #1
 800d378:	ebcb 0e05 	rsb	lr, fp, r5
 800d37c:	45d6      	cmp	lr, sl
 800d37e:	4606      	mov	r6, r0
 800d380:	460f      	mov	r7, r1
 800d382:	f04f 0200 	mov.w	r2, #0
 800d386:	4bae      	ldr	r3, [pc, #696]	; (800d640 <_dtoa_r+0x5f8>)
 800d388:	d1d2      	bne.n	800d330 <_dtoa_r+0x2e8>
 800d38a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d38e:	4632      	mov	r2, r6
 800d390:	463b      	mov	r3, r7
 800d392:	4630      	mov	r0, r6
 800d394:	4639      	mov	r1, r7
 800d396:	f7f3 f8b9 	bl	800050c <__adddf3>
 800d39a:	4606      	mov	r6, r0
 800d39c:	460f      	mov	r7, r1
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3a6:	f7f3 fcd5 	bl	8000d54 <__aeabi_dcmplt>
 800d3aa:	b940      	cbnz	r0, 800d3be <_dtoa_r+0x376>
 800d3ac:	4632      	mov	r2, r6
 800d3ae:	463b      	mov	r3, r7
 800d3b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3b4:	f7f3 fcc4 	bl	8000d40 <__aeabi_dcmpeq>
 800d3b8:	b188      	cbz	r0, 800d3de <_dtoa_r+0x396>
 800d3ba:	07e3      	lsls	r3, r4, #31
 800d3bc:	d50f      	bpl.n	800d3de <_dtoa_r+0x396>
 800d3be:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800d3c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3c4:	1e6b      	subs	r3, r5, #1
 800d3c6:	e004      	b.n	800d3d2 <_dtoa_r+0x38a>
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	f000 83fc 	beq.w	800dbc6 <_dtoa_r+0xb7e>
 800d3ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3d2:	2c39      	cmp	r4, #57	; 0x39
 800d3d4:	f103 0501 	add.w	r5, r3, #1
 800d3d8:	d0f6      	beq.n	800d3c8 <_dtoa_r+0x380>
 800d3da:	3401      	adds	r4, #1
 800d3dc:	701c      	strb	r4, [r3, #0]
 800d3de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d3e0:	4648      	mov	r0, r9
 800d3e2:	f000 fd95 	bl	800df10 <_Bfree>
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	9b04      	ldr	r3, [sp, #16]
 800d3ea:	702a      	strb	r2, [r5, #0]
 800d3ec:	9a03      	ldr	r2, [sp, #12]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	6013      	str	r3, [r2, #0]
 800d3f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 839b 	beq.w	800db30 <_dtoa_r+0xae8>
 800d3fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3fc:	601d      	str	r5, [r3, #0]
 800d3fe:	b01b      	add	sp, #108	; 0x6c
 800d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d406:	2a00      	cmp	r2, #0
 800d408:	f000 810e 	beq.w	800d628 <_dtoa_r+0x5e0>
 800d40c:	9a00      	ldr	r2, [sp, #0]
 800d40e:	2a01      	cmp	r2, #1
 800d410:	f340 8257 	ble.w	800d8c2 <_dtoa_r+0x87a>
 800d414:	9b08      	ldr	r3, [sp, #32]
 800d416:	9a06      	ldr	r2, [sp, #24]
 800d418:	1e5f      	subs	r7, r3, #1
 800d41a:	42ba      	cmp	r2, r7
 800d41c:	f2c0 838b 	blt.w	800db36 <_dtoa_r+0xaee>
 800d420:	1bd7      	subs	r7, r2, r7
 800d422:	9b08      	ldr	r3, [sp, #32]
 800d424:	2b00      	cmp	r3, #0
 800d426:	f2c0 8480 	blt.w	800dd2a <_dtoa_r+0xce2>
 800d42a:	9d07      	ldr	r5, [sp, #28]
 800d42c:	9b08      	ldr	r3, [sp, #32]
 800d42e:	9a07      	ldr	r2, [sp, #28]
 800d430:	2101      	movs	r1, #1
 800d432:	441a      	add	r2, r3
 800d434:	4648      	mov	r0, r9
 800d436:	9207      	str	r2, [sp, #28]
 800d438:	4498      	add	r8, r3
 800d43a:	f000 fe01 	bl	800e040 <__i2b>
 800d43e:	4606      	mov	r6, r0
 800d440:	b165      	cbz	r5, 800d45c <_dtoa_r+0x414>
 800d442:	f1b8 0f00 	cmp.w	r8, #0
 800d446:	dd09      	ble.n	800d45c <_dtoa_r+0x414>
 800d448:	4545      	cmp	r5, r8
 800d44a:	9a07      	ldr	r2, [sp, #28]
 800d44c:	462b      	mov	r3, r5
 800d44e:	bfa8      	it	ge
 800d450:	4643      	movge	r3, r8
 800d452:	1ad2      	subs	r2, r2, r3
 800d454:	9207      	str	r2, [sp, #28]
 800d456:	1aed      	subs	r5, r5, r3
 800d458:	ebc3 0808 	rsb	r8, r3, r8
 800d45c:	9b06      	ldr	r3, [sp, #24]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f340 82f5 	ble.w	800da4e <_dtoa_r+0xa06>
 800d464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d466:	2a00      	cmp	r2, #0
 800d468:	f000 8202 	beq.w	800d870 <_dtoa_r+0x828>
 800d46c:	2f00      	cmp	r7, #0
 800d46e:	f000 81ff 	beq.w	800d870 <_dtoa_r+0x828>
 800d472:	4631      	mov	r1, r6
 800d474:	463a      	mov	r2, r7
 800d476:	4648      	mov	r0, r9
 800d478:	f000 fe84 	bl	800e184 <__pow5mult>
 800d47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d47e:	4601      	mov	r1, r0
 800d480:	4606      	mov	r6, r0
 800d482:	4648      	mov	r0, r9
 800d484:	f000 fde6 	bl	800e054 <__multiply>
 800d488:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d48a:	4604      	mov	r4, r0
 800d48c:	4648      	mov	r0, r9
 800d48e:	f000 fd3f 	bl	800df10 <_Bfree>
 800d492:	9b06      	ldr	r3, [sp, #24]
 800d494:	1bdb      	subs	r3, r3, r7
 800d496:	9306      	str	r3, [sp, #24]
 800d498:	f040 81e9 	bne.w	800d86e <_dtoa_r+0x826>
 800d49c:	2101      	movs	r1, #1
 800d49e:	4648      	mov	r0, r9
 800d4a0:	f000 fdce 	bl	800e040 <__i2b>
 800d4a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4a6:	9006      	str	r0, [sp, #24]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 8215 	beq.w	800d8d8 <_dtoa_r+0x890>
 800d4ae:	4601      	mov	r1, r0
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4648      	mov	r0, r9
 800d4b4:	f000 fe66 	bl	800e184 <__pow5mult>
 800d4b8:	9b00      	ldr	r3, [sp, #0]
 800d4ba:	9006      	str	r0, [sp, #24]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	f340 82f3 	ble.w	800daa8 <_dtoa_r+0xa60>
 800d4c2:	2700      	movs	r7, #0
 800d4c4:	9a06      	ldr	r2, [sp, #24]
 800d4c6:	6913      	ldr	r3, [r2, #16]
 800d4c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4cc:	6918      	ldr	r0, [r3, #16]
 800d4ce:	f000 fd69 	bl	800dfa4 <__hi0bits>
 800d4d2:	f1c0 0020 	rsb	r0, r0, #32
 800d4d6:	4440      	add	r0, r8
 800d4d8:	f010 001f 	ands.w	r0, r0, #31
 800d4dc:	f000 81fa 	beq.w	800d8d4 <_dtoa_r+0x88c>
 800d4e0:	f1c0 0320 	rsb	r3, r0, #32
 800d4e4:	2b04      	cmp	r3, #4
 800d4e6:	f340 84bd 	ble.w	800de64 <_dtoa_r+0xe1c>
 800d4ea:	f1c0 001c 	rsb	r0, r0, #28
 800d4ee:	9b07      	ldr	r3, [sp, #28]
 800d4f0:	4403      	add	r3, r0
 800d4f2:	9307      	str	r3, [sp, #28]
 800d4f4:	4405      	add	r5, r0
 800d4f6:	4480      	add	r8, r0
 800d4f8:	9b07      	ldr	r3, [sp, #28]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dd05      	ble.n	800d50a <_dtoa_r+0x4c2>
 800d4fe:	4621      	mov	r1, r4
 800d500:	461a      	mov	r2, r3
 800d502:	4648      	mov	r0, r9
 800d504:	f000 fe8e 	bl	800e224 <__lshift>
 800d508:	4604      	mov	r4, r0
 800d50a:	f1b8 0f00 	cmp.w	r8, #0
 800d50e:	dd05      	ble.n	800d51c <_dtoa_r+0x4d4>
 800d510:	4642      	mov	r2, r8
 800d512:	9906      	ldr	r1, [sp, #24]
 800d514:	4648      	mov	r0, r9
 800d516:	f000 fe85 	bl	800e224 <__lshift>
 800d51a:	9006      	str	r0, [sp, #24]
 800d51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f040 827a 	bne.w	800da18 <_dtoa_r+0x9d0>
 800d524:	9b08      	ldr	r3, [sp, #32]
 800d526:	2b00      	cmp	r3, #0
 800d528:	f340 8293 	ble.w	800da52 <_dtoa_r+0xa0a>
 800d52c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f040 81f4 	bne.w	800d91c <_dtoa_r+0x8d4>
 800d534:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800d538:	9f08      	ldr	r7, [sp, #32]
 800d53a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d53e:	465d      	mov	r5, fp
 800d540:	e002      	b.n	800d548 <_dtoa_r+0x500>
 800d542:	f000 fcef 	bl	800df24 <__multadd>
 800d546:	4604      	mov	r4, r0
 800d548:	4641      	mov	r1, r8
 800d54a:	4620      	mov	r0, r4
 800d54c:	f7ff fce8 	bl	800cf20 <quorem>
 800d550:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d554:	f805 ab01 	strb.w	sl, [r5], #1
 800d558:	ebcb 0305 	rsb	r3, fp, r5
 800d55c:	42bb      	cmp	r3, r7
 800d55e:	f04f 020a 	mov.w	r2, #10
 800d562:	f04f 0300 	mov.w	r3, #0
 800d566:	4621      	mov	r1, r4
 800d568:	4648      	mov	r0, r9
 800d56a:	dbea      	blt.n	800d542 <_dtoa_r+0x4fa>
 800d56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d56e:	9a08      	ldr	r2, [sp, #32]
 800d570:	2a01      	cmp	r2, #1
 800d572:	bfac      	ite	ge
 800d574:	189b      	addge	r3, r3, r2
 800d576:	3301      	addlt	r3, #1
 800d578:	461d      	mov	r5, r3
 800d57a:	f04f 0b00 	mov.w	fp, #0
 800d57e:	4621      	mov	r1, r4
 800d580:	2201      	movs	r2, #1
 800d582:	4648      	mov	r0, r9
 800d584:	f000 fe4e 	bl	800e224 <__lshift>
 800d588:	9906      	ldr	r1, [sp, #24]
 800d58a:	900a      	str	r0, [sp, #40]	; 0x28
 800d58c:	f000 fea2 	bl	800e2d4 <__mcmp>
 800d590:	2800      	cmp	r0, #0
 800d592:	f340 8305 	ble.w	800dba0 <_dtoa_r+0xb58>
 800d596:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d59a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d59c:	1e6b      	subs	r3, r5, #1
 800d59e:	e004      	b.n	800d5aa <_dtoa_r+0x562>
 800d5a0:	428b      	cmp	r3, r1
 800d5a2:	f000 8274 	beq.w	800da8e <_dtoa_r+0xa46>
 800d5a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5aa:	2a39      	cmp	r2, #57	; 0x39
 800d5ac:	f103 0501 	add.w	r5, r3, #1
 800d5b0:	d0f6      	beq.n	800d5a0 <_dtoa_r+0x558>
 800d5b2:	3201      	adds	r2, #1
 800d5b4:	701a      	strb	r2, [r3, #0]
 800d5b6:	9906      	ldr	r1, [sp, #24]
 800d5b8:	4648      	mov	r0, r9
 800d5ba:	f000 fca9 	bl	800df10 <_Bfree>
 800d5be:	2e00      	cmp	r6, #0
 800d5c0:	f43f af0d 	beq.w	800d3de <_dtoa_r+0x396>
 800d5c4:	f1bb 0f00 	cmp.w	fp, #0
 800d5c8:	d005      	beq.n	800d5d6 <_dtoa_r+0x58e>
 800d5ca:	45b3      	cmp	fp, r6
 800d5cc:	d003      	beq.n	800d5d6 <_dtoa_r+0x58e>
 800d5ce:	4659      	mov	r1, fp
 800d5d0:	4648      	mov	r0, r9
 800d5d2:	f000 fc9d 	bl	800df10 <_Bfree>
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	4648      	mov	r0, r9
 800d5da:	f000 fc99 	bl	800df10 <_Bfree>
 800d5de:	e6fe      	b.n	800d3de <_dtoa_r+0x396>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	930d      	str	r3, [sp, #52]	; 0x34
 800d5e4:	e5eb      	b.n	800d1be <_dtoa_r+0x176>
 800d5e6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d5ea:	4640      	mov	r0, r8
 800d5ec:	f7f3 f8da 	bl	80007a4 <__aeabi_i2d>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	4639      	mov	r1, r7
 800d5f8:	f7f3 fba2 	bl	8000d40 <__aeabi_dcmpeq>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f47f adca 	bne.w	800d196 <_dtoa_r+0x14e>
 800d602:	f108 33ff 	add.w	r3, r8, #4294967295
 800d606:	9304      	str	r3, [sp, #16]
 800d608:	e5c5      	b.n	800d196 <_dtoa_r+0x14e>
 800d60a:	9a07      	ldr	r2, [sp, #28]
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	1ad2      	subs	r2, r2, r3
 800d610:	425b      	negs	r3, r3
 800d612:	9306      	str	r3, [sp, #24]
 800d614:	2300      	movs	r3, #0
 800d616:	9207      	str	r2, [sp, #28]
 800d618:	930c      	str	r3, [sp, #48]	; 0x30
 800d61a:	e5df      	b.n	800d1dc <_dtoa_r+0x194>
 800d61c:	f1c8 0300 	rsb	r3, r8, #0
 800d620:	9307      	str	r3, [sp, #28]
 800d622:	f04f 0800 	mov.w	r8, #0
 800d626:	e5d1      	b.n	800d1cc <_dtoa_r+0x184>
 800d628:	9f06      	ldr	r7, [sp, #24]
 800d62a:	9d07      	ldr	r5, [sp, #28]
 800d62c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d62e:	e707      	b.n	800d440 <_dtoa_r+0x3f8>
 800d630:	f1c3 0420 	rsb	r4, r3, #32
 800d634:	fa0a f004 	lsl.w	r0, sl, r4
 800d638:	e57a      	b.n	800d130 <_dtoa_r+0xe8>
 800d63a:	900d      	str	r0, [sp, #52]	; 0x34
 800d63c:	e5bf      	b.n	800d1be <_dtoa_r+0x176>
 800d63e:	bf00      	nop
 800d640:	40240000 	.word	0x40240000
 800d644:	2300      	movs	r3, #0
 800d646:	930b      	str	r3, [sp, #44]	; 0x2c
 800d648:	9b04      	ldr	r3, [sp, #16]
 800d64a:	9a05      	ldr	r2, [sp, #20]
 800d64c:	4413      	add	r3, r2
 800d64e:	930e      	str	r3, [sp, #56]	; 0x38
 800d650:	3301      	adds	r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	9308      	str	r3, [sp, #32]
 800d656:	f340 827d 	ble.w	800db54 <_dtoa_r+0xb0c>
 800d65a:	9c08      	ldr	r4, [sp, #32]
 800d65c:	4625      	mov	r5, r4
 800d65e:	2100      	movs	r1, #0
 800d660:	2d17      	cmp	r5, #23
 800d662:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800d666:	d90b      	bls.n	800d680 <_dtoa_r+0x638>
 800d668:	2201      	movs	r2, #1
 800d66a:	2304      	movs	r3, #4
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	f103 0014 	add.w	r0, r3, #20
 800d672:	42a8      	cmp	r0, r5
 800d674:	4611      	mov	r1, r2
 800d676:	f102 0201 	add.w	r2, r2, #1
 800d67a:	d9f7      	bls.n	800d66c <_dtoa_r+0x624>
 800d67c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800d680:	4648      	mov	r0, r9
 800d682:	f000 fc1f 	bl	800dec4 <_Balloc>
 800d686:	2c0e      	cmp	r4, #14
 800d688:	9009      	str	r0, [sp, #36]	; 0x24
 800d68a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800d68e:	f63f ade5 	bhi.w	800d25c <_dtoa_r+0x214>
 800d692:	2e00      	cmp	r6, #0
 800d694:	f43f ade2 	beq.w	800d25c <_dtoa_r+0x214>
 800d698:	9904      	ldr	r1, [sp, #16]
 800d69a:	2900      	cmp	r1, #0
 800d69c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800d6a0:	f340 829a 	ble.w	800dbd8 <_dtoa_r+0xb90>
 800d6a4:	4b90      	ldr	r3, [pc, #576]	; (800d8e8 <_dtoa_r+0x8a0>)
 800d6a6:	f001 020f 	and.w	r2, r1, #15
 800d6aa:	110e      	asrs	r6, r1, #4
 800d6ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6b0:	06f0      	lsls	r0, r6, #27
 800d6b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d6b6:	f140 8246 	bpl.w	800db46 <_dtoa_r+0xafe>
 800d6ba:	4b8c      	ldr	r3, [pc, #560]	; (800d8ec <_dtoa_r+0x8a4>)
 800d6bc:	4650      	mov	r0, sl
 800d6be:	4659      	mov	r1, fp
 800d6c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6c4:	f7f3 f9fe 	bl	8000ac4 <__aeabi_ddiv>
 800d6c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800d6cc:	f006 060f 	and.w	r6, r6, #15
 800d6d0:	f04f 0a03 	mov.w	sl, #3
 800d6d4:	b186      	cbz	r6, 800d6f8 <_dtoa_r+0x6b0>
 800d6d6:	4f85      	ldr	r7, [pc, #532]	; (800d8ec <_dtoa_r+0x8a4>)
 800d6d8:	07f1      	lsls	r1, r6, #31
 800d6da:	d509      	bpl.n	800d6f0 <_dtoa_r+0x6a8>
 800d6dc:	4620      	mov	r0, r4
 800d6de:	4629      	mov	r1, r5
 800d6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6e4:	f7f3 f8c4 	bl	8000870 <__aeabi_dmul>
 800d6e8:	f10a 0a01 	add.w	sl, sl, #1
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	460d      	mov	r5, r1
 800d6f0:	1076      	asrs	r6, r6, #1
 800d6f2:	f107 0708 	add.w	r7, r7, #8
 800d6f6:	d1ef      	bne.n	800d6d8 <_dtoa_r+0x690>
 800d6f8:	4622      	mov	r2, r4
 800d6fa:	462b      	mov	r3, r5
 800d6fc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800d700:	f7f3 f9e0 	bl	8000ac4 <__aeabi_ddiv>
 800d704:	4606      	mov	r6, r0
 800d706:	460f      	mov	r7, r1
 800d708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d70a:	b143      	cbz	r3, 800d71e <_dtoa_r+0x6d6>
 800d70c:	2200      	movs	r2, #0
 800d70e:	4b78      	ldr	r3, [pc, #480]	; (800d8f0 <_dtoa_r+0x8a8>)
 800d710:	4630      	mov	r0, r6
 800d712:	4639      	mov	r1, r7
 800d714:	f7f3 fb1e 	bl	8000d54 <__aeabi_dcmplt>
 800d718:	2800      	cmp	r0, #0
 800d71a:	f040 831a 	bne.w	800dd52 <_dtoa_r+0xd0a>
 800d71e:	4650      	mov	r0, sl
 800d720:	f7f3 f840 	bl	80007a4 <__aeabi_i2d>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	f7f3 f8a2 	bl	8000870 <__aeabi_dmul>
 800d72c:	4b71      	ldr	r3, [pc, #452]	; (800d8f4 <_dtoa_r+0x8ac>)
 800d72e:	2200      	movs	r2, #0
 800d730:	f7f2 feec 	bl	800050c <__adddf3>
 800d734:	9b08      	ldr	r3, [sp, #32]
 800d736:	4604      	mov	r4, r0
 800d738:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 81db 	beq.w	800daf8 <_dtoa_r+0xab0>
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	9316      	str	r3, [sp, #88]	; 0x58
 800d746:	9b08      	ldr	r3, [sp, #32]
 800d748:	9312      	str	r3, [sp, #72]	; 0x48
 800d74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 8294 	beq.w	800dc7a <_dtoa_r+0xc32>
 800d752:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d754:	4b64      	ldr	r3, [pc, #400]	; (800d8e8 <_dtoa_r+0x8a0>)
 800d756:	4968      	ldr	r1, [pc, #416]	; (800d8f8 <_dtoa_r+0x8b0>)
 800d758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d75c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d760:	2000      	movs	r0, #0
 800d762:	f7f3 f9af 	bl	8000ac4 <__aeabi_ddiv>
 800d766:	4622      	mov	r2, r4
 800d768:	462b      	mov	r3, r5
 800d76a:	f7f2 fecd 	bl	8000508 <__aeabi_dsub>
 800d76e:	4682      	mov	sl, r0
 800d770:	468b      	mov	fp, r1
 800d772:	4630      	mov	r0, r6
 800d774:	4639      	mov	r1, r7
 800d776:	f7f3 fb2b 	bl	8000dd0 <__aeabi_d2iz>
 800d77a:	4604      	mov	r4, r0
 800d77c:	f7f3 f812 	bl	80007a4 <__aeabi_i2d>
 800d780:	4602      	mov	r2, r0
 800d782:	460b      	mov	r3, r1
 800d784:	4630      	mov	r0, r6
 800d786:	4639      	mov	r1, r7
 800d788:	f7f2 febe 	bl	8000508 <__aeabi_dsub>
 800d78c:	3430      	adds	r4, #48	; 0x30
 800d78e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d790:	b2e4      	uxtb	r4, r4
 800d792:	4606      	mov	r6, r0
 800d794:	460f      	mov	r7, r1
 800d796:	702c      	strb	r4, [r5, #0]
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4650      	mov	r0, sl
 800d79e:	4659      	mov	r1, fp
 800d7a0:	3501      	adds	r5, #1
 800d7a2:	f7f3 faf5 	bl	8000d90 <__aeabi_dcmpgt>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d150      	bne.n	800d84c <_dtoa_r+0x804>
 800d7aa:	4632      	mov	r2, r6
 800d7ac:	463b      	mov	r3, r7
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	494f      	ldr	r1, [pc, #316]	; (800d8f0 <_dtoa_r+0x8a8>)
 800d7b2:	f7f2 fea9 	bl	8000508 <__aeabi_dsub>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4650      	mov	r0, sl
 800d7bc:	4659      	mov	r1, fp
 800d7be:	f7f3 fae7 	bl	8000d90 <__aeabi_dcmpgt>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	f040 8308 	bne.w	800ddd8 <_dtoa_r+0xd90>
 800d7c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7ca:	2a01      	cmp	r2, #1
 800d7cc:	f340 81f7 	ble.w	800dbbe <_dtoa_r+0xb76>
 800d7d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7d4:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800d7d8:	4413      	add	r3, r2
 800d7da:	4698      	mov	r8, r3
 800d7dc:	e00d      	b.n	800d7fa <_dtoa_r+0x7b2>
 800d7de:	2000      	movs	r0, #0
 800d7e0:	4943      	ldr	r1, [pc, #268]	; (800d8f0 <_dtoa_r+0x8a8>)
 800d7e2:	f7f2 fe91 	bl	8000508 <__aeabi_dsub>
 800d7e6:	4652      	mov	r2, sl
 800d7e8:	465b      	mov	r3, fp
 800d7ea:	f7f3 fab3 	bl	8000d54 <__aeabi_dcmplt>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	f040 82f2 	bne.w	800ddd8 <_dtoa_r+0xd90>
 800d7f4:	4545      	cmp	r5, r8
 800d7f6:	f000 81e0 	beq.w	800dbba <_dtoa_r+0xb72>
 800d7fa:	4650      	mov	r0, sl
 800d7fc:	4659      	mov	r1, fp
 800d7fe:	2200      	movs	r2, #0
 800d800:	4b3e      	ldr	r3, [pc, #248]	; (800d8fc <_dtoa_r+0x8b4>)
 800d802:	f7f3 f835 	bl	8000870 <__aeabi_dmul>
 800d806:	2200      	movs	r2, #0
 800d808:	4b3c      	ldr	r3, [pc, #240]	; (800d8fc <_dtoa_r+0x8b4>)
 800d80a:	4682      	mov	sl, r0
 800d80c:	468b      	mov	fp, r1
 800d80e:	4630      	mov	r0, r6
 800d810:	4639      	mov	r1, r7
 800d812:	f7f3 f82d 	bl	8000870 <__aeabi_dmul>
 800d816:	460f      	mov	r7, r1
 800d818:	4606      	mov	r6, r0
 800d81a:	f7f3 fad9 	bl	8000dd0 <__aeabi_d2iz>
 800d81e:	4604      	mov	r4, r0
 800d820:	f7f2 ffc0 	bl	80007a4 <__aeabi_i2d>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	4630      	mov	r0, r6
 800d82a:	4639      	mov	r1, r7
 800d82c:	f7f2 fe6c 	bl	8000508 <__aeabi_dsub>
 800d830:	3430      	adds	r4, #48	; 0x30
 800d832:	b2e4      	uxtb	r4, r4
 800d834:	4652      	mov	r2, sl
 800d836:	465b      	mov	r3, fp
 800d838:	f805 4b01 	strb.w	r4, [r5], #1
 800d83c:	4606      	mov	r6, r0
 800d83e:	460f      	mov	r7, r1
 800d840:	f7f3 fa88 	bl	8000d54 <__aeabi_dcmplt>
 800d844:	4632      	mov	r2, r6
 800d846:	463b      	mov	r3, r7
 800d848:	2800      	cmp	r0, #0
 800d84a:	d0c8      	beq.n	800d7de <_dtoa_r+0x796>
 800d84c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d84e:	9304      	str	r3, [sp, #16]
 800d850:	e5c5      	b.n	800d3de <_dtoa_r+0x396>
 800d852:	2300      	movs	r3, #0
 800d854:	930b      	str	r3, [sp, #44]	; 0x2c
 800d856:	9b05      	ldr	r3, [sp, #20]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f340 8180 	ble.w	800db5e <_dtoa_r+0xb16>
 800d85e:	461d      	mov	r5, r3
 800d860:	461c      	mov	r4, r3
 800d862:	930e      	str	r3, [sp, #56]	; 0x38
 800d864:	9308      	str	r3, [sp, #32]
 800d866:	e6fa      	b.n	800d65e <_dtoa_r+0x616>
 800d868:	2301      	movs	r3, #1
 800d86a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d86c:	e7f3      	b.n	800d856 <_dtoa_r+0x80e>
 800d86e:	940a      	str	r4, [sp, #40]	; 0x28
 800d870:	9a06      	ldr	r2, [sp, #24]
 800d872:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d874:	4648      	mov	r0, r9
 800d876:	f000 fc85 	bl	800e184 <__pow5mult>
 800d87a:	4604      	mov	r4, r0
 800d87c:	e60e      	b.n	800d49c <_dtoa_r+0x454>
 800d87e:	9b08      	ldr	r3, [sp, #32]
 800d880:	2b00      	cmp	r3, #0
 800d882:	f73f acfe 	bgt.w	800d282 <_dtoa_r+0x23a>
 800d886:	f040 814f 	bne.w	800db28 <_dtoa_r+0xae0>
 800d88a:	2200      	movs	r2, #0
 800d88c:	4b1c      	ldr	r3, [pc, #112]	; (800d900 <_dtoa_r+0x8b8>)
 800d88e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d892:	f7f2 ffed 	bl	8000870 <__aeabi_dmul>
 800d896:	465b      	mov	r3, fp
 800d898:	4652      	mov	r2, sl
 800d89a:	f7f3 fa6f 	bl	8000d7c <__aeabi_dcmpge>
 800d89e:	9b08      	ldr	r3, [sp, #32]
 800d8a0:	9306      	str	r3, [sp, #24]
 800d8a2:	461e      	mov	r6, r3
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	f000 80ea 	beq.w	800da7e <_dtoa_r+0xa36>
 800d8aa:	9b05      	ldr	r3, [sp, #20]
 800d8ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d8ae:	43db      	mvns	r3, r3
 800d8b0:	9304      	str	r3, [sp, #16]
 800d8b2:	9906      	ldr	r1, [sp, #24]
 800d8b4:	4648      	mov	r0, r9
 800d8b6:	f000 fb2b 	bl	800df10 <_Bfree>
 800d8ba:	2e00      	cmp	r6, #0
 800d8bc:	f43f ad8f 	beq.w	800d3de <_dtoa_r+0x396>
 800d8c0:	e689      	b.n	800d5d6 <_dtoa_r+0x58e>
 800d8c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8c4:	2a00      	cmp	r2, #0
 800d8c6:	f000 8238 	beq.w	800dd3a <_dtoa_r+0xcf2>
 800d8ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d8ce:	9f06      	ldr	r7, [sp, #24]
 800d8d0:	9d07      	ldr	r5, [sp, #28]
 800d8d2:	e5ac      	b.n	800d42e <_dtoa_r+0x3e6>
 800d8d4:	201c      	movs	r0, #28
 800d8d6:	e60a      	b.n	800d4ee <_dtoa_r+0x4a6>
 800d8d8:	9b00      	ldr	r3, [sp, #0]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	f340 8280 	ble.w	800dde0 <_dtoa_r+0xd98>
 800d8e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d8e2:	2001      	movs	r0, #1
 800d8e4:	e5f7      	b.n	800d4d6 <_dtoa_r+0x48e>
 800d8e6:	bf00      	nop
 800d8e8:	0800f040 	.word	0x0800f040
 800d8ec:	0800f108 	.word	0x0800f108
 800d8f0:	3ff00000 	.word	0x3ff00000
 800d8f4:	401c0000 	.word	0x401c0000
 800d8f8:	3fe00000 	.word	0x3fe00000
 800d8fc:	40240000 	.word	0x40240000
 800d900:	40140000 	.word	0x40140000
 800d904:	4631      	mov	r1, r6
 800d906:	2300      	movs	r3, #0
 800d908:	220a      	movs	r2, #10
 800d90a:	4648      	mov	r0, r9
 800d90c:	f000 fb0a 	bl	800df24 <__multadd>
 800d910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d912:	2b00      	cmp	r3, #0
 800d914:	4606      	mov	r6, r0
 800d916:	f340 828d 	ble.w	800de34 <_dtoa_r+0xdec>
 800d91a:	9308      	str	r3, [sp, #32]
 800d91c:	2d00      	cmp	r5, #0
 800d91e:	dd05      	ble.n	800d92c <_dtoa_r+0x8e4>
 800d920:	4631      	mov	r1, r6
 800d922:	462a      	mov	r2, r5
 800d924:	4648      	mov	r0, r9
 800d926:	f000 fc7d 	bl	800e224 <__lshift>
 800d92a:	4606      	mov	r6, r0
 800d92c:	2f00      	cmp	r7, #0
 800d92e:	f040 817c 	bne.w	800dc2a <_dtoa_r+0xbe2>
 800d932:	46b0      	mov	r8, r6
 800d934:	9b08      	ldr	r3, [sp, #32]
 800d936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d938:	3b01      	subs	r3, #1
 800d93a:	18d3      	adds	r3, r2, r3
 800d93c:	9308      	str	r3, [sp, #32]
 800d93e:	f00a 0301 	and.w	r3, sl, #1
 800d942:	930a      	str	r3, [sp, #40]	; 0x28
 800d944:	4617      	mov	r7, r2
 800d946:	f8dd b018 	ldr.w	fp, [sp, #24]
 800d94a:	4620      	mov	r0, r4
 800d94c:	4659      	mov	r1, fp
 800d94e:	f7ff fae7 	bl	800cf20 <quorem>
 800d952:	4631      	mov	r1, r6
 800d954:	4605      	mov	r5, r0
 800d956:	4620      	mov	r0, r4
 800d958:	f000 fcbc 	bl	800e2d4 <__mcmp>
 800d95c:	4642      	mov	r2, r8
 800d95e:	4659      	mov	r1, fp
 800d960:	4682      	mov	sl, r0
 800d962:	4648      	mov	r0, r9
 800d964:	f000 fcd8 	bl	800e318 <__mdiff>
 800d968:	68c2      	ldr	r2, [r0, #12]
 800d96a:	4683      	mov	fp, r0
 800d96c:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800d970:	2a00      	cmp	r2, #0
 800d972:	d149      	bne.n	800da08 <_dtoa_r+0x9c0>
 800d974:	4601      	mov	r1, r0
 800d976:	4620      	mov	r0, r4
 800d978:	9307      	str	r3, [sp, #28]
 800d97a:	f000 fcab 	bl	800e2d4 <__mcmp>
 800d97e:	4659      	mov	r1, fp
 800d980:	9005      	str	r0, [sp, #20]
 800d982:	4648      	mov	r0, r9
 800d984:	f000 fac4 	bl	800df10 <_Bfree>
 800d988:	9a05      	ldr	r2, [sp, #20]
 800d98a:	9b07      	ldr	r3, [sp, #28]
 800d98c:	b92a      	cbnz	r2, 800d99a <_dtoa_r+0x952>
 800d98e:	9900      	ldr	r1, [sp, #0]
 800d990:	b919      	cbnz	r1, 800d99a <_dtoa_r+0x952>
 800d992:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d994:	2900      	cmp	r1, #0
 800d996:	f000 8235 	beq.w	800de04 <_dtoa_r+0xdbc>
 800d99a:	f1ba 0f00 	cmp.w	sl, #0
 800d99e:	f2c0 80e3 	blt.w	800db68 <_dtoa_r+0xb20>
 800d9a2:	d105      	bne.n	800d9b0 <_dtoa_r+0x968>
 800d9a4:	9900      	ldr	r1, [sp, #0]
 800d9a6:	b919      	cbnz	r1, 800d9b0 <_dtoa_r+0x968>
 800d9a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d9aa:	2900      	cmp	r1, #0
 800d9ac:	f000 80dc 	beq.w	800db68 <_dtoa_r+0xb20>
 800d9b0:	2a00      	cmp	r2, #0
 800d9b2:	f300 814e 	bgt.w	800dc52 <_dtoa_r+0xc0a>
 800d9b6:	9a08      	ldr	r2, [sp, #32]
 800d9b8:	703b      	strb	r3, [r7, #0]
 800d9ba:	f107 0a01 	add.w	sl, r7, #1
 800d9be:	4297      	cmp	r7, r2
 800d9c0:	4655      	mov	r5, sl
 800d9c2:	f000 8152 	beq.w	800dc6a <_dtoa_r+0xc22>
 800d9c6:	4621      	mov	r1, r4
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	220a      	movs	r2, #10
 800d9cc:	4648      	mov	r0, r9
 800d9ce:	f000 faa9 	bl	800df24 <__multadd>
 800d9d2:	4546      	cmp	r6, r8
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	f04f 0300 	mov.w	r3, #0
 800d9dc:	f04f 020a 	mov.w	r2, #10
 800d9e0:	4648      	mov	r0, r9
 800d9e2:	d00b      	beq.n	800d9fc <_dtoa_r+0x9b4>
 800d9e4:	f000 fa9e 	bl	800df24 <__multadd>
 800d9e8:	4641      	mov	r1, r8
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	220a      	movs	r2, #10
 800d9f0:	4648      	mov	r0, r9
 800d9f2:	f000 fa97 	bl	800df24 <__multadd>
 800d9f6:	4657      	mov	r7, sl
 800d9f8:	4680      	mov	r8, r0
 800d9fa:	e7a4      	b.n	800d946 <_dtoa_r+0x8fe>
 800d9fc:	f000 fa92 	bl	800df24 <__multadd>
 800da00:	4657      	mov	r7, sl
 800da02:	4606      	mov	r6, r0
 800da04:	4680      	mov	r8, r0
 800da06:	e79e      	b.n	800d946 <_dtoa_r+0x8fe>
 800da08:	4601      	mov	r1, r0
 800da0a:	4648      	mov	r0, r9
 800da0c:	9305      	str	r3, [sp, #20]
 800da0e:	f000 fa7f 	bl	800df10 <_Bfree>
 800da12:	2201      	movs	r2, #1
 800da14:	9b05      	ldr	r3, [sp, #20]
 800da16:	e7c0      	b.n	800d99a <_dtoa_r+0x952>
 800da18:	9906      	ldr	r1, [sp, #24]
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 fc5a 	bl	800e2d4 <__mcmp>
 800da20:	2800      	cmp	r0, #0
 800da22:	f6bf ad7f 	bge.w	800d524 <_dtoa_r+0x4dc>
 800da26:	4621      	mov	r1, r4
 800da28:	9c04      	ldr	r4, [sp, #16]
 800da2a:	2300      	movs	r3, #0
 800da2c:	3c01      	subs	r4, #1
 800da2e:	220a      	movs	r2, #10
 800da30:	4648      	mov	r0, r9
 800da32:	9404      	str	r4, [sp, #16]
 800da34:	f000 fa76 	bl	800df24 <__multadd>
 800da38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da3a:	4604      	mov	r4, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f47f af61 	bne.w	800d904 <_dtoa_r+0x8bc>
 800da42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da44:	2b00      	cmp	r3, #0
 800da46:	f340 81ed 	ble.w	800de24 <_dtoa_r+0xddc>
 800da4a:	9308      	str	r3, [sp, #32]
 800da4c:	e572      	b.n	800d534 <_dtoa_r+0x4ec>
 800da4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800da50:	e524      	b.n	800d49c <_dtoa_r+0x454>
 800da52:	9b00      	ldr	r3, [sp, #0]
 800da54:	2b02      	cmp	r3, #2
 800da56:	f77f ad69 	ble.w	800d52c <_dtoa_r+0x4e4>
 800da5a:	9b08      	ldr	r3, [sp, #32]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f040 819d 	bne.w	800dd9c <_dtoa_r+0xd54>
 800da62:	9906      	ldr	r1, [sp, #24]
 800da64:	2205      	movs	r2, #5
 800da66:	4648      	mov	r0, r9
 800da68:	f000 fa5c 	bl	800df24 <__multadd>
 800da6c:	4601      	mov	r1, r0
 800da6e:	9006      	str	r0, [sp, #24]
 800da70:	4620      	mov	r0, r4
 800da72:	f000 fc2f 	bl	800e2d4 <__mcmp>
 800da76:	2800      	cmp	r0, #0
 800da78:	940a      	str	r4, [sp, #40]	; 0x28
 800da7a:	f77f af16 	ble.w	800d8aa <_dtoa_r+0x862>
 800da7e:	9a04      	ldr	r2, [sp, #16]
 800da80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da82:	2331      	movs	r3, #49	; 0x31
 800da84:	3201      	adds	r2, #1
 800da86:	9204      	str	r2, [sp, #16]
 800da88:	700b      	strb	r3, [r1, #0]
 800da8a:	1c4d      	adds	r5, r1, #1
 800da8c:	e711      	b.n	800d8b2 <_dtoa_r+0x86a>
 800da8e:	9a04      	ldr	r2, [sp, #16]
 800da90:	3201      	adds	r2, #1
 800da92:	9204      	str	r2, [sp, #16]
 800da94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da96:	2331      	movs	r3, #49	; 0x31
 800da98:	7013      	strb	r3, [r2, #0]
 800da9a:	e58c      	b.n	800d5b6 <_dtoa_r+0x56e>
 800da9c:	2301      	movs	r3, #1
 800da9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800daa0:	e5d2      	b.n	800d648 <_dtoa_r+0x600>
 800daa2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800daa6:	e49a      	b.n	800d3de <_dtoa_r+0x396>
 800daa8:	f1ba 0f00 	cmp.w	sl, #0
 800daac:	f47f ad09 	bne.w	800d4c2 <_dtoa_r+0x47a>
 800dab0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f040 813e 	bne.w	800dd36 <_dtoa_r+0xcee>
 800daba:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800dabe:	0d3f      	lsrs	r7, r7, #20
 800dac0:	053f      	lsls	r7, r7, #20
 800dac2:	b12f      	cbz	r7, 800dad0 <_dtoa_r+0xa88>
 800dac4:	9b07      	ldr	r3, [sp, #28]
 800dac6:	3301      	adds	r3, #1
 800dac8:	9307      	str	r3, [sp, #28]
 800daca:	f108 0801 	add.w	r8, r8, #1
 800dace:	2701      	movs	r7, #1
 800dad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dad2:	2001      	movs	r0, #1
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f43f acfe 	beq.w	800d4d6 <_dtoa_r+0x48e>
 800dada:	e4f3      	b.n	800d4c4 <_dtoa_r+0x47c>
 800dadc:	4650      	mov	r0, sl
 800dade:	f7f2 fe61 	bl	80007a4 <__aeabi_i2d>
 800dae2:	4632      	mov	r2, r6
 800dae4:	463b      	mov	r3, r7
 800dae6:	f7f2 fec3 	bl	8000870 <__aeabi_dmul>
 800daea:	2200      	movs	r2, #0
 800daec:	4bbf      	ldr	r3, [pc, #764]	; (800ddec <_dtoa_r+0xda4>)
 800daee:	f7f2 fd0d 	bl	800050c <__adddf3>
 800daf2:	4604      	mov	r4, r0
 800daf4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800daf8:	4630      	mov	r0, r6
 800dafa:	4639      	mov	r1, r7
 800dafc:	2200      	movs	r2, #0
 800dafe:	4bbc      	ldr	r3, [pc, #752]	; (800ddf0 <_dtoa_r+0xda8>)
 800db00:	f7f2 fd02 	bl	8000508 <__aeabi_dsub>
 800db04:	4622      	mov	r2, r4
 800db06:	462b      	mov	r3, r5
 800db08:	4606      	mov	r6, r0
 800db0a:	460f      	mov	r7, r1
 800db0c:	f7f3 f940 	bl	8000d90 <__aeabi_dcmpgt>
 800db10:	2800      	cmp	r0, #0
 800db12:	f040 80ae 	bne.w	800dc72 <_dtoa_r+0xc2a>
 800db16:	4622      	mov	r2, r4
 800db18:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800db1c:	4630      	mov	r0, r6
 800db1e:	4639      	mov	r1, r7
 800db20:	f7f3 f918 	bl	8000d54 <__aeabi_dcmplt>
 800db24:	2800      	cmp	r0, #0
 800db26:	d04a      	beq.n	800dbbe <_dtoa_r+0xb76>
 800db28:	2300      	movs	r3, #0
 800db2a:	9306      	str	r3, [sp, #24]
 800db2c:	461e      	mov	r6, r3
 800db2e:	e6bc      	b.n	800d8aa <_dtoa_r+0x862>
 800db30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db32:	f7ff bac2 	b.w	800d0ba <_dtoa_r+0x72>
 800db36:	9b06      	ldr	r3, [sp, #24]
 800db38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db3a:	9706      	str	r7, [sp, #24]
 800db3c:	1afb      	subs	r3, r7, r3
 800db3e:	441a      	add	r2, r3
 800db40:	920c      	str	r2, [sp, #48]	; 0x30
 800db42:	2700      	movs	r7, #0
 800db44:	e46d      	b.n	800d422 <_dtoa_r+0x3da>
 800db46:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800db4a:	f04f 0a02 	mov.w	sl, #2
 800db4e:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800db52:	e5bf      	b.n	800d6d4 <_dtoa_r+0x68c>
 800db54:	461c      	mov	r4, r3
 800db56:	2100      	movs	r1, #0
 800db58:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800db5c:	e590      	b.n	800d680 <_dtoa_r+0x638>
 800db5e:	2401      	movs	r4, #1
 800db60:	940e      	str	r4, [sp, #56]	; 0x38
 800db62:	9408      	str	r4, [sp, #32]
 800db64:	9405      	str	r4, [sp, #20]
 800db66:	e7f6      	b.n	800db56 <_dtoa_r+0xb0e>
 800db68:	2a00      	cmp	r2, #0
 800db6a:	469a      	mov	sl, r3
 800db6c:	dd11      	ble.n	800db92 <_dtoa_r+0xb4a>
 800db6e:	4621      	mov	r1, r4
 800db70:	2201      	movs	r2, #1
 800db72:	4648      	mov	r0, r9
 800db74:	f000 fb56 	bl	800e224 <__lshift>
 800db78:	9906      	ldr	r1, [sp, #24]
 800db7a:	4604      	mov	r4, r0
 800db7c:	f000 fbaa 	bl	800e2d4 <__mcmp>
 800db80:	2800      	cmp	r0, #0
 800db82:	f340 8148 	ble.w	800de16 <_dtoa_r+0xdce>
 800db86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800db8a:	f000 8109 	beq.w	800dda0 <_dtoa_r+0xd58>
 800db8e:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800db92:	46b3      	mov	fp, r6
 800db94:	f887 a000 	strb.w	sl, [r7]
 800db98:	1c7d      	adds	r5, r7, #1
 800db9a:	4646      	mov	r6, r8
 800db9c:	940a      	str	r4, [sp, #40]	; 0x28
 800db9e:	e50a      	b.n	800d5b6 <_dtoa_r+0x56e>
 800dba0:	d104      	bne.n	800dbac <_dtoa_r+0xb64>
 800dba2:	f01a 0f01 	tst.w	sl, #1
 800dba6:	d001      	beq.n	800dbac <_dtoa_r+0xb64>
 800dba8:	e4f5      	b.n	800d596 <_dtoa_r+0x54e>
 800dbaa:	4615      	mov	r5, r2
 800dbac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbb0:	2b30      	cmp	r3, #48	; 0x30
 800dbb2:	f105 32ff 	add.w	r2, r5, #4294967295
 800dbb6:	d0f8      	beq.n	800dbaa <_dtoa_r+0xb62>
 800dbb8:	e4fd      	b.n	800d5b6 <_dtoa_r+0x56e>
 800dbba:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800dbbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 800dbc2:	f7ff bb4b 	b.w	800d25c <_dtoa_r+0x214>
 800dbc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbc8:	2230      	movs	r2, #48	; 0x30
 800dbca:	700a      	strb	r2, [r1, #0]
 800dbcc:	9a04      	ldr	r2, [sp, #16]
 800dbce:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800dbd2:	3201      	adds	r2, #1
 800dbd4:	9204      	str	r2, [sp, #16]
 800dbd6:	e400      	b.n	800d3da <_dtoa_r+0x392>
 800dbd8:	9b04      	ldr	r3, [sp, #16]
 800dbda:	425c      	negs	r4, r3
 800dbdc:	2c00      	cmp	r4, #0
 800dbde:	f000 80b3 	beq.w	800dd48 <_dtoa_r+0xd00>
 800dbe2:	4b84      	ldr	r3, [pc, #528]	; (800ddf4 <_dtoa_r+0xdac>)
 800dbe4:	f004 020f 	and.w	r2, r4, #15
 800dbe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dbf4:	f7f2 fe3c 	bl	8000870 <__aeabi_dmul>
 800dbf8:	1124      	asrs	r4, r4, #4
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	460f      	mov	r7, r1
 800dbfe:	f000 8116 	beq.w	800de2e <_dtoa_r+0xde6>
 800dc02:	4d7d      	ldr	r5, [pc, #500]	; (800ddf8 <_dtoa_r+0xdb0>)
 800dc04:	f04f 0a02 	mov.w	sl, #2
 800dc08:	07e2      	lsls	r2, r4, #31
 800dc0a:	d509      	bpl.n	800dc20 <_dtoa_r+0xbd8>
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	4639      	mov	r1, r7
 800dc10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc14:	f7f2 fe2c 	bl	8000870 <__aeabi_dmul>
 800dc18:	f10a 0a01 	add.w	sl, sl, #1
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	460f      	mov	r7, r1
 800dc20:	1064      	asrs	r4, r4, #1
 800dc22:	f105 0508 	add.w	r5, r5, #8
 800dc26:	d1ef      	bne.n	800dc08 <_dtoa_r+0xbc0>
 800dc28:	e56e      	b.n	800d708 <_dtoa_r+0x6c0>
 800dc2a:	6871      	ldr	r1, [r6, #4]
 800dc2c:	4648      	mov	r0, r9
 800dc2e:	f000 f949 	bl	800dec4 <_Balloc>
 800dc32:	6933      	ldr	r3, [r6, #16]
 800dc34:	1c9a      	adds	r2, r3, #2
 800dc36:	4605      	mov	r5, r0
 800dc38:	0092      	lsls	r2, r2, #2
 800dc3a:	f106 010c 	add.w	r1, r6, #12
 800dc3e:	300c      	adds	r0, #12
 800dc40:	f7f2 faec 	bl	800021c <memcpy>
 800dc44:	4629      	mov	r1, r5
 800dc46:	2201      	movs	r2, #1
 800dc48:	4648      	mov	r0, r9
 800dc4a:	f000 faeb 	bl	800e224 <__lshift>
 800dc4e:	4680      	mov	r8, r0
 800dc50:	e670      	b.n	800d934 <_dtoa_r+0x8ec>
 800dc52:	2b39      	cmp	r3, #57	; 0x39
 800dc54:	f000 80a4 	beq.w	800dda0 <_dtoa_r+0xd58>
 800dc58:	f103 0a01 	add.w	sl, r3, #1
 800dc5c:	46b3      	mov	fp, r6
 800dc5e:	f887 a000 	strb.w	sl, [r7]
 800dc62:	1c7d      	adds	r5, r7, #1
 800dc64:	4646      	mov	r6, r8
 800dc66:	940a      	str	r4, [sp, #40]	; 0x28
 800dc68:	e4a5      	b.n	800d5b6 <_dtoa_r+0x56e>
 800dc6a:	46b3      	mov	fp, r6
 800dc6c:	469a      	mov	sl, r3
 800dc6e:	4646      	mov	r6, r8
 800dc70:	e485      	b.n	800d57e <_dtoa_r+0x536>
 800dc72:	2300      	movs	r3, #0
 800dc74:	9306      	str	r3, [sp, #24]
 800dc76:	461e      	mov	r6, r3
 800dc78:	e701      	b.n	800da7e <_dtoa_r+0xa36>
 800dc7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc7c:	495d      	ldr	r1, [pc, #372]	; (800ddf4 <_dtoa_r+0xdac>)
 800dc7e:	1e5a      	subs	r2, r3, #1
 800dc80:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dc84:	462b      	mov	r3, r5
 800dc86:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc8c:	4622      	mov	r2, r4
 800dc8e:	f7f2 fdef 	bl	8000870 <__aeabi_dmul>
 800dc92:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800dc96:	4639      	mov	r1, r7
 800dc98:	4630      	mov	r0, r6
 800dc9a:	f7f3 f899 	bl	8000dd0 <__aeabi_d2iz>
 800dc9e:	4604      	mov	r4, r0
 800dca0:	f7f2 fd80 	bl	80007a4 <__aeabi_i2d>
 800dca4:	460b      	mov	r3, r1
 800dca6:	4602      	mov	r2, r0
 800dca8:	4639      	mov	r1, r7
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f7f2 fc2c 	bl	8000508 <__aeabi_dsub>
 800dcb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcb2:	460f      	mov	r7, r1
 800dcb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcb6:	3430      	adds	r4, #48	; 0x30
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	4606      	mov	r6, r0
 800dcbc:	700c      	strb	r4, [r1, #0]
 800dcbe:	f101 0501 	add.w	r5, r1, #1
 800dcc2:	d020      	beq.n	800dd06 <_dtoa_r+0xcbe>
 800dcc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcc8:	4413      	add	r3, r2
 800dcca:	469a      	mov	sl, r3
 800dccc:	46ab      	mov	fp, r5
 800dcce:	2200      	movs	r2, #0
 800dcd0:	4b4a      	ldr	r3, [pc, #296]	; (800ddfc <_dtoa_r+0xdb4>)
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	f7f2 fdcb 	bl	8000870 <__aeabi_dmul>
 800dcda:	460f      	mov	r7, r1
 800dcdc:	4606      	mov	r6, r0
 800dcde:	f7f3 f877 	bl	8000dd0 <__aeabi_d2iz>
 800dce2:	4604      	mov	r4, r0
 800dce4:	f7f2 fd5e 	bl	80007a4 <__aeabi_i2d>
 800dce8:	3430      	adds	r4, #48	; 0x30
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	4630      	mov	r0, r6
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	f7f2 fc09 	bl	8000508 <__aeabi_dsub>
 800dcf6:	f80b 4b01 	strb.w	r4, [fp], #1
 800dcfa:	45da      	cmp	sl, fp
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	460f      	mov	r7, r1
 800dd00:	d1e5      	bne.n	800dcce <_dtoa_r+0xc86>
 800dd02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd04:	441d      	add	r5, r3
 800dd06:	2200      	movs	r2, #0
 800dd08:	4b3d      	ldr	r3, [pc, #244]	; (800de00 <_dtoa_r+0xdb8>)
 800dd0a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800dd0e:	f7f2 fbfd 	bl	800050c <__adddf3>
 800dd12:	4632      	mov	r2, r6
 800dd14:	463b      	mov	r3, r7
 800dd16:	f7f3 f81d 	bl	8000d54 <__aeabi_dcmplt>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	d048      	beq.n	800ddb0 <_dtoa_r+0xd68>
 800dd1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dd20:	9304      	str	r3, [sp, #16]
 800dd22:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800dd26:	f7ff bb4c 	b.w	800d3c2 <_dtoa_r+0x37a>
 800dd2a:	9b07      	ldr	r3, [sp, #28]
 800dd2c:	9a08      	ldr	r2, [sp, #32]
 800dd2e:	1a9d      	subs	r5, r3, r2
 800dd30:	2300      	movs	r3, #0
 800dd32:	f7ff bb7c 	b.w	800d42e <_dtoa_r+0x3e6>
 800dd36:	2700      	movs	r7, #0
 800dd38:	e6ca      	b.n	800dad0 <_dtoa_r+0xa88>
 800dd3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dd3c:	9f06      	ldr	r7, [sp, #24]
 800dd3e:	9d07      	ldr	r5, [sp, #28]
 800dd40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd44:	f7ff bb73 	b.w	800d42e <_dtoa_r+0x3e6>
 800dd48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800dd4c:	f04f 0a02 	mov.w	sl, #2
 800dd50:	e4da      	b.n	800d708 <_dtoa_r+0x6c0>
 800dd52:	9b08      	ldr	r3, [sp, #32]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f43f aec1 	beq.w	800dadc <_dtoa_r+0xa94>
 800dd5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f77f af2e 	ble.w	800dbbe <_dtoa_r+0xb76>
 800dd62:	2200      	movs	r2, #0
 800dd64:	4b25      	ldr	r3, [pc, #148]	; (800ddfc <_dtoa_r+0xdb4>)
 800dd66:	4630      	mov	r0, r6
 800dd68:	4639      	mov	r1, r7
 800dd6a:	f7f2 fd81 	bl	8000870 <__aeabi_dmul>
 800dd6e:	4606      	mov	r6, r0
 800dd70:	460f      	mov	r7, r1
 800dd72:	f10a 0001 	add.w	r0, sl, #1
 800dd76:	f7f2 fd15 	bl	80007a4 <__aeabi_i2d>
 800dd7a:	4632      	mov	r2, r6
 800dd7c:	463b      	mov	r3, r7
 800dd7e:	f7f2 fd77 	bl	8000870 <__aeabi_dmul>
 800dd82:	2200      	movs	r2, #0
 800dd84:	4b19      	ldr	r3, [pc, #100]	; (800ddec <_dtoa_r+0xda4>)
 800dd86:	f7f2 fbc1 	bl	800050c <__adddf3>
 800dd8a:	9a04      	ldr	r2, [sp, #16]
 800dd8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd8e:	9312      	str	r3, [sp, #72]	; 0x48
 800dd90:	3a01      	subs	r2, #1
 800dd92:	4604      	mov	r4, r0
 800dd94:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800dd98:	9216      	str	r2, [sp, #88]	; 0x58
 800dd9a:	e4d6      	b.n	800d74a <_dtoa_r+0x702>
 800dd9c:	940a      	str	r4, [sp, #40]	; 0x28
 800dd9e:	e584      	b.n	800d8aa <_dtoa_r+0x862>
 800dda0:	2239      	movs	r2, #57	; 0x39
 800dda2:	46b3      	mov	fp, r6
 800dda4:	940a      	str	r4, [sp, #40]	; 0x28
 800dda6:	4646      	mov	r6, r8
 800dda8:	703a      	strb	r2, [r7, #0]
 800ddaa:	1c7d      	adds	r5, r7, #1
 800ddac:	f7ff bbf5 	b.w	800d59a <_dtoa_r+0x552>
 800ddb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	4912      	ldr	r1, [pc, #72]	; (800de00 <_dtoa_r+0xdb8>)
 800ddb8:	f7f2 fba6 	bl	8000508 <__aeabi_dsub>
 800ddbc:	4632      	mov	r2, r6
 800ddbe:	463b      	mov	r3, r7
 800ddc0:	f7f2 ffe6 	bl	8000d90 <__aeabi_dcmpgt>
 800ddc4:	b908      	cbnz	r0, 800ddca <_dtoa_r+0xd82>
 800ddc6:	e6fa      	b.n	800dbbe <_dtoa_r+0xb76>
 800ddc8:	4615      	mov	r5, r2
 800ddca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ddce:	2b30      	cmp	r3, #48	; 0x30
 800ddd0:	f105 32ff 	add.w	r2, r5, #4294967295
 800ddd4:	d0f8      	beq.n	800ddc8 <_dtoa_r+0xd80>
 800ddd6:	e539      	b.n	800d84c <_dtoa_r+0x804>
 800ddd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ddda:	9304      	str	r3, [sp, #16]
 800dddc:	f7ff baf1 	b.w	800d3c2 <_dtoa_r+0x37a>
 800dde0:	f1ba 0f00 	cmp.w	sl, #0
 800dde4:	f47f ad7c 	bne.w	800d8e0 <_dtoa_r+0x898>
 800dde8:	e662      	b.n	800dab0 <_dtoa_r+0xa68>
 800ddea:	bf00      	nop
 800ddec:	401c0000 	.word	0x401c0000
 800ddf0:	40140000 	.word	0x40140000
 800ddf4:	0800f040 	.word	0x0800f040
 800ddf8:	0800f108 	.word	0x0800f108
 800ddfc:	40240000 	.word	0x40240000
 800de00:	3fe00000 	.word	0x3fe00000
 800de04:	2b39      	cmp	r3, #57	; 0x39
 800de06:	46d3      	mov	fp, sl
 800de08:	469a      	mov	sl, r3
 800de0a:	d0c9      	beq.n	800dda0 <_dtoa_r+0xd58>
 800de0c:	f1bb 0f00 	cmp.w	fp, #0
 800de10:	f73f aebd 	bgt.w	800db8e <_dtoa_r+0xb46>
 800de14:	e6bd      	b.n	800db92 <_dtoa_r+0xb4a>
 800de16:	f47f aebc 	bne.w	800db92 <_dtoa_r+0xb4a>
 800de1a:	f01a 0f01 	tst.w	sl, #1
 800de1e:	f43f aeb8 	beq.w	800db92 <_dtoa_r+0xb4a>
 800de22:	e6b0      	b.n	800db86 <_dtoa_r+0xb3e>
 800de24:	9b00      	ldr	r3, [sp, #0]
 800de26:	2b02      	cmp	r3, #2
 800de28:	dc25      	bgt.n	800de76 <_dtoa_r+0xe2e>
 800de2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de2c:	e60d      	b.n	800da4a <_dtoa_r+0xa02>
 800de2e:	f04f 0a02 	mov.w	sl, #2
 800de32:	e469      	b.n	800d708 <_dtoa_r+0x6c0>
 800de34:	9b00      	ldr	r3, [sp, #0]
 800de36:	2b02      	cmp	r3, #2
 800de38:	dc1d      	bgt.n	800de76 <_dtoa_r+0xe2e>
 800de3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de3c:	e56d      	b.n	800d91a <_dtoa_r+0x8d2>
 800de3e:	2400      	movs	r4, #0
 800de40:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800de44:	4621      	mov	r1, r4
 800de46:	4648      	mov	r0, r9
 800de48:	f000 f83c 	bl	800dec4 <_Balloc>
 800de4c:	f04f 33ff 	mov.w	r3, #4294967295
 800de50:	9308      	str	r3, [sp, #32]
 800de52:	930e      	str	r3, [sp, #56]	; 0x38
 800de54:	2301      	movs	r3, #1
 800de56:	9009      	str	r0, [sp, #36]	; 0x24
 800de58:	9405      	str	r4, [sp, #20]
 800de5a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800de5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800de60:	f7ff b9fc 	b.w	800d25c <_dtoa_r+0x214>
 800de64:	f43f ab48 	beq.w	800d4f8 <_dtoa_r+0x4b0>
 800de68:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800de6c:	f7ff bb3f 	b.w	800d4ee <_dtoa_r+0x4a6>
 800de70:	2601      	movs	r6, #1
 800de72:	f7ff b9bc 	b.w	800d1ee <_dtoa_r+0x1a6>
 800de76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de78:	9308      	str	r3, [sp, #32]
 800de7a:	e5ee      	b.n	800da5a <_dtoa_r+0xa12>

0800de7c <_localeconv_r>:
 800de7c:	4a04      	ldr	r2, [pc, #16]	; (800de90 <_localeconv_r+0x14>)
 800de7e:	4b05      	ldr	r3, [pc, #20]	; (800de94 <_localeconv_r+0x18>)
 800de80:	6812      	ldr	r2, [r2, #0]
 800de82:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800de84:	2800      	cmp	r0, #0
 800de86:	bf08      	it	eq
 800de88:	4618      	moveq	r0, r3
 800de8a:	30f0      	adds	r0, #240	; 0xf0
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	20000588 	.word	0x20000588
 800de94:	2000099c 	.word	0x2000099c

0800de98 <__ascii_mbtowc>:
 800de98:	b082      	sub	sp, #8
 800de9a:	b149      	cbz	r1, 800deb0 <__ascii_mbtowc+0x18>
 800de9c:	b15a      	cbz	r2, 800deb6 <__ascii_mbtowc+0x1e>
 800de9e:	b16b      	cbz	r3, 800debc <__ascii_mbtowc+0x24>
 800dea0:	7813      	ldrb	r3, [r2, #0]
 800dea2:	600b      	str	r3, [r1, #0]
 800dea4:	7812      	ldrb	r2, [r2, #0]
 800dea6:	1c10      	adds	r0, r2, #0
 800dea8:	bf18      	it	ne
 800deaa:	2001      	movne	r0, #1
 800deac:	b002      	add	sp, #8
 800deae:	4770      	bx	lr
 800deb0:	a901      	add	r1, sp, #4
 800deb2:	2a00      	cmp	r2, #0
 800deb4:	d1f3      	bne.n	800de9e <__ascii_mbtowc+0x6>
 800deb6:	4610      	mov	r0, r2
 800deb8:	b002      	add	sp, #8
 800deba:	4770      	bx	lr
 800debc:	f06f 0001 	mvn.w	r0, #1
 800dec0:	e7f4      	b.n	800deac <__ascii_mbtowc+0x14>
 800dec2:	bf00      	nop

0800dec4 <_Balloc>:
 800dec4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800dec6:	b570      	push	{r4, r5, r6, lr}
 800dec8:	4605      	mov	r5, r0
 800deca:	460c      	mov	r4, r1
 800decc:	b14b      	cbz	r3, 800dee2 <_Balloc+0x1e>
 800dece:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ded2:	b180      	cbz	r0, 800def6 <_Balloc+0x32>
 800ded4:	6802      	ldr	r2, [r0, #0]
 800ded6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800deda:	2300      	movs	r3, #0
 800dedc:	6103      	str	r3, [r0, #16]
 800dede:	60c3      	str	r3, [r0, #12]
 800dee0:	bd70      	pop	{r4, r5, r6, pc}
 800dee2:	2221      	movs	r2, #33	; 0x21
 800dee4:	2104      	movs	r1, #4
 800dee6:	f7fc ff2f 	bl	800ad48 <_calloc_r>
 800deea:	64e8      	str	r0, [r5, #76]	; 0x4c
 800deec:	4603      	mov	r3, r0
 800deee:	2800      	cmp	r0, #0
 800def0:	d1ed      	bne.n	800dece <_Balloc+0xa>
 800def2:	2000      	movs	r0, #0
 800def4:	bd70      	pop	{r4, r5, r6, pc}
 800def6:	2101      	movs	r1, #1
 800def8:	fa01 f604 	lsl.w	r6, r1, r4
 800defc:	1d72      	adds	r2, r6, #5
 800defe:	4628      	mov	r0, r5
 800df00:	0092      	lsls	r2, r2, #2
 800df02:	f7fc ff21 	bl	800ad48 <_calloc_r>
 800df06:	2800      	cmp	r0, #0
 800df08:	d0f3      	beq.n	800def2 <_Balloc+0x2e>
 800df0a:	6044      	str	r4, [r0, #4]
 800df0c:	6086      	str	r6, [r0, #8]
 800df0e:	e7e4      	b.n	800deda <_Balloc+0x16>

0800df10 <_Bfree>:
 800df10:	b131      	cbz	r1, 800df20 <_Bfree+0x10>
 800df12:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800df14:	684a      	ldr	r2, [r1, #4]
 800df16:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800df1a:	6008      	str	r0, [r1, #0]
 800df1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop

0800df24 <__multadd>:
 800df24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df26:	690c      	ldr	r4, [r1, #16]
 800df28:	b083      	sub	sp, #12
 800df2a:	460d      	mov	r5, r1
 800df2c:	4606      	mov	r6, r0
 800df2e:	f101 0e14 	add.w	lr, r1, #20
 800df32:	2700      	movs	r7, #0
 800df34:	f8de 0000 	ldr.w	r0, [lr]
 800df38:	b281      	uxth	r1, r0
 800df3a:	fb02 3101 	mla	r1, r2, r1, r3
 800df3e:	0c0b      	lsrs	r3, r1, #16
 800df40:	0c00      	lsrs	r0, r0, #16
 800df42:	fb02 3300 	mla	r3, r2, r0, r3
 800df46:	b289      	uxth	r1, r1
 800df48:	3701      	adds	r7, #1
 800df4a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df4e:	42bc      	cmp	r4, r7
 800df50:	f84e 1b04 	str.w	r1, [lr], #4
 800df54:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800df58:	dcec      	bgt.n	800df34 <__multadd+0x10>
 800df5a:	b13b      	cbz	r3, 800df6c <__multadd+0x48>
 800df5c:	68aa      	ldr	r2, [r5, #8]
 800df5e:	4294      	cmp	r4, r2
 800df60:	da07      	bge.n	800df72 <__multadd+0x4e>
 800df62:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800df66:	3401      	adds	r4, #1
 800df68:	6153      	str	r3, [r2, #20]
 800df6a:	612c      	str	r4, [r5, #16]
 800df6c:	4628      	mov	r0, r5
 800df6e:	b003      	add	sp, #12
 800df70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df72:	6869      	ldr	r1, [r5, #4]
 800df74:	9301      	str	r3, [sp, #4]
 800df76:	3101      	adds	r1, #1
 800df78:	4630      	mov	r0, r6
 800df7a:	f7ff ffa3 	bl	800dec4 <_Balloc>
 800df7e:	692a      	ldr	r2, [r5, #16]
 800df80:	3202      	adds	r2, #2
 800df82:	f105 010c 	add.w	r1, r5, #12
 800df86:	4607      	mov	r7, r0
 800df88:	0092      	lsls	r2, r2, #2
 800df8a:	300c      	adds	r0, #12
 800df8c:	f7f2 f946 	bl	800021c <memcpy>
 800df90:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800df92:	6869      	ldr	r1, [r5, #4]
 800df94:	9b01      	ldr	r3, [sp, #4]
 800df96:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800df9a:	6028      	str	r0, [r5, #0]
 800df9c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800dfa0:	463d      	mov	r5, r7
 800dfa2:	e7de      	b.n	800df62 <__multadd+0x3e>

0800dfa4 <__hi0bits>:
 800dfa4:	0c03      	lsrs	r3, r0, #16
 800dfa6:	041b      	lsls	r3, r3, #16
 800dfa8:	b9b3      	cbnz	r3, 800dfd8 <__hi0bits+0x34>
 800dfaa:	0400      	lsls	r0, r0, #16
 800dfac:	2310      	movs	r3, #16
 800dfae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dfb2:	bf04      	itt	eq
 800dfb4:	0200      	lsleq	r0, r0, #8
 800dfb6:	3308      	addeq	r3, #8
 800dfb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dfbc:	bf04      	itt	eq
 800dfbe:	0100      	lsleq	r0, r0, #4
 800dfc0:	3304      	addeq	r3, #4
 800dfc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dfc6:	bf04      	itt	eq
 800dfc8:	0080      	lsleq	r0, r0, #2
 800dfca:	3302      	addeq	r3, #2
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	db07      	blt.n	800dfe0 <__hi0bits+0x3c>
 800dfd0:	0042      	lsls	r2, r0, #1
 800dfd2:	d403      	bmi.n	800dfdc <__hi0bits+0x38>
 800dfd4:	2020      	movs	r0, #32
 800dfd6:	4770      	bx	lr
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e7e8      	b.n	800dfae <__hi0bits+0xa>
 800dfdc:	1c58      	adds	r0, r3, #1
 800dfde:	4770      	bx	lr
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	4770      	bx	lr

0800dfe4 <__lo0bits>:
 800dfe4:	6803      	ldr	r3, [r0, #0]
 800dfe6:	f013 0207 	ands.w	r2, r3, #7
 800dfea:	d007      	beq.n	800dffc <__lo0bits+0x18>
 800dfec:	07d9      	lsls	r1, r3, #31
 800dfee:	d420      	bmi.n	800e032 <__lo0bits+0x4e>
 800dff0:	079a      	lsls	r2, r3, #30
 800dff2:	d420      	bmi.n	800e036 <__lo0bits+0x52>
 800dff4:	089b      	lsrs	r3, r3, #2
 800dff6:	6003      	str	r3, [r0, #0]
 800dff8:	2002      	movs	r0, #2
 800dffa:	4770      	bx	lr
 800dffc:	b299      	uxth	r1, r3
 800dffe:	b909      	cbnz	r1, 800e004 <__lo0bits+0x20>
 800e000:	0c1b      	lsrs	r3, r3, #16
 800e002:	2210      	movs	r2, #16
 800e004:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e008:	bf04      	itt	eq
 800e00a:	0a1b      	lsreq	r3, r3, #8
 800e00c:	3208      	addeq	r2, #8
 800e00e:	0719      	lsls	r1, r3, #28
 800e010:	bf04      	itt	eq
 800e012:	091b      	lsreq	r3, r3, #4
 800e014:	3204      	addeq	r2, #4
 800e016:	0799      	lsls	r1, r3, #30
 800e018:	bf04      	itt	eq
 800e01a:	089b      	lsreq	r3, r3, #2
 800e01c:	3202      	addeq	r2, #2
 800e01e:	07d9      	lsls	r1, r3, #31
 800e020:	d404      	bmi.n	800e02c <__lo0bits+0x48>
 800e022:	085b      	lsrs	r3, r3, #1
 800e024:	d101      	bne.n	800e02a <__lo0bits+0x46>
 800e026:	2020      	movs	r0, #32
 800e028:	4770      	bx	lr
 800e02a:	3201      	adds	r2, #1
 800e02c:	6003      	str	r3, [r0, #0]
 800e02e:	4610      	mov	r0, r2
 800e030:	4770      	bx	lr
 800e032:	2000      	movs	r0, #0
 800e034:	4770      	bx	lr
 800e036:	085b      	lsrs	r3, r3, #1
 800e038:	6003      	str	r3, [r0, #0]
 800e03a:	2001      	movs	r0, #1
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop

0800e040 <__i2b>:
 800e040:	b510      	push	{r4, lr}
 800e042:	460c      	mov	r4, r1
 800e044:	2101      	movs	r1, #1
 800e046:	f7ff ff3d 	bl	800dec4 <_Balloc>
 800e04a:	2201      	movs	r2, #1
 800e04c:	6144      	str	r4, [r0, #20]
 800e04e:	6102      	str	r2, [r0, #16]
 800e050:	bd10      	pop	{r4, pc}
 800e052:	bf00      	nop

0800e054 <__multiply>:
 800e054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e058:	690d      	ldr	r5, [r1, #16]
 800e05a:	6917      	ldr	r7, [r2, #16]
 800e05c:	42bd      	cmp	r5, r7
 800e05e:	b083      	sub	sp, #12
 800e060:	460c      	mov	r4, r1
 800e062:	4616      	mov	r6, r2
 800e064:	da04      	bge.n	800e070 <__multiply+0x1c>
 800e066:	462a      	mov	r2, r5
 800e068:	4634      	mov	r4, r6
 800e06a:	463d      	mov	r5, r7
 800e06c:	460e      	mov	r6, r1
 800e06e:	4617      	mov	r7, r2
 800e070:	68a3      	ldr	r3, [r4, #8]
 800e072:	6861      	ldr	r1, [r4, #4]
 800e074:	eb05 0807 	add.w	r8, r5, r7
 800e078:	4598      	cmp	r8, r3
 800e07a:	bfc8      	it	gt
 800e07c:	3101      	addgt	r1, #1
 800e07e:	f7ff ff21 	bl	800dec4 <_Balloc>
 800e082:	f100 0c14 	add.w	ip, r0, #20
 800e086:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800e08a:	45cc      	cmp	ip, r9
 800e08c:	9000      	str	r0, [sp, #0]
 800e08e:	d205      	bcs.n	800e09c <__multiply+0x48>
 800e090:	4663      	mov	r3, ip
 800e092:	2100      	movs	r1, #0
 800e094:	f843 1b04 	str.w	r1, [r3], #4
 800e098:	4599      	cmp	r9, r3
 800e09a:	d8fb      	bhi.n	800e094 <__multiply+0x40>
 800e09c:	f106 0214 	add.w	r2, r6, #20
 800e0a0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800e0a4:	f104 0314 	add.w	r3, r4, #20
 800e0a8:	4552      	cmp	r2, sl
 800e0aa:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800e0ae:	d254      	bcs.n	800e15a <__multiply+0x106>
 800e0b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800e0b4:	4699      	mov	r9, r3
 800e0b6:	f852 3b04 	ldr.w	r3, [r2], #4
 800e0ba:	fa1f fb83 	uxth.w	fp, r3
 800e0be:	f1bb 0f00 	cmp.w	fp, #0
 800e0c2:	d020      	beq.n	800e106 <__multiply+0xb2>
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	464f      	mov	r7, r9
 800e0c8:	4666      	mov	r6, ip
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	e000      	b.n	800e0d0 <__multiply+0x7c>
 800e0ce:	461e      	mov	r6, r3
 800e0d0:	f857 4b04 	ldr.w	r4, [r7], #4
 800e0d4:	6830      	ldr	r0, [r6, #0]
 800e0d6:	b2a1      	uxth	r1, r4
 800e0d8:	b283      	uxth	r3, r0
 800e0da:	fb0b 3101 	mla	r1, fp, r1, r3
 800e0de:	0c24      	lsrs	r4, r4, #16
 800e0e0:	0c00      	lsrs	r0, r0, #16
 800e0e2:	194b      	adds	r3, r1, r5
 800e0e4:	fb0b 0004 	mla	r0, fp, r4, r0
 800e0e8:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800e0ec:	b299      	uxth	r1, r3
 800e0ee:	4633      	mov	r3, r6
 800e0f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e0f4:	45be      	cmp	lr, r7
 800e0f6:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800e0fa:	f843 1b04 	str.w	r1, [r3], #4
 800e0fe:	d8e6      	bhi.n	800e0ce <__multiply+0x7a>
 800e100:	6075      	str	r5, [r6, #4]
 800e102:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800e106:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800e10a:	d020      	beq.n	800e14e <__multiply+0xfa>
 800e10c:	f8dc 3000 	ldr.w	r3, [ip]
 800e110:	4667      	mov	r7, ip
 800e112:	4618      	mov	r0, r3
 800e114:	464d      	mov	r5, r9
 800e116:	2100      	movs	r1, #0
 800e118:	e000      	b.n	800e11c <__multiply+0xc8>
 800e11a:	4637      	mov	r7, r6
 800e11c:	882c      	ldrh	r4, [r5, #0]
 800e11e:	0c00      	lsrs	r0, r0, #16
 800e120:	fb0b 0004 	mla	r0, fp, r4, r0
 800e124:	4401      	add	r1, r0
 800e126:	b29c      	uxth	r4, r3
 800e128:	463e      	mov	r6, r7
 800e12a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800e12e:	f846 3b04 	str.w	r3, [r6], #4
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f855 4b04 	ldr.w	r4, [r5], #4
 800e138:	b283      	uxth	r3, r0
 800e13a:	0c24      	lsrs	r4, r4, #16
 800e13c:	fb0b 3404 	mla	r4, fp, r4, r3
 800e140:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800e144:	45ae      	cmp	lr, r5
 800e146:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800e14a:	d8e6      	bhi.n	800e11a <__multiply+0xc6>
 800e14c:	607b      	str	r3, [r7, #4]
 800e14e:	4592      	cmp	sl, r2
 800e150:	f10c 0c04 	add.w	ip, ip, #4
 800e154:	d8af      	bhi.n	800e0b6 <__multiply+0x62>
 800e156:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e15a:	f1b8 0f00 	cmp.w	r8, #0
 800e15e:	dd0b      	ble.n	800e178 <__multiply+0x124>
 800e160:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800e164:	f1a9 0904 	sub.w	r9, r9, #4
 800e168:	b11b      	cbz	r3, 800e172 <__multiply+0x11e>
 800e16a:	e005      	b.n	800e178 <__multiply+0x124>
 800e16c:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800e170:	b913      	cbnz	r3, 800e178 <__multiply+0x124>
 800e172:	f1b8 0801 	subs.w	r8, r8, #1
 800e176:	d1f9      	bne.n	800e16c <__multiply+0x118>
 800e178:	9800      	ldr	r0, [sp, #0]
 800e17a:	f8c0 8010 	str.w	r8, [r0, #16]
 800e17e:	b003      	add	sp, #12
 800e180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e184 <__pow5mult>:
 800e184:	f012 0303 	ands.w	r3, r2, #3
 800e188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e18c:	4614      	mov	r4, r2
 800e18e:	4607      	mov	r7, r0
 800e190:	d12e      	bne.n	800e1f0 <__pow5mult+0x6c>
 800e192:	460e      	mov	r6, r1
 800e194:	10a4      	asrs	r4, r4, #2
 800e196:	d01c      	beq.n	800e1d2 <__pow5mult+0x4e>
 800e198:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800e19a:	b395      	cbz	r5, 800e202 <__pow5mult+0x7e>
 800e19c:	07e3      	lsls	r3, r4, #31
 800e19e:	f04f 0800 	mov.w	r8, #0
 800e1a2:	d406      	bmi.n	800e1b2 <__pow5mult+0x2e>
 800e1a4:	1064      	asrs	r4, r4, #1
 800e1a6:	d014      	beq.n	800e1d2 <__pow5mult+0x4e>
 800e1a8:	6828      	ldr	r0, [r5, #0]
 800e1aa:	b1a8      	cbz	r0, 800e1d8 <__pow5mult+0x54>
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	07e3      	lsls	r3, r4, #31
 800e1b0:	d5f8      	bpl.n	800e1a4 <__pow5mult+0x20>
 800e1b2:	462a      	mov	r2, r5
 800e1b4:	4631      	mov	r1, r6
 800e1b6:	4638      	mov	r0, r7
 800e1b8:	f7ff ff4c 	bl	800e054 <__multiply>
 800e1bc:	b1b6      	cbz	r6, 800e1ec <__pow5mult+0x68>
 800e1be:	6872      	ldr	r2, [r6, #4]
 800e1c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c2:	1064      	asrs	r4, r4, #1
 800e1c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1c8:	6031      	str	r1, [r6, #0]
 800e1ca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	d1ea      	bne.n	800e1a8 <__pow5mult+0x24>
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d8:	462a      	mov	r2, r5
 800e1da:	4629      	mov	r1, r5
 800e1dc:	4638      	mov	r0, r7
 800e1de:	f7ff ff39 	bl	800e054 <__multiply>
 800e1e2:	6028      	str	r0, [r5, #0]
 800e1e4:	f8c0 8000 	str.w	r8, [r0]
 800e1e8:	4605      	mov	r5, r0
 800e1ea:	e7e0      	b.n	800e1ae <__pow5mult+0x2a>
 800e1ec:	4606      	mov	r6, r0
 800e1ee:	e7d9      	b.n	800e1a4 <__pow5mult+0x20>
 800e1f0:	1e5a      	subs	r2, r3, #1
 800e1f2:	4d0b      	ldr	r5, [pc, #44]	; (800e220 <__pow5mult+0x9c>)
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800e1fa:	f7ff fe93 	bl	800df24 <__multadd>
 800e1fe:	4606      	mov	r6, r0
 800e200:	e7c8      	b.n	800e194 <__pow5mult+0x10>
 800e202:	2101      	movs	r1, #1
 800e204:	4638      	mov	r0, r7
 800e206:	f7ff fe5d 	bl	800dec4 <_Balloc>
 800e20a:	f240 2171 	movw	r1, #625	; 0x271
 800e20e:	2201      	movs	r2, #1
 800e210:	2300      	movs	r3, #0
 800e212:	6141      	str	r1, [r0, #20]
 800e214:	6102      	str	r2, [r0, #16]
 800e216:	4605      	mov	r5, r0
 800e218:	64b8      	str	r0, [r7, #72]	; 0x48
 800e21a:	6003      	str	r3, [r0, #0]
 800e21c:	e7be      	b.n	800e19c <__pow5mult+0x18>
 800e21e:	bf00      	nop
 800e220:	0800f130 	.word	0x0800f130

0800e224 <__lshift>:
 800e224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e228:	4691      	mov	r9, r2
 800e22a:	690a      	ldr	r2, [r1, #16]
 800e22c:	688b      	ldr	r3, [r1, #8]
 800e22e:	ea4f 1469 	mov.w	r4, r9, asr #5
 800e232:	eb04 0802 	add.w	r8, r4, r2
 800e236:	f108 0501 	add.w	r5, r8, #1
 800e23a:	429d      	cmp	r5, r3
 800e23c:	460e      	mov	r6, r1
 800e23e:	4682      	mov	sl, r0
 800e240:	6849      	ldr	r1, [r1, #4]
 800e242:	dd04      	ble.n	800e24e <__lshift+0x2a>
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	429d      	cmp	r5, r3
 800e248:	f101 0101 	add.w	r1, r1, #1
 800e24c:	dcfa      	bgt.n	800e244 <__lshift+0x20>
 800e24e:	4650      	mov	r0, sl
 800e250:	f7ff fe38 	bl	800dec4 <_Balloc>
 800e254:	2c00      	cmp	r4, #0
 800e256:	f100 0214 	add.w	r2, r0, #20
 800e25a:	dd38      	ble.n	800e2ce <__lshift+0xaa>
 800e25c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800e260:	2100      	movs	r1, #0
 800e262:	f842 1b04 	str.w	r1, [r2], #4
 800e266:	4293      	cmp	r3, r2
 800e268:	d1fb      	bne.n	800e262 <__lshift+0x3e>
 800e26a:	6934      	ldr	r4, [r6, #16]
 800e26c:	f106 0114 	add.w	r1, r6, #20
 800e270:	f019 091f 	ands.w	r9, r9, #31
 800e274:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800e278:	d021      	beq.n	800e2be <__lshift+0x9a>
 800e27a:	f1c9 0220 	rsb	r2, r9, #32
 800e27e:	2400      	movs	r4, #0
 800e280:	680f      	ldr	r7, [r1, #0]
 800e282:	fa07 fc09 	lsl.w	ip, r7, r9
 800e286:	ea4c 0404 	orr.w	r4, ip, r4
 800e28a:	469c      	mov	ip, r3
 800e28c:	f843 4b04 	str.w	r4, [r3], #4
 800e290:	f851 4b04 	ldr.w	r4, [r1], #4
 800e294:	458e      	cmp	lr, r1
 800e296:	fa24 f402 	lsr.w	r4, r4, r2
 800e29a:	d8f1      	bhi.n	800e280 <__lshift+0x5c>
 800e29c:	f8cc 4004 	str.w	r4, [ip, #4]
 800e2a0:	b10c      	cbz	r4, 800e2a6 <__lshift+0x82>
 800e2a2:	f108 0502 	add.w	r5, r8, #2
 800e2a6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800e2aa:	6872      	ldr	r2, [r6, #4]
 800e2ac:	3d01      	subs	r5, #1
 800e2ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2b2:	6105      	str	r5, [r0, #16]
 800e2b4:	6031      	str	r1, [r6, #0]
 800e2b6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800e2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2be:	3b04      	subs	r3, #4
 800e2c0:	f851 2b04 	ldr.w	r2, [r1], #4
 800e2c4:	f843 2f04 	str.w	r2, [r3, #4]!
 800e2c8:	458e      	cmp	lr, r1
 800e2ca:	d8f9      	bhi.n	800e2c0 <__lshift+0x9c>
 800e2cc:	e7eb      	b.n	800e2a6 <__lshift+0x82>
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	e7cb      	b.n	800e26a <__lshift+0x46>
 800e2d2:	bf00      	nop

0800e2d4 <__mcmp>:
 800e2d4:	6902      	ldr	r2, [r0, #16]
 800e2d6:	690b      	ldr	r3, [r1, #16]
 800e2d8:	1ad2      	subs	r2, r2, r3
 800e2da:	d113      	bne.n	800e304 <__mcmp+0x30>
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	3014      	adds	r0, #20
 800e2e0:	3114      	adds	r1, #20
 800e2e2:	4419      	add	r1, r3
 800e2e4:	b410      	push	{r4}
 800e2e6:	4403      	add	r3, r0
 800e2e8:	e001      	b.n	800e2ee <__mcmp+0x1a>
 800e2ea:	4298      	cmp	r0, r3
 800e2ec:	d20c      	bcs.n	800e308 <__mcmp+0x34>
 800e2ee:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800e2f2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e2f6:	4294      	cmp	r4, r2
 800e2f8:	d0f7      	beq.n	800e2ea <__mcmp+0x16>
 800e2fa:	d309      	bcc.n	800e310 <__mcmp+0x3c>
 800e2fc:	2001      	movs	r0, #1
 800e2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e302:	4770      	bx	lr
 800e304:	4610      	mov	r0, r2
 800e306:	4770      	bx	lr
 800e308:	2000      	movs	r0, #0
 800e30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	f04f 30ff 	mov.w	r0, #4294967295
 800e314:	e7f3      	b.n	800e2fe <__mcmp+0x2a>
 800e316:	bf00      	nop

0800e318 <__mdiff>:
 800e318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e31c:	690b      	ldr	r3, [r1, #16]
 800e31e:	460f      	mov	r7, r1
 800e320:	6911      	ldr	r1, [r2, #16]
 800e322:	1a5b      	subs	r3, r3, r1
 800e324:	2b00      	cmp	r3, #0
 800e326:	4690      	mov	r8, r2
 800e328:	d117      	bne.n	800e35a <__mdiff+0x42>
 800e32a:	0089      	lsls	r1, r1, #2
 800e32c:	f107 0214 	add.w	r2, r7, #20
 800e330:	f108 0514 	add.w	r5, r8, #20
 800e334:	1853      	adds	r3, r2, r1
 800e336:	4429      	add	r1, r5
 800e338:	e001      	b.n	800e33e <__mdiff+0x26>
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d25e      	bcs.n	800e3fc <__mdiff+0xe4>
 800e33e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800e342:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e346:	42a6      	cmp	r6, r4
 800e348:	d0f7      	beq.n	800e33a <__mdiff+0x22>
 800e34a:	d260      	bcs.n	800e40e <__mdiff+0xf6>
 800e34c:	463b      	mov	r3, r7
 800e34e:	4614      	mov	r4, r2
 800e350:	4647      	mov	r7, r8
 800e352:	f04f 0901 	mov.w	r9, #1
 800e356:	4698      	mov	r8, r3
 800e358:	e006      	b.n	800e368 <__mdiff+0x50>
 800e35a:	db5d      	blt.n	800e418 <__mdiff+0x100>
 800e35c:	f107 0514 	add.w	r5, r7, #20
 800e360:	f102 0414 	add.w	r4, r2, #20
 800e364:	f04f 0900 	mov.w	r9, #0
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	f7ff fdab 	bl	800dec4 <_Balloc>
 800e36e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e372:	693e      	ldr	r6, [r7, #16]
 800e374:	f8c0 900c 	str.w	r9, [r0, #12]
 800e378:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800e37c:	46a6      	mov	lr, r4
 800e37e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800e382:	f100 0414 	add.w	r4, r0, #20
 800e386:	2300      	movs	r3, #0
 800e388:	f85e 1b04 	ldr.w	r1, [lr], #4
 800e38c:	f855 8b04 	ldr.w	r8, [r5], #4
 800e390:	b28a      	uxth	r2, r1
 800e392:	fa13 f388 	uxtah	r3, r3, r8
 800e396:	0c09      	lsrs	r1, r1, #16
 800e398:	1a9a      	subs	r2, r3, r2
 800e39a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800e39e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800e3a2:	b292      	uxth	r2, r2
 800e3a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e3a8:	45f4      	cmp	ip, lr
 800e3aa:	f844 2b04 	str.w	r2, [r4], #4
 800e3ae:	ea4f 4323 	mov.w	r3, r3, asr #16
 800e3b2:	d8e9      	bhi.n	800e388 <__mdiff+0x70>
 800e3b4:	42af      	cmp	r7, r5
 800e3b6:	d917      	bls.n	800e3e8 <__mdiff+0xd0>
 800e3b8:	46a4      	mov	ip, r4
 800e3ba:	4629      	mov	r1, r5
 800e3bc:	f851 eb04 	ldr.w	lr, [r1], #4
 800e3c0:	fa13 f28e 	uxtah	r2, r3, lr
 800e3c4:	1413      	asrs	r3, r2, #16
 800e3c6:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800e3ca:	b292      	uxth	r2, r2
 800e3cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e3d0:	428f      	cmp	r7, r1
 800e3d2:	f84c 2b04 	str.w	r2, [ip], #4
 800e3d6:	ea4f 4323 	mov.w	r3, r3, asr #16
 800e3da:	d8ef      	bhi.n	800e3bc <__mdiff+0xa4>
 800e3dc:	43ed      	mvns	r5, r5
 800e3de:	443d      	add	r5, r7
 800e3e0:	f025 0503 	bic.w	r5, r5, #3
 800e3e4:	3504      	adds	r5, #4
 800e3e6:	442c      	add	r4, r5
 800e3e8:	3c04      	subs	r4, #4
 800e3ea:	b922      	cbnz	r2, 800e3f6 <__mdiff+0xde>
 800e3ec:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800e3f0:	3e01      	subs	r6, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d0fa      	beq.n	800e3ec <__mdiff+0xd4>
 800e3f6:	6106      	str	r6, [r0, #16]
 800e3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	f7ff fd61 	bl	800dec4 <_Balloc>
 800e402:	2201      	movs	r2, #1
 800e404:	2300      	movs	r3, #0
 800e406:	6102      	str	r2, [r0, #16]
 800e408:	6143      	str	r3, [r0, #20]
 800e40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e40e:	462c      	mov	r4, r5
 800e410:	f04f 0900 	mov.w	r9, #0
 800e414:	4615      	mov	r5, r2
 800e416:	e7a7      	b.n	800e368 <__mdiff+0x50>
 800e418:	463b      	mov	r3, r7
 800e41a:	f107 0414 	add.w	r4, r7, #20
 800e41e:	f108 0514 	add.w	r5, r8, #20
 800e422:	4647      	mov	r7, r8
 800e424:	f04f 0901 	mov.w	r9, #1
 800e428:	4698      	mov	r8, r3
 800e42a:	e79d      	b.n	800e368 <__mdiff+0x50>

0800e42c <__d2b>:
 800e42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e430:	ec57 6b10 	vmov	r6, r7, d0
 800e434:	b083      	sub	sp, #12
 800e436:	4688      	mov	r8, r1
 800e438:	2101      	movs	r1, #1
 800e43a:	463c      	mov	r4, r7
 800e43c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e440:	4617      	mov	r7, r2
 800e442:	f7ff fd3f 	bl	800dec4 <_Balloc>
 800e446:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e44a:	4681      	mov	r9, r0
 800e44c:	b10d      	cbz	r5, 800e452 <__d2b+0x26>
 800e44e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800e452:	9401      	str	r4, [sp, #4]
 800e454:	b31e      	cbz	r6, 800e49e <__d2b+0x72>
 800e456:	a802      	add	r0, sp, #8
 800e458:	f840 6d08 	str.w	r6, [r0, #-8]!
 800e45c:	f7ff fdc2 	bl	800dfe4 <__lo0bits>
 800e460:	2800      	cmp	r0, #0
 800e462:	d134      	bne.n	800e4ce <__d2b+0xa2>
 800e464:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800e468:	f8c9 2014 	str.w	r2, [r9, #20]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	bf0c      	ite	eq
 800e470:	2101      	moveq	r1, #1
 800e472:	2102      	movne	r1, #2
 800e474:	f8c9 3018 	str.w	r3, [r9, #24]
 800e478:	f8c9 1010 	str.w	r1, [r9, #16]
 800e47c:	b9dd      	cbnz	r5, 800e4b6 <__d2b+0x8a>
 800e47e:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800e482:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e486:	f8c8 0000 	str.w	r0, [r8]
 800e48a:	6918      	ldr	r0, [r3, #16]
 800e48c:	f7ff fd8a 	bl	800dfa4 <__hi0bits>
 800e490:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e494:	6038      	str	r0, [r7, #0]
 800e496:	4648      	mov	r0, r9
 800e498:	b003      	add	sp, #12
 800e49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e49e:	a801      	add	r0, sp, #4
 800e4a0:	f7ff fda0 	bl	800dfe4 <__lo0bits>
 800e4a4:	9b01      	ldr	r3, [sp, #4]
 800e4a6:	f8c9 3014 	str.w	r3, [r9, #20]
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	3020      	adds	r0, #32
 800e4ae:	f8c9 1010 	str.w	r1, [r9, #16]
 800e4b2:	2d00      	cmp	r5, #0
 800e4b4:	d0e3      	beq.n	800e47e <__d2b+0x52>
 800e4b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e4ba:	4405      	add	r5, r0
 800e4bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e4c0:	f8c8 5000 	str.w	r5, [r8]
 800e4c4:	6038      	str	r0, [r7, #0]
 800e4c6:	4648      	mov	r0, r9
 800e4c8:	b003      	add	sp, #12
 800e4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4ce:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800e4d2:	f1c0 0120 	rsb	r1, r0, #32
 800e4d6:	fa03 f101 	lsl.w	r1, r3, r1
 800e4da:	430a      	orrs	r2, r1
 800e4dc:	40c3      	lsrs	r3, r0
 800e4de:	9301      	str	r3, [sp, #4]
 800e4e0:	f8c9 2014 	str.w	r2, [r9, #20]
 800e4e4:	e7c2      	b.n	800e46c <__d2b+0x40>
 800e4e6:	bf00      	nop

0800e4e8 <__ssprint_r>:
 800e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ec:	6893      	ldr	r3, [r2, #8]
 800e4ee:	b083      	sub	sp, #12
 800e4f0:	4690      	mov	r8, r2
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d072      	beq.n	800e5dc <__ssprint_r+0xf4>
 800e4f6:	4683      	mov	fp, r0
 800e4f8:	f04f 0900 	mov.w	r9, #0
 800e4fc:	6816      	ldr	r6, [r2, #0]
 800e4fe:	6808      	ldr	r0, [r1, #0]
 800e500:	688b      	ldr	r3, [r1, #8]
 800e502:	460d      	mov	r5, r1
 800e504:	464c      	mov	r4, r9
 800e506:	2c00      	cmp	r4, #0
 800e508:	d045      	beq.n	800e596 <__ssprint_r+0xae>
 800e50a:	429c      	cmp	r4, r3
 800e50c:	461f      	mov	r7, r3
 800e50e:	469a      	mov	sl, r3
 800e510:	d346      	bcc.n	800e5a0 <__ssprint_r+0xb8>
 800e512:	89ab      	ldrh	r3, [r5, #12]
 800e514:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800e518:	d02d      	beq.n	800e576 <__ssprint_r+0x8e>
 800e51a:	696f      	ldr	r7, [r5, #20]
 800e51c:	6929      	ldr	r1, [r5, #16]
 800e51e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800e522:	ebc1 0a00 	rsb	sl, r1, r0
 800e526:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800e52a:	1c60      	adds	r0, r4, #1
 800e52c:	107f      	asrs	r7, r7, #1
 800e52e:	4450      	add	r0, sl
 800e530:	42b8      	cmp	r0, r7
 800e532:	463a      	mov	r2, r7
 800e534:	bf84      	itt	hi
 800e536:	4607      	movhi	r7, r0
 800e538:	463a      	movhi	r2, r7
 800e53a:	055b      	lsls	r3, r3, #21
 800e53c:	d533      	bpl.n	800e5a6 <__ssprint_r+0xbe>
 800e53e:	4611      	mov	r1, r2
 800e540:	4658      	mov	r0, fp
 800e542:	f7fc fc69 	bl	800ae18 <_malloc_r>
 800e546:	2800      	cmp	r0, #0
 800e548:	d037      	beq.n	800e5ba <__ssprint_r+0xd2>
 800e54a:	4652      	mov	r2, sl
 800e54c:	6929      	ldr	r1, [r5, #16]
 800e54e:	9001      	str	r0, [sp, #4]
 800e550:	f7f1 fe64 	bl	800021c <memcpy>
 800e554:	89aa      	ldrh	r2, [r5, #12]
 800e556:	9b01      	ldr	r3, [sp, #4]
 800e558:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800e55c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e560:	81aa      	strh	r2, [r5, #12]
 800e562:	ebca 0207 	rsb	r2, sl, r7
 800e566:	eb03 000a 	add.w	r0, r3, sl
 800e56a:	616f      	str	r7, [r5, #20]
 800e56c:	612b      	str	r3, [r5, #16]
 800e56e:	6028      	str	r0, [r5, #0]
 800e570:	60aa      	str	r2, [r5, #8]
 800e572:	4627      	mov	r7, r4
 800e574:	46a2      	mov	sl, r4
 800e576:	4652      	mov	r2, sl
 800e578:	4649      	mov	r1, r9
 800e57a:	f000 f843 	bl	800e604 <memmove>
 800e57e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e582:	68ab      	ldr	r3, [r5, #8]
 800e584:	6828      	ldr	r0, [r5, #0]
 800e586:	1bdb      	subs	r3, r3, r7
 800e588:	4450      	add	r0, sl
 800e58a:	1b14      	subs	r4, r2, r4
 800e58c:	60ab      	str	r3, [r5, #8]
 800e58e:	6028      	str	r0, [r5, #0]
 800e590:	f8c8 4008 	str.w	r4, [r8, #8]
 800e594:	b314      	cbz	r4, 800e5dc <__ssprint_r+0xf4>
 800e596:	f8d6 9000 	ldr.w	r9, [r6]
 800e59a:	6874      	ldr	r4, [r6, #4]
 800e59c:	3608      	adds	r6, #8
 800e59e:	e7b2      	b.n	800e506 <__ssprint_r+0x1e>
 800e5a0:	4627      	mov	r7, r4
 800e5a2:	46a2      	mov	sl, r4
 800e5a4:	e7e7      	b.n	800e576 <__ssprint_r+0x8e>
 800e5a6:	4658      	mov	r0, fp
 800e5a8:	f000 f890 	bl	800e6cc <_realloc_r>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2800      	cmp	r0, #0
 800e5b0:	d1d7      	bne.n	800e562 <__ssprint_r+0x7a>
 800e5b2:	6929      	ldr	r1, [r5, #16]
 800e5b4:	4658      	mov	r0, fp
 800e5b6:	f7fd f807 	bl	800b5c8 <_free_r>
 800e5ba:	230c      	movs	r3, #12
 800e5bc:	f8cb 3000 	str.w	r3, [fp]
 800e5c0:	89ab      	ldrh	r3, [r5, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5cc:	81ab      	strh	r3, [r5, #12]
 800e5ce:	f8c8 2008 	str.w	r2, [r8, #8]
 800e5d2:	f8c8 2004 	str.w	r2, [r8, #4]
 800e5d6:	b003      	add	sp, #12
 800e5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5dc:	2000      	movs	r0, #0
 800e5de:	f8c8 0004 	str.w	r0, [r8, #4]
 800e5e2:	b003      	add	sp, #12
 800e5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5e8 <__ascii_wctomb>:
 800e5e8:	b121      	cbz	r1, 800e5f4 <__ascii_wctomb+0xc>
 800e5ea:	2aff      	cmp	r2, #255	; 0xff
 800e5ec:	d804      	bhi.n	800e5f8 <__ascii_wctomb+0x10>
 800e5ee:	700a      	strb	r2, [r1, #0]
 800e5f0:	2001      	movs	r0, #1
 800e5f2:	4770      	bx	lr
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4770      	bx	lr
 800e5f8:	238a      	movs	r3, #138	; 0x8a
 800e5fa:	6003      	str	r3, [r0, #0]
 800e5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop

0800e604 <memmove>:
 800e604:	4288      	cmp	r0, r1
 800e606:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e608:	d90d      	bls.n	800e626 <memmove+0x22>
 800e60a:	188b      	adds	r3, r1, r2
 800e60c:	4298      	cmp	r0, r3
 800e60e:	d20a      	bcs.n	800e626 <memmove+0x22>
 800e610:	1881      	adds	r1, r0, r2
 800e612:	2a00      	cmp	r2, #0
 800e614:	d051      	beq.n	800e6ba <memmove+0xb6>
 800e616:	1a9a      	subs	r2, r3, r2
 800e618:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e61c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e620:	4293      	cmp	r3, r2
 800e622:	d1f9      	bne.n	800e618 <memmove+0x14>
 800e624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e626:	2a0f      	cmp	r2, #15
 800e628:	d948      	bls.n	800e6bc <memmove+0xb8>
 800e62a:	ea41 0300 	orr.w	r3, r1, r0
 800e62e:	079b      	lsls	r3, r3, #30
 800e630:	d146      	bne.n	800e6c0 <memmove+0xbc>
 800e632:	f100 0410 	add.w	r4, r0, #16
 800e636:	f101 0310 	add.w	r3, r1, #16
 800e63a:	4615      	mov	r5, r2
 800e63c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800e640:	f844 6c10 	str.w	r6, [r4, #-16]
 800e644:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800e648:	f844 6c0c 	str.w	r6, [r4, #-12]
 800e64c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800e650:	f844 6c08 	str.w	r6, [r4, #-8]
 800e654:	3d10      	subs	r5, #16
 800e656:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800e65a:	f844 6c04 	str.w	r6, [r4, #-4]
 800e65e:	2d0f      	cmp	r5, #15
 800e660:	f103 0310 	add.w	r3, r3, #16
 800e664:	f104 0410 	add.w	r4, r4, #16
 800e668:	d8e8      	bhi.n	800e63c <memmove+0x38>
 800e66a:	f1a2 0310 	sub.w	r3, r2, #16
 800e66e:	f023 030f 	bic.w	r3, r3, #15
 800e672:	f002 0e0f 	and.w	lr, r2, #15
 800e676:	3310      	adds	r3, #16
 800e678:	f1be 0f03 	cmp.w	lr, #3
 800e67c:	4419      	add	r1, r3
 800e67e:	4403      	add	r3, r0
 800e680:	d921      	bls.n	800e6c6 <memmove+0xc2>
 800e682:	1f1e      	subs	r6, r3, #4
 800e684:	460d      	mov	r5, r1
 800e686:	4674      	mov	r4, lr
 800e688:	3c04      	subs	r4, #4
 800e68a:	f855 7b04 	ldr.w	r7, [r5], #4
 800e68e:	f846 7f04 	str.w	r7, [r6, #4]!
 800e692:	2c03      	cmp	r4, #3
 800e694:	d8f8      	bhi.n	800e688 <memmove+0x84>
 800e696:	f1ae 0404 	sub.w	r4, lr, #4
 800e69a:	f024 0403 	bic.w	r4, r4, #3
 800e69e:	3404      	adds	r4, #4
 800e6a0:	4423      	add	r3, r4
 800e6a2:	4421      	add	r1, r4
 800e6a4:	f002 0203 	and.w	r2, r2, #3
 800e6a8:	b162      	cbz	r2, 800e6c4 <memmove+0xc0>
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	440a      	add	r2, r1
 800e6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6b6:	428a      	cmp	r2, r1
 800e6b8:	d1f9      	bne.n	800e6ae <memmove+0xaa>
 800e6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6bc:	4603      	mov	r3, r0
 800e6be:	e7f3      	b.n	800e6a8 <memmove+0xa4>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	e7f2      	b.n	800e6aa <memmove+0xa6>
 800e6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6c6:	4672      	mov	r2, lr
 800e6c8:	e7ee      	b.n	800e6a8 <memmove+0xa4>
 800e6ca:	bf00      	nop

0800e6cc <_realloc_r>:
 800e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d0:	4617      	mov	r7, r2
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	2900      	cmp	r1, #0
 800e6d6:	f000 80c1 	beq.w	800e85c <_realloc_r+0x190>
 800e6da:	460e      	mov	r6, r1
 800e6dc:	4681      	mov	r9, r0
 800e6de:	f107 050b 	add.w	r5, r7, #11
 800e6e2:	f7fc fe9f 	bl	800b424 <__malloc_lock>
 800e6e6:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800e6ea:	2d16      	cmp	r5, #22
 800e6ec:	f02e 0403 	bic.w	r4, lr, #3
 800e6f0:	f1a6 0808 	sub.w	r8, r6, #8
 800e6f4:	d840      	bhi.n	800e778 <_realloc_r+0xac>
 800e6f6:	2210      	movs	r2, #16
 800e6f8:	4615      	mov	r5, r2
 800e6fa:	42af      	cmp	r7, r5
 800e6fc:	d841      	bhi.n	800e782 <_realloc_r+0xb6>
 800e6fe:	4294      	cmp	r4, r2
 800e700:	da75      	bge.n	800e7ee <_realloc_r+0x122>
 800e702:	4bc9      	ldr	r3, [pc, #804]	; (800ea28 <_realloc_r+0x35c>)
 800e704:	6899      	ldr	r1, [r3, #8]
 800e706:	eb08 0004 	add.w	r0, r8, r4
 800e70a:	4288      	cmp	r0, r1
 800e70c:	6841      	ldr	r1, [r0, #4]
 800e70e:	f000 80d9 	beq.w	800e8c4 <_realloc_r+0x1f8>
 800e712:	f021 0301 	bic.w	r3, r1, #1
 800e716:	4403      	add	r3, r0
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	07db      	lsls	r3, r3, #31
 800e71c:	d57d      	bpl.n	800e81a <_realloc_r+0x14e>
 800e71e:	f01e 0f01 	tst.w	lr, #1
 800e722:	d035      	beq.n	800e790 <_realloc_r+0xc4>
 800e724:	4639      	mov	r1, r7
 800e726:	4648      	mov	r0, r9
 800e728:	f7fc fb76 	bl	800ae18 <_malloc_r>
 800e72c:	4607      	mov	r7, r0
 800e72e:	b1e0      	cbz	r0, 800e76a <_realloc_r+0x9e>
 800e730:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e734:	f023 0301 	bic.w	r3, r3, #1
 800e738:	4443      	add	r3, r8
 800e73a:	f1a0 0208 	sub.w	r2, r0, #8
 800e73e:	429a      	cmp	r2, r3
 800e740:	f000 8144 	beq.w	800e9cc <_realloc_r+0x300>
 800e744:	1f22      	subs	r2, r4, #4
 800e746:	2a24      	cmp	r2, #36	; 0x24
 800e748:	f200 8131 	bhi.w	800e9ae <_realloc_r+0x2e2>
 800e74c:	2a13      	cmp	r2, #19
 800e74e:	f200 8104 	bhi.w	800e95a <_realloc_r+0x28e>
 800e752:	4603      	mov	r3, r0
 800e754:	4632      	mov	r2, r6
 800e756:	6811      	ldr	r1, [r2, #0]
 800e758:	6019      	str	r1, [r3, #0]
 800e75a:	6851      	ldr	r1, [r2, #4]
 800e75c:	6059      	str	r1, [r3, #4]
 800e75e:	6892      	ldr	r2, [r2, #8]
 800e760:	609a      	str	r2, [r3, #8]
 800e762:	4631      	mov	r1, r6
 800e764:	4648      	mov	r0, r9
 800e766:	f7fc ff2f 	bl	800b5c8 <_free_r>
 800e76a:	4648      	mov	r0, r9
 800e76c:	f7fc fe5c 	bl	800b428 <__malloc_unlock>
 800e770:	4638      	mov	r0, r7
 800e772:	b003      	add	sp, #12
 800e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e778:	f025 0507 	bic.w	r5, r5, #7
 800e77c:	2d00      	cmp	r5, #0
 800e77e:	462a      	mov	r2, r5
 800e780:	dabb      	bge.n	800e6fa <_realloc_r+0x2e>
 800e782:	230c      	movs	r3, #12
 800e784:	2000      	movs	r0, #0
 800e786:	f8c9 3000 	str.w	r3, [r9]
 800e78a:	b003      	add	sp, #12
 800e78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e790:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800e794:	ebc3 0a08 	rsb	sl, r3, r8
 800e798:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e79c:	f023 0c03 	bic.w	ip, r3, #3
 800e7a0:	eb04 030c 	add.w	r3, r4, ip
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	dbbd      	blt.n	800e724 <_realloc_r+0x58>
 800e7a8:	4657      	mov	r7, sl
 800e7aa:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e7ae:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e7b2:	1f22      	subs	r2, r4, #4
 800e7b4:	2a24      	cmp	r2, #36	; 0x24
 800e7b6:	60c1      	str	r1, [r0, #12]
 800e7b8:	6088      	str	r0, [r1, #8]
 800e7ba:	f200 8117 	bhi.w	800e9ec <_realloc_r+0x320>
 800e7be:	2a13      	cmp	r2, #19
 800e7c0:	f240 8112 	bls.w	800e9e8 <_realloc_r+0x31c>
 800e7c4:	6831      	ldr	r1, [r6, #0]
 800e7c6:	f8ca 1008 	str.w	r1, [sl, #8]
 800e7ca:	6871      	ldr	r1, [r6, #4]
 800e7cc:	f8ca 100c 	str.w	r1, [sl, #12]
 800e7d0:	2a1b      	cmp	r2, #27
 800e7d2:	f200 812b 	bhi.w	800ea2c <_realloc_r+0x360>
 800e7d6:	3608      	adds	r6, #8
 800e7d8:	f10a 0210 	add.w	r2, sl, #16
 800e7dc:	6831      	ldr	r1, [r6, #0]
 800e7de:	6011      	str	r1, [r2, #0]
 800e7e0:	6871      	ldr	r1, [r6, #4]
 800e7e2:	6051      	str	r1, [r2, #4]
 800e7e4:	68b1      	ldr	r1, [r6, #8]
 800e7e6:	6091      	str	r1, [r2, #8]
 800e7e8:	463e      	mov	r6, r7
 800e7ea:	461c      	mov	r4, r3
 800e7ec:	46d0      	mov	r8, sl
 800e7ee:	1b63      	subs	r3, r4, r5
 800e7f0:	2b0f      	cmp	r3, #15
 800e7f2:	d81d      	bhi.n	800e830 <_realloc_r+0x164>
 800e7f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7f8:	f003 0301 	and.w	r3, r3, #1
 800e7fc:	4323      	orrs	r3, r4
 800e7fe:	4444      	add	r4, r8
 800e800:	f8c8 3004 	str.w	r3, [r8, #4]
 800e804:	6863      	ldr	r3, [r4, #4]
 800e806:	f043 0301 	orr.w	r3, r3, #1
 800e80a:	6063      	str	r3, [r4, #4]
 800e80c:	4648      	mov	r0, r9
 800e80e:	f7fc fe0b 	bl	800b428 <__malloc_unlock>
 800e812:	4630      	mov	r0, r6
 800e814:	b003      	add	sp, #12
 800e816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81a:	f021 0103 	bic.w	r1, r1, #3
 800e81e:	4421      	add	r1, r4
 800e820:	4291      	cmp	r1, r2
 800e822:	db21      	blt.n	800e868 <_realloc_r+0x19c>
 800e824:	68c3      	ldr	r3, [r0, #12]
 800e826:	6882      	ldr	r2, [r0, #8]
 800e828:	460c      	mov	r4, r1
 800e82a:	60d3      	str	r3, [r2, #12]
 800e82c:	609a      	str	r2, [r3, #8]
 800e82e:	e7de      	b.n	800e7ee <_realloc_r+0x122>
 800e830:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e834:	eb08 0105 	add.w	r1, r8, r5
 800e838:	f002 0201 	and.w	r2, r2, #1
 800e83c:	4315      	orrs	r5, r2
 800e83e:	f043 0201 	orr.w	r2, r3, #1
 800e842:	440b      	add	r3, r1
 800e844:	f8c8 5004 	str.w	r5, [r8, #4]
 800e848:	604a      	str	r2, [r1, #4]
 800e84a:	685a      	ldr	r2, [r3, #4]
 800e84c:	f042 0201 	orr.w	r2, r2, #1
 800e850:	3108      	adds	r1, #8
 800e852:	605a      	str	r2, [r3, #4]
 800e854:	4648      	mov	r0, r9
 800e856:	f7fc feb7 	bl	800b5c8 <_free_r>
 800e85a:	e7d7      	b.n	800e80c <_realloc_r+0x140>
 800e85c:	4611      	mov	r1, r2
 800e85e:	b003      	add	sp, #12
 800e860:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e864:	f7fc bad8 	b.w	800ae18 <_malloc_r>
 800e868:	f01e 0f01 	tst.w	lr, #1
 800e86c:	f47f af5a 	bne.w	800e724 <_realloc_r+0x58>
 800e870:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800e874:	ebc3 0a08 	rsb	sl, r3, r8
 800e878:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e87c:	f023 0c03 	bic.w	ip, r3, #3
 800e880:	eb01 0e0c 	add.w	lr, r1, ip
 800e884:	4596      	cmp	lr, r2
 800e886:	db8b      	blt.n	800e7a0 <_realloc_r+0xd4>
 800e888:	68c3      	ldr	r3, [r0, #12]
 800e88a:	6882      	ldr	r2, [r0, #8]
 800e88c:	4657      	mov	r7, sl
 800e88e:	60d3      	str	r3, [r2, #12]
 800e890:	609a      	str	r2, [r3, #8]
 800e892:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800e896:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e89a:	60cb      	str	r3, [r1, #12]
 800e89c:	1f22      	subs	r2, r4, #4
 800e89e:	2a24      	cmp	r2, #36	; 0x24
 800e8a0:	6099      	str	r1, [r3, #8]
 800e8a2:	f200 8099 	bhi.w	800e9d8 <_realloc_r+0x30c>
 800e8a6:	2a13      	cmp	r2, #19
 800e8a8:	d962      	bls.n	800e970 <_realloc_r+0x2a4>
 800e8aa:	6833      	ldr	r3, [r6, #0]
 800e8ac:	f8ca 3008 	str.w	r3, [sl, #8]
 800e8b0:	6873      	ldr	r3, [r6, #4]
 800e8b2:	f8ca 300c 	str.w	r3, [sl, #12]
 800e8b6:	2a1b      	cmp	r2, #27
 800e8b8:	f200 80a0 	bhi.w	800e9fc <_realloc_r+0x330>
 800e8bc:	3608      	adds	r6, #8
 800e8be:	f10a 0310 	add.w	r3, sl, #16
 800e8c2:	e056      	b.n	800e972 <_realloc_r+0x2a6>
 800e8c4:	f021 0b03 	bic.w	fp, r1, #3
 800e8c8:	44a3      	add	fp, r4
 800e8ca:	f105 0010 	add.w	r0, r5, #16
 800e8ce:	4583      	cmp	fp, r0
 800e8d0:	da59      	bge.n	800e986 <_realloc_r+0x2ba>
 800e8d2:	f01e 0f01 	tst.w	lr, #1
 800e8d6:	f47f af25 	bne.w	800e724 <_realloc_r+0x58>
 800e8da:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800e8de:	ebc1 0a08 	rsb	sl, r1, r8
 800e8e2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800e8e6:	f021 0c03 	bic.w	ip, r1, #3
 800e8ea:	44e3      	add	fp, ip
 800e8ec:	4558      	cmp	r0, fp
 800e8ee:	f73f af57 	bgt.w	800e7a0 <_realloc_r+0xd4>
 800e8f2:	4657      	mov	r7, sl
 800e8f4:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e8f8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800e8fc:	1f22      	subs	r2, r4, #4
 800e8fe:	2a24      	cmp	r2, #36	; 0x24
 800e900:	60c1      	str	r1, [r0, #12]
 800e902:	6088      	str	r0, [r1, #8]
 800e904:	f200 80b4 	bhi.w	800ea70 <_realloc_r+0x3a4>
 800e908:	2a13      	cmp	r2, #19
 800e90a:	f240 80a5 	bls.w	800ea58 <_realloc_r+0x38c>
 800e90e:	6831      	ldr	r1, [r6, #0]
 800e910:	f8ca 1008 	str.w	r1, [sl, #8]
 800e914:	6871      	ldr	r1, [r6, #4]
 800e916:	f8ca 100c 	str.w	r1, [sl, #12]
 800e91a:	2a1b      	cmp	r2, #27
 800e91c:	f200 80af 	bhi.w	800ea7e <_realloc_r+0x3b2>
 800e920:	3608      	adds	r6, #8
 800e922:	f10a 0210 	add.w	r2, sl, #16
 800e926:	6831      	ldr	r1, [r6, #0]
 800e928:	6011      	str	r1, [r2, #0]
 800e92a:	6871      	ldr	r1, [r6, #4]
 800e92c:	6051      	str	r1, [r2, #4]
 800e92e:	68b1      	ldr	r1, [r6, #8]
 800e930:	6091      	str	r1, [r2, #8]
 800e932:	eb0a 0105 	add.w	r1, sl, r5
 800e936:	ebc5 020b 	rsb	r2, r5, fp
 800e93a:	f042 0201 	orr.w	r2, r2, #1
 800e93e:	6099      	str	r1, [r3, #8]
 800e940:	604a      	str	r2, [r1, #4]
 800e942:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	431d      	orrs	r5, r3
 800e94c:	4648      	mov	r0, r9
 800e94e:	f8ca 5004 	str.w	r5, [sl, #4]
 800e952:	f7fc fd69 	bl	800b428 <__malloc_unlock>
 800e956:	4638      	mov	r0, r7
 800e958:	e75c      	b.n	800e814 <_realloc_r+0x148>
 800e95a:	6833      	ldr	r3, [r6, #0]
 800e95c:	6003      	str	r3, [r0, #0]
 800e95e:	6873      	ldr	r3, [r6, #4]
 800e960:	6043      	str	r3, [r0, #4]
 800e962:	2a1b      	cmp	r2, #27
 800e964:	d827      	bhi.n	800e9b6 <_realloc_r+0x2ea>
 800e966:	f100 0308 	add.w	r3, r0, #8
 800e96a:	f106 0208 	add.w	r2, r6, #8
 800e96e:	e6f2      	b.n	800e756 <_realloc_r+0x8a>
 800e970:	463b      	mov	r3, r7
 800e972:	6832      	ldr	r2, [r6, #0]
 800e974:	601a      	str	r2, [r3, #0]
 800e976:	6872      	ldr	r2, [r6, #4]
 800e978:	605a      	str	r2, [r3, #4]
 800e97a:	68b2      	ldr	r2, [r6, #8]
 800e97c:	609a      	str	r2, [r3, #8]
 800e97e:	463e      	mov	r6, r7
 800e980:	4674      	mov	r4, lr
 800e982:	46d0      	mov	r8, sl
 800e984:	e733      	b.n	800e7ee <_realloc_r+0x122>
 800e986:	eb08 0105 	add.w	r1, r8, r5
 800e98a:	ebc5 0b0b 	rsb	fp, r5, fp
 800e98e:	f04b 0201 	orr.w	r2, fp, #1
 800e992:	6099      	str	r1, [r3, #8]
 800e994:	604a      	str	r2, [r1, #4]
 800e996:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e99a:	f003 0301 	and.w	r3, r3, #1
 800e99e:	431d      	orrs	r5, r3
 800e9a0:	4648      	mov	r0, r9
 800e9a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e9a6:	f7fc fd3f 	bl	800b428 <__malloc_unlock>
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	e732      	b.n	800e814 <_realloc_r+0x148>
 800e9ae:	4631      	mov	r1, r6
 800e9b0:	f7ff fe28 	bl	800e604 <memmove>
 800e9b4:	e6d5      	b.n	800e762 <_realloc_r+0x96>
 800e9b6:	68b3      	ldr	r3, [r6, #8]
 800e9b8:	6083      	str	r3, [r0, #8]
 800e9ba:	68f3      	ldr	r3, [r6, #12]
 800e9bc:	60c3      	str	r3, [r0, #12]
 800e9be:	2a24      	cmp	r2, #36	; 0x24
 800e9c0:	d028      	beq.n	800ea14 <_realloc_r+0x348>
 800e9c2:	f100 0310 	add.w	r3, r0, #16
 800e9c6:	f106 0210 	add.w	r2, r6, #16
 800e9ca:	e6c4      	b.n	800e756 <_realloc_r+0x8a>
 800e9cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e9d0:	f023 0303 	bic.w	r3, r3, #3
 800e9d4:	441c      	add	r4, r3
 800e9d6:	e70a      	b.n	800e7ee <_realloc_r+0x122>
 800e9d8:	4631      	mov	r1, r6
 800e9da:	4638      	mov	r0, r7
 800e9dc:	4674      	mov	r4, lr
 800e9de:	46d0      	mov	r8, sl
 800e9e0:	f7ff fe10 	bl	800e604 <memmove>
 800e9e4:	463e      	mov	r6, r7
 800e9e6:	e702      	b.n	800e7ee <_realloc_r+0x122>
 800e9e8:	463a      	mov	r2, r7
 800e9ea:	e6f7      	b.n	800e7dc <_realloc_r+0x110>
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	461c      	mov	r4, r3
 800e9f2:	46d0      	mov	r8, sl
 800e9f4:	f7ff fe06 	bl	800e604 <memmove>
 800e9f8:	463e      	mov	r6, r7
 800e9fa:	e6f8      	b.n	800e7ee <_realloc_r+0x122>
 800e9fc:	68b3      	ldr	r3, [r6, #8]
 800e9fe:	f8ca 3010 	str.w	r3, [sl, #16]
 800ea02:	68f3      	ldr	r3, [r6, #12]
 800ea04:	f8ca 3014 	str.w	r3, [sl, #20]
 800ea08:	2a24      	cmp	r2, #36	; 0x24
 800ea0a:	d01b      	beq.n	800ea44 <_realloc_r+0x378>
 800ea0c:	3610      	adds	r6, #16
 800ea0e:	f10a 0318 	add.w	r3, sl, #24
 800ea12:	e7ae      	b.n	800e972 <_realloc_r+0x2a6>
 800ea14:	6933      	ldr	r3, [r6, #16]
 800ea16:	6103      	str	r3, [r0, #16]
 800ea18:	6973      	ldr	r3, [r6, #20]
 800ea1a:	6143      	str	r3, [r0, #20]
 800ea1c:	f106 0218 	add.w	r2, r6, #24
 800ea20:	f100 0318 	add.w	r3, r0, #24
 800ea24:	e697      	b.n	800e756 <_realloc_r+0x8a>
 800ea26:	bf00      	nop
 800ea28:	2000058c 	.word	0x2000058c
 800ea2c:	68b1      	ldr	r1, [r6, #8]
 800ea2e:	f8ca 1010 	str.w	r1, [sl, #16]
 800ea32:	68f1      	ldr	r1, [r6, #12]
 800ea34:	f8ca 1014 	str.w	r1, [sl, #20]
 800ea38:	2a24      	cmp	r2, #36	; 0x24
 800ea3a:	d00f      	beq.n	800ea5c <_realloc_r+0x390>
 800ea3c:	3610      	adds	r6, #16
 800ea3e:	f10a 0218 	add.w	r2, sl, #24
 800ea42:	e6cb      	b.n	800e7dc <_realloc_r+0x110>
 800ea44:	6933      	ldr	r3, [r6, #16]
 800ea46:	f8ca 3018 	str.w	r3, [sl, #24]
 800ea4a:	6973      	ldr	r3, [r6, #20]
 800ea4c:	f8ca 301c 	str.w	r3, [sl, #28]
 800ea50:	3618      	adds	r6, #24
 800ea52:	f10a 0320 	add.w	r3, sl, #32
 800ea56:	e78c      	b.n	800e972 <_realloc_r+0x2a6>
 800ea58:	463a      	mov	r2, r7
 800ea5a:	e764      	b.n	800e926 <_realloc_r+0x25a>
 800ea5c:	6932      	ldr	r2, [r6, #16]
 800ea5e:	f8ca 2018 	str.w	r2, [sl, #24]
 800ea62:	6972      	ldr	r2, [r6, #20]
 800ea64:	f8ca 201c 	str.w	r2, [sl, #28]
 800ea68:	3618      	adds	r6, #24
 800ea6a:	f10a 0220 	add.w	r2, sl, #32
 800ea6e:	e6b5      	b.n	800e7dc <_realloc_r+0x110>
 800ea70:	4631      	mov	r1, r6
 800ea72:	4638      	mov	r0, r7
 800ea74:	9301      	str	r3, [sp, #4]
 800ea76:	f7ff fdc5 	bl	800e604 <memmove>
 800ea7a:	9b01      	ldr	r3, [sp, #4]
 800ea7c:	e759      	b.n	800e932 <_realloc_r+0x266>
 800ea7e:	68b1      	ldr	r1, [r6, #8]
 800ea80:	f8ca 1010 	str.w	r1, [sl, #16]
 800ea84:	68f1      	ldr	r1, [r6, #12]
 800ea86:	f8ca 1014 	str.w	r1, [sl, #20]
 800ea8a:	2a24      	cmp	r2, #36	; 0x24
 800ea8c:	d003      	beq.n	800ea96 <_realloc_r+0x3ca>
 800ea8e:	3610      	adds	r6, #16
 800ea90:	f10a 0218 	add.w	r2, sl, #24
 800ea94:	e747      	b.n	800e926 <_realloc_r+0x25a>
 800ea96:	6932      	ldr	r2, [r6, #16]
 800ea98:	f8ca 2018 	str.w	r2, [sl, #24]
 800ea9c:	6972      	ldr	r2, [r6, #20]
 800ea9e:	f8ca 201c 	str.w	r2, [sl, #28]
 800eaa2:	3618      	adds	r6, #24
 800eaa4:	f10a 0220 	add.w	r2, sl, #32
 800eaa8:	e73d      	b.n	800e926 <_realloc_r+0x25a>
 800eaaa:	bf00      	nop

0800eaac <_sbrk>:
 800eaac:	4a04      	ldr	r2, [pc, #16]	; (800eac0 <_sbrk+0x14>)
 800eaae:	4905      	ldr	r1, [pc, #20]	; (800eac4 <_sbrk+0x18>)
 800eab0:	6813      	ldr	r3, [r2, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	bf08      	it	eq
 800eab6:	460b      	moveq	r3, r1
 800eab8:	4418      	add	r0, r3
 800eaba:	6010      	str	r0, [r2, #0]
 800eabc:	4618      	mov	r0, r3
 800eabe:	4770      	bx	lr
 800eac0:	20005008 	.word	0x20005008
 800eac4:	20006ee8 	.word	0x20006ee8

0800eac8 <_init>:
 800eac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaca:	bf00      	nop
 800eacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eace:	bc08      	pop	{r3}
 800ead0:	469e      	mov	lr, r3
 800ead2:	4770      	bx	lr

0800ead4 <_fini>:
 800ead4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead6:	bf00      	nop
 800ead8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eada:	bc08      	pop	{r3}
 800eadc:	469e      	mov	lr, r3
 800eade:	4770      	bx	lr
