ARM GAS  /tmp/ccEC99g0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32f4xx_hal_can.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  22              		.align	2
  23              		.weak	HAL_CAN_MspInit
  24              		.thumb
  25              		.thumb_func
  27              	HAL_CAN_MspInit:
  28              	.LFB126:
  29              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @file    stm32f4xx_hal_can.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
ARM GAS  /tmp/ccEC99g0.s 			page 2


  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           functions:
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           messages.
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           can be used:
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==============================
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ================================
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
ARM GAS  /tmp/ccEC99g0.s 			page 3


  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           here.
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==================
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           be completed.
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @endverbatim
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @attention
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * Redistribution and use in source and binary forms, with or without modification,
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * are permitted provided that the following conditions are met:
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      this list of conditions and the following disclaimer.
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      this list of conditions and the following disclaimer in the documentation
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      and/or other materials provided with the distribution.
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      may be used to endorse or promote products derived from this software
ARM GAS  /tmp/ccEC99g0.s 			page 4


 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *      without specific prior written permission.
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #include "stm32f4xx_hal.h"
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @addtogroup STM32F4xx_HAL_Driver
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN1)
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN CAN
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief CAN driver modules
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
ARM GAS  /tmp/ccEC99g0.s 			page 5


 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Exit from sleep mode */
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccEC99g0.s 			page 6


 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Request initialisation */
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Wait initialisation acknowledge */
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the time triggered communication mode */
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic bus-off management */
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic wake-up mode */
ARM GAS  /tmp/ccEC99g0.s 			page 7


 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic retransmission */
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the transmit FIFO priority */
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the bit timing register */
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the error code */
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the CAN state */
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
ARM GAS  /tmp/ccEC99g0.s 			page 8


 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         reset values.
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Stop the CAN module */
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_Stop(hcan);
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN peripheral */
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Change CAN state */
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
  30              		.loc 1 415 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LVL0:
  36 0000 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE126:
  40 0002 00BF     		.section	.text.HAL_CAN_Init,"ax",%progbits
  41              		.align	2
  42              		.global	HAL_CAN_Init
  43              		.thumb
ARM GAS  /tmp/ccEC99g0.s 			page 9


  44              		.thumb_func
  46              	HAL_CAN_Init:
  47              	.LFB124:
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
  48              		.loc 1 223 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              	.LVL1:
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  53              		.loc 1 227 0
  54 0000 0028     		cmp	r0, #0
  55 0002 00F0A480 		beq	.L21
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
  56              		.loc 1 223 0
  57 0006 38B5     		push	{r3, r4, r5, lr}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 16
  60              		.cfi_offset 3, -16
  61              		.cfi_offset 4, -12
  62              		.cfi_offset 5, -8
  63              		.cfi_offset 14, -4
  64 0008 0446     		mov	r4, r0
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  65              		.loc 1 246 0
  66 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  67 000e 13F0FF0F 		tst	r3, #255
  68 0012 01D1     		bne	.L4
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
  69              		.loc 1 249 0
  70 0014 FFF7FEFF 		bl	HAL_CAN_MspInit
  71              	.LVL2:
  72              	.L4:
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  73              		.loc 1 253 0
  74 0018 2268     		ldr	r2, [r4]
  75 001a 1368     		ldr	r3, [r2]
  76 001c 23F00203 		bic	r3, r3, #2
  77 0020 1360     		str	r3, [r2]
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  78              		.loc 1 256 0
  79 0022 FFF7FEFF 		bl	HAL_GetTick
  80              	.LVL3:
  81 0026 0546     		mov	r5, r0
  82              	.LVL4:
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  83              		.loc 1 259 0
  84 0028 0DE0     		b	.L5
  85              	.LVL5:
  86              	.L6:
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
  87              		.loc 1 261 0
  88 002a FFF7FEFF 		bl	HAL_GetTick
  89              	.LVL6:
  90 002e 401B     		subs	r0, r0, r5
  91 0030 0A28     		cmp	r0, #10
  92 0032 08D9     		bls	.L5
ARM GAS  /tmp/ccEC99g0.s 			page 10


 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  93              		.loc 1 264 0
  94 0034 636A     		ldr	r3, [r4, #36]
  95 0036 43F40033 		orr	r3, r3, #131072
  96 003a 6362     		str	r3, [r4, #36]
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  97              		.loc 1 267 0
  98 003c 0523     		movs	r3, #5
  99 003e 84F82030 		strb	r3, [r4, #32]
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 100              		.loc 1 269 0
 101 0042 0120     		movs	r0, #1
 102 0044 38BD     		pop	{r3, r4, r5, pc}
 103              	.LVL7:
 104              	.L5:
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 105              		.loc 1 259 0
 106 0046 2368     		ldr	r3, [r4]
 107 0048 5A68     		ldr	r2, [r3, #4]
 108 004a 12F0020F 		tst	r2, #2
 109 004e ECD1     		bne	.L6
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 110              		.loc 1 274 0
 111 0050 1A68     		ldr	r2, [r3]
 112 0052 42F00102 		orr	r2, r2, #1
 113 0056 1A60     		str	r2, [r3]
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 114              		.loc 1 277 0
 115 0058 FFF7FEFF 		bl	HAL_GetTick
 116              	.LVL8:
 117 005c 0546     		mov	r5, r0
 118              	.LVL9:
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 119              		.loc 1 280 0
 120 005e 0DE0     		b	.L7
 121              	.LVL10:
 122              	.L8:
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 123              		.loc 1 282 0
 124 0060 FFF7FEFF 		bl	HAL_GetTick
 125              	.LVL11:
 126 0064 401B     		subs	r0, r0, r5
 127 0066 0A28     		cmp	r0, #10
 128 0068 08D9     		bls	.L7
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 129              		.loc 1 285 0
 130 006a 636A     		ldr	r3, [r4, #36]
 131 006c 43F40033 		orr	r3, r3, #131072
 132 0070 6362     		str	r3, [r4, #36]
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 133              		.loc 1 288 0
 134 0072 0523     		movs	r3, #5
 135 0074 84F82030 		strb	r3, [r4, #32]
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 136              		.loc 1 290 0
 137 0078 0120     		movs	r0, #1
 138 007a 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccEC99g0.s 			page 11


 139              	.LVL12:
 140              	.L7:
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 141              		.loc 1 280 0
 142 007c 2368     		ldr	r3, [r4]
 143 007e 5A68     		ldr	r2, [r3, #4]
 144 0080 12F0010F 		tst	r2, #1
 145 0084 ECD0     		beq	.L8
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 146              		.loc 1 295 0
 147 0086 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 148 0088 012A     		cmp	r2, #1
 149 008a 04D1     		bne	.L9
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 150              		.loc 1 297 0
 151 008c 1A68     		ldr	r2, [r3]
 152 008e 42F08002 		orr	r2, r2, #128
 153 0092 1A60     		str	r2, [r3]
 154 0094 03E0     		b	.L10
 155              	.L9:
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 156              		.loc 1 301 0
 157 0096 1A68     		ldr	r2, [r3]
 158 0098 22F08002 		bic	r2, r2, #128
 159 009c 1A60     		str	r2, [r3]
 160              	.L10:
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 161              		.loc 1 305 0
 162 009e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 163 00a0 012B     		cmp	r3, #1
 164 00a2 05D1     		bne	.L11
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 165              		.loc 1 307 0
 166 00a4 2268     		ldr	r2, [r4]
 167 00a6 1368     		ldr	r3, [r2]
 168 00a8 43F04003 		orr	r3, r3, #64
 169 00ac 1360     		str	r3, [r2]
 170 00ae 04E0     		b	.L12
 171              	.L11:
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 172              		.loc 1 311 0
 173 00b0 2268     		ldr	r2, [r4]
 174 00b2 1368     		ldr	r3, [r2]
 175 00b4 23F04003 		bic	r3, r3, #64
 176 00b8 1360     		str	r3, [r2]
 177              	.L12:
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 178              		.loc 1 315 0
 179 00ba A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 180 00bc 012B     		cmp	r3, #1
 181 00be 05D1     		bne	.L13
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 182              		.loc 1 317 0
 183 00c0 2268     		ldr	r2, [r4]
 184 00c2 1368     		ldr	r3, [r2]
 185 00c4 43F02003 		orr	r3, r3, #32
 186 00c8 1360     		str	r3, [r2]
ARM GAS  /tmp/ccEC99g0.s 			page 12


 187 00ca 04E0     		b	.L14
 188              	.L13:
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 189              		.loc 1 321 0
 190 00cc 2268     		ldr	r2, [r4]
 191 00ce 1368     		ldr	r3, [r2]
 192 00d0 23F02003 		bic	r3, r3, #32
 193 00d4 1360     		str	r3, [r2]
 194              	.L14:
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 195              		.loc 1 325 0
 196 00d6 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 197 00d8 012B     		cmp	r3, #1
 198 00da 05D1     		bne	.L15
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 199              		.loc 1 327 0
 200 00dc 2268     		ldr	r2, [r4]
 201 00de 1368     		ldr	r3, [r2]
 202 00e0 23F01003 		bic	r3, r3, #16
 203 00e4 1360     		str	r3, [r2]
 204 00e6 04E0     		b	.L16
 205              	.L15:
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 206              		.loc 1 331 0
 207 00e8 2268     		ldr	r2, [r4]
 208 00ea 1368     		ldr	r3, [r2]
 209 00ec 43F01003 		orr	r3, r3, #16
 210 00f0 1360     		str	r3, [r2]
 211              	.L16:
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 212              		.loc 1 335 0
 213 00f2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 214 00f4 012B     		cmp	r3, #1
 215 00f6 05D1     		bne	.L17
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 216              		.loc 1 337 0
 217 00f8 2268     		ldr	r2, [r4]
 218 00fa 1368     		ldr	r3, [r2]
 219 00fc 43F00803 		orr	r3, r3, #8
 220 0100 1360     		str	r3, [r2]
 221 0102 04E0     		b	.L18
 222              	.L17:
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 223              		.loc 1 341 0
 224 0104 2268     		ldr	r2, [r4]
 225 0106 1368     		ldr	r3, [r2]
 226 0108 23F00803 		bic	r3, r3, #8
 227 010c 1360     		str	r3, [r2]
 228              	.L18:
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 229              		.loc 1 345 0
 230 010e 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 231 0110 012B     		cmp	r3, #1
 232 0112 05D1     		bne	.L19
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 233              		.loc 1 347 0
 234 0114 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccEC99g0.s 			page 13


 235 0116 1368     		ldr	r3, [r2]
 236 0118 43F00403 		orr	r3, r3, #4
 237 011c 1360     		str	r3, [r2]
 238 011e 04E0     		b	.L20
 239              	.L19:
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 240              		.loc 1 351 0
 241 0120 2268     		ldr	r2, [r4]
 242 0122 1368     		ldr	r3, [r2]
 243 0124 23F00403 		bic	r3, r3, #4
 244 0128 1360     		str	r3, [r2]
 245              	.L20:
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 246              		.loc 1 355 0
 247 012a 2168     		ldr	r1, [r4]
 248 012c A268     		ldr	r2, [r4, #8]
 249 012e E368     		ldr	r3, [r4, #12]
 250 0130 1A43     		orrs	r2, r2, r3
 251 0132 2369     		ldr	r3, [r4, #16]
 252 0134 1A43     		orrs	r2, r2, r3
 253 0136 6369     		ldr	r3, [r4, #20]
 254 0138 1A43     		orrs	r2, r2, r3
 255 013a 6368     		ldr	r3, [r4, #4]
 256 013c 013B     		subs	r3, r3, #1
 257 013e 1343     		orrs	r3, r3, r2
 258 0140 CB61     		str	r3, [r1, #28]
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 259              		.loc 1 362 0
 260 0142 0020     		movs	r0, #0
 261 0144 6062     		str	r0, [r4, #36]
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 262              		.loc 1 365 0
 263 0146 0123     		movs	r3, #1
 264 0148 84F82030 		strb	r3, [r4, #32]
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 265              		.loc 1 368 0
 266 014c 38BD     		pop	{r3, r4, r5, pc}
 267              	.LVL13:
 268              	.L21:
 269              	.LCFI1:
 270              		.cfi_def_cfa_offset 0
 271              		.cfi_restore 3
 272              		.cfi_restore 4
 273              		.cfi_restore 5
 274              		.cfi_restore 14
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 275              		.loc 1 229 0
 276 014e 0120     		movs	r0, #1
 277              	.LVL14:
 278 0150 7047     		bx	lr
 279              		.cfi_endproc
 280              	.LFE124:
 282 0152 00BF     		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 283              		.align	2
 284              		.weak	HAL_CAN_MspDeInit
 285              		.thumb
 286              		.thumb_func
ARM GAS  /tmp/ccEC99g0.s 			page 14


 288              	HAL_CAN_MspDeInit:
 289              	.LFB127:
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 290              		.loc 1 431 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295              	.LVL15:
 296 0000 7047     		bx	lr
 297              		.cfi_endproc
 298              	.LFE127:
 300 0002 00BF     		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 301              		.align	2
 302              		.global	HAL_CAN_ConfigFilter
 303              		.thumb
 304              		.thumb_func
 306              	HAL_CAN_ConfigFilter:
 307              	.LFB128:
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Configuration functions.
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Configuration functions #####
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccEC99g0.s 			page 15


 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         contains the filter configuration information.
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 308              		.loc 1 469 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              	.LVL16:
 314              		.loc 1 469 0
 315 0000 70B4     		push	{r4, r5, r6}
 316              	.LCFI2:
 317              		.cfi_def_cfa_offset 12
 318              		.cfi_offset 4, -12
 319              		.cfi_offset 5, -8
 320              		.cfi_offset 6, -4
 321              	.LVL17:
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filternbrbitpos = 0U;
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 322              		.loc 1 473 0
 323 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 324 0006 DBB2     		uxtb	r3, r3
 325 0008 012B     		cmp	r3, #1
 326 000a 05D0     		beq	.L26
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 327              		.loc 1 474 0 discriminator 1
 328 000c 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 329 0010 DBB2     		uxtb	r3, r3
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 330              		.loc 1 473 0 discriminator 1
 331 0012 022B     		cmp	r3, #2
 332 0014 40F08180 		bne	.L27
 333              	.L26:
 334              	.LVL18:
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
ARM GAS  /tmp/ccEC99g0.s 			page 16


 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (hcan->Instance == CAN3)
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN3 is single instance with 14 dedicated filters banks */
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select master instance to access the filter banks */
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip = CAN1;
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select master instance to access the filter banks */
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     can_ip = CAN1;
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Initialisation mode for the filter */
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 335              		.loc 1 521 0
 336 0018 434B     		ldr	r3, .L37
 337 001a D3F80022 		ldr	r2, [r3, #512]
 338 001e 42F00102 		orr	r2, r2, #1
 339 0022 C3F80022 		str	r2, [r3, #512]
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (can_ip == CAN1)
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select the start filter number of CAN2 slave instance */
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 340              		.loc 1 534 0
ARM GAS  /tmp/ccEC99g0.s 			page 17


 341 0026 D3F80022 		ldr	r2, [r3, #512]
 342 002a 22F47C52 		bic	r2, r2, #16128
 343 002e C3F80022 		str	r2, [r3, #512]
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 344              		.loc 1 535 0
 345 0032 D3F80022 		ldr	r2, [r3, #512]
 346 0036 486A     		ldr	r0, [r1, #36]
 347              	.LVL19:
 348 0038 42EA0022 		orr	r2, r2, r0, lsl #8
 349 003c C3F80022 		str	r2, [r3, #512]
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Convert filter number into bit position */
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 350              		.loc 1 539 0
 351 0040 4A69     		ldr	r2, [r1, #20]
 352 0042 0120     		movs	r0, #1
 353 0044 00FA02F2 		lsl	r2, r0, r2
 354              	.LVL20:
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Deactivation */
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 355              		.loc 1 542 0
 356 0048 D3F81C02 		ldr	r0, [r3, #540]
 357 004c D443     		mvns	r4, r2
 358 004e 2040     		ands	r0, r0, r4
 359 0050 C3F81C02 		str	r0, [r3, #540]
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Scale */
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 360              		.loc 1 545 0
 361 0054 CB69     		ldr	r3, [r1, #28]
 362 0056 B3B9     		cbnz	r3, .L28
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 16-bit scale for the filter */
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 363              		.loc 1 548 0
 364 0058 334B     		ldr	r3, .L37
 365 005a D3F80C02 		ldr	r0, [r3, #524]
 366 005e 2040     		ands	r0, r0, r4
 367 0060 C3F80C02 		str	r0, [r3, #524]
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 368              		.loc 1 552 0
 369 0064 4869     		ldr	r0, [r1, #20]
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 370              		.loc 1 553 0
 371 0066 CE68     		ldr	r6, [r1, #12]
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 372              		.loc 1 554 0
 373 0068 8D88     		ldrh	r5, [r1, #4]
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 374              		.loc 1 553 0
 375 006a 45EA0645 		orr	r5, r5, r6, lsl #16
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
ARM GAS  /tmp/ccEC99g0.s 			page 18


 376              		.loc 1 552 0
 377 006e 4830     		adds	r0, r0, #72
 378 0070 43F83050 		str	r5, [r3, r0, lsl #3]
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 379              		.loc 1 558 0
 380 0074 4D69     		ldr	r5, [r1, #20]
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 381              		.loc 1 559 0
 382 0076 8E68     		ldr	r6, [r1, #8]
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 383              		.loc 1 560 0
 384 0078 0888     		ldrh	r0, [r1]
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 385              		.loc 1 559 0
 386 007a 40EA0640 		orr	r0, r0, r6, lsl #16
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 387              		.loc 1 558 0
 388 007e 4835     		adds	r5, r5, #72
 389 0080 03EBC503 		add	r3, r3, r5, lsl #3
 390 0084 5860     		str	r0, [r3, #4]
 391              	.L28:
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 392              		.loc 1 563 0
 393 0086 CB69     		ldr	r3, [r1, #28]
 394 0088 012B     		cmp	r3, #1
 395 008a 16D1     		bne	.L29
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit scale for the filter */
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 396              		.loc 1 566 0
 397 008c 264B     		ldr	r3, .L37
 398 008e D3F80C02 		ldr	r0, [r3, #524]
 399 0092 1043     		orrs	r0, r0, r2
 400 0094 C3F80C02 		str	r0, [r3, #524]
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 401              		.loc 1 569 0
 402 0098 4869     		ldr	r0, [r1, #20]
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 403              		.loc 1 570 0
 404 009a 0E68     		ldr	r6, [r1]
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 405              		.loc 1 571 0
 406 009c 8D88     		ldrh	r5, [r1, #4]
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 407              		.loc 1 570 0
 408 009e 45EA0645 		orr	r5, r5, r6, lsl #16
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 409              		.loc 1 569 0
 410 00a2 4830     		adds	r0, r0, #72
 411 00a4 43F83050 		str	r5, [r3, r0, lsl #3]
ARM GAS  /tmp/ccEC99g0.s 			page 19


 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 412              		.loc 1 574 0
 413 00a8 4D69     		ldr	r5, [r1, #20]
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 414              		.loc 1 575 0
 415 00aa 8E68     		ldr	r6, [r1, #8]
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 416              		.loc 1 576 0
 417 00ac 8889     		ldrh	r0, [r1, #12]
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 418              		.loc 1 575 0
 419 00ae 40EA0640 		orr	r0, r0, r6, lsl #16
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 420              		.loc 1 574 0
 421 00b2 4835     		adds	r5, r5, #72
 422 00b4 03EBC503 		add	r3, r3, r5, lsl #3
 423 00b8 5860     		str	r0, [r3, #4]
 424              	.L29:
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Mode */
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 425              		.loc 1 580 0
 426 00ba 8B69     		ldr	r3, [r1, #24]
 427 00bc 33B9     		cbnz	r3, .L30
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 428              		.loc 1 583 0
 429 00be 1A48     		ldr	r0, .L37
 430 00c0 D0F80432 		ldr	r3, [r0, #516]
 431 00c4 2340     		ands	r3, r3, r4
 432 00c6 C0F80432 		str	r3, [r0, #516]
 433 00ca 05E0     		b	.L31
 434              	.L30:
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Identifier list mode for the filter*/
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 435              		.loc 1 588 0
 436 00cc 1648     		ldr	r0, .L37
 437 00ce D0F80432 		ldr	r3, [r0, #516]
 438 00d2 1343     		orrs	r3, r3, r2
 439 00d4 C0F80432 		str	r3, [r0, #516]
 440              	.L31:
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter FIFO assignment */
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 441              		.loc 1 592 0
 442 00d8 0B69     		ldr	r3, [r1, #16]
 443 00da 33B9     		cbnz	r3, .L32
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
ARM GAS  /tmp/ccEC99g0.s 			page 20


 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 444              		.loc 1 595 0
 445 00dc 1248     		ldr	r0, .L37
 446 00de D0F81432 		ldr	r3, [r0, #532]
 447 00e2 1C40     		ands	r4, r4, r3
 448 00e4 C0F81442 		str	r4, [r0, #532]
 449 00e8 05E0     		b	.L33
 450              	.L32:
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 451              		.loc 1 600 0
 452 00ea 0F48     		ldr	r0, .L37
 453 00ec D0F81432 		ldr	r3, [r0, #532]
 454 00f0 1343     		orrs	r3, r3, r2
 455 00f2 C0F81432 		str	r3, [r0, #532]
 456              	.L33:
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter activation */
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterActivation == ENABLE)
 457              		.loc 1 604 0
 458 00f6 0B6A     		ldr	r3, [r1, #32]
 459 00f8 012B     		cmp	r3, #1
 460 00fa 05D1     		bne	.L34
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 461              		.loc 1 606 0
 462 00fc 0A49     		ldr	r1, .L37
 463              	.LVL21:
 464 00fe D1F81C32 		ldr	r3, [r1, #540]
 465 0102 1A43     		orrs	r2, r2, r3
 466              	.LVL22:
 467 0104 C1F81C22 		str	r2, [r1, #540]
 468              	.L34:
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 469              		.loc 1 610 0
 470 0108 074A     		ldr	r2, .L37
 471 010a D2F80032 		ldr	r3, [r2, #512]
 472 010e 23F00103 		bic	r3, r3, #1
 473 0112 C2F80032 		str	r3, [r2, #512]
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 474              		.loc 1 613 0
 475 0116 0020     		movs	r0, #0
 476 0118 04E0     		b	.L35
 477              	.LVL23:
 478              	.L27:
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
ARM GAS  /tmp/ccEC99g0.s 			page 21


 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 479              		.loc 1 618 0
 480 011a 436A     		ldr	r3, [r0, #36]
 481 011c 43F48023 		orr	r3, r3, #262144
 482 0120 4362     		str	r3, [r0, #36]
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 483              		.loc 1 620 0
 484 0122 0120     		movs	r0, #1
 485              	.LVL24:
 486              	.L35:
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 487              		.loc 1 622 0
 488 0124 70BC     		pop	{r4, r5, r6}
 489              	.LCFI3:
 490              		.cfi_restore 6
 491              		.cfi_restore 5
 492              		.cfi_restore 4
 493              		.cfi_def_cfa_offset 0
 494 0126 7047     		bx	lr
 495              	.L38:
 496              		.align	2
 497              	.L37:
 498 0128 00640040 		.word	1073767424
 499              		.cfi_endproc
 500              	.LFE128:
 502              		.section	.text.HAL_CAN_Start,"ax",%progbits
 503              		.align	2
 504              		.global	HAL_CAN_Start
 505              		.thumb
 506              		.thumb_func
 508              	HAL_CAN_Start:
 509              	.LFB129:
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Control functions
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                       ##### Control functions #####
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              and activate the corresponding
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              transmission request
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
ARM GAS  /tmp/ccEC99g0.s 			page 22


 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              pending on the selected Tx mailbox
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Start the CAN module.
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 510              		.loc 1 662 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              	.LVL25:
 515 0000 38B5     		push	{r3, r4, r5, lr}
 516              	.LCFI4:
 517              		.cfi_def_cfa_offset 16
 518              		.cfi_offset 3, -16
 519              		.cfi_offset 4, -12
 520              		.cfi_offset 5, -8
 521              		.cfi_offset 14, -4
 522              	.LVL26:
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 523              		.loc 1 665 0
 524 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 525 0006 DBB2     		uxtb	r3, r3
 526 0008 012B     		cmp	r3, #1
 527 000a 22D1     		bne	.L40
 528 000c 0446     		mov	r4, r0
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 529              		.loc 1 668 0
 530 000e 0223     		movs	r3, #2
 531 0010 80F82030 		strb	r3, [r0, #32]
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request leave initialisation */
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 532              		.loc 1 671 0
 533 0014 0268     		ldr	r2, [r0]
 534 0016 1368     		ldr	r3, [r2]
 535 0018 23F00103 		bic	r3, r3, #1
 536 001c 1360     		str	r3, [r2]
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
ARM GAS  /tmp/ccEC99g0.s 			page 23


 537              		.loc 1 674 0
 538 001e FFF7FEFF 		bl	HAL_GetTick
 539              	.LVL27:
 540 0022 0546     		mov	r5, r0
 541              	.LVL28:
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 542              		.loc 1 677 0
 543 0024 0DE0     		b	.L41
 544              	.LVL29:
 545              	.L43:
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 546              		.loc 1 680 0
 547 0026 FFF7FEFF 		bl	HAL_GetTick
 548              	.LVL30:
 549 002a 401B     		subs	r0, r0, r5
 550 002c 0A28     		cmp	r0, #10
 551 002e 08D9     		bls	.L41
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 552              		.loc 1 683 0
 553 0030 636A     		ldr	r3, [r4, #36]
 554 0032 43F40033 		orr	r3, r3, #131072
 555 0036 6362     		str	r3, [r4, #36]
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 556              		.loc 1 686 0
 557 0038 0523     		movs	r3, #5
 558 003a 84F82030 		strb	r3, [r4, #32]
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 559              		.loc 1 688 0
 560 003e 0120     		movs	r0, #1
 561 0040 38BD     		pop	{r3, r4, r5, pc}
 562              	.LVL31:
 563              	.L41:
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 564              		.loc 1 677 0
 565 0042 2368     		ldr	r3, [r4]
 566 0044 5B68     		ldr	r3, [r3, #4]
 567 0046 13F0010F 		tst	r3, #1
 568 004a ECD1     		bne	.L43
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset the CAN ErrorCode */
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 569              		.loc 1 693 0
 570 004c 0020     		movs	r0, #0
 571 004e 6062     		str	r0, [r4, #36]
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
ARM GAS  /tmp/ccEC99g0.s 			page 24


 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 572              		.loc 1 696 0
 573 0050 38BD     		pop	{r3, r4, r5, pc}
 574              	.LVL32:
 575              	.L40:
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 576              		.loc 1 701 0
 577 0052 436A     		ldr	r3, [r0, #36]
 578 0054 43F40023 		orr	r3, r3, #524288
 579 0058 4362     		str	r3, [r0, #36]
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 580              		.loc 1 703 0
 581 005a 0120     		movs	r0, #1
 582              	.LVL33:
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 583              		.loc 1 705 0
 584 005c 38BD     		pop	{r3, r4, r5, pc}
 585              		.cfi_endproc
 586              	.LFE129:
 588 005e 00BF     		.section	.text.HAL_CAN_Stop,"ax",%progbits
 589              		.align	2
 590              		.global	HAL_CAN_Stop
 591              		.thumb
 592              		.thumb_func
 594              	HAL_CAN_Stop:
 595              	.LFB130:
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 596              		.loc 1 714 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              	.LVL34:
 601 0000 38B5     		push	{r3, r4, r5, lr}
 602              	.LCFI5:
 603              		.cfi_def_cfa_offset 16
 604              		.cfi_offset 3, -16
 605              		.cfi_offset 4, -12
 606              		.cfi_offset 5, -8
 607              		.cfi_offset 14, -4
 608              	.LVL35:
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart = 0U;
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
ARM GAS  /tmp/ccEC99g0.s 			page 25


 609              		.loc 1 717 0
 610 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 611 0006 DBB2     		uxtb	r3, r3
 612 0008 022B     		cmp	r3, #2
 613 000a 25D1     		bne	.L46
 614 000c 0446     		mov	r4, r0
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request initialisation */
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 615              		.loc 1 720 0
 616 000e 0268     		ldr	r2, [r0]
 617 0010 1368     		ldr	r3, [r2]
 618 0012 43F00103 		orr	r3, r3, #1
 619 0016 1360     		str	r3, [r2]
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
 620              		.loc 1 723 0
 621 0018 FFF7FEFF 		bl	HAL_GetTick
 622              	.LVL36:
 623 001c 0546     		mov	r5, r0
 624              	.LVL37:
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 625              		.loc 1 726 0
 626 001e 0DE0     		b	.L47
 627              	.LVL38:
 628              	.L49:
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 629              		.loc 1 729 0
 630 0020 FFF7FEFF 		bl	HAL_GetTick
 631              	.LVL39:
 632 0024 401B     		subs	r0, r0, r5
 633 0026 0A28     		cmp	r0, #10
 634 0028 08D9     		bls	.L47
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 635              		.loc 1 732 0
 636 002a 636A     		ldr	r3, [r4, #36]
 637 002c 43F40033 		orr	r3, r3, #131072
 638 0030 6362     		str	r3, [r4, #36]
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 639              		.loc 1 735 0
 640 0032 0523     		movs	r3, #5
 641 0034 84F82030 		strb	r3, [r4, #32]
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 642              		.loc 1 737 0
 643 0038 0120     		movs	r0, #1
 644 003a 38BD     		pop	{r3, r4, r5, pc}
 645              	.LVL40:
ARM GAS  /tmp/ccEC99g0.s 			page 26


 646              	.L47:
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 647              		.loc 1 726 0
 648 003c 2368     		ldr	r3, [r4]
 649 003e 5A68     		ldr	r2, [r3, #4]
 650 0040 12F0010F 		tst	r2, #1
 651 0044 ECD0     		beq	.L49
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Exit from sleep mode */
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 652              		.loc 1 742 0
 653 0046 1A68     		ldr	r2, [r3]
 654 0048 22F00202 		bic	r2, r2, #2
 655 004c 1A60     		str	r2, [r3]
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 656              		.loc 1 745 0
 657 004e 0123     		movs	r3, #1
 658 0050 84F82030 		strb	r3, [r4, #32]
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 659              		.loc 1 748 0
 660 0054 0020     		movs	r0, #0
 661 0056 38BD     		pop	{r3, r4, r5, pc}
 662              	.LVL41:
 663              	.L46:
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 664              		.loc 1 753 0
 665 0058 436A     		ldr	r3, [r0, #36]
 666 005a 43F48013 		orr	r3, r3, #1048576
 667 005e 4362     		str	r3, [r0, #36]
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 668              		.loc 1 755 0
 669 0060 0120     		movs	r0, #1
 670              	.LVL42:
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 671              		.loc 1 757 0
 672 0062 38BD     		pop	{r3, r4, r5, pc}
 673              		.cfi_endproc
 674              	.LFE130:
 676              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 677              		.align	2
 678              		.global	HAL_CAN_DeInit
 679              		.thumb
 680              		.thumb_func
 682              	HAL_CAN_DeInit:
 683              	.LFB125:
ARM GAS  /tmp/ccEC99g0.s 			page 27


 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 684              		.loc 1 379 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              	.LVL43:
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 689              		.loc 1 381 0
 690 0000 80B1     		cbz	r0, .L53
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 691              		.loc 1 379 0
 692 0002 10B5     		push	{r4, lr}
 693              	.LCFI6:
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 4, -8
 696              		.cfi_offset 14, -4
 697 0004 0446     		mov	r4, r0
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 698              		.loc 1 390 0
 699 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 700              	.LVL44:
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 701              		.loc 1 393 0
 702 000a 2046     		mov	r0, r4
 703 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 704              	.LVL45:
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 705              		.loc 1 396 0
 706 0010 2268     		ldr	r2, [r4]
 707 0012 1368     		ldr	r3, [r2]
 708 0014 43F40043 		orr	r3, r3, #32768
 709 0018 1360     		str	r3, [r2]
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 710              		.loc 1 399 0
 711 001a 0020     		movs	r0, #0
 712 001c 6062     		str	r0, [r4, #36]
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 713              		.loc 1 402 0
 714 001e 84F82000 		strb	r0, [r4, #32]
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 715              		.loc 1 405 0
 716 0022 10BD     		pop	{r4, pc}
 717              	.LVL46:
 718              	.L53:
 719              	.LCFI7:
 720              		.cfi_def_cfa_offset 0
 721              		.cfi_restore 4
 722              		.cfi_restore 14
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 723              		.loc 1 383 0
 724 0024 0120     		movs	r0, #1
 725              	.LVL47:
 726 0026 7047     		bx	lr
 727              		.cfi_endproc
 728              	.LFE125:
 730              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 731              		.align	2
ARM GAS  /tmp/ccEC99g0.s 			page 28


 732              		.global	HAL_CAN_RequestSleep
 733              		.thumb
 734              		.thumb_func
 736              	HAL_CAN_RequestSleep:
 737              	.LFB131:
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of a CAN frame) has been completed.
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 738              		.loc 1 769 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743              	.LVL48:
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 744              		.loc 1 770 0
 745 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 746 0004 DBB2     		uxtb	r3, r3
 747 0006 012B     		cmp	r3, #1
 748 0008 04D0     		beq	.L57
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 749              		.loc 1 771 0 discriminator 1
 750 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 751 000e DBB2     		uxtb	r3, r3
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 752              		.loc 1 770 0 discriminator 1
 753 0010 022B     		cmp	r3, #2
 754 0012 06D1     		bne	.L58
 755              	.L57:
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request Sleep mode */
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 756              		.loc 1 774 0
 757 0014 0268     		ldr	r2, [r0]
 758 0016 1368     		ldr	r3, [r2]
 759 0018 43F00203 		orr	r3, r3, #2
 760 001c 1360     		str	r3, [r2]
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 761              		.loc 1 777 0
 762 001e 0020     		movs	r0, #0
 763              	.LVL49:
 764 0020 7047     		bx	lr
 765              	.LVL50:
 766              	.L58:
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
ARM GAS  /tmp/ccEC99g0.s 			page 29


 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 767              		.loc 1 782 0
 768 0022 436A     		ldr	r3, [r0, #36]
 769 0024 43F48023 		orr	r3, r3, #262144
 770 0028 4362     		str	r3, [r0, #36]
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 771              		.loc 1 785 0
 772 002a 0120     		movs	r0, #1
 773              	.LVL51:
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 774              		.loc 1 787 0
 775 002c 7047     		bx	lr
 776              		.cfi_endproc
 777              	.LFE131:
 779 002e 00BF     		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 780              		.align	2
 781              		.global	HAL_CAN_WakeUp
 782              		.thumb
 783              		.thumb_func
 785              	HAL_CAN_WakeUp:
 786              	.LFB132:
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Wake up from sleep mode.
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         is exited.
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 787              		.loc 1 798 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 8
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
 792              	.LVL52:
 793 0000 82B0     		sub	sp, sp, #8
 794              	.LCFI8:
 795              		.cfi_def_cfa_offset 8
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   __IO uint32_t count = 0;
 796              		.loc 1 799 0
 797 0002 0023     		movs	r3, #0
 798 0004 0193     		str	r3, [sp, #4]
 799              	.LVL53:
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timeout = 1000000U;
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 800              		.loc 1 802 0
 801 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 802 000a DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccEC99g0.s 			page 30


 803 000c 012B     		cmp	r3, #1
 804 000e 04D0     		beq	.L61
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 805              		.loc 1 803 0 discriminator 1
 806 0010 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 807 0014 DBB2     		uxtb	r3, r3
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 808              		.loc 1 802 0 discriminator 1
 809 0016 022B     		cmp	r3, #2
 810 0018 17D1     		bne	.L62
 811              	.L61:
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wake up request */
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 812              		.loc 1 806 0
 813 001a 0268     		ldr	r2, [r0]
 814 001c 1368     		ldr	r3, [r2]
 815 001e 23F00203 		bic	r3, r3, #2
 816 0022 1360     		str	r3, [r2]
 817              	.L65:
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait sleep mode is exited */
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     do
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check if timeout is reached */
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (++count > timeout)
 818              		.loc 1 812 0
 819 0024 019B     		ldr	r3, [sp, #4]
 820 0026 0133     		adds	r3, r3, #1
 821 0028 0193     		str	r3, [sp, #4]
 822 002a 0B4A     		ldr	r2, .L67
 823 002c 9342     		cmp	r3, r2
 824 002e 05D9     		bls	.L63
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 825              		.loc 1 815 0
 826 0030 436A     		ldr	r3, [r0, #36]
 827 0032 43F40033 		orr	r3, r3, #131072
 828 0036 4362     		str	r3, [r0, #36]
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 829              		.loc 1 817 0
 830 0038 0120     		movs	r0, #1
 831              	.LVL54:
 832 003a 0BE0     		b	.L64
 833              	.LVL55:
 834              	.L63:
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET);
 835              		.loc 1 820 0
 836 003c 0368     		ldr	r3, [r0]
 837 003e 5B68     		ldr	r3, [r3, #4]
 838 0040 13F0020F 		tst	r3, #2
 839 0044 EED1     		bne	.L65
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccEC99g0.s 			page 31


 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 840              		.loc 1 823 0
 841 0046 0020     		movs	r0, #0
 842              	.LVL56:
 843 0048 04E0     		b	.L64
 844              	.LVL57:
 845              	.L62:
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 846              		.loc 1 828 0
 847 004a 436A     		ldr	r3, [r0, #36]
 848 004c 43F48023 		orr	r3, r3, #262144
 849 0050 4362     		str	r3, [r0, #36]
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 850              		.loc 1 830 0
 851 0052 0120     		movs	r0, #1
 852              	.LVL58:
 853              	.L64:
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 854              		.loc 1 832 0
 855 0054 02B0     		add	sp, sp, #8
 856              	.LCFI9:
 857              		.cfi_def_cfa_offset 0
 858              		@ sp needed
 859 0056 7047     		bx	lr
 860              	.L68:
 861              		.align	2
 862              	.L67:
 863 0058 40420F00 		.word	1000000
 864              		.cfi_endproc
 865              	.LFE132:
 867              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 868              		.align	2
 869              		.global	HAL_CAN_IsSleepActive
 870              		.thumb
 871              		.thumb_func
 873              	HAL_CAN_IsSleepActive:
 874              	.LFB133:
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check is sleep mode is active.
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Sleep mode is active.
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 875              		.loc 1 843 0
 876              		.cfi_startproc
ARM GAS  /tmp/ccEC99g0.s 			page 32


 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879              		@ link register save eliminated.
 880              	.LVL59:
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 881              		.loc 1 846 0
 882 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 883 0004 DBB2     		uxtb	r3, r3
 884 0006 012B     		cmp	r3, #1
 885 0008 04D0     		beq	.L70
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 886              		.loc 1 847 0 discriminator 1
 887 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 888 000e DBB2     		uxtb	r3, r3
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 889              		.loc 1 846 0 discriminator 1
 890 0010 022B     		cmp	r3, #2
 891 0012 06D1     		bne	.L72
 892              	.L70:
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Sleep mode */
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 893              		.loc 1 850 0
 894 0014 0368     		ldr	r3, [r0]
 895 0016 5B68     		ldr	r3, [r3, #4]
 896 0018 13F0020F 		tst	r3, #2
 897 001c 03D1     		bne	.L73
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 898              		.loc 1 844 0
 899 001e 0020     		movs	r0, #0
 900              	.LVL60:
 901 0020 7047     		bx	lr
 902              	.LVL61:
 903              	.L72:
 904 0022 0020     		movs	r0, #0
 905              	.LVL62:
 906 0024 7047     		bx	lr
 907              	.LVL63:
 908              	.L73:
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 909              		.loc 1 852 0
 910 0026 0120     		movs	r0, #1
 911              	.LVL64:
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 912              		.loc 1 858 0
 913 0028 7047     		bx	lr
 914              		.cfi_endproc
 915              	.LFE133:
 917 002a 00BF     		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
ARM GAS  /tmp/ccEC99g0.s 			page 33


 918              		.align	2
 919              		.global	HAL_CAN_AddTxMessage
 920              		.thumb
 921              		.thumb_func
 923              	HAL_CAN_AddTxMessage:
 924              	.LFB134:
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         corresponding transmission request.
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 925              		.loc 1 873 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930              	.LVL65:
 931 0000 70B4     		push	{r4, r5, r6}
 932              	.LCFI10:
 933              		.cfi_def_cfa_offset 12
 934              		.cfi_offset 4, -12
 935              		.cfi_offset 5, -8
 936              		.cfi_offset 6, -4
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 937              		.loc 1 890 0
 938 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 939 0006 E4B2     		uxtb	r4, r4
 940 0008 012C     		cmp	r4, #1
 941 000a 04D0     		beq	.L75
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 942              		.loc 1 891 0 discriminator 1
ARM GAS  /tmp/ccEC99g0.s 			page 34


 943 000c 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 944 0010 E4B2     		uxtb	r4, r4
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 945              		.loc 1 890 0 discriminator 1
 946 0012 022C     		cmp	r4, #2
 947 0014 65D1     		bne	.L76
 948              	.L75:
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 949              		.loc 1 894 0
 950 0016 0468     		ldr	r4, [r0]
 951 0018 A568     		ldr	r5, [r4, #8]
 952 001a 15F0806F 		tst	r5, #67108864
 953 001e 07D1     		bne	.L77
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 954              		.loc 1 895 0 discriminator 1
 955 0020 A568     		ldr	r5, [r4, #8]
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 956              		.loc 1 894 0 discriminator 1
 957 0022 15F0006F 		tst	r5, #134217728
 958 0026 03D1     		bne	.L77
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 959              		.loc 1 896 0
 960 0028 A568     		ldr	r5, [r4, #8]
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 961              		.loc 1 895 0
 962 002a 15F0805F 		tst	r5, #268435456
 963 002e 52D0     		beq	.L78
 964              	.L77:
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select an empty transmit mailbox */
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 965              		.loc 1 899 0
 966 0030 A468     		ldr	r4, [r4, #8]
 967 0032 C4F30164 		ubfx	r4, r4, #24, #2
 968              	.LVL66:
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Store the Tx mailbox */
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *pTxMailbox = 1U << transmitmailbox;
 969              		.loc 1 902 0
 970 0036 0125     		movs	r5, #1
 971 0038 A540     		lsls	r5, r5, r4
 972 003a 1D60     		str	r5, [r3]
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Id */
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 973              		.loc 1 905 0
 974 003c 8B68     		ldr	r3, [r1, #8]
 975              	.LVL67:
 976 003e 4BB9     		cbnz	r3, .L79
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 977              		.loc 1 907 0
 978 0040 0568     		ldr	r5, [r0]
 979 0042 0E68     		ldr	r6, [r1]
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
ARM GAS  /tmp/ccEC99g0.s 			page 35


 980              		.loc 1 908 0
 981 0044 CB68     		ldr	r3, [r1, #12]
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 982              		.loc 1 907 0
 983 0046 43EA4656 		orr	r6, r3, r6, lsl #21
 984 004a 04F11803 		add	r3, r4, #24
 985 004e 1B01     		lsls	r3, r3, #4
 986 0050 EE50     		str	r6, [r5, r3]
 987 0052 09E0     		b	.L80
 988              	.L79:
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 989              		.loc 1 912 0
 990 0054 0668     		ldr	r6, [r0]
 991 0056 4D68     		ldr	r5, [r1, #4]
 992 0058 43EAC503 		orr	r3, r3, r5, lsl #3
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 993              		.loc 1 914 0
 994 005c CD68     		ldr	r5, [r1, #12]
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 995              		.loc 1 913 0
 996 005e 2B43     		orrs	r3, r3, r5
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 997              		.loc 1 912 0
 998 0060 04F11805 		add	r5, r4, #24
 999 0064 2D01     		lsls	r5, r5, #4
 1000 0066 7351     		str	r3, [r6, r5]
 1001              	.L80:
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the DLC */
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1002              		.loc 1 918 0
 1003 0068 0368     		ldr	r3, [r0]
 1004 006a 0D69     		ldr	r5, [r1, #16]
 1005 006c 04F11806 		add	r6, r4, #24
 1006 0070 03EB0613 		add	r3, r3, r6, lsl #4
 1007 0074 5D60     		str	r5, [r3, #4]
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1008              		.loc 1 921 0
 1009 0076 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1010 0078 012B     		cmp	r3, #1
 1011 007a 06D1     		bne	.L81
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 1012              		.loc 1 923 0
 1013 007c 0368     		ldr	r3, [r0]
 1014 007e 03EB0613 		add	r3, r3, r6, lsl #4
 1015 0082 5968     		ldr	r1, [r3, #4]
 1016              	.LVL68:
 1017 0084 41F48071 		orr	r1, r1, #256
 1018 0088 5960     		str	r1, [r3, #4]
ARM GAS  /tmp/ccEC99g0.s 			page 36


 1019              	.L81:
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the data field */
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1020              		.loc 1 927 0
 1021 008a 0168     		ldr	r1, [r0]
 1022 008c D579     		ldrb	r5, [r2, #7]	@ zero_extendqisi2
 1023 008e 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1024 0090 1B04     		lsls	r3, r3, #16
 1025 0092 43EA0563 		orr	r3, r3, r5, lsl #24
 1026 0096 5579     		ldrb	r5, [r2, #5]	@ zero_extendqisi2
 1027 0098 43EA0523 		orr	r3, r3, r5, lsl #8
 1028 009c 1579     		ldrb	r5, [r2, #4]	@ zero_extendqisi2
 1029 009e 2B43     		orrs	r3, r3, r5
 1030 00a0 2501     		lsls	r5, r4, #4
 1031 00a2 2944     		add	r1, r1, r5
 1032 00a4 C1F88C31 		str	r3, [r1, #396]
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1033              		.loc 1 932 0
 1034 00a8 0168     		ldr	r1, [r0]
 1035 00aa D678     		ldrb	r6, [r2, #3]	@ zero_extendqisi2
 1036 00ac 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1037 00ae 1B04     		lsls	r3, r3, #16
 1038 00b0 43EA0663 		orr	r3, r3, r6, lsl #24
 1039 00b4 5678     		ldrb	r6, [r2, #1]	@ zero_extendqisi2
 1040 00b6 43EA0623 		orr	r3, r3, r6, lsl #8
 1041 00ba 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1042              	.LVL69:
 1043 00bc 1343     		orrs	r3, r3, r2
 1044 00be 2944     		add	r1, r1, r5
 1045 00c0 C1F88831 		str	r3, [r1, #392]
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Request transmission */
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1046              		.loc 1 939 0
 1047 00c4 0268     		ldr	r2, [r0]
 1048 00c6 1834     		adds	r4, r4, #24
 1049              	.LVL70:
 1050 00c8 2401     		lsls	r4, r4, #4
 1051              	.LVL71:
 1052 00ca 1359     		ldr	r3, [r2, r4]
 1053 00cc 43F00103 		orr	r3, r3, #1
 1054 00d0 1351     		str	r3, [r2, r4]
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Return function status */
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_OK;
 1055              		.loc 1 942 0
 1056 00d2 0020     		movs	r0, #0
ARM GAS  /tmp/ccEC99g0.s 			page 37


 1057              	.LVL72:
 1058 00d4 0AE0     		b	.L82
 1059              	.LVL73:
 1060              	.L78:
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1061              		.loc 1 947 0
 1062 00d6 436A     		ldr	r3, [r0, #36]
 1063              	.LVL74:
 1064 00d8 43F40013 		orr	r3, r3, #2097152
 1065 00dc 4362     		str	r3, [r0, #36]
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 1066              		.loc 1 949 0
 1067 00de 0120     		movs	r0, #1
 1068              	.LVL75:
 1069 00e0 04E0     		b	.L82
 1070              	.LVL76:
 1071              	.L76:
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1072              		.loc 1 955 0
 1073 00e2 436A     		ldr	r3, [r0, #36]
 1074              	.LVL77:
 1075 00e4 43F48023 		orr	r3, r3, #262144
 1076 00e8 4362     		str	r3, [r0, #36]
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1077              		.loc 1 957 0
 1078 00ea 0120     		movs	r0, #1
 1079              	.LVL78:
 1080              	.L82:
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1081              		.loc 1 959 0
 1082 00ec 70BC     		pop	{r4, r5, r6}
 1083              	.LCFI11:
 1084              		.cfi_restore 6
 1085              		.cfi_restore 5
 1086              		.cfi_restore 4
 1087              		.cfi_def_cfa_offset 0
 1088 00ee 7047     		bx	lr
 1089              		.cfi_endproc
 1090              	.LFE134:
 1092              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1093              		.align	2
 1094              		.global	HAL_CAN_AbortTxRequest
 1095              		.thumb
 1096              		.thumb_func
 1098              	HAL_CAN_AbortTxRequest:
ARM GAS  /tmp/ccEC99g0.s 			page 38


 1099              	.LFB135:
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Abort transmission requests
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1100              		.loc 1 970 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL79:
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1106              		.loc 1 974 0
 1107 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1108 0004 DBB2     		uxtb	r3, r3
 1109 0006 012B     		cmp	r3, #1
 1110 0008 04D0     		beq	.L85
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1111              		.loc 1 975 0 discriminator 1
 1112 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1113 000e DBB2     		uxtb	r3, r3
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1114              		.loc 1 974 0 discriminator 1
 1115 0010 022B     		cmp	r3, #2
 1116 0012 19D1     		bne	.L86
 1117              	.L85:
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 */
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != RESET)
 1118              		.loc 1 978 0
 1119 0014 11F0010F 		tst	r1, #1
 1120 0018 04D0     		beq	.L87
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1121              		.loc 1 981 0
 1122 001a 0268     		ldr	r2, [r0]
 1123 001c 9368     		ldr	r3, [r2, #8]
 1124 001e 43F08003 		orr	r3, r3, #128
 1125 0022 9360     		str	r3, [r2, #8]
 1126              	.L87:
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 */
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != RESET)
 1127              		.loc 1 985 0
 1128 0024 11F0020F 		tst	r1, #2
ARM GAS  /tmp/ccEC99g0.s 			page 39


 1129 0028 04D0     		beq	.L88
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1130              		.loc 1 988 0
 1131 002a 0268     		ldr	r2, [r0]
 1132 002c 9368     		ldr	r3, [r2, #8]
 1133 002e 43F40043 		orr	r3, r3, #32768
 1134 0032 9360     		str	r3, [r2, #8]
 1135              	.L88:
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 */
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != RESET)
 1136              		.loc 1 992 0
 1137 0034 11F0040F 		tst	r1, #4
 1138 0038 0CD0     		beq	.L90
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1139              		.loc 1 995 0
 1140 003a 0268     		ldr	r2, [r0]
 1141 003c 9368     		ldr	r3, [r2, #8]
 1142 003e 43F40003 		orr	r3, r3, #8388608
 1143 0042 9360     		str	r3, [r2, #8]
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1144              		.loc 1 999 0
 1145 0044 0020     		movs	r0, #0
 1146              	.LVL80:
 1147 0046 7047     		bx	lr
 1148              	.LVL81:
 1149              	.L86:
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1150              		.loc 1 1004 0
 1151 0048 436A     		ldr	r3, [r0, #36]
 1152 004a 43F48023 		orr	r3, r3, #262144
 1153 004e 4362     		str	r3, [r0, #36]
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1154              		.loc 1 1006 0
 1155 0050 0120     		movs	r0, #1
 1156              	.LVL82:
 1157 0052 7047     		bx	lr
 1158              	.LVL83:
 1159              	.L90:
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1160              		.loc 1 999 0
 1161 0054 0020     		movs	r0, #0
 1162              	.LVL84:
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
ARM GAS  /tmp/ccEC99g0.s 			page 40


1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1163              		.loc 1 1008 0
 1164 0056 7047     		bx	lr
 1165              		.cfi_endproc
 1166              	.LFE135:
 1168              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1169              		.align	2
 1170              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1171              		.thumb
 1172              		.thumb_func
 1174              	HAL_CAN_GetTxMailboxesFreeLevel:
 1175              	.LFB136:
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1176              		.loc 1 1017 0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 0
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 1180              		@ link register save eliminated.
 1181              	.LVL85:
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t freelevel = 0U;
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1182              		.loc 1 1020 0
 1183 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1184 0004 DBB2     		uxtb	r3, r3
 1185 0006 012B     		cmp	r3, #1
 1186 0008 04D0     		beq	.L92
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1187              		.loc 1 1021 0 discriminator 1
 1188 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1189 000e DBB2     		uxtb	r3, r3
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1190              		.loc 1 1020 0 discriminator 1
 1191 0010 022B     		cmp	r3, #2
 1192 0012 12D1     		bne	.L96
 1193              	.L92:
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != RESET)
 1194              		.loc 1 1024 0
 1195 0014 0368     		ldr	r3, [r0]
 1196 0016 9A68     		ldr	r2, [r3, #8]
 1197 0018 12F0806F 		tst	r2, #67108864
 1198 001c 01D1     		bne	.L97
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1199              		.loc 1 1018 0
 1200 001e 0020     		movs	r0, #0
 1201              	.LVL86:
 1202 0020 00E0     		b	.L94
ARM GAS  /tmp/ccEC99g0.s 			page 41


 1203              	.LVL87:
 1204              	.L97:
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1205              		.loc 1 1026 0
 1206 0022 0120     		movs	r0, #1
 1207              	.LVL88:
 1208              	.L94:
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET)
 1209              		.loc 1 1030 0
 1210 0024 9A68     		ldr	r2, [r3, #8]
 1211 0026 12F0006F 		tst	r2, #134217728
 1212 002a 00D0     		beq	.L95
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1213              		.loc 1 1032 0
 1214 002c 0130     		adds	r0, r0, #1
 1215              	.LVL89:
 1216              	.L95:
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET)
 1217              		.loc 1 1036 0
 1218 002e 9B68     		ldr	r3, [r3, #8]
 1219 0030 13F0805F 		tst	r3, #268435456
 1220 0034 02D0     		beq	.L93
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
 1221              		.loc 1 1038 0
 1222 0036 0130     		adds	r0, r0, #1
 1223              	.LVL90:
 1224 0038 7047     		bx	lr
 1225              	.LVL91:
 1226              	.L96:
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1227              		.loc 1 1018 0
 1228 003a 0020     		movs	r0, #0
 1229              	.LVL92:
 1230              	.L93:
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return freelevel;
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1231              		.loc 1 1044 0
 1232 003c 7047     		bx	lr
 1233              		.cfi_endproc
 1234              	.LFE136:
 1236 003e 00BF     		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1237              		.align	2
 1238              		.global	HAL_CAN_IsTxMessagePending
 1239              		.thumb
ARM GAS  /tmp/ccEC99g0.s 			page 42


 1240              		.thumb_func
 1242              	HAL_CAN_IsTxMessagePending:
 1243              	.LFB137:
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         Mailboxes.
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *                Tx Mailbox.
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1244              		.loc 1 1059 0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 0
 1247              		@ frame_needed = 0, uses_anonymous_args = 0
 1248              		@ link register save eliminated.
 1249              	.LVL93:
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1250              		.loc 1 1065 0
 1251 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1252 0004 DBB2     		uxtb	r3, r3
 1253 0006 012B     		cmp	r3, #1
 1254 0008 04D0     		beq	.L99
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1255              		.loc 1 1066 0 discriminator 1
 1256 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1257 000e DBB2     		uxtb	r3, r3
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1258              		.loc 1 1065 0 discriminator 1
 1259 0010 022B     		cmp	r3, #2
 1260 0012 07D1     		bne	.L101
 1261              	.L99:
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1262              		.loc 1 1069 0
 1263 0014 0368     		ldr	r3, [r0]
 1264 0016 9B68     		ldr	r3, [r3, #8]
 1265 0018 8906     		lsls	r1, r1, #26
 1266              	.LVL94:
 1267 001a 31EA0303 		bics	r3, r1, r3
 1268 001e 03D1     		bne	.L102
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1269              		.loc 1 1060 0
 1270 0020 0020     		movs	r0, #0
ARM GAS  /tmp/ccEC99g0.s 			page 43


 1271              	.LVL95:
 1272 0022 7047     		bx	lr
 1273              	.LVL96:
 1274              	.L101:
 1275 0024 0020     		movs	r0, #0
 1276              	.LVL97:
 1277 0026 7047     		bx	lr
 1278              	.LVL98:
 1279              	.L102:
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 1280              		.loc 1 1071 0
 1281 0028 0120     		movs	r0, #1
 1282              	.LVL99:
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return status */
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1283              		.loc 1 1077 0
 1284 002a 7047     		bx	lr
 1285              		.cfi_endproc
 1286              	.LFE137:
 1288              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1289              		.align	2
 1290              		.global	HAL_CAN_GetTxTimestamp
 1291              		.thumb
 1292              		.thumb_func
 1294              	HAL_CAN_GetTxTimestamp:
 1295              	.LFB138:
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             mode is enabled.
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         read.
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1296              		.loc 1 1090 0
 1297              		.cfi_startproc
 1298              		@ args = 0, pretend = 0, frame = 0
 1299              		@ frame_needed = 0, uses_anonymous_args = 0
 1300              		@ link register save eliminated.
 1301              	.LVL100:
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timestamp = 0U;
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/ccEC99g0.s 			page 44


 1302              		.loc 1 1097 0
 1303 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1304 0004 DBB2     		uxtb	r3, r3
 1305 0006 012B     		cmp	r3, #1
 1306 0008 04D0     		beq	.L104
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1307              		.loc 1 1098 0 discriminator 1
 1308 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1309 000e DBB2     		uxtb	r3, r3
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1310              		.loc 1 1097 0 discriminator 1
 1311 0010 022B     		cmp	r3, #2
 1312 0012 0AD1     		bne	.L106
 1313              	.L104:
 1314              	.LVL101:
 1315              	.LBB4:
 1316              	.LBB5:
 1317              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
ARM GAS  /tmp/ccEC99g0.s 			page 45


  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
ARM GAS  /tmp/ccEC99g0.s 			page 46


  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccEC99g0.s 			page 47


 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
ARM GAS  /tmp/ccEC99g0.s 			page 48


 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEC99g0.s 			page 49


 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccEC99g0.s 			page 50


 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
ARM GAS  /tmp/ccEC99g0.s 			page 51


 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
ARM GAS  /tmp/ccEC99g0.s 			page 52


 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEC99g0.s 			page 53


 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1318              		.loc 2 531 0
 1319              		.syntax unified
 1320              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1321 0014 91FAA1F1 		rbit r1, r1
 1322              	@ 0 "" 2
 1323              	.LVL102:
 1324              		.thumb
 1325              		.syntax unified
 1326              	.LBE5:
 1327              	.LBE4:
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the Tx mailbox */
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
 1328              		.loc 1 1101 0
 1329 0018 B1FA81F1 		clz	r1, r1
 1330              	.LVL103:
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get timestamp */
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1331              		.loc 1 1104 0
 1332 001c 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccEC99g0.s 			page 54


 1333 001e 1831     		adds	r1, r1, #24
 1334              	.LVL104:
 1335 0020 03EB0111 		add	r1, r3, r1, lsl #4
 1336              	.LVL105:
 1337 0024 4868     		ldr	r0, [r1, #4]
 1338              	.LVL106:
 1339 0026 000C     		lsrs	r0, r0, #16
 1340              	.LVL107:
 1341 0028 7047     		bx	lr
 1342              	.LVL108:
 1343              	.L106:
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 1344              		.loc 1 1091 0
 1345 002a 0020     		movs	r0, #0
 1346              	.LVL109:
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the timestamp */
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return timestamp;
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1347              		.loc 1 1109 0
 1348 002c 7047     		bx	lr
 1349              		.cfi_endproc
 1350              	.LFE138:
 1352 002e 00BF     		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1353              		.align	2
 1354              		.global	HAL_CAN_GetRxMessage
 1355              		.thumb
 1356              		.thumb_func
 1358              	HAL_CAN_GetRxMessage:
 1359              	.LFB139:
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of the Rx frame will be stored.
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1360              		.loc 1 1123 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 1365              	.LVL110:
 1366 0000 30B4     		push	{r4, r5}
 1367              	.LCFI12:
 1368              		.cfi_def_cfa_offset 8
 1369              		.cfi_offset 4, -8
 1370              		.cfi_offset 5, -4
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
ARM GAS  /tmp/ccEC99g0.s 			page 55


1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1371              		.loc 1 1126 0
 1372 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1373 0006 E4B2     		uxtb	r4, r4
 1374 0008 012C     		cmp	r4, #1
 1375 000a 05D0     		beq	.L108
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1376              		.loc 1 1127 0 discriminator 1
 1377 000c 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1378 0010 E4B2     		uxtb	r4, r4
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1379              		.loc 1 1126 0 discriminator 1
 1380 0012 022C     		cmp	r4, #2
 1381 0014 40F08A80 		bne	.L109
 1382              	.L108:
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the Rx FIFO */
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1383              		.loc 1 1130 0
 1384 0018 51B9     		cbnz	r1, .L110
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 1385              		.loc 1 1133 0
 1386 001a 0468     		ldr	r4, [r0]
 1387 001c E468     		ldr	r4, [r4, #12]
 1388 001e 14F0030F 		tst	r4, #3
 1389 0022 12D1     		bne	.L111
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1390              		.loc 1 1136 0
 1391 0024 436A     		ldr	r3, [r0, #36]
 1392              	.LVL111:
 1393 0026 43F40013 		orr	r3, r3, #2097152
 1394 002a 4362     		str	r3, [r0, #36]
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1395              		.loc 1 1138 0
 1396 002c 0120     		movs	r0, #1
 1397              	.LVL112:
 1398 002e 84E0     		b	.L112
 1399              	.LVL113:
 1400              	.L110:
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 1401              		.loc 1 1141 0
 1402 0030 0129     		cmp	r1, #1
 1403 0032 0AD1     		bne	.L111
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 1404              		.loc 1 1144 0
 1405 0034 0468     		ldr	r4, [r0]
 1406 0036 2469     		ldr	r4, [r4, #16]
ARM GAS  /tmp/ccEC99g0.s 			page 56


 1407 0038 14F0030F 		tst	r4, #3
 1408 003c 05D1     		bne	.L111
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1409              		.loc 1 1147 0
 1410 003e 436A     		ldr	r3, [r0, #36]
 1411              	.LVL114:
 1412 0040 43F40013 		orr	r3, r3, #2097152
 1413 0044 4362     		str	r3, [r0, #36]
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1414              		.loc 1 1149 0
 1415 0046 0120     		movs	r0, #1
 1416              	.LVL115:
 1417 0048 77E0     		b	.L112
 1418              	.LVL116:
 1419              	.L111:
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the header */
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1420              		.loc 1 1154 0
 1421 004a 0568     		ldr	r5, [r0]
 1422 004c 01F11B04 		add	r4, r1, #27
 1423 0050 2401     		lsls	r4, r4, #4
 1424 0052 2C59     		ldr	r4, [r5, r4]
 1425 0054 04F00404 		and	r4, r4, #4
 1426 0058 9460     		str	r4, [r2, #8]
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1427              		.loc 1 1155 0
 1428 005a 3CB9     		cbnz	r4, .L113
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1429              		.loc 1 1157 0
 1430 005c 0568     		ldr	r5, [r0]
 1431 005e 01F11B04 		add	r4, r1, #27
 1432 0062 2401     		lsls	r4, r4, #4
 1433 0064 2C59     		ldr	r4, [r5, r4]
 1434 0066 640D     		lsrs	r4, r4, #21
 1435 0068 1460     		str	r4, [r2]
 1436 006a 06E0     		b	.L114
 1437              	.L113:
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 1438              		.loc 1 1161 0
 1439 006c 0568     		ldr	r5, [r0]
 1440 006e 01F11B04 		add	r4, r1, #27
 1441 0072 2401     		lsls	r4, r4, #4
 1442 0074 2C59     		ldr	r4, [r5, r4]
 1443 0076 E408     		lsrs	r4, r4, #3
 1444 0078 5460     		str	r4, [r2, #4]
 1445              	.L114:
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
ARM GAS  /tmp/ccEC99g0.s 			page 57


1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 1446              		.loc 1 1163 0
 1447 007a 0568     		ldr	r5, [r0]
 1448 007c 01F11B04 		add	r4, r1, #27
 1449 0080 2401     		lsls	r4, r4, #4
 1450 0082 2D59     		ldr	r5, [r5, r4]
 1451 0084 C5F34005 		ubfx	r5, r5, #1, #1
 1452 0088 D560     		str	r5, [r2, #12]
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1453              		.loc 1 1164 0
 1454 008a 0568     		ldr	r5, [r0]
 1455 008c 2544     		add	r5, r5, r4
 1456 008e 6D68     		ldr	r5, [r5, #4]
 1457 0090 05F00F05 		and	r5, r5, #15
 1458 0094 1561     		str	r5, [r2, #16]
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1459              		.loc 1 1165 0
 1460 0096 0568     		ldr	r5, [r0]
 1461 0098 2544     		add	r5, r5, r4
 1462 009a 6D68     		ldr	r5, [r5, #4]
 1463 009c C5F30725 		ubfx	r5, r5, #8, #8
 1464 00a0 9561     		str	r5, [r2, #24]
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1465              		.loc 1 1166 0
 1466 00a2 0568     		ldr	r5, [r0]
 1467 00a4 2C44     		add	r4, r4, r5
 1468 00a6 6468     		ldr	r4, [r4, #4]
 1469 00a8 240C     		lsrs	r4, r4, #16
 1470 00aa 5461     		str	r4, [r2, #20]
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the data */
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos
 1471              		.loc 1 1169 0
 1472 00ac 0468     		ldr	r4, [r0]
 1473 00ae 0A01     		lsls	r2, r1, #4
 1474              	.LVL117:
 1475 00b0 1444     		add	r4, r4, r2
 1476 00b2 D4F8B841 		ldr	r4, [r4, #440]
 1477 00b6 1C70     		strb	r4, [r3]
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos
 1478              		.loc 1 1170 0
 1479 00b8 0468     		ldr	r4, [r0]
 1480 00ba 1444     		add	r4, r4, r2
 1481 00bc D4F8B841 		ldr	r4, [r4, #440]
 1482 00c0 240A     		lsrs	r4, r4, #8
 1483 00c2 5C70     		strb	r4, [r3, #1]
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos
 1484              		.loc 1 1171 0
 1485 00c4 0468     		ldr	r4, [r0]
 1486 00c6 1444     		add	r4, r4, r2
 1487 00c8 D4F8B841 		ldr	r4, [r4, #440]
 1488 00cc 240C     		lsrs	r4, r4, #16
 1489 00ce 9C70     		strb	r4, [r3, #2]
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos
 1490              		.loc 1 1172 0
 1491 00d0 0468     		ldr	r4, [r0]
 1492 00d2 1444     		add	r4, r4, r2
ARM GAS  /tmp/ccEC99g0.s 			page 58


 1493 00d4 D4F8B841 		ldr	r4, [r4, #440]
 1494 00d8 240E     		lsrs	r4, r4, #24
 1495 00da DC70     		strb	r4, [r3, #3]
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos
 1496              		.loc 1 1173 0
 1497 00dc 0468     		ldr	r4, [r0]
 1498 00de 1444     		add	r4, r4, r2
 1499 00e0 D4F8BC41 		ldr	r4, [r4, #444]
 1500 00e4 1C71     		strb	r4, [r3, #4]
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos
 1501              		.loc 1 1174 0
 1502 00e6 0468     		ldr	r4, [r0]
 1503 00e8 1444     		add	r4, r4, r2
 1504 00ea D4F8BC41 		ldr	r4, [r4, #444]
 1505 00ee 240A     		lsrs	r4, r4, #8
 1506 00f0 5C71     		strb	r4, [r3, #5]
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos
 1507              		.loc 1 1175 0
 1508 00f2 0468     		ldr	r4, [r0]
 1509 00f4 1444     		add	r4, r4, r2
 1510 00f6 D4F8BC41 		ldr	r4, [r4, #444]
 1511 00fa 240C     		lsrs	r4, r4, #16
 1512 00fc 9C71     		strb	r4, [r3, #6]
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos
 1513              		.loc 1 1176 0
 1514 00fe 0468     		ldr	r4, [r0]
 1515 0100 2244     		add	r2, r2, r4
 1516 0102 D2F8BC21 		ldr	r2, [r2, #444]
 1517 0106 120E     		lsrs	r2, r2, #24
 1518 0108 DA71     		strb	r2, [r3, #7]
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Release the FIFO */
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1519              		.loc 1 1179 0
 1520 010a 31B9     		cbnz	r1, .L115
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 0 */
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1521              		.loc 1 1182 0
 1522 010c 0268     		ldr	r2, [r0]
 1523 010e D368     		ldr	r3, [r2, #12]
 1524              	.LVL118:
 1525 0110 43F02003 		orr	r3, r3, #32
 1526 0114 D360     		str	r3, [r2, #12]
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 1 */
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1527              		.loc 1 1191 0
 1528 0116 0020     		movs	r0, #0
 1529              	.LVL119:
 1530 0118 0FE0     		b	.L112
ARM GAS  /tmp/ccEC99g0.s 			page 59


 1531              	.LVL120:
 1532              	.L115:
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1533              		.loc 1 1184 0
 1534 011a 0129     		cmp	r1, #1
 1535 011c 0CD1     		bne	.L116
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1536              		.loc 1 1187 0
 1537 011e 0268     		ldr	r2, [r0]
 1538 0120 1369     		ldr	r3, [r2, #16]
 1539              	.LVL121:
 1540 0122 43F02003 		orr	r3, r3, #32
 1541 0126 1361     		str	r3, [r2, #16]
 1542              		.loc 1 1191 0
 1543 0128 0020     		movs	r0, #0
 1544              	.LVL122:
 1545 012a 06E0     		b	.L112
 1546              	.LVL123:
 1547              	.L109:
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1548              		.loc 1 1196 0
 1549 012c 436A     		ldr	r3, [r0, #36]
 1550              	.LVL124:
 1551 012e 43F48023 		orr	r3, r3, #262144
 1552 0132 4362     		str	r3, [r0, #36]
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1553              		.loc 1 1198 0
 1554 0134 0120     		movs	r0, #1
 1555              	.LVL125:
 1556 0136 00E0     		b	.L112
 1557              	.LVL126:
 1558              	.L116:
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1559              		.loc 1 1191 0
 1560 0138 0020     		movs	r0, #0
 1561              	.LVL127:
 1562              	.L112:
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1563              		.loc 1 1200 0
 1564 013a 30BC     		pop	{r4, r5}
 1565              	.LCFI13:
 1566              		.cfi_restore 5
 1567              		.cfi_restore 4
 1568              		.cfi_def_cfa_offset 0
 1569 013c 7047     		bx	lr
 1570              		.cfi_endproc
 1571              	.LFE139:
 1573 013e 00BF     		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1574              		.align	2
 1575              		.global	HAL_CAN_GetRxFifoFillLevel
 1576              		.thumb
ARM GAS  /tmp/ccEC99g0.s 			page 60


 1577              		.thumb_func
 1579              	HAL_CAN_GetRxFifoFillLevel:
 1580              	.LFB140:
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1581              		.loc 1 1211 0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 0, uses_anonymous_args = 0
 1585              		@ link register save eliminated.
 1586              	.LVL128:
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filllevel = 0U;
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1587              		.loc 1 1217 0
 1588 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1589 0004 DBB2     		uxtb	r3, r3
 1590 0006 012B     		cmp	r3, #1
 1591 0008 04D0     		beq	.L119
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1592              		.loc 1 1218 0 discriminator 1
 1593 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1594 000e DBB2     		uxtb	r3, r3
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1595              		.loc 1 1217 0 discriminator 1
 1596 0010 022B     		cmp	r3, #2
 1597 0012 0AD1     		bne	.L122
 1598              	.L119:
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 1599              		.loc 1 1220 0
 1600 0014 21B9     		cbnz	r1, .L121
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 1601              		.loc 1 1222 0
 1602 0016 0368     		ldr	r3, [r0]
 1603 0018 D868     		ldr	r0, [r3, #12]
 1604              	.LVL129:
 1605 001a 00F00300 		and	r0, r0, #3
 1606              	.LVL130:
 1607 001e 7047     		bx	lr
 1608              	.LVL131:
 1609              	.L121:
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
ARM GAS  /tmp/ccEC99g0.s 			page 61


1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 1610              		.loc 1 1226 0
 1611 0020 0368     		ldr	r3, [r0]
 1612 0022 1869     		ldr	r0, [r3, #16]
 1613              	.LVL132:
 1614 0024 00F00300 		and	r0, r0, #3
 1615              	.LVL133:
 1616 0028 7047     		bx	lr
 1617              	.LVL134:
 1618              	.L122:
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1619              		.loc 1 1212 0
 1620 002a 0020     		movs	r0, #0
 1621              	.LVL135:
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Rx FIFO fill level */
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return filllevel;
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1622              		.loc 1 1232 0
 1623 002c 7047     		bx	lr
 1624              		.cfi_endproc
 1625              	.LFE140:
 1627 002e 00BF     		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1628              		.align	2
 1629              		.global	HAL_CAN_ActivateNotification
 1630              		.thumb
 1631              		.thumb_func
 1633              	HAL_CAN_ActivateNotification:
 1634              	.LFB141:
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Interrupts management
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                        ##### Interrupts management #####
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Enable interrupts.
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/ccEC99g0.s 			page 62


1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1635              		.loc 1 1263 0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 0
 1638              		@ frame_needed = 0, uses_anonymous_args = 0
 1639              		@ link register save eliminated.
 1640              	.LVL136:
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1641              		.loc 1 1267 0
 1642 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1643 0004 DBB2     		uxtb	r3, r3
 1644 0006 012B     		cmp	r3, #1
 1645 0008 04D0     		beq	.L124
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1646              		.loc 1 1268 0 discriminator 1
 1647 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1648 000e DBB2     		uxtb	r3, r3
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1649              		.loc 1 1267 0 discriminator 1
 1650 0010 022B     		cmp	r3, #2
 1651 0012 05D1     		bne	.L125
 1652              	.L124:
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Enable the selected interrupts */
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 1653              		.loc 1 1271 0
 1654 0014 0368     		ldr	r3, [r0]
 1655 0016 5A69     		ldr	r2, [r3, #20]
 1656 0018 1143     		orrs	r1, r1, r2
 1657              	.LVL137:
 1658 001a 5961     		str	r1, [r3, #20]
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1659              		.loc 1 1274 0
 1660 001c 0020     		movs	r0, #0
 1661              	.LVL138:
 1662 001e 7047     		bx	lr
 1663              	.LVL139:
 1664              	.L125:
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1665              		.loc 1 1279 0
 1666 0020 436A     		ldr	r3, [r0, #36]
 1667 0022 43F48023 		orr	r3, r3, #262144
 1668 0026 4362     		str	r3, [r0, #36]
ARM GAS  /tmp/ccEC99g0.s 			page 63


1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1669              		.loc 1 1281 0
 1670 0028 0120     		movs	r0, #1
 1671              	.LVL140:
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1672              		.loc 1 1283 0
 1673 002a 7047     		bx	lr
 1674              		.cfi_endproc
 1675              	.LFE141:
 1677              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1678              		.align	2
 1679              		.global	HAL_CAN_DeactivateNotification
 1680              		.thumb
 1681              		.thumb_func
 1683              	HAL_CAN_DeactivateNotification:
 1684              	.LFB142:
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Disable interrupts.
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1685              		.loc 1 1294 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 1689              		@ link register save eliminated.
 1690              	.LVL141:
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 1691              		.loc 1 1298 0
 1692 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1693 0004 DBB2     		uxtb	r3, r3
 1694 0006 012B     		cmp	r3, #1
 1695 0008 04D0     		beq	.L128
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1696              		.loc 1 1299 0 discriminator 1
 1697 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1698 000e DBB2     		uxtb	r3, r3
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 1699              		.loc 1 1298 0 discriminator 1
 1700 0010 022B     		cmp	r3, #2
 1701 0012 06D1     		bne	.L129
 1702              	.L128:
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Disable the selected interrupts */
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 1703              		.loc 1 1302 0
ARM GAS  /tmp/ccEC99g0.s 			page 64


 1704 0014 0268     		ldr	r2, [r0]
 1705 0016 5369     		ldr	r3, [r2, #20]
 1706 0018 23EA0101 		bic	r1, r3, r1
 1707              	.LVL142:
 1708 001c 5161     		str	r1, [r2, #20]
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1709              		.loc 1 1305 0
 1710 001e 0020     		movs	r0, #0
 1711              	.LVL143:
 1712 0020 7047     		bx	lr
 1713              	.LVL144:
 1714              	.L129:
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1715              		.loc 1 1310 0
 1716 0022 436A     		ldr	r3, [r0, #36]
 1717 0024 43F48023 		orr	r3, r3, #262144
 1718 0028 4362     		str	r3, [r0, #36]
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1719              		.loc 1 1312 0
 1720 002a 0120     		movs	r0, #1
 1721              	.LVL145:
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1722              		.loc 1 1314 0
 1723 002c 7047     		bx	lr
 1724              		.cfi_endproc
 1725              	.LFE142:
 1727 002e 00BF     		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1728              		.align	2
 1729              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1730              		.thumb
 1731              		.thumb_func
 1733              	HAL_CAN_TxMailbox0CompleteCallback:
 1734              	.LFB144:
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
ARM GAS  /tmp/ccEC99g0.s 			page 65


1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != RESET)
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != RESET)
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != RESET)
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != RESET)
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != RESET)
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != RESET)
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != RESET)
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != RESET)
ARM GAS  /tmp/ccEC99g0.s 			page 66


1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != RESET)
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != RESET)
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != RESET)
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != RESET)
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
ARM GAS  /tmp/ccEC99g0.s 			page 67


1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
ARM GAS  /tmp/ccEC99g0.s 			page 68


1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != RESET)
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep Callback */
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != RESET)
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != RESET)
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear WakeUp Flag */
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* WakeUp Callback */
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Error interrupts management *********************************************/
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != RESET)
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != RESET)
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Warning Flag */
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Passive Flag */
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
ARM GAS  /tmp/ccEC99g0.s 			page 69


1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Bus-off Flag */
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Last Error Code Flag */
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_0):
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Stuff error */
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Form error */
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to CRC error */
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           default:
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Clear Last error code Flag */
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Clear ERRI Flag */
ARM GAS  /tmp/ccEC99g0.s 			page 70


1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code in handle */
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call Error callback function */
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call weak (surcharged) callback */
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Callback functions
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                           ##### Callback functions #####
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides the following callback functions:
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1735              		.loc 1 1669 0
 1736              		.cfi_startproc
 1737              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccEC99g0.s 			page 71


 1738              		@ frame_needed = 0, uses_anonymous_args = 0
 1739              		@ link register save eliminated.
 1740              	.LVL146:
 1741 0000 7047     		bx	lr
 1742              		.cfi_endproc
 1743              	.LFE144:
 1745 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1746              		.align	2
 1747              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1748              		.thumb
 1749              		.thumb_func
 1751              	HAL_CAN_TxMailbox1CompleteCallback:
 1752              	.LFB145:
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
1686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1753              		.loc 1 1686 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 0
 1756              		@ frame_needed = 0, uses_anonymous_args = 0
 1757              		@ link register save eliminated.
 1758              	.LVL147:
 1759 0000 7047     		bx	lr
 1760              		.cfi_endproc
 1761              	.LFE145:
 1763 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1764              		.align	2
 1765              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1766              		.thumb
 1767              		.thumb_func
 1769              	HAL_CAN_TxMailbox2CompleteCallback:
 1770              	.LFB146:
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
1692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
ARM GAS  /tmp/ccEC99g0.s 			page 72


1698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
1703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1771              		.loc 1 1703 0
 1772              		.cfi_startproc
 1773              		@ args = 0, pretend = 0, frame = 0
 1774              		@ frame_needed = 0, uses_anonymous_args = 0
 1775              		@ link register save eliminated.
 1776              	.LVL148:
 1777 0000 7047     		bx	lr
 1778              		.cfi_endproc
 1779              	.LFE146:
 1781 0002 00BF     		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1782              		.align	2
 1783              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1784              		.thumb
 1785              		.thumb_func
 1787              	HAL_CAN_TxMailbox0AbortCallback:
 1788              	.LFB147:
1704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
1709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
1715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
1720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1789              		.loc 1 1720 0
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 0
 1792              		@ frame_needed = 0, uses_anonymous_args = 0
 1793              		@ link register save eliminated.
 1794              	.LVL149:
 1795 0000 7047     		bx	lr
 1796              		.cfi_endproc
 1797              	.LFE147:
 1799 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1800              		.align	2
 1801              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1802              		.thumb
 1803              		.thumb_func
 1805              	HAL_CAN_TxMailbox1AbortCallback:
 1806              	.LFB148:
1721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
ARM GAS  /tmp/ccEC99g0.s 			page 73


1723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
1726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
1732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
1737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1807              		.loc 1 1737 0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              		@ link register save eliminated.
 1812              	.LVL150:
 1813 0000 7047     		bx	lr
 1814              		.cfi_endproc
 1815              	.LFE148:
 1817 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1818              		.align	2
 1819              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1820              		.thumb
 1821              		.thumb_func
 1823              	HAL_CAN_TxMailbox2AbortCallback:
 1824              	.LFB149:
1738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
1743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
1749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
1754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1825              		.loc 1 1754 0
 1826              		.cfi_startproc
 1827              		@ args = 0, pretend = 0, frame = 0
 1828              		@ frame_needed = 0, uses_anonymous_args = 0
 1829              		@ link register save eliminated.
 1830              	.LVL151:
 1831 0000 7047     		bx	lr
 1832              		.cfi_endproc
 1833              	.LFE149:
ARM GAS  /tmp/ccEC99g0.s 			page 74


 1835 0002 00BF     		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1836              		.align	2
 1837              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1838              		.thumb
 1839              		.thumb_func
 1841              	HAL_CAN_RxFifo0MsgPendingCallback:
 1842              	.LFB150:
1755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
1760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
1766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
1771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1843              		.loc 1 1771 0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 0
 1846              		@ frame_needed = 0, uses_anonymous_args = 0
 1847              		@ link register save eliminated.
 1848              	.LVL152:
 1849 0000 7047     		bx	lr
 1850              		.cfi_endproc
 1851              	.LFE150:
 1853 0002 00BF     		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1854              		.align	2
 1855              		.weak	HAL_CAN_RxFifo0FullCallback
 1856              		.thumb
 1857              		.thumb_func
 1859              	HAL_CAN_RxFifo0FullCallback:
 1860              	.LFB151:
1772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
1777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
1783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
ARM GAS  /tmp/ccEC99g0.s 			page 75


 1861              		.loc 1 1788 0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 0
 1864              		@ frame_needed = 0, uses_anonymous_args = 0
 1865              		@ link register save eliminated.
 1866              	.LVL153:
 1867 0000 7047     		bx	lr
 1868              		.cfi_endproc
 1869              	.LFE151:
 1871 0002 00BF     		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 1872              		.align	2
 1873              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1874              		.thumb
 1875              		.thumb_func
 1877              	HAL_CAN_RxFifo1MsgPendingCallback:
 1878              	.LFB152:
1789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
1794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
1795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
1800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
1805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1879              		.loc 1 1805 0
 1880              		.cfi_startproc
 1881              		@ args = 0, pretend = 0, frame = 0
 1882              		@ frame_needed = 0, uses_anonymous_args = 0
 1883              		@ link register save eliminated.
 1884              	.LVL154:
 1885 0000 7047     		bx	lr
 1886              		.cfi_endproc
 1887              	.LFE152:
 1889 0002 00BF     		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 1890              		.align	2
 1891              		.weak	HAL_CAN_RxFifo1FullCallback
 1892              		.thumb
 1893              		.thumb_func
 1895              	HAL_CAN_RxFifo1FullCallback:
 1896              	.LFB153:
1806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
1811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
ARM GAS  /tmp/ccEC99g0.s 			page 76


1814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
1817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
1822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1897              		.loc 1 1822 0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 0
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 1901              		@ link register save eliminated.
 1902              	.LVL155:
 1903 0000 7047     		bx	lr
 1904              		.cfi_endproc
 1905              	.LFE153:
 1907 0002 00BF     		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 1908              		.align	2
 1909              		.weak	HAL_CAN_SleepCallback
 1910              		.thumb
 1911              		.thumb_func
 1913              	HAL_CAN_SleepCallback:
 1914              	.LFB154:
1823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
1829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Sleep callback.
1834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
1839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1915              		.loc 1 1839 0
 1916              		.cfi_startproc
 1917              		@ args = 0, pretend = 0, frame = 0
 1918              		@ frame_needed = 0, uses_anonymous_args = 0
 1919              		@ link register save eliminated.
 1920              	.LVL156:
 1921 0000 7047     		bx	lr
 1922              		.cfi_endproc
 1923              	.LFE154:
 1925 0002 00BF     		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 1926              		.align	2
 1927              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 1928              		.thumb
 1929              		.thumb_func
 1931              	HAL_CAN_WakeUpFromRxMsgCallback:
ARM GAS  /tmp/ccEC99g0.s 			page 77


 1932              	.LFB155:
1840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
1845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
1850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
1855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1933              		.loc 1 1855 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 0
 1936              		@ frame_needed = 0, uses_anonymous_args = 0
 1937              		@ link register save eliminated.
 1938              	.LVL157:
 1939 0000 7047     		bx	lr
 1940              		.cfi_endproc
 1941              	.LFE155:
 1943 0002 00BF     		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1944              		.align	2
 1945              		.weak	HAL_CAN_ErrorCallback
 1946              		.thumb
 1947              		.thumb_func
 1949              	HAL_CAN_ErrorCallback:
 1950              	.LFB156:
1856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
1861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
1862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Error CAN callback.
1867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
1872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1951              		.loc 1 1872 0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 0
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
 1955              		@ link register save eliminated.
 1956              	.LVL158:
 1957 0000 7047     		bx	lr
ARM GAS  /tmp/ccEC99g0.s 			page 78


 1958              		.cfi_endproc
 1959              	.LFE156:
 1961 0002 00BF     		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 1962              		.align	2
 1963              		.global	HAL_CAN_IRQHandler
 1964              		.thumb
 1965              		.thumb_func
 1967              	HAL_CAN_IRQHandler:
 1968              	.LFB143:
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1969              		.loc 1 1323 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              	.LVL159:
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1974              		.loc 1 1323 0
 1975 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1976              	.LCFI14:
 1977              		.cfi_def_cfa_offset 40
 1978              		.cfi_offset 3, -40
 1979              		.cfi_offset 4, -36
 1980              		.cfi_offset 5, -32
 1981              		.cfi_offset 6, -28
 1982              		.cfi_offset 7, -24
 1983              		.cfi_offset 8, -20
 1984              		.cfi_offset 9, -16
 1985              		.cfi_offset 10, -12
 1986              		.cfi_offset 11, -8
 1987              		.cfi_offset 14, -4
 1988 0004 0546     		mov	r5, r0
 1989              	.LVL160:
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 1990              		.loc 1 1325 0
 1991 0006 0368     		ldr	r3, [r0]
 1992 0008 5C69     		ldr	r4, [r3, #20]
 1993              	.LVL161:
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 1994              		.loc 1 1326 0
 1995 000a 5F68     		ldr	r7, [r3, #4]
 1996              	.LVL162:
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 1997              		.loc 1 1327 0
 1998 000c 9E68     		ldr	r6, [r3, #8]
 1999              	.LVL163:
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2000              		.loc 1 1328 0
 2001 000e D3F80C90 		ldr	r9, [r3, #12]
 2002              	.LVL164:
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2003              		.loc 1 1329 0
 2004 0012 D3F81080 		ldr	r8, [r3, #16]
 2005              	.LVL165:
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2006              		.loc 1 1330 0
 2007 0016 D3F818A0 		ldr	r10, [r3, #24]
 2008              	.LVL166:
ARM GAS  /tmp/ccEC99g0.s 			page 79


1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2009              		.loc 1 1333 0
 2010 001a 14F0010F 		tst	r4, #1
 2011 001e 5AD0     		beq	.L177
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2012              		.loc 1 1336 0
 2013 0020 16F0010F 		tst	r6, #1
 2014 0024 14D0     		beq	.L178
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2015              		.loc 1 1339 0
 2016 0026 0122     		movs	r2, #1
 2017 0028 9A60     		str	r2, [r3, #8]
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2018              		.loc 1 1341 0
 2019 002a 16F0020F 		tst	r6, #2
 2020 002e 04D0     		beq	.L147
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2021              		.loc 1 1345 0
 2022 0030 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2023              	.LVL167:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2024              		.loc 1 1324 0
 2025 0034 4FF0000B 		mov	fp, #0
 2026 0038 12E0     		b	.L146
 2027              	.LVL168:
 2028              	.L147:
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2029              		.loc 1 1349 0
 2030 003a 16F0040F 		tst	r6, #4
 2031 003e 0AD1     		bne	.L179
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2032              		.loc 1 1354 0
 2033 0040 16F0080F 		tst	r6, #8
 2034 0044 0AD1     		bne	.L180
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2035              		.loc 1 1363 0
 2036 0046 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2037              	.LVL169:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2038              		.loc 1 1324 0
 2039 004a 4FF0000B 		mov	fp, #0
 2040 004e 07E0     		b	.L146
 2041              	.LVL170:
 2042              	.L178:
 2043 0050 4FF0000B 		mov	fp, #0
 2044 0054 04E0     		b	.L146
 2045              	.L179:
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2046              		.loc 1 1352 0
 2047 0056 4FF4006B 		mov	fp, #2048
 2048 005a 01E0     		b	.L146
 2049              	.L180:
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2050              		.loc 1 1357 0
 2051 005c 4FF4805B 		mov	fp, #4096
 2052              	.LVL171:
 2053              	.L146:
ARM GAS  /tmp/ccEC99g0.s 			page 80


1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2054              		.loc 1 1369 0
 2055 0060 16F4807F 		tst	r6, #256
 2056 0064 19D0     		beq	.L148
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2057              		.loc 1 1372 0
 2058 0066 2B68     		ldr	r3, [r5]
 2059 0068 4FF48072 		mov	r2, #256
 2060 006c 9A60     		str	r2, [r3, #8]
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2061              		.loc 1 1374 0
 2062 006e 16F4007F 		tst	r6, #512
 2063 0072 03D0     		beq	.L149
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2064              		.loc 1 1378 0
 2065 0074 2846     		mov	r0, r5
 2066 0076 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2067              	.LVL172:
 2068 007a 0EE0     		b	.L148
 2069              	.L149:
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2070              		.loc 1 1382 0
 2071 007c 16F4806F 		tst	r6, #1024
 2072 0080 02D0     		beq	.L150
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2073              		.loc 1 1385 0
 2074 0082 4BF4005B 		orr	fp, fp, #8192
 2075              	.LVL173:
 2076 0086 08E0     		b	.L148
 2077              	.L150:
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2078              		.loc 1 1387 0
 2079 0088 16F4006F 		tst	r6, #2048
 2080 008c 02D0     		beq	.L151
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2081              		.loc 1 1390 0
 2082 008e 4BF4804B 		orr	fp, fp, #16384
 2083              	.LVL174:
 2084 0092 02E0     		b	.L148
 2085              	.L151:
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2086              		.loc 1 1396 0
 2087 0094 2846     		mov	r0, r5
 2088 0096 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2089              	.LVL175:
 2090              	.L148:
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2091              		.loc 1 1402 0
 2092 009a 16F4803F 		tst	r6, #65536
 2093 009e 1CD0     		beq	.L145
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2094              		.loc 1 1405 0
 2095 00a0 2B68     		ldr	r3, [r5]
 2096 00a2 4FF48032 		mov	r2, #65536
 2097 00a6 9A60     		str	r2, [r3, #8]
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2098              		.loc 1 1407 0
ARM GAS  /tmp/ccEC99g0.s 			page 81


 2099 00a8 16F4003F 		tst	r6, #131072
 2100 00ac 03D0     		beq	.L152
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2101              		.loc 1 1411 0
 2102 00ae 2846     		mov	r0, r5
 2103 00b0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2104              	.LVL176:
 2105 00b4 11E0     		b	.L145
 2106              	.L152:
1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2107              		.loc 1 1415 0
 2108 00b6 16F4802F 		tst	r6, #262144
 2109 00ba 02D0     		beq	.L153
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2110              		.loc 1 1418 0
 2111 00bc 4BF4004B 		orr	fp, fp, #32768
 2112              	.LVL177:
 2113 00c0 0BE0     		b	.L145
 2114              	.L153:
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2115              		.loc 1 1420 0
 2116 00c2 16F4002F 		tst	r6, #524288
 2117 00c6 02D0     		beq	.L154
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2118              		.loc 1 1423 0
 2119 00c8 4BF4803B 		orr	fp, fp, #65536
 2120              	.LVL178:
 2121 00cc 05E0     		b	.L145
 2122              	.L154:
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2123              		.loc 1 1429 0
 2124 00ce 2846     		mov	r0, r5
 2125 00d0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2126              	.LVL179:
 2127 00d4 01E0     		b	.L145
 2128              	.LVL180:
 2129              	.L177:
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2130              		.loc 1 1324 0
 2131 00d6 4FF0000B 		mov	fp, #0
 2132              	.LVL181:
 2133              	.L145:
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2134              		.loc 1 1436 0
 2135 00da 14F0080F 		tst	r4, #8
 2136 00de 07D0     		beq	.L155
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2137              		.loc 1 1438 0
 2138 00e0 19F0100F 		tst	r9, #16
 2139 00e4 04D0     		beq	.L155
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2140              		.loc 1 1441 0
 2141 00e6 4BF4007B 		orr	fp, fp, #512
 2142              	.LVL182:
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2143              		.loc 1 1444 0
 2144 00ea 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccEC99g0.s 			page 82


 2145 00ec 1022     		movs	r2, #16
 2146 00ee DA60     		str	r2, [r3, #12]
 2147              	.L155:
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2148              		.loc 1 1449 0
 2149 00f0 14F0040F 		tst	r4, #4
 2150 00f4 08D0     		beq	.L156
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2151              		.loc 1 1451 0
 2152 00f6 19F0080F 		tst	r9, #8
 2153 00fa 05D0     		beq	.L156
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2154              		.loc 1 1454 0
 2155 00fc 2B68     		ldr	r3, [r5]
 2156 00fe 0822     		movs	r2, #8
 2157 0100 DA60     		str	r2, [r3, #12]
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2158              		.loc 1 1458 0
 2159 0102 2846     		mov	r0, r5
 2160 0104 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2161              	.LVL183:
 2162              	.L156:
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2163              		.loc 1 1463 0
 2164 0108 14F0020F 		tst	r4, #2
 2165 010c 07D0     		beq	.L157
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2166              		.loc 1 1466 0
 2167 010e 2B68     		ldr	r3, [r5]
 2168 0110 DB68     		ldr	r3, [r3, #12]
 2169 0112 13F0030F 		tst	r3, #3
 2170 0116 02D0     		beq	.L157
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2171              		.loc 1 1470 0
 2172 0118 2846     		mov	r0, r5
 2173 011a FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2174              	.LVL184:
 2175              	.L157:
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2176              		.loc 1 1475 0
 2177 011e 14F0400F 		tst	r4, #64
 2178 0122 07D0     		beq	.L158
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2179              		.loc 1 1477 0
 2180 0124 18F0100F 		tst	r8, #16
 2181 0128 04D0     		beq	.L158
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2182              		.loc 1 1480 0
 2183 012a 4BF4806B 		orr	fp, fp, #1024
 2184              	.LVL185:
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2185              		.loc 1 1483 0
 2186 012e 2B68     		ldr	r3, [r5]
 2187 0130 1022     		movs	r2, #16
 2188 0132 1A61     		str	r2, [r3, #16]
 2189              	.L158:
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
ARM GAS  /tmp/ccEC99g0.s 			page 83


 2190              		.loc 1 1488 0
 2191 0134 14F0200F 		tst	r4, #32
 2192 0138 08D0     		beq	.L159
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2193              		.loc 1 1490 0
 2194 013a 18F0080F 		tst	r8, #8
 2195 013e 05D0     		beq	.L159
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2196              		.loc 1 1493 0
 2197 0140 2B68     		ldr	r3, [r5]
 2198 0142 0822     		movs	r2, #8
 2199 0144 1A61     		str	r2, [r3, #16]
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2200              		.loc 1 1497 0
 2201 0146 2846     		mov	r0, r5
 2202 0148 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2203              	.LVL186:
 2204              	.L159:
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2205              		.loc 1 1502 0
 2206 014c 14F0100F 		tst	r4, #16
 2207 0150 07D0     		beq	.L160
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2208              		.loc 1 1505 0
 2209 0152 2B68     		ldr	r3, [r5]
 2210 0154 1B69     		ldr	r3, [r3, #16]
 2211 0156 13F0030F 		tst	r3, #3
 2212 015a 02D0     		beq	.L160
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2213              		.loc 1 1509 0
 2214 015c 2846     		mov	r0, r5
 2215 015e FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2216              	.LVL187:
 2217              	.L160:
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2218              		.loc 1 1514 0
 2219 0162 14F4003F 		tst	r4, #131072
 2220 0166 08D0     		beq	.L161
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2221              		.loc 1 1516 0
 2222 0168 17F0100F 		tst	r7, #16
 2223 016c 05D0     		beq	.L161
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2224              		.loc 1 1519 0
 2225 016e 2B68     		ldr	r3, [r5]
 2226 0170 1022     		movs	r2, #16
 2227 0172 5A60     		str	r2, [r3, #4]
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2228              		.loc 1 1523 0
 2229 0174 2846     		mov	r0, r5
 2230 0176 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2231              	.LVL188:
 2232              	.L161:
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2233              		.loc 1 1528 0
 2234 017a 14F4803F 		tst	r4, #65536
 2235 017e 08D0     		beq	.L162
ARM GAS  /tmp/ccEC99g0.s 			page 84


1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2236              		.loc 1 1530 0
 2237 0180 17F0080F 		tst	r7, #8
 2238 0184 05D0     		beq	.L162
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2239              		.loc 1 1533 0
 2240 0186 2B68     		ldr	r3, [r5]
 2241 0188 0822     		movs	r2, #8
 2242 018a 5A60     		str	r2, [r3, #4]
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2243              		.loc 1 1537 0
 2244 018c 2846     		mov	r0, r5
 2245 018e FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2246              	.LVL189:
 2247              	.L162:
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2248              		.loc 1 1542 0
 2249 0192 14F4004F 		tst	r4, #32768
 2250 0196 4ED0     		beq	.L163
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2251              		.loc 1 1544 0
 2252 0198 17F0040F 		tst	r7, #4
 2253 019c 48D0     		beq	.L164
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2254              		.loc 1 1547 0
 2255 019e 14F4807F 		tst	r4, #256
 2256 01a2 04D0     		beq	.L165
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != RESET))
 2257              		.loc 1 1547 0 is_stmt 0 discriminator 1
 2258 01a4 1AF0010F 		tst	r10, #1
 2259 01a8 01D0     		beq	.L165
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2260              		.loc 1 1551 0 is_stmt 1
 2261 01aa 4BF0010B 		orr	fp, fp, #1
 2262              	.LVL190:
 2263              	.L165:
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2264              		.loc 1 1557 0
 2265 01ae 14F4007F 		tst	r4, #512
 2266 01b2 04D0     		beq	.L166
1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != RESET))
 2267              		.loc 1 1557 0 is_stmt 0 discriminator 1
 2268 01b4 1AF0020F 		tst	r10, #2
 2269 01b8 01D0     		beq	.L166
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2270              		.loc 1 1561 0 is_stmt 1
 2271 01ba 4BF0020B 		orr	fp, fp, #2
 2272              	.LVL191:
 2273              	.L166:
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2274              		.loc 1 1567 0
 2275 01be 14F4806F 		tst	r4, #1024
 2276 01c2 04D0     		beq	.L167
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != RESET))
 2277              		.loc 1 1567 0 is_stmt 0 discriminator 1
 2278 01c4 1AF0040F 		tst	r10, #4
 2279 01c8 01D0     		beq	.L167
ARM GAS  /tmp/ccEC99g0.s 			page 85


1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2280              		.loc 1 1571 0 is_stmt 1
 2281 01ca 4BF0040B 		orr	fp, fp, #4
 2282              	.LVL192:
 2283              	.L167:
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2284              		.loc 1 1577 0
 2285 01ce 14F4006F 		tst	r4, #2048
 2286 01d2 2DD0     		beq	.L164
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != RESET))
 2287              		.loc 1 1577 0 is_stmt 0 discriminator 1
 2288 01d4 1AF0700A 		ands	r10, r10, #112
 2289              	.LVL193:
 2290 01d8 2AD0     		beq	.L164
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2291              		.loc 1 1580 0 is_stmt 1
 2292 01da BAF1300F 		cmp	r10, #48
 2293 01de 17D0     		beq	.L169
 2294 01e0 06D8     		bhi	.L170
 2295 01e2 BAF1100F 		cmp	r10, #16
 2296 01e6 0DD0     		beq	.L171
 2297 01e8 BAF1200F 		cmp	r10, #32
 2298 01ec 0DD0     		beq	.L172
 2299 01ee 1AE0     		b	.L168
 2300              	.L170:
 2301 01f0 BAF1500F 		cmp	r10, #80
 2302 01f4 12D0     		beq	.L173
 2303 01f6 BAF1600F 		cmp	r10, #96
 2304 01fa 12D0     		beq	.L174
 2305 01fc BAF1400F 		cmp	r10, #64
 2306 0200 11D1     		bne	.L168
 2307 0202 08E0     		b	.L175
 2308              	.L171:
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2309              		.loc 1 1584 0
 2310 0204 4BF0080B 		orr	fp, fp, #8
 2311              	.LVL194:
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2312              		.loc 1 1585 0
 2313 0208 0DE0     		b	.L168
 2314              	.L172:
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2315              		.loc 1 1588 0
 2316 020a 4BF0100B 		orr	fp, fp, #16
 2317              	.LVL195:
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2318              		.loc 1 1589 0
 2319 020e 0AE0     		b	.L168
 2320              	.L169:
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2321              		.loc 1 1592 0
 2322 0210 4BF0200B 		orr	fp, fp, #32
 2323              	.LVL196:
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2324              		.loc 1 1593 0
 2325 0214 07E0     		b	.L168
 2326              	.L175:
ARM GAS  /tmp/ccEC99g0.s 			page 86


1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2327              		.loc 1 1596 0
 2328 0216 4BF0400B 		orr	fp, fp, #64
 2329              	.LVL197:
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2330              		.loc 1 1597 0
 2331 021a 04E0     		b	.L168
 2332              	.L173:
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2333              		.loc 1 1600 0
 2334 021c 4BF0800B 		orr	fp, fp, #128
 2335              	.LVL198:
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2336              		.loc 1 1601 0
 2337 0220 01E0     		b	.L168
 2338              	.L174:
1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2339              		.loc 1 1604 0
 2340 0222 4BF4807B 		orr	fp, fp, #256
 2341              	.LVL199:
 2342              	.L168:
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2343              		.loc 1 1611 0
 2344 0226 2A68     		ldr	r2, [r5]
 2345 0228 9369     		ldr	r3, [r2, #24]
 2346 022a 23F07003 		bic	r3, r3, #112
 2347 022e 9361     		str	r3, [r2, #24]
 2348              	.L164:
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2349              		.loc 1 1616 0
 2350 0230 2B68     		ldr	r3, [r5]
 2351 0232 0422     		movs	r2, #4
 2352 0234 5A60     		str	r2, [r3, #4]
 2353              	.L163:
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2354              		.loc 1 1620 0
 2355 0236 BBF1000F 		cmp	fp, #0
 2356 023a 06D0     		beq	.L144
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2357              		.loc 1 1623 0
 2358 023c 6B6A     		ldr	r3, [r5, #36]
 2359 023e 4BEA0303 		orr	r3, fp, r3
 2360 0242 6B62     		str	r3, [r5, #36]
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2361              		.loc 1 1627 0
 2362 0244 2846     		mov	r0, r5
 2363 0246 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2364              	.LVL200:
 2365              	.L144:
 2366 024a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2367              		.cfi_endproc
 2368              	.LFE143:
 2370 024e 00BF     		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2371              		.align	2
 2372              		.global	HAL_CAN_GetState
 2373              		.thumb
 2374              		.thumb_func
ARM GAS  /tmp/ccEC99g0.s 			page 87


 2376              	HAL_CAN_GetState:
 2377              	.LFB157:
1873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
1875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
1879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
1880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
1886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
1887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             ##### Peripheral State and Error functions #####
1891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
1893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides functions allowing to :
1894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
1895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
1896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
1897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN state.
1904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL state
1907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
1909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2378              		.loc 1 1909 0
 2379              		.cfi_startproc
 2380              		@ args = 0, pretend = 0, frame = 0
 2381              		@ frame_needed = 0, uses_anonymous_args = 0
 2382              		@ link register save eliminated.
 2383              	.LVL201:
1910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2384              		.loc 1 1910 0
 2385 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2386 0004 DBB2     		uxtb	r3, r3
 2387              	.LVL202:
1911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2388              		.loc 1 1912 0
 2389 0006 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2390 000a D2B2     		uxtb	r2, r2
 2391 000c 012A     		cmp	r2, #1
 2392 000e 04D0     		beq	.L183
ARM GAS  /tmp/ccEC99g0.s 			page 88


1913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2393              		.loc 1 1913 0 discriminator 1
 2394 0010 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 2395 0014 D2B2     		uxtb	r2, r2
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2396              		.loc 1 1912 0 discriminator 1
 2397 0016 022A     		cmp	r2, #2
 2398 0018 0CD1     		bne	.L184
 2399              	.L183:
1914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
1916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 2400              		.loc 1 1916 0
 2401 001a 0268     		ldr	r2, [r0]
 2402 001c 5168     		ldr	r1, [r2, #4]
 2403 001e 11F0020F 		tst	r1, #2
 2404 0022 04D1     		bne	.L185
1917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode is active */
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
1920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode request flag */
1922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != RESET)
 2405              		.loc 1 1922 0
 2406 0024 1268     		ldr	r2, [r2]
 2407 0026 12F0020F 		tst	r2, #2
 2408 002a 02D1     		bne	.L186
 2409 002c 02E0     		b	.L184
 2410              	.L185:
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2411              		.loc 1 1919 0
 2412 002e 0423     		movs	r3, #4
 2413              	.LVL203:
 2414 0030 00E0     		b	.L184
 2415              	.LVL204:
 2416              	.L186:
1923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode request is pending */
1925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 2417              		.loc 1 1925 0
 2418 0032 0323     		movs	r3, #3
 2419              	.LVL205:
 2420              	.L184:
1926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN state */
1930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return state;
1931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2421              		.loc 1 1931 0
 2422 0034 1846     		mov	r0, r3
 2423              	.LVL206:
 2424 0036 7047     		bx	lr
 2425              		.cfi_endproc
 2426              	.LFE157:
 2428              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2429              		.align	2
ARM GAS  /tmp/ccEC99g0.s 			page 89


 2430              		.global	HAL_CAN_GetError
 2431              		.thumb
 2432              		.thumb_func
 2434              	HAL_CAN_GetError:
 2435              	.LFB158:
1932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN error code.
1935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval CAN Error Code
1938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
1940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2436              		.loc 1 1940 0
 2437              		.cfi_startproc
 2438              		@ args = 0, pretend = 0, frame = 0
 2439              		@ frame_needed = 0, uses_anonymous_args = 0
 2440              		@ link register save eliminated.
 2441              	.LVL207:
1941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN error code */
1942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return hcan->ErrorCode;
 2442              		.loc 1 1942 0
 2443 0000 406A     		ldr	r0, [r0, #36]
 2444              	.LVL208:
1943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2445              		.loc 1 1943 0
 2446 0002 7047     		bx	lr
 2447              		.cfi_endproc
 2448              	.LFE158:
 2450              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2451              		.align	2
 2452              		.global	HAL_CAN_ResetError
 2453              		.thumb
 2454              		.thumb_func
 2456              	HAL_CAN_ResetError:
 2457              	.LFB159:
1944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Reset the CAN error code.
1947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
1952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2458              		.loc 1 1952 0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 0
 2461              		@ frame_needed = 0, uses_anonymous_args = 0
 2462              		@ link register save eliminated.
 2463              	.LVL209:
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
1954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((hcan->State == HAL_CAN_STATE_READY) ||
 2464              		.loc 1 1955 0
 2465 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
ARM GAS  /tmp/ccEC99g0.s 			page 90


 2466 0004 DBB2     		uxtb	r3, r3
 2467 0006 012B     		cmp	r3, #1
 2468 0008 04D0     		beq	.L189
1956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2469              		.loc 1 1956 0 discriminator 1
 2470 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2471 000e DBB2     		uxtb	r3, r3
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (hcan->State == HAL_CAN_STATE_LISTENING))
 2472              		.loc 1 1955 0 discriminator 1
 2473 0010 022B     		cmp	r3, #2
 2474 0012 03D1     		bne	.L190
 2475              	.L189:
1957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset CAN error code */
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = 0U;
 2476              		.loc 1 1959 0
 2477 0014 0023     		movs	r3, #0
 2478 0016 4362     		str	r3, [r0, #36]
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2479              		.loc 1 1953 0
 2480 0018 1846     		mov	r0, r3
 2481              	.LVL210:
 2482              		.loc 1 1959 0
 2483 001a 7047     		bx	lr
 2484              	.LVL211:
 2485              	.L190:
1960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2486              		.loc 1 1964 0
 2487 001c 436A     		ldr	r3, [r0, #36]
 2488 001e 43F48023 		orr	r3, r3, #262144
 2489 0022 4362     		str	r3, [r0, #36]
 2490              	.LVL212:
1965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     status = HAL_ERROR;
 2491              		.loc 1 1966 0
 2492 0024 0120     		movs	r0, #1
 2493              	.LVL213:
1967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the status */
1970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
1971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2494              		.loc 1 1971 0
 2495 0026 7047     		bx	lr
 2496              		.cfi_endproc
 2497              	.LFE159:
 2499              		.text
 2500              	.Letext0:
 2501              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 2502              		.file 4 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 2503              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 2504              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2505              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
ARM GAS  /tmp/ccEC99g0.s 			page 91


 2506              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 2507              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 2508              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccEC99g0.s 			page 92


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hal_can.c
     /tmp/ccEC99g0.s:22     .text.HAL_CAN_MspInit:00000000 $t
     /tmp/ccEC99g0.s:27     .text.HAL_CAN_MspInit:00000000 HAL_CAN_MspInit
     /tmp/ccEC99g0.s:41     .text.HAL_CAN_Init:00000000 $t
     /tmp/ccEC99g0.s:46     .text.HAL_CAN_Init:00000000 HAL_CAN_Init
     /tmp/ccEC99g0.s:283    .text.HAL_CAN_MspDeInit:00000000 $t
     /tmp/ccEC99g0.s:288    .text.HAL_CAN_MspDeInit:00000000 HAL_CAN_MspDeInit
     /tmp/ccEC99g0.s:301    .text.HAL_CAN_ConfigFilter:00000000 $t
     /tmp/ccEC99g0.s:306    .text.HAL_CAN_ConfigFilter:00000000 HAL_CAN_ConfigFilter
     /tmp/ccEC99g0.s:498    .text.HAL_CAN_ConfigFilter:00000128 $d
     /tmp/ccEC99g0.s:503    .text.HAL_CAN_Start:00000000 $t
     /tmp/ccEC99g0.s:508    .text.HAL_CAN_Start:00000000 HAL_CAN_Start
     /tmp/ccEC99g0.s:589    .text.HAL_CAN_Stop:00000000 $t
     /tmp/ccEC99g0.s:594    .text.HAL_CAN_Stop:00000000 HAL_CAN_Stop
     /tmp/ccEC99g0.s:677    .text.HAL_CAN_DeInit:00000000 $t
     /tmp/ccEC99g0.s:682    .text.HAL_CAN_DeInit:00000000 HAL_CAN_DeInit
     /tmp/ccEC99g0.s:731    .text.HAL_CAN_RequestSleep:00000000 $t
     /tmp/ccEC99g0.s:736    .text.HAL_CAN_RequestSleep:00000000 HAL_CAN_RequestSleep
     /tmp/ccEC99g0.s:780    .text.HAL_CAN_WakeUp:00000000 $t
     /tmp/ccEC99g0.s:785    .text.HAL_CAN_WakeUp:00000000 HAL_CAN_WakeUp
     /tmp/ccEC99g0.s:863    .text.HAL_CAN_WakeUp:00000058 $d
     /tmp/ccEC99g0.s:868    .text.HAL_CAN_IsSleepActive:00000000 $t
     /tmp/ccEC99g0.s:873    .text.HAL_CAN_IsSleepActive:00000000 HAL_CAN_IsSleepActive
     /tmp/ccEC99g0.s:918    .text.HAL_CAN_AddTxMessage:00000000 $t
     /tmp/ccEC99g0.s:923    .text.HAL_CAN_AddTxMessage:00000000 HAL_CAN_AddTxMessage
     /tmp/ccEC99g0.s:1093   .text.HAL_CAN_AbortTxRequest:00000000 $t
     /tmp/ccEC99g0.s:1098   .text.HAL_CAN_AbortTxRequest:00000000 HAL_CAN_AbortTxRequest
     /tmp/ccEC99g0.s:1169   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 $t
     /tmp/ccEC99g0.s:1174   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccEC99g0.s:1237   .text.HAL_CAN_IsTxMessagePending:00000000 $t
     /tmp/ccEC99g0.s:1242   .text.HAL_CAN_IsTxMessagePending:00000000 HAL_CAN_IsTxMessagePending
     /tmp/ccEC99g0.s:1289   .text.HAL_CAN_GetTxTimestamp:00000000 $t
     /tmp/ccEC99g0.s:1294   .text.HAL_CAN_GetTxTimestamp:00000000 HAL_CAN_GetTxTimestamp
     /tmp/ccEC99g0.s:1353   .text.HAL_CAN_GetRxMessage:00000000 $t
     /tmp/ccEC99g0.s:1358   .text.HAL_CAN_GetRxMessage:00000000 HAL_CAN_GetRxMessage
     /tmp/ccEC99g0.s:1574   .text.HAL_CAN_GetRxFifoFillLevel:00000000 $t
     /tmp/ccEC99g0.s:1579   .text.HAL_CAN_GetRxFifoFillLevel:00000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccEC99g0.s:1628   .text.HAL_CAN_ActivateNotification:00000000 $t
     /tmp/ccEC99g0.s:1633   .text.HAL_CAN_ActivateNotification:00000000 HAL_CAN_ActivateNotification
     /tmp/ccEC99g0.s:1678   .text.HAL_CAN_DeactivateNotification:00000000 $t
     /tmp/ccEC99g0.s:1683   .text.HAL_CAN_DeactivateNotification:00000000 HAL_CAN_DeactivateNotification
     /tmp/ccEC99g0.s:1728   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 $t
     /tmp/ccEC99g0.s:1733   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccEC99g0.s:1746   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 $t
     /tmp/ccEC99g0.s:1751   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccEC99g0.s:1764   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 $t
     /tmp/ccEC99g0.s:1769   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccEC99g0.s:1782   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 $t
     /tmp/ccEC99g0.s:1787   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccEC99g0.s:1800   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 $t
     /tmp/ccEC99g0.s:1805   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccEC99g0.s:1818   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 $t
     /tmp/ccEC99g0.s:1823   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccEC99g0.s:1836   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
     /tmp/ccEC99g0.s:1841   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccEC99g0.s:1854   .text.HAL_CAN_RxFifo0FullCallback:00000000 $t
ARM GAS  /tmp/ccEC99g0.s 			page 93


     /tmp/ccEC99g0.s:1859   .text.HAL_CAN_RxFifo0FullCallback:00000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccEC99g0.s:1872   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 $t
     /tmp/ccEC99g0.s:1877   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccEC99g0.s:1890   .text.HAL_CAN_RxFifo1FullCallback:00000000 $t
     /tmp/ccEC99g0.s:1895   .text.HAL_CAN_RxFifo1FullCallback:00000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccEC99g0.s:1908   .text.HAL_CAN_SleepCallback:00000000 $t
     /tmp/ccEC99g0.s:1913   .text.HAL_CAN_SleepCallback:00000000 HAL_CAN_SleepCallback
     /tmp/ccEC99g0.s:1926   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 $t
     /tmp/ccEC99g0.s:1931   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccEC99g0.s:1944   .text.HAL_CAN_ErrorCallback:00000000 $t
     /tmp/ccEC99g0.s:1949   .text.HAL_CAN_ErrorCallback:00000000 HAL_CAN_ErrorCallback
     /tmp/ccEC99g0.s:1962   .text.HAL_CAN_IRQHandler:00000000 $t
     /tmp/ccEC99g0.s:1967   .text.HAL_CAN_IRQHandler:00000000 HAL_CAN_IRQHandler
     /tmp/ccEC99g0.s:2371   .text.HAL_CAN_GetState:00000000 $t
     /tmp/ccEC99g0.s:2376   .text.HAL_CAN_GetState:00000000 HAL_CAN_GetState
     /tmp/ccEC99g0.s:2429   .text.HAL_CAN_GetError:00000000 $t
     /tmp/ccEC99g0.s:2434   .text.HAL_CAN_GetError:00000000 HAL_CAN_GetError
     /tmp/ccEC99g0.s:2451   .text.HAL_CAN_ResetError:00000000 $t
     /tmp/ccEC99g0.s:2456   .text.HAL_CAN_ResetError:00000000 HAL_CAN_ResetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
