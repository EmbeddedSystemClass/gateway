ARM GAS  /tmp/ccw9K7DZ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"event_groups.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.prvTestWaitCondition,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	prvTestWaitCondition:
  27              	.LFB15:
  28              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    is the industry's de facto standard.                               *
ARM GAS  /tmp/ccw9K7DZ.s 			page 2


  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** header files above, but not in this file, in order to generate the correct
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  /tmp/ccw9K7DZ.s 			page 3


  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct xEventGroupDefinition
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** PRIVILEGED_FUNCTION static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, c
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccw9K7DZ.s 			page 4


 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group. */
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccw9K7DZ.s 			page 5


 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
ARM GAS  /tmp/ccw9K7DZ.s 			page 6


 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
ARM GAS  /tmp/ccw9K7DZ.s 			page 7


 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
ARM GAS  /tmp/ccw9K7DZ.s 			page 8


 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccw9K7DZ.s 			page 9


 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Prevent compiler warnings when trace macros are not used. */
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdFALSE;
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
ARM GAS  /tmp/ccw9K7DZ.s 			page 10


 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t *pxList;
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccw9K7DZ.s 			page 11


 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
ARM GAS  /tmp/ccw9K7DZ.s 			page 12


 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCK
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and	cannot therefore have any bits set. */
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBit
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccw9K7DZ.s 			page 13


 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  29              		.loc 1 683 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  35              		.loc 1 686 0
  36 0000 1AB9     		cbnz	r2, .L2
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  37              		.loc 1 690 0
  38 0002 0842     		tst	r0, r1
  39 0004 06D1     		bne	.L4
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  40              		.loc 1 684 0
  41 0006 0020     		movs	r0, #0
  42              	.LVL1:
  43 0008 7047     		bx	lr
  44              	.LVL2:
  45              	.L2:
 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccw9K7DZ.s 			page 14


 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  46              		.loc 1 703 0
  47 000a 31EA0003 		bics	r3, r1, r0
  48 000e 03D0     		beq	.L5
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  49              		.loc 1 684 0
  50 0010 0020     		movs	r0, #0
  51              	.LVL3:
  52 0012 7047     		bx	lr
  53              	.LVL4:
  54              	.L4:
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  55              		.loc 1 692 0
  56 0014 0120     		movs	r0, #1
  57              	.LVL5:
  58 0016 7047     		bx	lr
  59              	.LVL6:
  60              	.L5:
 704:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  61              		.loc 1 705 0
  62 0018 0120     		movs	r0, #1
  63              	.LVL7:
 706:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 707:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 708:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 709:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 710:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 712:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 714:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  64              		.loc 1 714 0
  65 001a 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE15:
  69              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  70              		.align	2
  71              		.global	xEventGroupCreateStatic
  72              		.thumb
  73              		.thumb_func
  75              	xEventGroupCreateStatic:
  76              	.LFB5:
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  77              		.loc 1 136 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL8:
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  82              		.loc 1 140 0
ARM GAS  /tmp/ccw9K7DZ.s 			page 15


  83 0000 40B9     		cbnz	r0, .L7
  84              	.LBB33:
  85              	.LBB34:
  86              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
ARM GAS  /tmp/ccw9K7DZ.s 			page 16


  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
ARM GAS  /tmp/ccw9K7DZ.s 			page 17


 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /tmp/ccw9K7DZ.s 			page 18


 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
ARM GAS  /tmp/ccw9K7DZ.s 			page 19


 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  87              		.loc 2 237 0
  88              		.syntax unified
  89              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  90 0002 4FF05003 			mov r3, #80												
  91 0006 83F31188 		msr basepri, r3											
  92 000a BFF36F8F 		isb														
  93 000e BFF34F8F 		dsb														
  94              	
  95              	@ 0 "" 2
  96              	.LVL9:
  97              		.thumb
  98              		.syntax unified
  99              	.L8:
 100 0012 FEE7     		b	.L8
 101              	.L7:
 102              	.LBE34:
 103              	.LBE33:
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 104              		.loc 1 136 0
 105 0014 10B5     		push	{r4, lr}
 106              	.LCFI0:
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 4, -8
 109              		.cfi_offset 14, -4
 110 0016 0446     		mov	r4, r0
 111              	.LVL10:
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 112              		.loc 1 145 0
 113 0018 30B1     		cbz	r0, .L9
 114              	.LVL11:
 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 115              		.loc 1 147 0
 116 001a 0023     		movs	r3, #0
 117 001c 40F8043B 		str	r3, [r0], #4
 118              	.LVL12:
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 119              		.loc 1 148 0
 120 0020 FFF7FEFF 		bl	vListInitialise
 121              	.LVL13:
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 122              		.loc 1 155 0
 123 0024 0123     		movs	r3, #1
 124 0026 2376     		strb	r3, [r4, #24]
 125              	.L9:
ARM GAS  /tmp/ccw9K7DZ.s 			page 20


 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 126              		.loc 1 167 0
 127 0028 2046     		mov	r0, r4
 128 002a 10BD     		pop	{r4, pc}
 129              		.cfi_endproc
 130              	.LFE5:
 132              		.section	.text.xEventGroupCreate,"ax",%progbits
 133              		.align	2
 134              		.global	xEventGroupCreate
 135              		.thumb
 136              		.thumb_func
 138              	xEventGroupCreate:
 139              	.LFB6:
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 140              		.loc 1 175 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144 0000 38B5     		push	{r3, r4, r5, lr}
 145              	.LCFI1:
 146              		.cfi_def_cfa_offset 16
 147              		.cfi_offset 3, -16
 148              		.cfi_offset 4, -12
 149              		.cfi_offset 5, -8
 150              		.cfi_offset 14, -4
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 151              		.loc 1 179 0
 152 0002 1C20     		movs	r0, #28
 153 0004 FFF7FEFF 		bl	pvPortMalloc
 154              	.LVL14:
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 155              		.loc 1 181 0
 156 0008 0446     		mov	r4, r0
 157 000a 28B1     		cbz	r0, .L12
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 158              		.loc 1 183 0
 159 000c 0025     		movs	r5, #0
 160 000e 40F8045B 		str	r5, [r0], #4
 161              	.LVL15:
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 162              		.loc 1 184 0
 163 0012 FFF7FEFF 		bl	vListInitialise
 164              	.LVL16:
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 165              		.loc 1 191 0
 166 0016 2576     		strb	r5, [r4, #24]
 167              	.L12:
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 168              		.loc 1 203 0
 169 0018 2046     		mov	r0, r4
 170 001a 38BD     		pop	{r3, r4, r5, pc}
 171              		.cfi_endproc
 172              	.LFE6:
 174              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 175              		.align	2
 176              		.global	xEventGroupWaitBits
 177              		.thumb
ARM GAS  /tmp/ccw9K7DZ.s 			page 21


 178              		.thumb_func
 180              	xEventGroupWaitBits:
 181              	.LFB8:
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 182              		.loc 1 325 0
 183              		.cfi_startproc
 184              		@ args = 4, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              	.LVL17:
 187 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 188              	.LCFI2:
 189              		.cfi_def_cfa_offset 32
 190              		.cfi_offset 3, -32
 191              		.cfi_offset 4, -28
 192              		.cfi_offset 5, -24
 193              		.cfi_offset 6, -20
 194              		.cfi_offset 7, -16
 195              		.cfi_offset 8, -12
 196              		.cfi_offset 9, -8
 197              		.cfi_offset 14, -4
 198 0004 089F     		ldr	r7, [sp, #32]
 199              	.LVL18:
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 200              		.loc 1 333 0
 201 0006 40B9     		cbnz	r0, .L15
 202              	.LBB35:
 203              	.LBB36:
 204              		.loc 2 237 0
 205              		.syntax unified
 206              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 207 0008 4FF05003 			mov r3, #80												
 208 000c 83F31188 		msr basepri, r3											
 209 0010 BFF36F8F 		isb														
 210 0014 BFF34F8F 		dsb														
 211              	
 212              	@ 0 "" 2
 213              	.LVL19:
 214              		.thumb
 215              		.syntax unified
 216              	.L16:
 217 0018 FEE7     		b	.L16
 218              	.LVL20:
 219              	.L15:
 220 001a 0646     		mov	r6, r0
 221              	.LBE36:
 222              	.LBE35:
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 223              		.loc 1 334 0
 224 001c 11F07F4F 		tst	r1, #-16777216
 225 0020 08D0     		beq	.L17
 226              	.LBB37:
 227              	.LBB38:
 228              		.loc 2 237 0
 229              		.syntax unified
 230              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 231 0022 4FF05003 			mov r3, #80												
 232 0026 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccw9K7DZ.s 			page 22


 233 002a BFF36F8F 		isb														
 234 002e BFF34F8F 		dsb														
 235              	
 236              	@ 0 "" 2
 237              	.LVL21:
 238              		.thumb
 239              		.syntax unified
 240              	.L18:
 241 0032 FEE7     		b	.L18
 242              	.LVL22:
 243              	.L17:
 244              	.LBE38:
 245              	.LBE37:
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 246              		.loc 1 335 0
 247 0034 41B9     		cbnz	r1, .L19
 248              	.LBB39:
 249              	.LBB40:
 250              		.loc 2 237 0
 251              		.syntax unified
 252              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 253 0036 4FF05003 			mov r3, #80												
 254 003a 83F31188 		msr basepri, r3											
 255 003e BFF36F8F 		isb														
 256 0042 BFF34F8F 		dsb														
 257              	
 258              	@ 0 "" 2
 259              	.LVL23:
 260              		.thumb
 261              		.syntax unified
 262              	.L20:
 263 0046 FEE7     		b	.L20
 264              	.LVL24:
 265              	.L19:
 266 0048 9946     		mov	r9, r3
 267 004a 9046     		mov	r8, r2
 268 004c 0D46     		mov	r5, r1
 269              	.LBE40:
 270              	.LBE39:
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 271              		.loc 1 338 0
 272 004e FFF7FEFF 		bl	xTaskGetSchedulerState
 273              	.LVL25:
 274 0052 10B9     		cbnz	r0, .L32
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 275              		.loc 1 338 0 is_stmt 0 discriminator 2
 276 0054 1FB9     		cbnz	r7, .L33
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 277              		.loc 1 338 0
 278 0056 0123     		movs	r3, #1
 279 0058 02E0     		b	.L21
 280              	.L32:
 281 005a 0123     		movs	r3, #1
 282 005c 00E0     		b	.L21
 283              	.L33:
 284 005e 0023     		movs	r3, #0
 285              	.L21:
ARM GAS  /tmp/ccw9K7DZ.s 			page 23


 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 286              		.loc 1 338 0 discriminator 6
 287 0060 43B9     		cbnz	r3, .L22
 288              	.LBB41:
 289              	.LBB42:
 290              		.loc 2 237 0 is_stmt 1
 291              		.syntax unified
 292              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 293 0062 4FF05003 			mov r3, #80												
 294 0066 83F31188 		msr basepri, r3											
 295 006a BFF36F8F 		isb														
 296 006e BFF34F8F 		dsb														
 297              	
 298              	@ 0 "" 2
 299              	.LVL26:
 300              		.thumb
 301              		.syntax unified
 302              	.L23:
 303 0072 FEE7     		b	.L23
 304              	.L22:
 305              	.LBE42:
 306              	.LBE41:
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 307              		.loc 1 342 0
 308 0074 FFF7FEFF 		bl	vTaskSuspendAll
 309              	.LVL27:
 310              	.LBB43:
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 311              		.loc 1 344 0
 312 0078 3468     		ldr	r4, [r6]
 313              	.LVL28:
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 314              		.loc 1 347 0
 315 007a 4A46     		mov	r2, r9
 316 007c 2946     		mov	r1, r5
 317 007e 2046     		mov	r0, r4
 318 0080 FFF7FEFF 		bl	prvTestWaitCondition
 319              	.LVL29:
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 320              		.loc 1 349 0
 321 0084 38B1     		cbz	r0, .L24
 322              	.LVL30:
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 323              		.loc 1 357 0
 324 0086 B8F1000F 		cmp	r8, #0
 325 008a 18D0     		beq	.L34
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 326              		.loc 1 359 0
 327 008c 24EA0503 		bic	r3, r4, r5
 328 0090 3360     		str	r3, [r6]
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 329              		.loc 1 354 0
 330 0092 0027     		movs	r7, #0
 331 0094 14E0     		b	.L25
 332              	.LVL31:
 333              	.L24:
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccw9K7DZ.s 			page 24


 334              		.loc 1 366 0
 335 0096 9FB1     		cbz	r7, .L25
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 336              		.loc 1 378 0
 337 0098 B8F1000F 		cmp	r8, #0
 338 009c 01D1     		bne	.L35
 339              	.LBE43:
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 340              		.loc 1 327 0
 341 009e 0021     		movs	r1, #0
 342 00a0 01E0     		b	.L26
 343              	.L35:
 344              	.LBB44:
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 345              		.loc 1 380 0
 346 00a2 4FF08071 		mov	r1, #16777216
 347              	.L26:
 348              	.LVL32:
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 349              		.loc 1 387 0
 350 00a6 B9F1000F 		cmp	r9, #0
 351 00aa 01D0     		beq	.L27
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 352              		.loc 1 389 0
 353 00ac 41F08061 		orr	r1, r1, #67108864
 354              	.LVL33:
 355              	.L27:
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 356              		.loc 1 399 0
 357 00b0 3A46     		mov	r2, r7
 358 00b2 2943     		orrs	r1, r1, r5
 359              	.LVL34:
 360 00b4 301D     		adds	r0, r6, #4
 361              	.LVL35:
 362 00b6 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 363              	.LVL36:
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 364              		.loc 1 404 0
 365 00ba 0024     		movs	r4, #0
 366              	.LVL37:
 367 00bc 00E0     		b	.L25
 368              	.LVL38:
 369              	.L34:
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 370              		.loc 1 354 0
 371 00be 0027     		movs	r7, #0
 372              	.LVL39:
 373              	.L25:
 374              	.LBE44:
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 375              		.loc 1 409 0
 376 00c0 FFF7FEFF 		bl	xTaskResumeAll
 377              	.LVL40:
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 378              		.loc 1 411 0
 379 00c4 0FB3     		cbz	r7, .L28
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccw9K7DZ.s 			page 25


 380              		.loc 1 413 0
 381 00c6 38B9     		cbnz	r0, .L29
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 382              		.loc 1 415 0
 383 00c8 4FF08052 		mov	r2, #268435456
 384 00cc 104B     		ldr	r3, .L37
 385 00ce 1A60     		str	r2, [r3]
 386              		.syntax unified
 387              	@ 415 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 388 00d0 BFF34F8F 		dsb
 389              	@ 0 "" 2
 390              	@ 415 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 391 00d4 BFF36F8F 		isb
 392              	@ 0 "" 2
 393              		.thumb
 394              		.syntax unified
 395              	.L29:
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 396              		.loc 1 426 0
 397 00d8 FFF7FEFF 		bl	uxTaskResetEventItemValue
 398              	.LVL41:
 399 00dc 0446     		mov	r4, r0
 400              	.LVL42:
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 401              		.loc 1 428 0
 402 00de 10F0007F 		tst	r0, #33554432
 403 00e2 10D1     		bne	.L30
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 404              		.loc 1 430 0
 405 00e4 FFF7FEFF 		bl	vPortEnterCritical
 406              	.LVL43:
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 407              		.loc 1 433 0
 408 00e8 3468     		ldr	r4, [r6]
 409              	.LVL44:
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 410              		.loc 1 437 0
 411 00ea 4A46     		mov	r2, r9
 412 00ec 2946     		mov	r1, r5
 413 00ee 2046     		mov	r0, r4
 414 00f0 FFF7FEFF 		bl	prvTestWaitCondition
 415              	.LVL45:
 416 00f4 28B1     		cbz	r0, .L31
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 417              		.loc 1 439 0
 418 00f6 B8F1000F 		cmp	r8, #0
 419 00fa 02D0     		beq	.L31
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 420              		.loc 1 441 0
 421 00fc 24EA0505 		bic	r5, r4, r5
 422              	.LVL46:
 423 0100 3560     		str	r5, [r6]
 424              	.L31:
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 425              		.loc 1 453 0
 426 0102 FFF7FEFF 		bl	vPortExitCritical
 427              	.LVL47:
ARM GAS  /tmp/ccw9K7DZ.s 			page 26


 428              	.L30:
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 429              		.loc 1 464 0
 430 0106 24F07F44 		bic	r4, r4, #-16777216
 431              	.LVL48:
 432              	.L28:
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 433              		.loc 1 469 0
 434 010a 2046     		mov	r0, r4
 435 010c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 436              	.LVL49:
 437              	.L38:
 438              		.align	2
 439              	.L37:
 440 0110 04ED00E0 		.word	-536810236
 441              		.cfi_endproc
 442              	.LFE8:
 444              		.section	.text.xEventGroupClearBits,"ax",%progbits
 445              		.align	2
 446              		.global	xEventGroupClearBits
 447              		.thumb
 448              		.thumb_func
 450              	xEventGroupClearBits:
 451              	.LFB9:
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 452              		.loc 1 473 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              	.LVL50:
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 457              		.loc 1 479 0
 458 0000 40B9     		cbnz	r0, .L40
 459              	.LBB45:
 460              	.LBB46:
 461              		.loc 2 237 0
 462              		.syntax unified
 463              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 464 0002 4FF05003 			mov r3, #80												
 465 0006 83F31188 		msr basepri, r3											
 466 000a BFF36F8F 		isb														
 467 000e BFF34F8F 		dsb														
 468              	
 469              	@ 0 "" 2
 470              	.LVL51:
 471              		.thumb
 472              		.syntax unified
 473              	.L41:
 474 0012 FEE7     		b	.L41
 475              	.L40:
 476              	.LBE46:
 477              	.LBE45:
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 478              		.loc 1 473 0
 479 0014 70B5     		push	{r4, r5, r6, lr}
 480              	.LCFI3:
 481              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccw9K7DZ.s 			page 27


 482              		.cfi_offset 4, -16
 483              		.cfi_offset 5, -12
 484              		.cfi_offset 6, -8
 485              		.cfi_offset 14, -4
 486 0016 0546     		mov	r5, r0
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 487              		.loc 1 480 0
 488 0018 11F07F4F 		tst	r1, #-16777216
 489 001c 08D0     		beq	.L42
 490              	.LBB47:
 491              	.LBB48:
 492              		.loc 2 237 0
 493              		.syntax unified
 494              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 495 001e 4FF05003 			mov r3, #80												
 496 0022 83F31188 		msr basepri, r3											
 497 0026 BFF36F8F 		isb														
 498 002a BFF34F8F 		dsb														
 499              	
 500              	@ 0 "" 2
 501              	.LVL52:
 502              		.thumb
 503              		.syntax unified
 504              	.L43:
 505 002e FEE7     		b	.L43
 506              	.L42:
 507 0030 0C46     		mov	r4, r1
 508              	.LBE48:
 509              	.LBE47:
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 510              		.loc 1 482 0
 511 0032 FFF7FEFF 		bl	vPortEnterCritical
 512              	.LVL53:
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 513              		.loc 1 488 0
 514 0036 2E68     		ldr	r6, [r5]
 515              	.LVL54:
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 516              		.loc 1 491 0
 517 0038 26EA0401 		bic	r1, r6, r4
 518 003c 2960     		str	r1, [r5]
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 519              		.loc 1 493 0
 520 003e FFF7FEFF 		bl	vPortExitCritical
 521              	.LVL55:
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 522              		.loc 1 496 0
 523 0042 3046     		mov	r0, r6
 524 0044 70BD     		pop	{r4, r5, r6, pc}
 525              		.cfi_endproc
 526              	.LFE9:
 528 0046 00BF     		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 529              		.align	2
 530              		.global	xEventGroupGetBitsFromISR
 531              		.thumb
 532              		.thumb_func
 534              	xEventGroupGetBitsFromISR:
ARM GAS  /tmp/ccw9K7DZ.s 			page 28


 535              	.LFB10:
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 536              		.loc 1 515 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 541              	.LVL56:
 542              	.LBB49:
 543              	.LBB50:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 544              		.loc 2 253 0
 545              		.syntax unified
 546              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 547 0000 EFF31183 			mrs r3, basepri											
 548 0004 4FF05002 		mov r2, #80												
 549 0008 82F31188 		msr basepri, r2											
 550 000c BFF36F8F 		isb														
 551 0010 BFF34F8F 		dsb														
 552              	
 553              	@ 0 "" 2
 554              		.thumb
 555              		.syntax unified
 556              	.LBE50:
 557              	.LBE49:
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 558              		.loc 1 522 0
 559 0014 0068     		ldr	r0, [r0]
 560              	.LVL57:
 561              	.LBB51:
 562              	.LBB52:
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
ARM GAS  /tmp/ccw9K7DZ.s 			page 29


 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 563              		.loc 2 271 0
 564              		.syntax unified
 565              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 566 0016 83F31188 			msr basepri, r3	
 567              	@ 0 "" 2
 568              		.thumb
 569              		.syntax unified
 570              	.LBE52:
 571              	.LBE51:
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 572              		.loc 1 527 0
 573 001a 7047     		bx	lr
 574              		.cfi_endproc
 575              	.LFE10:
 577              		.section	.text.xEventGroupSetBits,"ax",%progbits
 578              		.align	2
 579              		.global	xEventGroupSetBits
 580              		.thumb
 581              		.thumb_func
 583              	xEventGroupSetBits:
 584              	.LFB11:
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 585              		.loc 1 531 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              	.LVL58:
 590 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 591              	.LCFI4:
 592              		.cfi_def_cfa_offset 24
 593              		.cfi_offset 3, -24
 594              		.cfi_offset 4, -20
 595              		.cfi_offset 5, -16
 596              		.cfi_offset 6, -12
 597              		.cfi_offset 7, -8
 598              		.cfi_offset 14, -4
 599              	.LVL59:
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 600              		.loc 1 541 0
 601 0002 40B9     		cbnz	r0, .L47
 602              	.LBB53:
 603              	.LBB54:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 604              		.loc 2 237 0
 605              		.syntax unified
 606              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 607 0004 4FF05003 			mov r3, #80												
 608 0008 83F31188 		msr basepri, r3											
 609 000c BFF36F8F 		isb														
 610 0010 BFF34F8F 		dsb														
ARM GAS  /tmp/ccw9K7DZ.s 			page 30


 611              	
 612              	@ 0 "" 2
 613              	.LVL60:
 614              		.thumb
 615              		.syntax unified
 616              	.L48:
 617 0014 FEE7     		b	.L48
 618              	.L47:
 619 0016 0446     		mov	r4, r0
 620              	.LBE54:
 621              	.LBE53:
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 622              		.loc 1 542 0
 623 0018 11F07F4F 		tst	r1, #-16777216
 624 001c 08D0     		beq	.L49
 625              	.LBB55:
 626              	.LBB56:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 627              		.loc 2 237 0
 628              		.syntax unified
 629              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 630 001e 4FF05003 			mov r3, #80												
 631 0022 83F31188 		msr basepri, r3											
 632 0026 BFF36F8F 		isb														
 633 002a BFF34F8F 		dsb														
 634              	
 635              	@ 0 "" 2
 636              	.LVL61:
 637              		.thumb
 638              		.syntax unified
 639              	.L50:
 640 002e FEE7     		b	.L50
 641              	.L49:
 642 0030 0D46     		mov	r5, r1
 643              	.LVL62:
 644              	.LBE56:
 645              	.LBE55:
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 646              		.loc 1 545 0
 647 0032 00F10C06 		add	r6, r0, #12
 648              	.LVL63:
 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 649              		.loc 1 546 0
 650 0036 FFF7FEFF 		bl	vTaskSuspendAll
 651              	.LVL64:
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 652              		.loc 1 550 0
 653 003a 2069     		ldr	r0, [r4, #16]
 654              	.LVL65:
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 655              		.loc 1 553 0
 656 003c 2168     		ldr	r1, [r4]
 657 003e 2943     		orrs	r1, r1, r5
 658 0040 2160     		str	r1, [r4]
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 659              		.loc 1 535 0
 660 0042 0025     		movs	r5, #0
ARM GAS  /tmp/ccw9K7DZ.s 			page 31


 661              	.LVL66:
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 662              		.loc 1 556 0
 663 0044 1FE0     		b	.L51
 664              	.LVL67:
 665              	.L56:
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 666              		.loc 1 558 0
 667 0046 4768     		ldr	r7, [r0, #4]
 668              	.LVL68:
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 669              		.loc 1 559 0
 670 0048 0168     		ldr	r1, [r0]
 671              	.LVL69:
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 672              		.loc 1 564 0
 673 004a 21F07F42 		bic	r2, r1, #-16777216
 674              	.LVL70:
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 675              		.loc 1 566 0
 676 004e 11F0806F 		tst	r1, #67108864
 677 0052 04D1     		bne	.L52
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 678              		.loc 1 569 0
 679 0054 2368     		ldr	r3, [r4]
 680 0056 1A42     		tst	r2, r3
 681 0058 07D1     		bne	.L57
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 682              		.loc 1 560 0
 683 005a 0023     		movs	r3, #0
 684 005c 08E0     		b	.L53
 685              	.L52:
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 686              		.loc 1 578 0
 687 005e 2368     		ldr	r3, [r4]
 688 0060 32EA0303 		bics	r3, r2, r3
 689 0064 03D0     		beq	.L58
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 690              		.loc 1 560 0
 691 0066 0023     		movs	r3, #0
 692 0068 02E0     		b	.L53
 693              	.L57:
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 694              		.loc 1 571 0
 695 006a 0123     		movs	r3, #1
 696 006c 00E0     		b	.L53
 697              	.L58:
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 698              		.loc 1 581 0
 699 006e 0123     		movs	r3, #1
 700              	.L53:
 701              	.LVL71:
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 702              		.loc 1 588 0
 703 0070 43B1     		cbz	r3, .L54
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 704              		.loc 1 591 0
ARM GAS  /tmp/ccw9K7DZ.s 			page 32


 705 0072 11F0807F 		tst	r1, #16777216
 706 0076 00D0     		beq	.L55
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 707              		.loc 1 593 0
 708 0078 1543     		orrs	r5, r5, r2
 709              	.LVL72:
 710              	.L55:
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 711              		.loc 1 605 0
 712 007a 2168     		ldr	r1, [r4]
 713              	.LVL73:
 714 007c 41F00071 		orr	r1, r1, #33554432
 715 0080 FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 716              	.LVL74:
 717              	.L54:
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 718              		.loc 1 560 0
 719 0084 3846     		mov	r0, r7
 720              	.LVL75:
 721              	.L51:
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 722              		.loc 1 556 0
 723 0086 B042     		cmp	r0, r6
 724 0088 DDD1     		bne	.L56
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 725              		.loc 1 616 0
 726 008a 2368     		ldr	r3, [r4]
 727 008c 23EA0503 		bic	r3, r3, r5
 728 0090 2360     		str	r3, [r4]
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 729              		.loc 1 618 0
 730 0092 FFF7FEFF 		bl	xTaskResumeAll
 731              	.LVL76:
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 732              		.loc 1 621 0
 733 0096 2068     		ldr	r0, [r4]
 734 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 735              		.cfi_endproc
 736              	.LFE11:
 738 009a 00BF     		.section	.text.xEventGroupSync,"ax",%progbits
 739              		.align	2
 740              		.global	xEventGroupSync
 741              		.thumb
 742              		.thumb_func
 744              	xEventGroupSync:
 745              	.LFB7:
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 746              		.loc 1 209 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              	.LVL77:
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 751              		.loc 1 215 0
 752 0000 12F07F4F 		tst	r2, #-16777216
 753 0004 08D0     		beq	.L61
 754              	.LBB57:
ARM GAS  /tmp/ccw9K7DZ.s 			page 33


 755              	.LBB58:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 756              		.loc 2 237 0
 757              		.syntax unified
 758              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 759 0006 4FF05003 			mov r3, #80												
 760 000a 83F31188 		msr basepri, r3											
 761 000e BFF36F8F 		isb														
 762 0012 BFF34F8F 		dsb														
 763              	
 764              	@ 0 "" 2
 765              	.LVL78:
 766              		.thumb
 767              		.syntax unified
 768              	.L62:
 769 0016 FEE7     		b	.L62
 770              	.LVL79:
 771              	.L61:
 772              	.LBE58:
 773              	.LBE57:
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 774              		.loc 1 209 0
 775 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 776              	.LCFI5:
 777              		.cfi_def_cfa_offset 24
 778              		.cfi_offset 4, -24
 779              		.cfi_offset 5, -20
 780              		.cfi_offset 6, -16
 781              		.cfi_offset 7, -12
 782              		.cfi_offset 8, -8
 783              		.cfi_offset 14, -4
 784 001c 0646     		mov	r6, r0
 785 001e 0C46     		mov	r4, r1
 786 0020 1546     		mov	r5, r2
 787 0022 1F46     		mov	r7, r3
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 788              		.loc 1 216 0
 789 0024 42B9     		cbnz	r2, .L63
 790              	.LBB59:
 791              	.LBB60:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 792              		.loc 2 237 0
 793              		.syntax unified
 794              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 795 0026 4FF05003 			mov r3, #80												
 796 002a 83F31188 		msr basepri, r3											
 797 002e BFF36F8F 		isb														
 798 0032 BFF34F8F 		dsb														
 799              	
 800              	@ 0 "" 2
 801              	.LVL80:
 802              		.thumb
 803              		.syntax unified
 804              	.L64:
 805 0036 FEE7     		b	.L64
 806              	.LVL81:
 807              	.L63:
ARM GAS  /tmp/ccw9K7DZ.s 			page 34


 808              	.LBE60:
 809              	.LBE59:
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 810              		.loc 1 219 0
 811 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 812              	.LVL82:
 813 003c 10B9     		cbnz	r0, .L75
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 814              		.loc 1 219 0 is_stmt 0 discriminator 2
 815 003e 1FB9     		cbnz	r7, .L76
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 816              		.loc 1 219 0
 817 0040 0123     		movs	r3, #1
 818 0042 02E0     		b	.L65
 819              	.L75:
 820 0044 0123     		movs	r3, #1
 821 0046 00E0     		b	.L65
 822              	.L76:
 823 0048 0023     		movs	r3, #0
 824              	.L65:
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 825              		.loc 1 219 0 discriminator 6
 826 004a 43B9     		cbnz	r3, .L66
 827              	.LBB61:
 828              	.LBB62:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 829              		.loc 2 237 0 is_stmt 1
 830              		.syntax unified
 831              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 832 004c 4FF05003 			mov r3, #80												
 833 0050 83F31188 		msr basepri, r3											
 834 0054 BFF36F8F 		isb														
 835 0058 BFF34F8F 		dsb														
 836              	
 837              	@ 0 "" 2
 838              	.LVL83:
 839              		.thumb
 840              		.syntax unified
 841              	.L67:
 842 005c FEE7     		b	.L67
 843              	.L66:
 844              	.LBE62:
 845              	.LBE61:
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 846              		.loc 1 223 0
 847 005e FFF7FEFF 		bl	vTaskSuspendAll
 848              	.LVL84:
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 849              		.loc 1 225 0
 850 0062 D6F80080 		ldr	r8, [r6]
 851              	.LVL85:
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 852              		.loc 1 227 0
 853 0066 2146     		mov	r1, r4
 854 0068 3046     		mov	r0, r6
 855 006a FFF7FEFF 		bl	xEventGroupSetBits
 856              	.LVL86:
ARM GAS  /tmp/ccw9K7DZ.s 			page 35


 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 857              		.loc 1 229 0
 858 006e 48EA0404 		orr	r4, r8, r4
 859              	.LVL87:
 860 0072 35EA0403 		bics	r3, r5, r4
 861 0076 05D1     		bne	.L68
 862              	.LVL88:
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 863              		.loc 1 236 0
 864 0078 3368     		ldr	r3, [r6]
 865 007a 23EA0503 		bic	r3, r3, r5
 866 007e 3360     		str	r3, [r6]
 867              	.LVL89:
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 868              		.loc 1 238 0
 869 0080 0027     		movs	r7, #0
 870 0082 09E0     		b	.L69
 871              	.LVL90:
 872              	.L68:
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 873              		.loc 1 242 0
 874 0084 3FB1     		cbz	r7, .L70
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 875              		.loc 1 249 0
 876 0086 3A46     		mov	r2, r7
 877 0088 45F0A061 		orr	r1, r5, #83886080
 878 008c 301D     		adds	r0, r6, #4
 879 008e FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 880              	.LVL91:
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 881              		.loc 1 255 0
 882 0092 0024     		movs	r4, #0
 883 0094 00E0     		b	.L69
 884              	.LVL92:
 885              	.L70:
 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 886              		.loc 1 261 0
 887 0096 3468     		ldr	r4, [r6]
 888              	.LVL93:
 889              	.L69:
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 890              		.loc 1 265 0
 891 0098 FFF7FEFF 		bl	xTaskResumeAll
 892              	.LVL94:
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 893              		.loc 1 267 0
 894 009c DFB1     		cbz	r7, .L71
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 895              		.loc 1 269 0
 896 009e 38B9     		cbnz	r0, .L72
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 897              		.loc 1 271 0
 898 00a0 4FF08052 		mov	r2, #268435456
 899 00a4 0D4B     		ldr	r3, .L78
 900 00a6 1A60     		str	r2, [r3]
 901              		.syntax unified
 902              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
ARM GAS  /tmp/ccw9K7DZ.s 			page 36


 903 00a8 BFF34F8F 		dsb
 904              	@ 0 "" 2
 905              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 906 00ac BFF36F8F 		isb
 907              	@ 0 "" 2
 908              		.thumb
 909              		.syntax unified
 910              	.L72:
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 911              		.loc 1 282 0
 912 00b0 FFF7FEFF 		bl	uxTaskResetEventItemValue
 913              	.LVL95:
 914 00b4 0446     		mov	r4, r0
 915              	.LVL96:
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 916              		.loc 1 284 0
 917 00b6 10F0007F 		tst	r0, #33554432
 918 00ba 0AD1     		bne	.L73
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 919              		.loc 1 287 0
 920 00bc FFF7FEFF 		bl	vPortEnterCritical
 921              	.LVL97:
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 922              		.loc 1 289 0
 923 00c0 3468     		ldr	r4, [r6]
 924              	.LVL98:
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 925              		.loc 1 295 0
 926 00c2 35EA0403 		bics	r3, r5, r4
 927 00c6 02D1     		bne	.L74
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 928              		.loc 1 297 0
 929 00c8 24EA0505 		bic	r5, r4, r5
 930              	.LVL99:
 931 00cc 3560     		str	r5, [r6]
 932              	.L74:
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 933              		.loc 1 304 0
 934 00ce FFF7FEFF 		bl	vPortExitCritical
 935              	.LVL100:
 936              	.L73:
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 937              		.loc 1 315 0
 938 00d2 24F07F44 		bic	r4, r4, #-16777216
 939              	.LVL101:
 940              	.L71:
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 941              		.loc 1 321 0
 942 00d6 2046     		mov	r0, r4
 943 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 944              	.LVL102:
 945              	.L79:
 946              		.align	2
 947              	.L78:
 948 00dc 04ED00E0 		.word	-536810236
 949              		.cfi_endproc
 950              	.LFE7:
ARM GAS  /tmp/ccw9K7DZ.s 			page 37


 952              		.section	.text.vEventGroupDelete,"ax",%progbits
 953              		.align	2
 954              		.global	vEventGroupDelete
 955              		.thumb
 956              		.thumb_func
 958              	vEventGroupDelete:
 959              	.LFB12:
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 960              		.loc 1 625 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              	.LVL103:
 965 0000 10B5     		push	{r4, lr}
 966              	.LCFI6:
 967              		.cfi_def_cfa_offset 8
 968              		.cfi_offset 4, -8
 969              		.cfi_offset 14, -4
 970 0002 0446     		mov	r4, r0
 971              	.LVL104:
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 972              		.loc 1 629 0
 973 0004 FFF7FEFF 		bl	vTaskSuspendAll
 974              	.LVL105:
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 975              		.loc 1 633 0
 976 0008 11E0     		b	.L81
 977              	.L84:
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 978              		.loc 1 637 0
 979 000a 2069     		ldr	r0, [r4, #16]
 980 000c 04F10C03 		add	r3, r4, #12
 981 0010 9842     		cmp	r0, r3
 982 0012 08D1     		bne	.L82
 983              	.LBB63:
 984              	.LBB64:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 985              		.loc 2 237 0
 986              		.syntax unified
 987              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 988 0014 4FF05003 			mov r3, #80												
 989 0018 83F31188 		msr basepri, r3											
 990 001c BFF36F8F 		isb														
 991 0020 BFF34F8F 		dsb														
 992              	
 993              	@ 0 "" 2
 994              	.LVL106:
 995              		.thumb
 996              		.syntax unified
 997              	.L83:
 998 0024 FEE7     		b	.L83
 999              	.L82:
 1000              	.LBE64:
 1001              	.LBE63:
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 1002              		.loc 1 638 0
 1003 0026 4FF00071 		mov	r1, #33554432
ARM GAS  /tmp/ccw9K7DZ.s 			page 38


 1004 002a FFF7FEFF 		bl	xTaskRemoveFromUnorderedEventList
 1005              	.LVL107:
 1006              	.L81:
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1007              		.loc 1 633 0
 1008 002e 6368     		ldr	r3, [r4, #4]
 1009 0030 002B     		cmp	r3, #0
 1010 0032 EAD1     		bne	.L84
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1011              		.loc 1 651 0
 1012 0034 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 1013 0036 13B9     		cbnz	r3, .L85
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 1014              		.loc 1 653 0
 1015 0038 2046     		mov	r0, r4
 1016 003a FFF7FEFF 		bl	vPortFree
 1017              	.LVL108:
 1018              	.L85:
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1019              		.loc 1 662 0
 1020 003e FFF7FEFF 		bl	xTaskResumeAll
 1021              	.LVL109:
 1022 0042 10BD     		pop	{r4, pc}
 1023              		.cfi_endproc
 1024              	.LFE12:
 1026              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1027              		.align	2
 1028              		.global	vEventGroupSetBitsCallback
 1029              		.thumb
 1030              		.thumb_func
 1032              	vEventGroupSetBitsCallback:
 1033              	.LFB13:
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 1034              		.loc 1 669 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038              	.LVL110:
 1039 0000 08B5     		push	{r3, lr}
 1040              	.LCFI7:
 1041              		.cfi_def_cfa_offset 8
 1042              		.cfi_offset 3, -8
 1043              		.cfi_offset 14, -4
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1044              		.loc 1 670 0
 1045 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1046              	.LVL111:
 1047 0006 08BD     		pop	{r3, pc}
 1048              		.cfi_endproc
 1049              	.LFE13:
 1051              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1052              		.align	2
 1053              		.global	vEventGroupClearBitsCallback
 1054              		.thumb
 1055              		.thumb_func
 1057              	vEventGroupClearBitsCallback:
 1058              	.LFB14:
ARM GAS  /tmp/ccw9K7DZ.s 			page 39


 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 1059              		.loc 1 677 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              	.LVL112:
 1064 0000 08B5     		push	{r3, lr}
 1065              	.LCFI8:
 1066              		.cfi_def_cfa_offset 8
 1067              		.cfi_offset 3, -8
 1068              		.cfi_offset 14, -4
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1069              		.loc 1 678 0
 1070 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1071              	.LVL113:
 1072 0006 08BD     		pop	{r3, pc}
 1073              		.cfi_endproc
 1074              	.LFE14:
 1076              		.text
 1077              	.Letext0:
 1078              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 1079              		.file 4 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1080              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1081              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1082              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 1083              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 1084              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccw9K7DZ.s 			page 40


DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
     /tmp/ccw9K7DZ.s:22     .text.prvTestWaitCondition:00000000 $t
     /tmp/ccw9K7DZ.s:26     .text.prvTestWaitCondition:00000000 prvTestWaitCondition
     /tmp/ccw9K7DZ.s:70     .text.xEventGroupCreateStatic:00000000 $t
     /tmp/ccw9K7DZ.s:75     .text.xEventGroupCreateStatic:00000000 xEventGroupCreateStatic
     /tmp/ccw9K7DZ.s:133    .text.xEventGroupCreate:00000000 $t
     /tmp/ccw9K7DZ.s:138    .text.xEventGroupCreate:00000000 xEventGroupCreate
     /tmp/ccw9K7DZ.s:175    .text.xEventGroupWaitBits:00000000 $t
     /tmp/ccw9K7DZ.s:180    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
     /tmp/ccw9K7DZ.s:440    .text.xEventGroupWaitBits:00000110 $d
     /tmp/ccw9K7DZ.s:445    .text.xEventGroupClearBits:00000000 $t
     /tmp/ccw9K7DZ.s:450    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
     /tmp/ccw9K7DZ.s:529    .text.xEventGroupGetBitsFromISR:00000000 $t
     /tmp/ccw9K7DZ.s:534    .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
     /tmp/ccw9K7DZ.s:578    .text.xEventGroupSetBits:00000000 $t
     /tmp/ccw9K7DZ.s:583    .text.xEventGroupSetBits:00000000 xEventGroupSetBits
     /tmp/ccw9K7DZ.s:739    .text.xEventGroupSync:00000000 $t
     /tmp/ccw9K7DZ.s:744    .text.xEventGroupSync:00000000 xEventGroupSync
     /tmp/ccw9K7DZ.s:948    .text.xEventGroupSync:000000dc $d
     /tmp/ccw9K7DZ.s:953    .text.vEventGroupDelete:00000000 $t
     /tmp/ccw9K7DZ.s:958    .text.vEventGroupDelete:00000000 vEventGroupDelete
     /tmp/ccw9K7DZ.s:1027   .text.vEventGroupSetBitsCallback:00000000 $t
     /tmp/ccw9K7DZ.s:1032   .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
     /tmp/ccw9K7DZ.s:1052   .text.vEventGroupClearBitsCallback:00000000 $t
     /tmp/ccw9K7DZ.s:1057   .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
xTaskRemoveFromUnorderedEventList
vPortFree
