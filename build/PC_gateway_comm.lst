ARM GAS  /tmp/cc2bndLQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"PC_gateway_comm.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.hex,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	hex:
  27              	.LFB130:
  28              		.file 1 "Ourwares/PC_gateway_comm.c"
   1:Ourwares/PC_gateway_comm.c **** /******************************************************************************
   2:Ourwares/PC_gateway_comm.c **** * File Name          : PC_gateway_comm.c
   3:Ourwares/PC_gateway_comm.c **** * Date First Issued  : 10/04/2013
   4:Ourwares/PC_gateway_comm.c **** * Board              : Not specific to PC or stm32
   5:Ourwares/PC_gateway_comm.c **** * Description        : PC<->gateway 
   6:Ourwares/PC_gateway_comm.c **** *******************************************************************************/
   7:Ourwares/PC_gateway_comm.c **** #include "PC_gateway_comm.h"
   8:Ourwares/PC_gateway_comm.c **** #include <stdio.h>
   9:Ourwares/PC_gateway_comm.c **** 
  10:Ourwares/PC_gateway_comm.c **** static void strwrd(u8* pout, u32 x);
  11:Ourwares/PC_gateway_comm.c **** 
  12:Ourwares/PC_gateway_comm.c **** /* Mostly for debugging, and hardware testing. */
  13:Ourwares/PC_gateway_comm.c **** static u32 PC_chksum_ct_err;	// Count checksum errors
  14:Ourwares/PC_gateway_comm.c **** static u32 PC_toofew_ct_err;	// Count msg frames with too few bytes
  15:Ourwares/PC_gateway_comm.c **** static u32 PC_oddeven_ct_err;	// Count odd/even errors on ascii/hex input
  16:Ourwares/PC_gateway_comm.c **** static u32 PC_toomany_ct_err;	// Count msg frames with too many bytes
  17:Ourwares/PC_gateway_comm.c **** 
  18:Ourwares/PC_gateway_comm.c **** 
  19:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
  20:Ourwares/PC_gateway_comm.c ****  * u8 CANgenchksum(u8* p, int ct);
  21:Ourwares/PC_gateway_comm.c ****  * @brief	: Generate a one byte checksum
  22:Ourwares/PC_gateway_comm.c ****  * @param	: p = pointer to array to be checksummed
  23:Ourwares/PC_gateway_comm.c ****  * @param	: ct = number of bytes to be checksummed
  24:Ourwares/PC_gateway_comm.c ****  * @return	: Checksum
  25:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
  26:Ourwares/PC_gateway_comm.c **** u8 CANgenchksum(u8* p, int ct)
  27:Ourwares/PC_gateway_comm.c **** {
  28:Ourwares/PC_gateway_comm.c **** 	int i = 0;
  29:Ourwares/PC_gateway_comm.c **** 	u32 x = CHECKSUM_INITIAL;
  30:Ourwares/PC_gateway_comm.c **** 	for (i = 0; i < ct; i++)
ARM GAS  /tmp/cc2bndLQ.s 			page 2


  31:Ourwares/PC_gateway_comm.c **** 		x += *p++;
  32:Ourwares/PC_gateway_comm.c **** 	x += (x >> 16);	// Add carries into high half word
  33:Ourwares/PC_gateway_comm.c **** 	x += (x >> 16);	// Add carry if previous add generated a carry
  34:Ourwares/PC_gateway_comm.c **** 	x += (x >> 8);  // Add high byte of low half word
  35:Ourwares/PC_gateway_comm.c **** 	x += (x >> 8);  // Add carry if previous add generated a carry
  36:Ourwares/PC_gateway_comm.c **** 	return (u8)x;
  37:Ourwares/PC_gateway_comm.c **** }
  38:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
  39:Ourwares/PC_gateway_comm.c ****  * static char* hex(char *p, u8 c)	// Convert 'c' to hex, placing in output *p.
  40:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
  41:Ourwares/PC_gateway_comm.c **** /* bin to ascii lookup table */
  42:Ourwares/PC_gateway_comm.c **** static const char h[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
  43:Ourwares/PC_gateway_comm.c **** static char* hex(char *p, u8 c)	// Convert 'c' to hex, placing in output *p.
  44:Ourwares/PC_gateway_comm.c **** {
  29              		.loc 1 44 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35 0000 10B4     		push	{r4}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 4, -4
  39              	.LVL1:
  45:Ourwares/PC_gateway_comm.c **** 		*p++ = h[((c >> 4) & 0x0f)];	// Hi order nibble
  40              		.loc 1 45 0
  41 0002 0B09     		lsrs	r3, r1, #4
  42 0004 064A     		ldr	r2, .L3
  43 0006 D45C     		ldrb	r4, [r2, r3]	@ zero_extendqisi2
  44 0008 0346     		mov	r3, r0
  45 000a 03F8024B 		strb	r4, [r3], #2
  46              	.LVL2:
  46:Ourwares/PC_gateway_comm.c **** 		*p++ = h[(c & 0x0f)];		// Lo order nibble
  47              		.loc 1 46 0
  48 000e 01F00F01 		and	r1, r1, #15
  49              	.LVL3:
  50 0012 525C     		ldrb	r2, [r2, r1]	@ zero_extendqisi2
  51 0014 4270     		strb	r2, [r0, #1]
  47:Ourwares/PC_gateway_comm.c **** 		return p;			// Return new output pointer position
  48:Ourwares/PC_gateway_comm.c **** }
  52              		.loc 1 48 0
  53 0016 1846     		mov	r0, r3
  54 0018 5DF8044B 		ldr	r4, [sp], #4
  55              	.LCFI1:
  56              		.cfi_restore 4
  57              		.cfi_def_cfa_offset 0
  58 001c 7047     		bx	lr
  59              	.L4:
  60 001e 00BF     		.align	2
  61              	.L3:
  62 0020 00000000 		.word	.LANCHOR0
  63              		.cfi_endproc
  64              	.LFE130:
  66              		.section	.text.strstuff,"ax",%progbits
  67              		.align	2
  68              		.thumb
ARM GAS  /tmp/cc2bndLQ.s 			page 3


  69              		.thumb_func
  71              	strstuff:
  72              	.LFB131:
  49:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
  50:Ourwares/PC_gateway_comm.c ****  * int PC_msg_get(struct PCTOGATEWAY* ptr, u8 c);
  51:Ourwares/PC_gateway_comm.c ****  * @brief	: Build message from incoming BINARY bytes.  Binary data including seq number goes
  52:Ourwares/PC_gateway_comm.c ****  *              : int ptr.cmprs struct.  ASCII data goes into ptr->asc[]
  53:Ourwares/PC_gateway_comm.c ****  * @param	: ptr = Pointer to msg buffer (see common_can.h)
  54:Ourwares/PC_gateway_comm.c ****  *		:  ptr->cmprs.cm[] = binary bytes (including seq number, but not checksum)
  55:Ourwares/PC_gateway_comm.c ****  *		:  ptr->cmprs.ct = count of binary bytes (including seq number, but not checksum)
  56:Ourwares/PC_gateway_comm.c ****  *		:  ptr->asc[] = ascii/hex bytes as received, including '\n' plus a '\0'
  57:Ourwares/PC_gateway_comm.c ****  *		:  ptr->ctasc = count of ascii chars = (2* binary ct + 1);
  58:Ourwares/PC_gateway_comm.c ****  * @param	: c = byte to add msg being built
  59:Ourwares/PC_gateway_comm.c ****  * @return	:  1 = completed; ptr->cmprs.ct holds byte count of binary data
  60:Ourwares/PC_gateway_comm.c ****  *              :  0 = msg not ready; 
  61:Ourwares/PC_gateway_comm.c ****  *              : -1 = completed, but bad checksum
  62:Ourwares/PC_gateway_comm.c ****  *  		: -2 = completed, but too few bytes to be a valid CAN msg
  63:Ourwares/PC_gateway_comm.c ****  *  		: -3 = completed, but too many bytes to be a valid CAN msg
  64:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
  65:Ourwares/PC_gateway_comm.c **** /* Note: It is up to the caller to have the struct initialized, initially and after the 
  66:Ourwares/PC_gateway_comm.c **** message has been "consumed."  When there are errors this routine re-initializes.  */
  67:Ourwares/PC_gateway_comm.c **** 
  68:Ourwares/PC_gateway_comm.c **** static void strstuff(struct PCTOGATEWAY* ptr, u8 c)
  69:Ourwares/PC_gateway_comm.c **** {
  73              		.loc 1 69 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              	.LVL4:
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI2:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83 0002 0446     		mov	r4, r0
  70:Ourwares/PC_gateway_comm.c **** 	*ptr->cmprs.p++ = c;			// Save binary byte in binary byte array
  84              		.loc 1 70 0
  85 0004 836D     		ldr	r3, [r0, #88]
  86 0006 5A1C     		adds	r2, r3, #1
  87 0008 8265     		str	r2, [r0, #88]
  88 000a 1970     		strb	r1, [r3]
  71:Ourwares/PC_gateway_comm.c **** 	if (ptr->cmprs.ct > 0)			// Skip storing ascii for sequence number
  89              		.loc 1 71 0
  90 000c B0F95C30 		ldrsh	r3, [r0, #92]
  91 0010 002B     		cmp	r3, #0
  92 0012 03DD     		ble	.L6
  72:Ourwares/PC_gateway_comm.c **** 		ptr->pasc = hex(ptr->pasc, c);	// Convert 'c' to hex and save in ascii array	
  93              		.loc 1 72 0
  94 0014 006B     		ldr	r0, [r0, #48]
  95              	.LVL5:
  96 0016 FFF7FEFF 		bl	hex
  97              	.LVL6:
  98 001a 2063     		str	r0, [r4, #48]
  99              	.L6:
  73:Ourwares/PC_gateway_comm.c **** 	ptr->cmprs.ct += 1;			// Binary byte count
 100              		.loc 1 73 0
 101 001c B4F85C30 		ldrh	r3, [r4, #92]
ARM GAS  /tmp/cc2bndLQ.s 			page 4


 102 0020 0133     		adds	r3, r3, #1
 103 0022 A4F85C30 		strh	r3, [r4, #92]	@ movhi
 104 0026 10BD     		pop	{r4, pc}
 105              		.cfi_endproc
 106              	.LFE131:
 108              		.section	.text.strwrd,"ax",%progbits
 109              		.align	2
 110              		.thumb
 111              		.thumb_func
 113              	strwrd:
 114              	.LFB139:
  74:Ourwares/PC_gateway_comm.c **** 	return;
  75:Ourwares/PC_gateway_comm.c **** }
  76:Ourwares/PC_gateway_comm.c **** 
  77:Ourwares/PC_gateway_comm.c **** int PC_msg_get(struct PCTOGATEWAY* ptr, u8 c)
  78:Ourwares/PC_gateway_comm.c **** {			
  79:Ourwares/PC_gateway_comm.c **** 	int i;
  80:Ourwares/PC_gateway_comm.c **** 
  81:Ourwares/PC_gateway_comm.c **** 	switch (c)
  82:Ourwares/PC_gateway_comm.c **** 	{
  83:Ourwares/PC_gateway_comm.c **** 	case CAN_PC_FRAMEBOUNDARY:	// Possible end of message
  84:Ourwares/PC_gateway_comm.c **** 		if (ptr->prev == CAN_PC_ESCAPE)
  85:Ourwares/PC_gateway_comm.c **** 		{ // Here, previous byte was an escape byte
  86:Ourwares/PC_gateway_comm.c **** 			strstuff(ptr, c); // Store binary, ascii, and count binary bytes
  87:Ourwares/PC_gateway_comm.c **** 		}
  88:Ourwares/PC_gateway_comm.c **** 		else
  89:Ourwares/PC_gateway_comm.c **** 		{ // Here, frame without preceding escape means End of Message
  90:Ourwares/PC_gateway_comm.c **** 			i = ptr->cmprs.p - &ptr->cmprs.cm[0] - 1; // Number of bytes received in this frame less chksum
  91:Ourwares/PC_gateway_comm.c **** 			ptr->cmprs.ct = i;	// Save for others
  92:Ourwares/PC_gateway_comm.c **** 			if (i < 3)		// Too few bytes to comprise a valid msg?
  93:Ourwares/PC_gateway_comm.c **** 			{ // Here yes. (min binary msg plus checksum = 3 bytes)
  94:Ourwares/PC_gateway_comm.c **** 				PC_msg_initg(ptr);	// Initialize struct for the next message
  95:Ourwares/PC_gateway_comm.c **** 				PC_toofew_ct_err += 1;	// Running count of this type of error.
  96:Ourwares/PC_gateway_comm.c **** 				return -2;	// Return error code.
  97:Ourwares/PC_gateway_comm.c **** 			}
  98:Ourwares/PC_gateway_comm.c **** 
  99:Ourwares/PC_gateway_comm.c **** 			if (i >= (PCTOGATEWAYSIZE/2) )	// Too many bytes to comprise a valid msg?
 100:Ourwares/PC_gateway_comm.c **** 			{ // Here yes.
 101:Ourwares/PC_gateway_comm.c **** 				PC_msg_initg(ptr);	// Initialize struct for the next message
 102:Ourwares/PC_gateway_comm.c **** 				PC_toomany_ct_err += 1;	// Running count of this type of error.
 103:Ourwares/PC_gateway_comm.c **** 				return -3;	// Return error code.
 104:Ourwares/PC_gateway_comm.c **** 			}
 105:Ourwares/PC_gateway_comm.c **** 
 106:Ourwares/PC_gateway_comm.c **** 			/* Check checksum. */	
 107:Ourwares/PC_gateway_comm.c **** 			if ( (CANgenchksum(&ptr->cmprs.cm[0], i)) == ptr->cmprs.cm[i])
 108:Ourwares/PC_gateway_comm.c **** 			{ // Here checksum good
 109:Ourwares/PC_gateway_comm.c **** /* If incoming, complete & valid, messages are to be buffered, this is where the index for the
 110:Ourwares/PC_gateway_comm.c ****   buffer array would be advanced. */
 111:Ourwares/PC_gateway_comm.c **** 				ptr->ctasc = (ptr->cmprs.ct * 2) + 1; // Compute byte ct for ascii array
 112:Ourwares/PC_gateway_comm.c **** 				*ptr->pasc = '\0';	// Zero string terminator JIC a bozo forgot msg ends with '\n'
 113:Ourwares/PC_gateway_comm.c **** 				ptr->seq = ptr->cmprs.cm[0];
 114:Ourwares/PC_gateway_comm.c **** 				return 1;		// $$$$ COMPLETE & SUCCESS $$$$
 115:Ourwares/PC_gateway_comm.c **** 			}
 116:Ourwares/PC_gateway_comm.c **** 			else
 117:Ourwares/PC_gateway_comm.c **** 			{ // Here, failed
 118:Ourwares/PC_gateway_comm.c **** 				PC_msg_initg(ptr);	// Initialize struct for the next message
 119:Ourwares/PC_gateway_comm.c **** 				PC_chksum_ct_err += 1;	// Running count of checksum errors
ARM GAS  /tmp/cc2bndLQ.s 			page 5


 120:Ourwares/PC_gateway_comm.c **** 				return -1;		// Return error code.
 121:Ourwares/PC_gateway_comm.c **** 			}
 122:Ourwares/PC_gateway_comm.c **** 		}			
 123:Ourwares/PC_gateway_comm.c **** 		break;
 124:Ourwares/PC_gateway_comm.c **** 
 125:Ourwares/PC_gateway_comm.c **** 	case CAN_PC_ESCAPE: // Possible escape data byte, or escape for next byte.
 126:Ourwares/PC_gateway_comm.c **** 		if (ptr->prev == CAN_PC_ESCAPE)
 127:Ourwares/PC_gateway_comm.c **** 		{
 128:Ourwares/PC_gateway_comm.c **** 			strstuff(ptr, c); // Store binary, ascii, and count binary bytes
 129:Ourwares/PC_gateway_comm.c **** 			c = ~CAN_PC_ESCAPE;		// Set "previous" to not an escape
 130:Ourwares/PC_gateway_comm.c **** 		}
 131:Ourwares/PC_gateway_comm.c **** 		break;
 132:Ourwares/PC_gateway_comm.c **** 
 133:Ourwares/PC_gateway_comm.c **** 	default: // All other bytes come here.
 134:Ourwares/PC_gateway_comm.c **** 			strstuff(ptr, c); // Store binary, ascii, and count binary bytes
 135:Ourwares/PC_gateway_comm.c **** 		break;
 136:Ourwares/PC_gateway_comm.c **** 	}
 137:Ourwares/PC_gateway_comm.c **** 	/* Prevent buffer overflow. */
 138:Ourwares/PC_gateway_comm.c **** 	if ( ptr->pasc >= (&ptr->asc[0] + PCTOGATEWAYSIZE - 3 ) ) ptr->pasc -= 2; // Hold at end with spac
 139:Ourwares/PC_gateway_comm.c **** 
 140:Ourwares/PC_gateway_comm.c **** 	ptr->prev = c;	// Save previous char for byte stuffing check.
 141:Ourwares/PC_gateway_comm.c **** 
 142:Ourwares/PC_gateway_comm.c **** 	return 0;	// Return: binary fram not complete
 143:Ourwares/PC_gateway_comm.c **** }
 144:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 145:Ourwares/PC_gateway_comm.c ****  * int PC_msg_getASCII(struct PCTOGATEWAY* ptr, u8 c);
 146:Ourwares/PC_gateway_comm.c ****  * @brief	: Build message from incoming ASCII/HEX bytes.  Binary data including seq number goes
 147:Ourwares/PC_gateway_comm.c ****  *              : int ptr.cmprs struct.  ASCII data goes into ptr->asc[]
 148:Ourwares/PC_gateway_comm.c ****  * @param	: ptr = Pointer to msg buffer (see common_can.h)
 149:Ourwares/PC_gateway_comm.c ****  *		:  ptr->cmprs.cm[] = binary bytes (including seq number, but not checksum)
 150:Ourwares/PC_gateway_comm.c ****  *		:  ptr->cmprs.ct = count of binary bytes (including seq number, but not checksum)
 151:Ourwares/PC_gateway_comm.c ****  *		:  ptr->cmprs.seq = 1 byte sequence number
 152:Ourwares/PC_gateway_comm.c ****  *		:  ptr->asc[] = ascii/hex bytes as received, including '\n' plus a '\0'
 153:Ourwares/PC_gateway_comm.c ****  *		:  ptr->ctasc = count of ascii chars = (2* binary ct + 1);
 154:Ourwares/PC_gateway_comm.c ****  *		:  ptr->seq = sequence number from 1st two chars
 155:Ourwares/PC_gateway_comm.c ****  * @param	: c = byte to add msg being built
 156:Ourwares/PC_gateway_comm.c ****  * @return	:  1 = completed; ptr->ct holds byte count
 157:Ourwares/PC_gateway_comm.c ****  *              :  0 = line not complete; 
 158:Ourwares/PC_gateway_comm.c ****  *              : -1 = completed, but bad checksum
 159:Ourwares/PC_gateway_comm.c ****  *  		: -2 = completed, but too few bytes to be a valid CAN msg
 160:Ourwares/PC_gateway_comm.c ****  *		: -3 = char count exceeds the max size for a max size CAN msg
 161:Ourwares/PC_gateway_comm.c ****  *		: -4 = not even number of hex incoming bytes (less newline)
 162:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 163:Ourwares/PC_gateway_comm.c **** /*  Format of line returned in ptr->c[]:
 164:Ourwares/PC_gateway_comm.c **** incoming ascii expects is--
 165:Ourwares/PC_gateway_comm.c **** 	seq,asciihex...,checksum, newline
 166:Ourwares/PC_gateway_comm.c **** (seq = one byte sequence number converted to ascii/hex)
 167:Ourwares/PC_gateway_comm.c **** (note: checksum is on the *binary* not ascii data):~/GliderWinch/sensor/gateway_ftdi/trunk
 168:Ourwares/PC_gateway_comm.c **** and converts to binary data returned in--
 169:Ourwares/PC_gateway_comm.c **** 	ptr->c[]
 170:Ourwares/PC_gateway_comm.c **** where--
 171:Ourwares/PC_gateway_comm.c **** 	ptr->ct = count of binary bytes of data.
 172:Ourwares/PC_gateway_comm.c **** */
 173:Ourwares/PC_gateway_comm.c **** 
 174:Ourwares/PC_gateway_comm.c **** /* Lookup table to convert one hex char to binary (4 bits), no checking for illegal incoming hex */
 175:Ourwares/PC_gateway_comm.c **** const u8 hxbn[256] = {
 176:Ourwares/PC_gateway_comm.c **** /*          0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15   */
ARM GAS  /tmp/cc2bndLQ.s 			page 6


 177:Ourwares/PC_gateway_comm.c **** /*  0  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 178:Ourwares/PC_gateway_comm.c **** /*  1  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 179:Ourwares/PC_gateway_comm.c **** /*  2  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 180:Ourwares/PC_gateway_comm.c **** /*  3  */   0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  0,  0,  0,  0,  0,
 181:Ourwares/PC_gateway_comm.c **** /*  4  */   0, 10, 11, 12, 13, 14, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 182:Ourwares/PC_gateway_comm.c **** /*  5  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 183:Ourwares/PC_gateway_comm.c **** /*  6  */   0, 10, 11, 12, 13, 14, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 184:Ourwares/PC_gateway_comm.c **** /*  7  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 185:Ourwares/PC_gateway_comm.c **** /*  8  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 186:Ourwares/PC_gateway_comm.c **** /*  9  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 187:Ourwares/PC_gateway_comm.c **** /* 10  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 188:Ourwares/PC_gateway_comm.c **** /* 11  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 189:Ourwares/PC_gateway_comm.c **** /* 12  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 190:Ourwares/PC_gateway_comm.c **** /* 13  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 191:Ourwares/PC_gateway_comm.c **** /* 14  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 192:Ourwares/PC_gateway_comm.c **** /* 15  */   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
 193:Ourwares/PC_gateway_comm.c **** };
 194:Ourwares/PC_gateway_comm.c ****  
 195:Ourwares/PC_gateway_comm.c **** //u8 unhex(char* p)
 196:Ourwares/PC_gateway_comm.c **** //{
 197:Ourwares/PC_gateway_comm.c **** //	u8 x = hxbn[(u8)(*p++)] << 4;// Get hi nibble of byte
 198:Ourwares/PC_gateway_comm.c **** //	x |= hxbn[(u8)(*p)];		// Or in low nibble
 199:Ourwares/PC_gateway_comm.c **** //	return x;
 200:Ourwares/PC_gateway_comm.c **** //}
 201:Ourwares/PC_gateway_comm.c **** int debugR;
 202:Ourwares/PC_gateway_comm.c **** 
 203:Ourwares/PC_gateway_comm.c **** /* Note: It is up to the caller to have the struct initialized, initially and after the 
 204:Ourwares/PC_gateway_comm.c **** message has been "consumed."  When there are errors this routine re-initializes.  */
 205:Ourwares/PC_gateway_comm.c **** int PC_msg_getASCII(struct PCTOGATEWAY* ptr, u8 c)
 206:Ourwares/PC_gateway_comm.c **** {			
 207:Ourwares/PC_gateway_comm.c **** 	u8 x;
 208:Ourwares/PC_gateway_comm.c **** u8 zz;
 209:Ourwares/PC_gateway_comm.c **** 
 210:Ourwares/PC_gateway_comm.c **** //printf("%c",c);
 211:Ourwares/PC_gateway_comm.c **** //debugR += 1;
 212:Ourwares/PC_gateway_comm.c **** 	
 213:Ourwares/PC_gateway_comm.c **** 
 214:Ourwares/PC_gateway_comm.c **** 	/* End of msg check */
 215:Ourwares/PC_gateway_comm.c **** 	if (c == '\n')
 216:Ourwares/PC_gateway_comm.c **** 	{ // Newline ends the message
 217:Ourwares/PC_gateway_comm.c **** 
 218:Ourwares/PC_gateway_comm.c **** //int w;
 219:Ourwares/PC_gateway_comm.c **** //int i = ((ptr->ctasc - 0) >> 1);
 220:Ourwares/PC_gateway_comm.c **** //xprintf (6,"in ct: %i debugR: %i ctasc: %i \n",i, debugR, ptr->ctasc);
 221:Ourwares/PC_gateway_comm.c **** //for (w = 0; w < i; w++)
 222:Ourwares/PC_gateway_comm.c **** //xprintf(6,"%02x ",ptr->cmprs.cm[w]);
 223:Ourwares/PC_gateway_comm.c **** //xprintf(6,"\n\r");
 224:Ourwares/PC_gateway_comm.c **** //debugR = 0;
 225:Ourwares/PC_gateway_comm.c **** 		*ptr->pasc++ = c;	// Store '\n'
 226:Ourwares/PC_gateway_comm.c **** 		ptr->ctasc -= 2; // Adjust for not storing seq number bytes, but added '\n'
 227:Ourwares/PC_gateway_comm.c **** 
 228:Ourwares/PC_gateway_comm.c **** 		ptr->seq = ptr->cmprs.cm[0];		// First binary byte is the sequence number
 229:Ourwares/PC_gateway_comm.c **** 		ptr->cmprs.seq = ptr->cmprs.cm[0];	// Save for binary folk
 230:Ourwares/PC_gateway_comm.c **** 
 231:Ourwares/PC_gateway_comm.c **** 		/* Check count for even pairing of hex char pairs */
 232:Ourwares/PC_gateway_comm.c **** 		if ((ptr->ctasc & 0x1) != 0) // Should be odd at this point
 233:Ourwares/PC_gateway_comm.c **** 		{ // Here, not an even pairing for the binary bytes
ARM GAS  /tmp/cc2bndLQ.s 			page 7


 234:Ourwares/PC_gateway_comm.c **** 			PC_msg_initg(ptr);	// Initialize struct for the next message
 235:Ourwares/PC_gateway_comm.c **** 			PC_oddeven_ct_err += 1;	// Running count of this type of error.
 236:Ourwares/PC_gateway_comm.c **** 			return -4;	// Return error code.		{	
 237:Ourwares/PC_gateway_comm.c **** 		}
 238:Ourwares/PC_gateway_comm.c **** 
 239:Ourwares/PC_gateway_comm.c **** 		if (ptr->ctasc < 5)		// Too few incoming bytes to comprise a valid anything?
 240:Ourwares/PC_gateway_comm.c **** 		{ // Here yes.
 241:Ourwares/PC_gateway_comm.c **** 			PC_msg_initg(ptr);	// Initialize struct for the next message
 242:Ourwares/PC_gateway_comm.c **** 			PC_toofew_ct_err += 1;	// Running count of this type of error.
 243:Ourwares/PC_gateway_comm.c **** 			return -2;	// Return error code.
 244:Ourwares/PC_gateway_comm.c **** 		}
 245:Ourwares/PC_gateway_comm.c **** 
 246:Ourwares/PC_gateway_comm.c **** 		/* Binary byte count is the ascii ct divided by 2, less checksum */
 247:Ourwares/PC_gateway_comm.c **** 		ptr->cmprs.ct = (ptr->ctasc >> 1);	// Number of binary bytes of msg data
 248:Ourwares/PC_gateway_comm.c **** 					
 249:Ourwares/PC_gateway_comm.c **** 		/* Check checksum. */	
 250:Ourwares/PC_gateway_comm.c **** 		x = ptr->cmprs.cm[ptr->cmprs.ct];	// Checksum received
 251:Ourwares/PC_gateway_comm.c **** 		zz=CANgenchksum(&ptr->cmprs.cm[0], (ptr->cmprs.ct));	// Checksum computed
 252:Ourwares/PC_gateway_comm.c **** //xprintf(6," CHKRCV %02x CMP %02x\n\r",x,zz);
 253:Ourwares/PC_gateway_comm.c **** 
 254:Ourwares/PC_gateway_comm.c **** 		/* Compute checksum and compare. */
 255:Ourwares/PC_gateway_comm.c **** 		if (zz  == x)
 256:Ourwares/PC_gateway_comm.c **** 		{ // Here checksum good
 257:Ourwares/PC_gateway_comm.c **** 				return 1;	// $$$$ COMPLETE & SUCCESS $$$$
 258:Ourwares/PC_gateway_comm.c **** 		}
 259:Ourwares/PC_gateway_comm.c **** 		else
 260:Ourwares/PC_gateway_comm.c **** 		{ // Here, failed
 261:Ourwares/PC_gateway_comm.c **** //static u8 xx;:~/GliderWinch/sensor/gateway_ftdi/trunk
 262:Ourwares/PC_gateway_comm.c **** //xx = CANgenchksum(&ptr->cmprs.cm[0],ptr->cmprs.ct);
 263:Ourwares/PC_gateway_comm.c **** //printf("CHKSM: %02x %02x %02x  ptr->cmprs.ct: %i ptr->ctasc: %i\n",x,xx,zz,ptr->cmprs.ct, ptr->ct
 264:Ourwares/PC_gateway_comm.c **** //int j;
 265:Ourwares/PC_gateway_comm.c **** //for (j = 0; j < ptr->cmprs.ct+2; j++)
 266:Ourwares/PC_gateway_comm.c **** //  printf("%02x",ptr->cmprs.cm[j]);
 267:Ourwares/PC_gateway_comm.c **** //printf("\n");
 268:Ourwares/PC_gateway_comm.c **** 			PC_msg_initg(ptr);	// Initialize struct for the next message
 269:Ourwares/PC_gateway_comm.c **** 			PC_chksum_ct_err += 1;	// Running count of checksum errors
 270:Ourwares/PC_gateway_comm.c **** 			return -1;	// Return error code.
 271:Ourwares/PC_gateway_comm.c **** 		}
 272:Ourwares/PC_gateway_comm.c **** 	}
 273:Ourwares/PC_gateway_comm.c **** 	if ( (ptr->ctasc & 0x1) == 0) // Even?
 274:Ourwares/PC_gateway_comm.c **** 	{ // Here yes.  Even chars -> hi ord nibble of byte
 275:Ourwares/PC_gateway_comm.c **** 		*ptr->cmprs.p = (hxbn[c] << 4); // Convert hex char to bin 4 bit
 276:Ourwares/PC_gateway_comm.c **** 	}
 277:Ourwares/PC_gateway_comm.c **** 	else
 278:Ourwares/PC_gateway_comm.c **** 	{ // Here, Odd chars -> low ord nibble of byte
 279:Ourwares/PC_gateway_comm.c **** 		*ptr->cmprs.p++ |= hxbn[c];	// Add nibble.  Byte complete.  Advance pointer.
 280:Ourwares/PC_gateway_comm.c **** 	}
 281:Ourwares/PC_gateway_comm.c **** 
 282:Ourwares/PC_gateway_comm.c **** 	/* Copy incoming chars into asc buffer. */
 283:Ourwares/PC_gateway_comm.c **** 	*ptr->pasc++ = c; 	// Store incoming chars char array (for those who want raw ascii lines)
 284:Ourwares/PC_gateway_comm.c **** 	ptr->ctasc += 1;	// Count incoming chars
 285:Ourwares/PC_gateway_comm.c **** 
 286:Ourwares/PC_gateway_comm.c **** 	/* Max length check */
 287:Ourwares/PC_gateway_comm.c **** 	if (ptr->ctasc > 37) 
 288:Ourwares/PC_gateway_comm.c **** 	{ // Here incoming chars exceed the max number for a max size CAN msg
 289:Ourwares/PC_gateway_comm.c **** 		PC_msg_initg(ptr);	// Initialize struct for the next message
 290:Ourwares/PC_gateway_comm.c **** 		return -3;		// Return an error code
ARM GAS  /tmp/cc2bndLQ.s 			page 8


 291:Ourwares/PC_gateway_comm.c **** 	}
 292:Ourwares/PC_gateway_comm.c **** 
 293:Ourwares/PC_gateway_comm.c **** 	return 0;
 294:Ourwares/PC_gateway_comm.c **** }
 295:Ourwares/PC_gateway_comm.c **** 
 296:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 297:Ourwares/PC_gateway_comm.c ****  * void PC_msg_initg(struct PCTOGATEWAY* p);
 298:Ourwares/PC_gateway_comm.c ****  * @brief	: Initialize struct for building a gateway message from the PC
 299:Ourwares/PC_gateway_comm.c ****  * @param	: Pointer to gateway message wrapper (see common_can.h)
 300:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 301:Ourwares/PC_gateway_comm.c **** void PC_msg_initg(struct PCTOGATEWAY* p)
 302:Ourwares/PC_gateway_comm.c **** {
 303:Ourwares/PC_gateway_comm.c **** 	p->pasc = &p->asc[0];		// Pointer that will store incoming ascii chars
 304:Ourwares/PC_gateway_comm.c **** 	p->cmprs.p = &p->cmprs.cm[0];	// Pointer that will store incoming binary bytes
 305:Ourwares/PC_gateway_comm.c **** 	p->ctasc = 0;			// Byte counter
 306:Ourwares/PC_gateway_comm.c **** 	p->ct = 0;			// Byte counter
 307:Ourwares/PC_gateway_comm.c **** 	p->cmprs.ct = 0;		// Byte counter
 308:Ourwares/PC_gateway_comm.c **** 	p->chk = CHECKSUM_INITIAL;	// Checksum initial value
 309:Ourwares/PC_gateway_comm.c **** 	p->prev = ~CAN_PC_ESCAPE;	// Begin with received byte not an escape.
 310:Ourwares/PC_gateway_comm.c **** 	return;
 311:Ourwares/PC_gateway_comm.c **** }
 312:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 313:Ourwares/PC_gateway_comm.c ****  * int CAN_id_valid(u32 id);
 314:Ourwares/PC_gateway_comm.c ****  * @brief	: Check if CAN id (32b) holds a valid CAN bus id
 315:Ourwares/PC_gateway_comm.c ****  * @param	: id = CAN id
 316:Ourwares/PC_gateway_comm.c ****  * @return	:  1 = 29 bit is OK
 317:Ourwares/PC_gateway_comm.c ****  *		:  0 = 11 bit is OK
 318:Ourwares/PC_gateway_comm.c ****  *		: -1 = faux CAN msg id bit 0 on
 319:Ourwares/PC_gateway_comm.c ****  *              : -2 = faux CAN msg id: 11 bit id, but stray bits in remaining 18 bits
 320:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 321:Ourwares/PC_gateway_comm.c **** int CAN_id_valid(u32 id)
 322:Ourwares/PC_gateway_comm.c **** {
 323:Ourwares/PC_gateway_comm.c **** 	if ( (id & 0x1) != 0 ) return -1; // faux ID
 324:Ourwares/PC_gateway_comm.c **** 	if ( (id & 0x4) == 0 ) // Check IDE (extended id bit)
 325:Ourwares/PC_gateway_comm.c **** 	{ // Here, an 11 bit address is specified
 326:Ourwares/PC_gateway_comm.c **** 		if ((id & 0x001ffff8) != 0) return -2; // 11 bit id with stray bits in extended field
 327:Ourwares/PC_gateway_comm.c **** 		return 0; // Here, 11b is OK.
 328:Ourwares/PC_gateway_comm.c **** 	}
 329:Ourwares/PC_gateway_comm.c **** 	return 1;	// Here 29 bit is OK.
 330:Ourwares/PC_gateway_comm.c **** }
 331:Ourwares/PC_gateway_comm.c **** 
 332:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 333:Ourwares/PC_gateway_comm.c ****  * int PC_msg_asctobin(struct struct CANRCVBUF* pbin, struct PCTOGATEWAY* ptr, char* pin);
 334:Ourwares/PC_gateway_comm.c ****  * @brief	: Convert an ascii/hex msg (no seq or chksum) to binary CAN struct format
 335:Ourwares/PC_gateway_comm.c ****  * @param	: pbin = pointer to output binary CAN msg
 336:Ourwares/PC_gateway_comm.c ****  * @param	: ptr = pointer to intermediate binary array
 337:Ourwares/PC_gateway_comm.c ****  * @param	: pin = pointer to ascii/hex input line 
 338:Ourwares/PC_gateway_comm.c ****  * @param	: Pointer to gateway message wrapper (see common_can.h)
 339:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 340:Ourwares/PC_gateway_comm.c **** /* Format expected from input--
 341:Ourwares/PC_gateway_comm.c **** iiiiiiiicc1122334455667788\n
 342:Ourwares/PC_gateway_comm.c **** Where (binary):
 343:Ourwares/PC_gateway_comm.c **** iiiiiiiii -> u32 with id
 344:Ourwares/PC_gateway_comm.c **** cc -> payload byte ct (0 - 8)
 345:Ourwares/PC_gateway_comm.c **** 11... -> payload bytes (0 - 8)
 346:Ourwares/PC_gateway_comm.c **** \n is the line terminator of the ascii input
 347:Ourwares/PC_gateway_comm.c **** */
ARM GAS  /tmp/cc2bndLQ.s 			page 9


 348:Ourwares/PC_gateway_comm.c **** int PC_msg_asctobin(struct PCTOGATEWAY* ptr, char* pin)
 349:Ourwares/PC_gateway_comm.c **** {
 350:Ourwares/PC_gateway_comm.c **** 	int ct = 0;
 351:Ourwares/PC_gateway_comm.c **** 	u8 x;
 352:Ourwares/PC_gateway_comm.c **** 	u32 id;
 353:Ourwares/PC_gateway_comm.c **** 
 354:Ourwares/PC_gateway_comm.c **** 	u8* pcmprs = &ptr->cmprs.cm[0];
 355:Ourwares/PC_gateway_comm.c **** 	PC_msg_initg(ptr);	// Reset pointers
 356:Ourwares/PC_gateway_comm.c **** 
 357:Ourwares/PC_gateway_comm.c **** 	
 358:Ourwares/PC_gateway_comm.c **** 	while  ( (!((*pin == 0) || (*pin == '\n'))) && (ct < PCTOGATEWAYSIZE)  )
 359:Ourwares/PC_gateway_comm.c **** 	{
 360:Ourwares/PC_gateway_comm.c **** 		if ( (ct & 0x1) == 0) // Even?
 361:Ourwares/PC_gateway_comm.c **** 		{ // Here yes.  Even chars -> hi ord nibble of byte
 362:Ourwares/PC_gateway_comm.c **** 			*pcmprs = (hxbn[(u8)(*pin)] << 4);
 363:Ourwares/PC_gateway_comm.c **** 		}
 364:Ourwares/PC_gateway_comm.c **** 		else
 365:Ourwares/PC_gateway_comm.c **** 		{ // Here, Odd chars -> low ord nibble of byte
 366:Ourwares/PC_gateway_comm.c **** 			*pcmprs++ |= hxbn[(u8)(*pin)];	// Add nibble.  Byte complete.  Advance pointer.
 367:Ourwares/PC_gateway_comm.c **** 		}
 368:Ourwares/PC_gateway_comm.c **** 		pin ++; ct +=1;
 369:Ourwares/PC_gateway_comm.c **** 	}
 370:Ourwares/PC_gateway_comm.c **** 	if (ct >= PCTOGATEWAYSIZE)	return -5; // Error: run-away (no terminator)
 371:Ourwares/PC_gateway_comm.c **** 
 372:Ourwares/PC_gateway_comm.c **** 	/* Compute size of resulting binary msg. */
 373:Ourwares/PC_gateway_comm.c **** 	ptr->cmprs.ct = (pcmprs - &ptr->cmprs.cm[0]);
 374:Ourwares/PC_gateway_comm.c **** 
 375:Ourwares/PC_gateway_comm.c **** 	/* Validity check */
 376:Ourwares/PC_gateway_comm.c **** 	x = (u8)(ptr->cmprs.cm[4]);		// Should be the dlc
 377:Ourwares/PC_gateway_comm.c **** 	if ( x > 8 ) return -1;		// Return: too many bytes for payload count
 378:Ourwares/PC_gateway_comm.c **** 
 379:Ourwares/PC_gateway_comm.c **** 	if (ptr->cmprs.ct != (x + 5)) return -2; // Size inconsistent with dlc count
 380:Ourwares/PC_gateway_comm.c **** 	id = (u32)(ptr->cmprs.cm[0]);		// Get ID in binary word form
 381:Ourwares/PC_gateway_comm.c **** 	if (CAN_id_valid(id) != 0) return -3;	// Bits in extended field, but 11 bit id specified
 382:Ourwares/PC_gateway_comm.c **** 	
 383:Ourwares/PC_gateway_comm.c **** 	return 0;
 384:Ourwares/PC_gateway_comm.c **** }
 385:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 386:Ourwares/PC_gateway_comm.c ****  * int PC_msg_prep(u8* pout, int outsize, u8* pin, int ct);
 387:Ourwares/PC_gateway_comm.c ****  * @brief	: Convert input bytes into output with byte stuffing, checksum and framing
 388:Ourwares/PC_gateway_comm.c ****  * @param	: pout = pointer to bytes with stuffing and chksum added 
 389:Ourwares/PC_gateway_comm.c ****  * @param	: outsize = size of output buffer (to prevent overflow if too small)
 390:Ourwares/PC_gateway_comm.c ****  * @param	: pin = Pointer to bytes to send
 391:Ourwares/PC_gateway_comm.c ****  * @param	: ct = byte count to send (does not include frame bytes, chksum, or stuffing bytes)
 392:Ourwares/PC_gateway_comm.c ****  * @return	: number of bytes in prep'd message
 393:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 394:Ourwares/PC_gateway_comm.c **** /*
 395:Ourwares/PC_gateway_comm.c **** Note, in the very worst-case the output may be over (2*ct+3) the size of the input.
 396:Ourwares/PC_gateway_comm.c **** */
 397:Ourwares/PC_gateway_comm.c **** int PC_msg_prep(u8* pout, int outsize, u8* pin, int ct)
 398:Ourwares/PC_gateway_comm.c **** {
 399:Ourwares/PC_gateway_comm.c **** 	u8 *p1 = pin;	// Redundant?
 400:Ourwares/PC_gateway_comm.c **** 	u8 *p2 = pout;	// Working pointer
 401:Ourwares/PC_gateway_comm.c **** 	u8 *p2e = pout + outsize; // End of output buffer pointer
 402:Ourwares/PC_gateway_comm.c **** 	u8 chk;		// Checksum computed on input bytes
 403:Ourwares/PC_gateway_comm.c **** 	int i;
 404:Ourwares/PC_gateway_comm.c **** 
ARM GAS  /tmp/cc2bndLQ.s 			page 10


 405:Ourwares/PC_gateway_comm.c **** 	/* Compute chksum on input message. */
 406:Ourwares/PC_gateway_comm.c **** 	chk = CANgenchksum(pin, ct);
 407:Ourwares/PC_gateway_comm.c **** 	
 408:Ourwares/PC_gateway_comm.c **** 	/* Set up CAN msg with byte stuffing in output buffer. */
 409:Ourwares/PC_gateway_comm.c **** 	for (i = 0; i < ct; i++)
 410:Ourwares/PC_gateway_comm.c **** 	{
 411:Ourwares/PC_gateway_comm.c **** 		if ((*p1 == CAN_PC_FRAMEBOUNDARY) || (*p1 == CAN_PC_ESCAPE) )
 412:Ourwares/PC_gateway_comm.c **** 		{
 413:Ourwares/PC_gateway_comm.c **** 			*p2++ = (CAN_PC_ESCAPE); // Precede the following char with an escape byte
 414:Ourwares/PC_gateway_comm.c **** 			if (p2 >= p2e) p2--;  // Prevent some bozo from overrunning the buffer.
 415:Ourwares/PC_gateway_comm.c **** 		}
 416:Ourwares/PC_gateway_comm.c **** 		*p2++ = *p1++;		// Place the real byte with precision.
 417:Ourwares/PC_gateway_comm.c **** 		if (p2 >= p2e) p2 -= 1; // Prevent buffer overflow by a thoughtless scoundrel.
 418:Ourwares/PC_gateway_comm.c **** 	}
 419:Ourwares/PC_gateway_comm.c **** 
 420:Ourwares/PC_gateway_comm.c **** 	/* Set up chksum byte stuffing in output buffer. */
 421:Ourwares/PC_gateway_comm.c **** 	if ((chk == CAN_PC_FRAMEBOUNDARY) || (chk == CAN_PC_ESCAPE) )
 422:Ourwares/PC_gateway_comm.c **** 	{
 423:Ourwares/PC_gateway_comm.c **** 		*p2++ = (CAN_PC_ESCAPE); // Precede following char with escape
 424:Ourwares/PC_gateway_comm.c **** 		if (p2 >= p2e) p2--;  	// Prevent some jerk from jamming too many bytes.
 425:Ourwares/PC_gateway_comm.c **** 	}
 426:Ourwares/PC_gateway_comm.c **** 	*p2++ = chk;			// Quietly place the checksum.
 427:Ourwares/PC_gateway_comm.c **** 	if (p2 >= p2e) p2--; 		// Prevent buffer overflow by some nefarious nerd.
 428:Ourwares/PC_gateway_comm.c **** 
 429:Ourwares/PC_gateway_comm.c **** 	*p2++ = (CAN_PC_FRAMEBOUNDARY);	// Set up End of Frame byte
 430:Ourwares/PC_gateway_comm.c **** 
 431:Ourwares/PC_gateway_comm.c **** 	return (p2 - pout);		// Return number of bytes in output
 432:Ourwares/PC_gateway_comm.c **** }
 433:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 434:Ourwares/PC_gateway_comm.c ****  * int PC_msg_prepASCII(struct SERIALSENDTASKBCB** ppbcb, struct PCTOGATECOMPRESSED* p);
 435:Ourwares/PC_gateway_comm.c ****  * @brief	: Convert input binary bytes to ascii/hex output lines
 436:Ourwares/PC_gateway_comm.c ****  * @param	: ppbcb = pointer to pointer to control block w buffer
 437:Ourwares/PC_gateway_comm.c ****  * @param	: p = Pointer to struct with "stuff" used in conversions
 438:Ourwares/PC_gateway_comm.c ****  * @return	: number of bytes in message queued
 439:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 440:Ourwares/PC_gateway_comm.c **** /*  Outgoing line format
 441:Ourwares/PC_gateway_comm.c **** SS1122....CC'\n' (all ascii except newline)
 442:Ourwares/PC_gateway_comm.c **** Where: SS = one byte sequence number
 443:Ourwares/PC_gateway_comm.c **** 11 = 1st byte, 22 = 2nd byte, (ascii/hex)
 444:Ourwares/PC_gateway_comm.c **** CC = checksum byte (ascii/hex) (checksum is made on binary data, including sequence number byte)
 445:Ourwares/PC_gateway_comm.c **** */
 446:Ourwares/PC_gateway_comm.c **** 
 447:Ourwares/PC_gateway_comm.c **** //int PC_msg_prepASCII(char* pout, int outsize, struct PCTOGATECOMPRESSED* p)
 448:Ourwares/PC_gateway_comm.c **** int PC_msg_prepASCII(struct SERIALSENDTASKBCB** ppbcb, struct PCTOGATECOMPRESSED* p)
 449:Ourwares/PC_gateway_comm.c **** {
 450:Ourwares/PC_gateway_comm.c **** 	struct SERIALSENDTASKBCB* pbcb = *ppbcb;
 451:Ourwares/PC_gateway_comm.c **** 
 452:Ourwares/PC_gateway_comm.c **** 	/* Block if this buffer is not available. */
 453:Ourwares/PC_gateway_comm.c **** 	xSemaphoreTake(pbcb->semaphore, 0);
 454:Ourwares/PC_gateway_comm.c **** 
 455:Ourwares/PC_gateway_comm.c **** 	char* pout = (char*)pbcb->pbuf;	// Output buffer pointer
 456:Ourwares/PC_gateway_comm.c **** 
 457:Ourwares/PC_gateway_comm.c **** 	u8* pin = &p->cm[0];	// Pointer to CAN binary msg
 458:Ourwares/PC_gateway_comm.c **** 	char *p2 = pout;	// Working pointer
 459:Ourwares/PC_gateway_comm.c **** 	char *p2e = pout + pbcb->maxsize - 4; // End of output buffer pointer (less checksum and newline)
 460:Ourwares/PC_gateway_comm.c **** 	u8 chk;			// Checksum computed on input bytes
 461:Ourwares/PC_gateway_comm.c **** 	int i = 0;		// Counter for copying
ARM GAS  /tmp/cc2bndLQ.s 			page 11


 462:Ourwares/PC_gateway_comm.c **** 
 463:Ourwares/PC_gateway_comm.c **** 	/* Compute checksum on binary message, including sequence number */
 464:Ourwares/PC_gateway_comm.c **** 	chk = CANgenchksum(&p->cm[0], p->ct);
 465:Ourwares/PC_gateway_comm.c **** 	
 466:Ourwares/PC_gateway_comm.c **** 	/* Convert binary input message to ASCII/HEX output message */
 467:Ourwares/PC_gateway_comm.c **** 	while ((p2 < p2e) && (i++ < p->ct)) 
 468:Ourwares/PC_gateway_comm.c **** 		p2 = hex(p2, *pin++);
 469:Ourwares/PC_gateway_comm.c **** 
 470:Ourwares/PC_gateway_comm.c **** 	/* Add checksum to line */
 471:Ourwares/PC_gateway_comm.c **** 	p2 = hex(p2, chk);
 472:Ourwares/PC_gateway_comm.c **** 
 473:Ourwares/PC_gateway_comm.c **** 	/* Add terminator we have chosen ('\n') */
 474:Ourwares/PC_gateway_comm.c **** 	*p2++ = ASCIIMSGTERMINATOR;
 475:Ourwares/PC_gateway_comm.c **** //if (p->ct >= 16) while(1==1);
 476:Ourwares/PC_gateway_comm.c **** 	pbcb->size = (p2 - pout);
 477:Ourwares/PC_gateway_comm.c **** 
 478:Ourwares/PC_gateway_comm.c **** 	/* Place Buffer Control Block on queue to SerialTaskSend */
 479:Ourwares/PC_gateway_comm.c **** 	vSerialTaskSendQueueBuf(ppbcb); // Place on queue
 480:Ourwares/PC_gateway_comm.c **** 
 481:Ourwares/PC_gateway_comm.c **** 	return (p2 - pout);	// Return number of bytes in output	
 482:Ourwares/PC_gateway_comm.c **** }
 483:Ourwares/PC_gateway_comm.c **** 
 484:Ourwares/PC_gateway_comm.c **** 
 485:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 486:Ourwares/PC_gateway_comm.c ****  * int CANcompress(struct PCTOGATECOMPRESSED* pout, struct CANRCVBUF* pin);
 487:Ourwares/PC_gateway_comm.c ****  * @brief	: Convert a "standard" format CAN msg into a compressed format byte array with byte ct.
 488:Ourwares/PC_gateway_comm.c ****  * @param	: pout = pointer to output w compressed msg in a byte array
 489:Ourwares/PC_gateway_comm.c ****  * @param	: pin = pointer to input with a "standard" format CAN msg
 490:Ourwares/PC_gateway_comm.c ****  * @return	:  0 = OK; 
 491:Ourwares/PC_gateway_comm.c ****  *		: -1 = bogus dlc count with 29b id msg
 492:Ourwares/PC_gateway_comm.c ****  *		: -2 = bogus dlc count with 11b id msg
 493:Ourwares/PC_gateway_comm.c ****  *		: pout->ct = total number of bytes in compressed msg
 494:Ourwares/PC_gateway_comm.c ****  *		: pout->c[] = msg bytes
 495:Ourwares/PC_gateway_comm.c ****  * Note: see '../svn_discoveryf4/docs/trunk/Userdocs/gateway_format.txt'
 496:Ourwares/PC_gateway_comm.c ****  * Note: 'cm[0] holds the sequence number
 497:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 498:Ourwares/PC_gateway_comm.c **** static void strwrd(u8* pout, u32 x)
 499:Ourwares/PC_gateway_comm.c **** { // Store u32 in byte array
 115              		.loc 1 499 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL7:
 500:Ourwares/PC_gateway_comm.c **** 	*pout++ = (u8)x; *pout++ = (x >> 8); *pout++ = (x >> 16); *pout = (x >> 24); return;
 121              		.loc 1 500 0
 122 0000 0170     		strb	r1, [r0]
 123              	.LVL8:
 124 0002 0B0A     		lsrs	r3, r1, #8
 125 0004 4370     		strb	r3, [r0, #1]
 126              	.LVL9:
 127 0006 0B0C     		lsrs	r3, r1, #16
 128 0008 8370     		strb	r3, [r0, #2]
 129 000a 090E     		lsrs	r1, r1, #24
 130              	.LVL10:
 131 000c C170     		strb	r1, [r0, #3]
 132 000e 7047     		bx	lr
ARM GAS  /tmp/cc2bndLQ.s 			page 12


 133              		.cfi_endproc
 134              	.LFE139:
 136              		.section	.text.strhalfwrd,"ax",%progbits
 137              		.align	2
 138              		.thumb
 139              		.thumb_func
 141              	strhalfwrd:
 142              	.LFB140:
 501:Ourwares/PC_gateway_comm.c **** }
 502:Ourwares/PC_gateway_comm.c **** static void strhalfwrd(u8* pout, u32 x)
 503:Ourwares/PC_gateway_comm.c **** { // Store u32 in byte array
 143              		.loc 1 503 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
 148              	.LVL11:
 504:Ourwares/PC_gateway_comm.c **** 	*pout++ = (u8)x; *pout++ = (x >> 8); return;
 149              		.loc 1 504 0
 150 0000 0170     		strb	r1, [r0]
 151              	.LVL12:
 152 0002 090A     		lsrs	r1, r1, #8
 153              	.LVL13:
 154 0004 4170     		strb	r1, [r0, #1]
 155 0006 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE140:
 159              		.section	.text.getwd,"ax",%progbits
 160              		.align	2
 161              		.thumb
 162              		.thumb_func
 164              	getwd:
 165              	.LFB143:
 505:Ourwares/PC_gateway_comm.c **** }
 506:Ourwares/PC_gateway_comm.c **** int CANcompress(struct PCTOGATECOMPRESSED* pout, struct CANRCVBUF* pin)
 507:Ourwares/PC_gateway_comm.c **** {
 508:Ourwares/PC_gateway_comm.c **** 
 509:Ourwares/PC_gateway_comm.c **** 	u32 i;
 510:Ourwares/PC_gateway_comm.c **** 	int ret;
 511:Ourwares/PC_gateway_comm.c **** 	u32 tmp;
 512:Ourwares/PC_gateway_comm.c **** 	/* Identify id types--11b, 29b, faux CAN id. */
 513:Ourwares/PC_gateway_comm.c **** 	ret = CAN_id_valid(pin->id);
 514:Ourwares/PC_gateway_comm.c **** 	if (ret < 0) return ret;	// Return: not a valid CAN bus msg id
 515:Ourwares/PC_gateway_comm.c **** 
 516:Ourwares/PC_gateway_comm.c **** 	pout->cm[0] = pout->seq;	// Place sequence number ahead of CAN msg bytes
 517:Ourwares/PC_gateway_comm.c **** 
 518:Ourwares/PC_gateway_comm.c **** 	tmp = (pin->dlc & 0xf);
 519:Ourwares/PC_gateway_comm.c **** 	
 520:Ourwares/PC_gateway_comm.c **** 	if (ret > 0)
 521:Ourwares/PC_gateway_comm.c **** 	{ // Here, 29 bit id msg
 522:Ourwares/PC_gateway_comm.c **** 		strwrd( &pout->cm[1], ( pin->id | 0x1 ) ); // Low ord bit ON
 523:Ourwares/PC_gateway_comm.c **** 
 524:Ourwares/PC_gateway_comm.c **** 		if (tmp > 8) return -1;	// JIC a bogus count
 525:Ourwares/PC_gateway_comm.c **** 		pout->cm[5] = (u8)tmp;
 526:Ourwares/PC_gateway_comm.c **** 
 527:Ourwares/PC_gateway_comm.c **** 		for (i = 0; i < tmp; i++)	// Copy payload
 528:Ourwares/PC_gateway_comm.c **** 			pout->cm[i+6] = pin->cd.u8[i];
ARM GAS  /tmp/cc2bndLQ.s 			page 13


 529:Ourwares/PC_gateway_comm.c **** 
 530:Ourwares/PC_gateway_comm.c **** 		pout->ct = (tmp + 6);	// Save number of bytes in compressed msg
 531:Ourwares/PC_gateway_comm.c **** 		return 0;
 532:Ourwares/PC_gateway_comm.c **** 	}
 533:Ourwares/PC_gateway_comm.c **** 	/* Here, 11 bit id msg */
 534:Ourwares/PC_gateway_comm.c **** 	if (tmp > 8) return -2;		// JIC a bogus count
 535:Ourwares/PC_gateway_comm.c **** 
 536:Ourwares/PC_gateway_comm.c **** 	pout->ct = (tmp + 3);	// Save number of bytes in compressed msg (w seq number)
 537:Ourwares/PC_gateway_comm.c **** 
 538:Ourwares/PC_gateway_comm.c **** 	if ((pin->id & 0x2) != 0) // Check RTR bit
 539:Ourwares/PC_gateway_comm.c **** 	{ // Here, give RTR a special dlc count
 540:Ourwares/PC_gateway_comm.c **** 		tmp = 9; // RTR code 9 means dlc = 0
 541:Ourwares/PC_gateway_comm.c **** 	}
 542:Ourwares/PC_gateway_comm.c **** 	else
 543:Ourwares/PC_gateway_comm.c **** 	{
 544:Ourwares/PC_gateway_comm.c **** 		for (i = 0; i < tmp; i++) // Copy payload
 545:Ourwares/PC_gateway_comm.c **** 			pout->cm[i+3] = pin->cd.u8[i];
 546:Ourwares/PC_gateway_comm.c **** 	}
 547:Ourwares/PC_gateway_comm.c **** 	/* 11b id plus dlc|rtr  */
 548:Ourwares/PC_gateway_comm.c **** 	strhalfwrd( &pout->cm[1], (pin->id >> 16) );
 549:Ourwares/PC_gateway_comm.c **** 	pout->cm[1] &= ~0x1f;
 550:Ourwares/PC_gateway_comm.c **** 	pout->cm[1] |= (u8)(tmp << 1);	
 551:Ourwares/PC_gateway_comm.c **** 
 552:Ourwares/PC_gateway_comm.c **** 	return 0;
 553:Ourwares/PC_gateway_comm.c **** }
 554:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 555:Ourwares/PC_gateway_comm.c ****  * int CANcompress_G(struct PCTOGATECOMPRESSED* pout, struct CANRCVBUF* pcan);
 556:Ourwares/PC_gateway_comm.c ****  * @brief	: Convert a "standard" format CAN msg into Gonzaga format byte array with byte ct.
 557:Ourwares/PC_gateway_comm.c ****  * @param	: pout = pointer to output w compressed msg in a byte array
 558:Ourwares/PC_gateway_comm.c ****  * @param	: pcan = pointer to input with a "standard" format CAN msg
 559:Ourwares/PC_gateway_comm.c ****  * @return	:  0 = OK; 
 560:Ourwares/PC_gateway_comm.c ****  *		: -1 = bogus dlc count with 29b id msg
 561:Ourwares/PC_gateway_comm.c ****  *		: -2 = bogus dlc count with 11b id msg
 562:Ourwares/PC_gateway_comm.c ****  *		: pout->ct = total number of bytes in compressed msg
 563:Ourwares/PC_gateway_comm.c ****  *		: pout->c[] = msg bytes
 564:Ourwares/PC_gateway_comm.c ****  * Note: see '../svn_discoveryf4/docs/trunk/Userdocs/gateway_format.txt'
 565:Ourwares/PC_gateway_comm.c ****  * Note: 'cm[0] holds the sequence number
 566:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 567:Ourwares/PC_gateway_comm.c **** int CANcompress_G(struct PCTOGATECOMPRESSED* pout, struct CANRCVBUF* pcan)
 568:Ourwares/PC_gateway_comm.c **** {
 569:Ourwares/PC_gateway_comm.c **** 	u32 i;
 570:Ourwares/PC_gateway_comm.c **** 	u32 tmp;
 571:Ourwares/PC_gateway_comm.c **** 
 572:Ourwares/PC_gateway_comm.c **** 	pout->cm[0] = pout->seq;		// Place sequence number ahead of CAN msg bytes
 573:Ourwares/PC_gateway_comm.c **** 	strwrd( &pout->cm[1], pcan->id );	// 
 574:Ourwares/PC_gateway_comm.c **** 	tmp = (pcan->dlc & 0xf);
 575:Ourwares/PC_gateway_comm.c **** 
 576:Ourwares/PC_gateway_comm.c **** 	if (tmp > 8) return -1;
 577:Ourwares/PC_gateway_comm.c **** 	pout->cm[5] = tmp;
 578:Ourwares/PC_gateway_comm.c **** 
 579:Ourwares/PC_gateway_comm.c **** 	for (i = 0; i < tmp; i++)	// Copy payload
 580:Ourwares/PC_gateway_comm.c **** 		pout->cm[i+6] = pcan->cd.u8[i];
 581:Ourwares/PC_gateway_comm.c **** 
 582:Ourwares/PC_gateway_comm.c **** 	pout->ct = (tmp + 6);	// Save number of bytes in compressed msg
 583:Ourwares/PC_gateway_comm.c **** 
 584:Ourwares/PC_gateway_comm.c **** 	return 0;
 585:Ourwares/PC_gateway_comm.c **** }
ARM GAS  /tmp/cc2bndLQ.s 			page 14


 586:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 587:Ourwares/PC_gateway_comm.c ****  * int CANuncompress(struct CANRCVBUF* pout,  struct PCTOGATECOMPRESSED* pin);
 588:Ourwares/PC_gateway_comm.c ****  * @brief	: Given a binary msg (w/o byte stuffing/framing), convert to "standard" CAN register form
 589:Ourwares/PC_gateway_comm.c ****  * @param	: pout = pointer to output w uncompressed msg in register format
 590:Ourwares/PC_gateway_comm.c ****  * @param	: pin = pointer to input with compressed (binary) msg
 591:Ourwares/PC_gateway_comm.c ****  * @return	:  0 = OK, and--
 592:Ourwares/PC_gateway_comm.c ****  *        	:    pin->seq = 1st byte of received (binary) frame
 593:Ourwares/PC_gateway_comm.c ****  *        	:    pout = struct filled with id, dlc, payload
 594:Ourwares/PC_gateway_comm.c ****  *		: negative = Some error--
 595:Ourwares/PC_gateway_comm.c ****  *		: -1 = Too few bytes to a valid 29b compressed msg
 596:Ourwares/PC_gateway_comm.c ****  *		: -2 = dlc: payload ct too large (> 8) in a 29 bit id msg
 597:Ourwares/PC_gateway_comm.c ****  *		: -3 = dlc doesn't match byte count in a 29 bit id msg
 598:Ourwares/PC_gateway_comm.c ****  *		: -4 = Too few bytes to a valid 11b compressed msg
 599:Ourwares/PC_gateway_comm.c ****  *		: -5 = dlc: payload ct too large (> 8) in a 11 bit id msg
 600:Ourwares/PC_gateway_comm.c ****  *		: -6 = dlc doesn't match byte count in a 11 bit id msg
 601:Ourwares/PC_gateway_comm.c ****  * Note: see '../svn_discoveryf4/docs/trunk/Userdocs/gateway_format.txt'
 602:Ourwares/PC_gateway_comm.c ****  * Note: 'cm[0] holds the sequence number
 603:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 604:Ourwares/PC_gateway_comm.c **** static u32 getwd(u8* p) // Move non-aligned bytes into a 4 byte word
 605:Ourwares/PC_gateway_comm.c **** {
 166              		.loc 1 605 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171              	.LVL14:
 606:Ourwares/PC_gateway_comm.c **** 	return ((*(p+3) << 24) | (*(p+2) << 16) | (*(p+1) << 8) | (*p + 0));
 172              		.loc 1 606 0
 173 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 174 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 175 0004 1B04     		lsls	r3, r3, #16
 176 0006 43EA0263 		orr	r3, r3, r2, lsl #24
 177 000a 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 178 000c 43EA0223 		orr	r3, r3, r2, lsl #8
 179 0010 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 180              	.LVL15:
 607:Ourwares/PC_gateway_comm.c **** }
 181              		.loc 1 607 0
 182 0012 1843     		orrs	r0, r0, r3
 183 0014 7047     		bx	lr
 184              		.cfi_endproc
 185              	.LFE143:
 187 0016 00BF     		.section	.text.gethalfwd,"ax",%progbits
 188              		.align	2
 189              		.thumb
 190              		.thumb_func
 192              	gethalfwd:
 193              	.LFB144:
 608:Ourwares/PC_gateway_comm.c **** static u32 gethalfwd(u8* p) // Move non-aligned bytes into a 2 byte half-word
 609:Ourwares/PC_gateway_comm.c **** {
 194              		.loc 1 609 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 199              	.LVL16:
 610:Ourwares/PC_gateway_comm.c **** 	return ((*(p+1) << 8) | (*p + 0));
ARM GAS  /tmp/cc2bndLQ.s 			page 15


 200              		.loc 1 610 0
 201 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 202 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 203              	.LVL17:
 611:Ourwares/PC_gateway_comm.c **** }
 204              		.loc 1 611 0
 205 0004 40EA0220 		orr	r0, r0, r2, lsl #8
 206 0008 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE144:
 210 000a 00BF     		.section	.text.CANgenchksum,"ax",%progbits
 211              		.align	2
 212              		.global	CANgenchksum
 213              		.thumb
 214              		.thumb_func
 216              	CANgenchksum:
 217              	.LFB129:
  27:Ourwares/PC_gateway_comm.c **** 	int i = 0;
 218              		.loc 1 27 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223              	.LVL18:
 224 0000 10B4     		push	{r4}
 225              	.LCFI3:
 226              		.cfi_def_cfa_offset 4
 227              		.cfi_offset 4, -4
 228              	.LVL19:
  29:Ourwares/PC_gateway_comm.c **** 	for (i = 0; i < ct; i++)
 229              		.loc 1 29 0
 230 0002 4AF2A553 		movw	r3, #42405
  30:Ourwares/PC_gateway_comm.c **** 		x += *p++;
 231              		.loc 1 30 0
 232 0006 0022     		movs	r2, #0
 233 0008 03E0     		b	.L13
 234              	.LVL20:
 235              	.L14:
  31:Ourwares/PC_gateway_comm.c **** 	x += (x >> 16);	// Add carries into high half word
 236              		.loc 1 31 0 discriminator 3
 237 000a 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 238 000c 2344     		add	r3, r3, r4
 239              	.LVL21:
  30:Ourwares/PC_gateway_comm.c **** 		x += *p++;
 240              		.loc 1 30 0 discriminator 3
 241 000e 0132     		adds	r2, r2, #1
 242              	.LVL22:
  31:Ourwares/PC_gateway_comm.c **** 	x += (x >> 16);	// Add carries into high half word
 243              		.loc 1 31 0 discriminator 3
 244 0010 0130     		adds	r0, r0, #1
 245              	.LVL23:
 246              	.L13:
  30:Ourwares/PC_gateway_comm.c **** 		x += *p++;
 247              		.loc 1 30 0 discriminator 1
 248 0012 8A42     		cmp	r2, r1
 249 0014 F9DB     		blt	.L14
  32:Ourwares/PC_gateway_comm.c **** 	x += (x >> 16);	// Add carry if previous add generated a carry
ARM GAS  /tmp/cc2bndLQ.s 			page 16


 250              		.loc 1 32 0
 251 0016 03EB1340 		add	r0, r3, r3, lsr #16
 252              	.LVL24:
  33:Ourwares/PC_gateway_comm.c **** 	x += (x >> 8);  // Add high byte of low half word
 253              		.loc 1 33 0
 254 001a 00EB1040 		add	r0, r0, r0, lsr #16
 255              	.LVL25:
  34:Ourwares/PC_gateway_comm.c **** 	x += (x >> 8);  // Add carry if previous add generated a carry
 256              		.loc 1 34 0
 257 001e 00EB1020 		add	r0, r0, r0, lsr #8
 258              	.LVL26:
  35:Ourwares/PC_gateway_comm.c **** 	return (u8)x;
 259              		.loc 1 35 0
 260 0022 00EB1020 		add	r0, r0, r0, lsr #8
 261              	.LVL27:
  37:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 262              		.loc 1 37 0
 263 0026 C0B2     		uxtb	r0, r0
 264              	.LVL28:
 265 0028 5DF8044B 		ldr	r4, [sp], #4
 266              	.LCFI4:
 267              		.cfi_restore 4
 268              		.cfi_def_cfa_offset 0
 269 002c 7047     		bx	lr
 270              		.cfi_endproc
 271              	.LFE129:
 273 002e 00BF     		.section	.text.PC_msg_initg,"ax",%progbits
 274              		.align	2
 275              		.global	PC_msg_initg
 276              		.thumb
 277              		.thumb_func
 279              	PC_msg_initg:
 280              	.LFB134:
 302:Ourwares/PC_gateway_comm.c **** 	p->pasc = &p->asc[0];		// Pointer that will store incoming ascii chars
 281              		.loc 1 302 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286              	.LVL29:
 303:Ourwares/PC_gateway_comm.c **** 	p->cmprs.p = &p->cmprs.cm[0];	// Pointer that will store incoming binary bytes
 287              		.loc 1 303 0
 288 0000 0063     		str	r0, [r0, #48]
 304:Ourwares/PC_gateway_comm.c **** 	p->ctasc = 0;			// Byte counter
 289              		.loc 1 304 0
 290 0002 00F14003 		add	r3, r0, #64
 291 0006 8365     		str	r3, [r0, #88]
 305:Ourwares/PC_gateway_comm.c **** 	p->ct = 0;			// Byte counter
 292              		.loc 1 305 0
 293 0008 0023     		movs	r3, #0
 294 000a 4387     		strh	r3, [r0, #58]	@ movhi
 306:Ourwares/PC_gateway_comm.c **** 	p->cmprs.ct = 0;		// Byte counter
 295              		.loc 1 306 0
 296 000c 0387     		strh	r3, [r0, #56]	@ movhi
 307:Ourwares/PC_gateway_comm.c **** 	p->chk = CHECKSUM_INITIAL;	// Checksum initial value
 297              		.loc 1 307 0
 298 000e A0F85C30 		strh	r3, [r0, #92]	@ movhi
ARM GAS  /tmp/cc2bndLQ.s 			page 17


 308:Ourwares/PC_gateway_comm.c **** 	p->prev = ~CAN_PC_ESCAPE;	// Begin with received byte not an escape.
 299              		.loc 1 308 0
 300 0012 4AF2A553 		movw	r3, #42405
 301 0016 4363     		str	r3, [r0, #52]
 309:Ourwares/PC_gateway_comm.c **** 	return;
 302              		.loc 1 309 0
 303 0018 8223     		movs	r3, #130
 304 001a 80F83C30 		strb	r3, [r0, #60]
 305 001e 7047     		bx	lr
 306              		.cfi_endproc
 307              	.LFE134:
 309              		.section	.text.PC_msg_get,"ax",%progbits
 310              		.align	2
 311              		.global	PC_msg_get
 312              		.thumb
 313              		.thumb_func
 315              	PC_msg_get:
 316              	.LFB132:
  78:Ourwares/PC_gateway_comm.c **** 	int i;
 317              		.loc 1 78 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              	.LVL30:
 322 0000 70B5     		push	{r4, r5, r6, lr}
 323              	.LCFI5:
 324              		.cfi_def_cfa_offset 16
 325              		.cfi_offset 4, -16
 326              		.cfi_offset 5, -12
 327              		.cfi_offset 6, -8
 328              		.cfi_offset 14, -4
 329 0002 0446     		mov	r4, r0
 330 0004 0D46     		mov	r5, r1
  81:Ourwares/PC_gateway_comm.c **** 	{
 331              		.loc 1 81 0
 332 0006 0A29     		cmp	r1, #10
 333 0008 02D0     		beq	.L19
 334 000a 7D29     		cmp	r1, #125
 335 000c 44D0     		beq	.L20
 336 000e 4BE0     		b	.L28
 337              	.L19:
  84:Ourwares/PC_gateway_comm.c **** 		{ // Here, previous byte was an escape byte
 338              		.loc 1 84 0
 339 0010 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 340 0014 7D2B     		cmp	r3, #125
 341 0016 02D1     		bne	.L21
  86:Ourwares/PC_gateway_comm.c **** 		}
 342              		.loc 1 86 0
 343 0018 FFF7FEFF 		bl	strstuff
 344              	.LVL31:
 123:Ourwares/PC_gateway_comm.c **** 
 345              		.loc 1 123 0
 346 001c 46E0     		b	.L22
 347              	.LVL32:
 348              	.L21:
  90:Ourwares/PC_gateway_comm.c **** 			ptr->cmprs.ct = i;	// Save for others
 349              		.loc 1 90 0
ARM GAS  /tmp/cc2bndLQ.s 			page 18


 350 001e 856D     		ldr	r5, [r0, #88]
 351 0020 4030     		adds	r0, r0, #64
 352              	.LVL33:
 353 0022 2D1A     		subs	r5, r5, r0
 354 0024 013D     		subs	r5, r5, #1
 355              	.LVL34:
  91:Ourwares/PC_gateway_comm.c **** 			if (i < 3)		// Too few bytes to comprise a valid msg?
 356              		.loc 1 91 0
 357 0026 2EB2     		sxth	r6, r5
 358 0028 A4F85C60 		strh	r6, [r4, #92]	@ movhi
  92:Ourwares/PC_gateway_comm.c **** 			{ // Here yes. (min binary msg plus checksum = 3 bytes)
 359              		.loc 1 92 0
 360 002c 022D     		cmp	r5, #2
 361 002e 09DC     		bgt	.L23
  94:Ourwares/PC_gateway_comm.c **** 				PC_toofew_ct_err += 1;	// Running count of this type of error.
 362              		.loc 1 94 0
 363 0030 2046     		mov	r0, r4
 364 0032 FFF7FEFF 		bl	PC_msg_initg
 365              	.LVL35:
  95:Ourwares/PC_gateway_comm.c **** 				return -2;	// Return error code.
 366              		.loc 1 95 0
 367 0036 234A     		ldr	r2, .L30
 368 0038 1368     		ldr	r3, [r2]
 369 003a 0133     		adds	r3, r3, #1
 370 003c 1360     		str	r3, [r2]
  96:Ourwares/PC_gateway_comm.c **** 			}
 371              		.loc 1 96 0
 372 003e 6FF00100 		mvn	r0, #1
 373 0042 70BD     		pop	{r4, r5, r6, pc}
 374              	.LVL36:
 375              	.L23:
  99:Ourwares/PC_gateway_comm.c **** 			{ // Here yes.
 376              		.loc 1 99 0
 377 0044 172D     		cmp	r5, #23
 378 0046 09DD     		ble	.L25
 101:Ourwares/PC_gateway_comm.c **** 				PC_toomany_ct_err += 1;	// Running count of this type of error.
 379              		.loc 1 101 0
 380 0048 2046     		mov	r0, r4
 381 004a FFF7FEFF 		bl	PC_msg_initg
 382              	.LVL37:
 102:Ourwares/PC_gateway_comm.c **** 				return -3;	// Return error code.
 383              		.loc 1 102 0
 384 004e 1E4A     		ldr	r2, .L30+4
 385 0050 1368     		ldr	r3, [r2]
 386 0052 0133     		adds	r3, r3, #1
 387 0054 1360     		str	r3, [r2]
 103:Ourwares/PC_gateway_comm.c **** 			}
 388              		.loc 1 103 0
 389 0056 6FF00200 		mvn	r0, #2
 390 005a 70BD     		pop	{r4, r5, r6, pc}
 391              	.LVL38:
 392              	.L25:
 107:Ourwares/PC_gateway_comm.c **** 			{ // Here checksum good
 393              		.loc 1 107 0
 394 005c 2946     		mov	r1, r5
 395              	.LVL39:
 396 005e FFF7FEFF 		bl	CANgenchksum
ARM GAS  /tmp/cc2bndLQ.s 			page 19


 397              	.LVL40:
 398 0062 2544     		add	r5, r5, r4
 399              	.LVL41:
 400 0064 95F84030 		ldrb	r3, [r5, #64]	@ zero_extendqisi2
 401 0068 9842     		cmp	r0, r3
 402 006a 0BD1     		bne	.L26
 111:Ourwares/PC_gateway_comm.c **** 				*ptr->pasc = '\0';	// Zero string terminator JIC a bozo forgot msg ends with '\n'
 403              		.loc 1 111 0
 404 006c 7600     		lsls	r6, r6, #1
 405 006e 0136     		adds	r6, r6, #1
 406 0070 6687     		strh	r6, [r4, #58]	@ movhi
 112:Ourwares/PC_gateway_comm.c **** 				ptr->seq = ptr->cmprs.cm[0];
 407              		.loc 1 112 0
 408 0072 236B     		ldr	r3, [r4, #48]
 409 0074 0022     		movs	r2, #0
 410 0076 1A70     		strb	r2, [r3]
 113:Ourwares/PC_gateway_comm.c **** 				return 1;		// $$$$ COMPLETE & SUCCESS $$$$
 411              		.loc 1 113 0
 412 0078 94F84030 		ldrb	r3, [r4, #64]	@ zero_extendqisi2
 413 007c 84F83D30 		strb	r3, [r4, #61]
 114:Ourwares/PC_gateway_comm.c **** 			}
 414              		.loc 1 114 0
 415 0080 0120     		movs	r0, #1
 416 0082 70BD     		pop	{r4, r5, r6, pc}
 417              	.LVL42:
 418              	.L26:
 118:Ourwares/PC_gateway_comm.c **** 				PC_chksum_ct_err += 1;	// Running count of checksum errors
 419              		.loc 1 118 0
 420 0084 2046     		mov	r0, r4
 421 0086 FFF7FEFF 		bl	PC_msg_initg
 422              	.LVL43:
 119:Ourwares/PC_gateway_comm.c **** 				return -1;		// Return error code.
 423              		.loc 1 119 0
 424 008a 104A     		ldr	r2, .L30+8
 425 008c 1368     		ldr	r3, [r2]
 426 008e 0133     		adds	r3, r3, #1
 427 0090 1360     		str	r3, [r2]
 120:Ourwares/PC_gateway_comm.c **** 			}
 428              		.loc 1 120 0
 429 0092 4FF0FF30 		mov	r0, #-1
 430 0096 70BD     		pop	{r4, r5, r6, pc}
 431              	.LVL44:
 432              	.L20:
 126:Ourwares/PC_gateway_comm.c **** 		{
 433              		.loc 1 126 0
 434 0098 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 435 009c 7D2B     		cmp	r3, #125
 436 009e 05D1     		bne	.L22
 128:Ourwares/PC_gateway_comm.c **** 			c = ~CAN_PC_ESCAPE;		// Set "previous" to not an escape
 437              		.loc 1 128 0
 438 00a0 FFF7FEFF 		bl	strstuff
 439              	.LVL45:
 129:Ourwares/PC_gateway_comm.c **** 		}
 440              		.loc 1 129 0
 441 00a4 8225     		movs	r5, #130
 442 00a6 01E0     		b	.L22
 443              	.LVL46:
ARM GAS  /tmp/cc2bndLQ.s 			page 20


 444              	.L28:
 134:Ourwares/PC_gateway_comm.c **** 		break;
 445              		.loc 1 134 0
 446 00a8 FFF7FEFF 		bl	strstuff
 447              	.LVL47:
 448              	.L22:
 138:Ourwares/PC_gateway_comm.c **** 
 449              		.loc 1 138 0
 450 00ac 236B     		ldr	r3, [r4, #48]
 451 00ae 04F12D02 		add	r2, r4, #45
 452 00b2 9342     		cmp	r3, r2
 453 00b4 01D3     		bcc	.L27
 138:Ourwares/PC_gateway_comm.c **** 
 454              		.loc 1 138 0 is_stmt 0 discriminator 1
 455 00b6 023B     		subs	r3, r3, #2
 456 00b8 2363     		str	r3, [r4, #48]
 457              	.L27:
 140:Ourwares/PC_gateway_comm.c **** 
 458              		.loc 1 140 0 is_stmt 1
 459 00ba 84F83C50 		strb	r5, [r4, #60]
 142:Ourwares/PC_gateway_comm.c **** }
 460              		.loc 1 142 0
 461 00be 0020     		movs	r0, #0
 143:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 462              		.loc 1 143 0
 463 00c0 70BD     		pop	{r4, r5, r6, pc}
 464              	.LVL48:
 465              	.L31:
 466 00c2 00BF     		.align	2
 467              	.L30:
 468 00c4 00000000 		.word	.LANCHOR1
 469 00c8 00000000 		.word	.LANCHOR2
 470 00cc 00000000 		.word	.LANCHOR3
 471              		.cfi_endproc
 472              	.LFE132:
 474              		.section	.text.PC_msg_getASCII,"ax",%progbits
 475              		.align	2
 476              		.global	PC_msg_getASCII
 477              		.thumb
 478              		.thumb_func
 480              	PC_msg_getASCII:
 481              	.LFB133:
 206:Ourwares/PC_gateway_comm.c **** 	u8 x;
 482              		.loc 1 206 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              	.LVL49:
 487 0000 38B5     		push	{r3, r4, r5, lr}
 488              	.LCFI6:
 489              		.cfi_def_cfa_offset 16
 490              		.cfi_offset 3, -16
 491              		.cfi_offset 4, -12
 492              		.cfi_offset 5, -8
 493              		.cfi_offset 14, -4
 494 0002 0446     		mov	r4, r0
 215:Ourwares/PC_gateway_comm.c **** 	{ // Newline ends the message
ARM GAS  /tmp/cc2bndLQ.s 			page 21


 495              		.loc 1 215 0
 496 0004 0A29     		cmp	r1, #10
 497 0006 3AD1     		bne	.L33
 225:Ourwares/PC_gateway_comm.c **** 		ptr->ctasc -= 2; // Adjust for not storing seq number bytes, but added '\n'
 498              		.loc 1 225 0
 499 0008 036B     		ldr	r3, [r0, #48]
 500 000a 5A1C     		adds	r2, r3, #1
 501 000c 0263     		str	r2, [r0, #48]
 502 000e 1970     		strb	r1, [r3]
 226:Ourwares/PC_gateway_comm.c **** 
 503              		.loc 1 226 0
 504 0010 438F     		ldrh	r3, [r0, #58]
 505 0012 023B     		subs	r3, r3, #2
 506 0014 9BB2     		uxth	r3, r3
 507 0016 19B2     		sxth	r1, r3
 508              	.LVL50:
 509 0018 4187     		strh	r1, [r0, #58]	@ movhi
 510              	.LVL51:
 228:Ourwares/PC_gateway_comm.c **** 		ptr->cmprs.seq = ptr->cmprs.cm[0];	// Save for binary folk
 511              		.loc 1 228 0
 512 001a 90F84020 		ldrb	r2, [r0, #64]	@ zero_extendqisi2
 513 001e 80F83D20 		strb	r2, [r0, #61]
 229:Ourwares/PC_gateway_comm.c **** 
 514              		.loc 1 229 0
 515 0022 80F85E20 		strb	r2, [r0, #94]
 232:Ourwares/PC_gateway_comm.c **** 		{ // Here, not an even pairing for the binary bytes
 516              		.loc 1 232 0
 517 0026 13F0010F 		tst	r3, #1
 518 002a 08D0     		beq	.L34
 234:Ourwares/PC_gateway_comm.c **** 			PC_oddeven_ct_err += 1;	// Running count of this type of error.
 519              		.loc 1 234 0
 520 002c FFF7FEFF 		bl	PC_msg_initg
 521              	.LVL52:
 235:Ourwares/PC_gateway_comm.c **** 			return -4;	// Return error code.		{	
 522              		.loc 1 235 0
 523 0030 264A     		ldr	r2, .L42
 524 0032 1368     		ldr	r3, [r2]
 525 0034 0133     		adds	r3, r3, #1
 526 0036 1360     		str	r3, [r2]
 236:Ourwares/PC_gateway_comm.c **** 		}
 527              		.loc 1 236 0
 528 0038 6FF00300 		mvn	r0, #3
 529 003c 38BD     		pop	{r3, r4, r5, pc}
 530              	.LVL53:
 531              	.L34:
 239:Ourwares/PC_gateway_comm.c **** 		{ // Here yes.
 532              		.loc 1 239 0
 533 003e 0429     		cmp	r1, #4
 534 0040 08DC     		bgt	.L36
 241:Ourwares/PC_gateway_comm.c **** 			PC_toofew_ct_err += 1;	// Running count of this type of error.
 535              		.loc 1 241 0
 536 0042 FFF7FEFF 		bl	PC_msg_initg
 537              	.LVL54:
 242:Ourwares/PC_gateway_comm.c **** 			return -2;	// Return error code.
 538              		.loc 1 242 0
 539 0046 224A     		ldr	r2, .L42+4
 540 0048 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cc2bndLQ.s 			page 22


 541 004a 0133     		adds	r3, r3, #1
 542 004c 1360     		str	r3, [r2]
 243:Ourwares/PC_gateway_comm.c **** 		}
 543              		.loc 1 243 0
 544 004e 6FF00100 		mvn	r0, #1
 545 0052 38BD     		pop	{r3, r4, r5, pc}
 546              	.LVL55:
 547              	.L36:
 247:Ourwares/PC_gateway_comm.c **** 					
 548              		.loc 1 247 0
 549 0054 4910     		asrs	r1, r1, #1
 550 0056 A0F85C10 		strh	r1, [r0, #92]	@ movhi
 250:Ourwares/PC_gateway_comm.c **** 		zz=CANgenchksum(&ptr->cmprs.cm[0], (ptr->cmprs.ct));	// Checksum computed
 551              		.loc 1 250 0
 552 005a 4318     		adds	r3, r0, r1
 553 005c 93F84050 		ldrb	r5, [r3, #64]	@ zero_extendqisi2
 554              	.LVL56:
 251:Ourwares/PC_gateway_comm.c **** //xprintf(6," CHKRCV %02x CMP %02x\n\r",x,zz);
 555              		.loc 1 251 0
 556 0060 4030     		adds	r0, r0, #64
 557              	.LVL57:
 558 0062 FFF7FEFF 		bl	CANgenchksum
 559              	.LVL58:
 255:Ourwares/PC_gateway_comm.c **** 		{ // Here checksum good
 560              		.loc 1 255 0
 561 0066 8542     		cmp	r5, r0
 562 0068 2BD0     		beq	.L39
 268:Ourwares/PC_gateway_comm.c **** 			PC_chksum_ct_err += 1;	// Running count of checksum errors
 563              		.loc 1 268 0
 564 006a 2046     		mov	r0, r4
 565              	.LVL59:
 566 006c FFF7FEFF 		bl	PC_msg_initg
 567              	.LVL60:
 269:Ourwares/PC_gateway_comm.c **** 			return -1;	// Return error code.
 568              		.loc 1 269 0
 569 0070 184A     		ldr	r2, .L42+8
 570 0072 1368     		ldr	r3, [r2]
 571 0074 0133     		adds	r3, r3, #1
 572 0076 1360     		str	r3, [r2]
 270:Ourwares/PC_gateway_comm.c **** 		}
 573              		.loc 1 270 0
 574 0078 4FF0FF30 		mov	r0, #-1
 575 007c 38BD     		pop	{r3, r4, r5, pc}
 576              	.LVL61:
 577              	.L33:
 273:Ourwares/PC_gateway_comm.c **** 	{ // Here yes.  Even chars -> hi ord nibble of byte
 578              		.loc 1 273 0
 579 007e 438F     		ldrh	r3, [r0, #58]
 580 0080 13F0010F 		tst	r3, #1
 581 0084 05D1     		bne	.L37
 275:Ourwares/PC_gateway_comm.c **** 	}
 582              		.loc 1 275 0
 583 0086 826D     		ldr	r2, [r0, #88]
 584 0088 134B     		ldr	r3, .L42+12
 585 008a 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 586 008c 1B01     		lsls	r3, r3, #4
 587 008e 1370     		strb	r3, [r2]
ARM GAS  /tmp/cc2bndLQ.s 			page 23


 588 0090 07E0     		b	.L38
 589              	.L37:
 279:Ourwares/PC_gateway_comm.c **** 	}
 590              		.loc 1 279 0
 591 0092 836D     		ldr	r3, [r0, #88]
 592 0094 5A1C     		adds	r2, r3, #1
 593 0096 8265     		str	r2, [r0, #88]
 594 0098 0F4A     		ldr	r2, .L42+12
 595 009a 505C     		ldrb	r0, [r2, r1]	@ zero_extendqisi2
 596              	.LVL62:
 597 009c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 598 009e 0243     		orrs	r2, r2, r0
 599 00a0 1A70     		strb	r2, [r3]
 600              	.L38:
 283:Ourwares/PC_gateway_comm.c **** 	ptr->ctasc += 1;	// Count incoming chars
 601              		.loc 1 283 0
 602 00a2 236B     		ldr	r3, [r4, #48]
 603 00a4 5A1C     		adds	r2, r3, #1
 604 00a6 2263     		str	r2, [r4, #48]
 605 00a8 1970     		strb	r1, [r3]
 284:Ourwares/PC_gateway_comm.c **** 
 606              		.loc 1 284 0
 607 00aa 638F     		ldrh	r3, [r4, #58]
 608 00ac 0133     		adds	r3, r3, #1
 609 00ae 1BB2     		sxth	r3, r3
 610 00b0 6387     		strh	r3, [r4, #58]	@ movhi
 287:Ourwares/PC_gateway_comm.c **** 	{ // Here incoming chars exceed the max number for a max size CAN msg
 611              		.loc 1 287 0
 612 00b2 252B     		cmp	r3, #37
 613 00b4 07DD     		ble	.L40
 289:Ourwares/PC_gateway_comm.c **** 		return -3;		// Return an error code
 614              		.loc 1 289 0
 615 00b6 2046     		mov	r0, r4
 616 00b8 FFF7FEFF 		bl	PC_msg_initg
 617              	.LVL63:
 290:Ourwares/PC_gateway_comm.c **** 	}
 618              		.loc 1 290 0
 619 00bc 6FF00200 		mvn	r0, #2
 620 00c0 38BD     		pop	{r3, r4, r5, pc}
 621              	.LVL64:
 622              	.L39:
 257:Ourwares/PC_gateway_comm.c **** 		}
 623              		.loc 1 257 0
 624 00c2 0120     		movs	r0, #1
 625              	.LVL65:
 626 00c4 38BD     		pop	{r3, r4, r5, pc}
 627              	.LVL66:
 628              	.L40:
 293:Ourwares/PC_gateway_comm.c **** }
 629              		.loc 1 293 0
 630 00c6 0020     		movs	r0, #0
 294:Ourwares/PC_gateway_comm.c **** 
 631              		.loc 1 294 0
 632 00c8 38BD     		pop	{r3, r4, r5, pc}
 633              	.LVL67:
 634              	.L43:
 635 00ca 00BF     		.align	2
ARM GAS  /tmp/cc2bndLQ.s 			page 24


 636              	.L42:
 637 00cc 00000000 		.word	.LANCHOR4
 638 00d0 00000000 		.word	.LANCHOR1
 639 00d4 00000000 		.word	.LANCHOR3
 640 00d8 00000000 		.word	.LANCHOR5
 641              		.cfi_endproc
 642              	.LFE133:
 644              		.section	.text.CAN_id_valid,"ax",%progbits
 645              		.align	2
 646              		.global	CAN_id_valid
 647              		.thumb
 648              		.thumb_func
 650              	CAN_id_valid:
 651              	.LFB135:
 322:Ourwares/PC_gateway_comm.c **** 	if ( (id & 0x1) != 0 ) return -1; // faux ID
 652              		.loc 1 322 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 657              	.LVL68:
 323:Ourwares/PC_gateway_comm.c **** 	if ( (id & 0x4) == 0 ) // Check IDE (extended id bit)
 658              		.loc 1 323 0
 659 0000 10F0010F 		tst	r0, #1
 660 0004 08D1     		bne	.L46
 324:Ourwares/PC_gateway_comm.c **** 	{ // Here, an 11 bit address is specified
 661              		.loc 1 324 0
 662 0006 10F0040F 		tst	r0, #4
 663 000a 08D1     		bne	.L47
 326:Ourwares/PC_gateway_comm.c **** 		return 0; // Here, 11b is OK.
 664              		.loc 1 326 0
 665 000c 064B     		ldr	r3, .L49
 666 000e 0340     		ands	r3, r3, r0
 667 0010 3BB1     		cbz	r3, .L48
 668 0012 6FF00100 		mvn	r0, #1
 669              	.LVL69:
 670 0016 7047     		bx	lr
 671              	.LVL70:
 672              	.L46:
 323:Ourwares/PC_gateway_comm.c **** 	if ( (id & 0x4) == 0 ) // Check IDE (extended id bit)
 673              		.loc 1 323 0
 674 0018 4FF0FF30 		mov	r0, #-1
 675              	.LVL71:
 676 001c 7047     		bx	lr
 677              	.LVL72:
 678              	.L47:
 329:Ourwares/PC_gateway_comm.c **** }
 679              		.loc 1 329 0
 680 001e 0120     		movs	r0, #1
 681              	.LVL73:
 682 0020 7047     		bx	lr
 683              	.LVL74:
 684              	.L48:
 327:Ourwares/PC_gateway_comm.c **** 	}
 685              		.loc 1 327 0
 686 0022 0020     		movs	r0, #0
 687              	.LVL75:
ARM GAS  /tmp/cc2bndLQ.s 			page 25


 330:Ourwares/PC_gateway_comm.c **** 
 688              		.loc 1 330 0
 689 0024 7047     		bx	lr
 690              	.L50:
 691 0026 00BF     		.align	2
 692              	.L49:
 693 0028 F8FF1F00 		.word	2097144
 694              		.cfi_endproc
 695              	.LFE135:
 697              		.section	.text.PC_msg_asctobin,"ax",%progbits
 698              		.align	2
 699              		.global	PC_msg_asctobin
 700              		.thumb
 701              		.thumb_func
 703              	PC_msg_asctobin:
 704              	.LFB136:
 349:Ourwares/PC_gateway_comm.c **** 	int ct = 0;
 705              		.loc 1 349 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              	.LVL76:
 710 0000 70B5     		push	{r4, r5, r6, lr}
 711              	.LCFI7:
 712              		.cfi_def_cfa_offset 16
 713              		.cfi_offset 4, -16
 714              		.cfi_offset 5, -12
 715              		.cfi_offset 6, -8
 716              		.cfi_offset 14, -4
 717 0002 0546     		mov	r5, r0
 718 0004 0C46     		mov	r4, r1
 719              	.LVL77:
 354:Ourwares/PC_gateway_comm.c **** 	PC_msg_initg(ptr);	// Reset pointers
 720              		.loc 1 354 0
 721 0006 00F14006 		add	r6, r0, #64
 722              	.LVL78:
 355:Ourwares/PC_gateway_comm.c **** 
 723              		.loc 1 355 0
 724 000a FFF7FEFF 		bl	PC_msg_initg
 725              	.LVL79:
 354:Ourwares/PC_gateway_comm.c **** 	PC_msg_initg(ptr);	// Reset pointers
 726              		.loc 1 354 0
 727 000e 3146     		mov	r1, r6
 350:Ourwares/PC_gateway_comm.c **** 	u8 x;
 728              		.loc 1 350 0
 729 0010 0022     		movs	r2, #0
 358:Ourwares/PC_gateway_comm.c **** 	{
 730              		.loc 1 358 0
 731 0012 0FE0     		b	.L52
 732              	.LVL80:
 733              	.L56:
 360:Ourwares/PC_gateway_comm.c **** 		{ // Here yes.  Even chars -> hi ord nibble of byte
 734              		.loc 1 360 0
 735 0014 12F0010F 		tst	r2, #1
 736 0018 04D1     		bne	.L53
 362:Ourwares/PC_gateway_comm.c **** 		}
 737              		.loc 1 362 0
ARM GAS  /tmp/cc2bndLQ.s 			page 26


 738 001a 1948     		ldr	r0, .L62
 739 001c C35C     		ldrb	r3, [r0, r3]	@ zero_extendqisi2
 740 001e 1B01     		lsls	r3, r3, #4
 741 0020 0B70     		strb	r3, [r1]
 742 0022 05E0     		b	.L54
 743              	.L53:
 744              	.LVL81:
 366:Ourwares/PC_gateway_comm.c **** 		}
 745              		.loc 1 366 0
 746 0024 1648     		ldr	r0, .L62
 747 0026 C05C     		ldrb	r0, [r0, r3]	@ zero_extendqisi2
 748 0028 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 749 002a 0343     		orrs	r3, r3, r0
 750 002c 0B70     		strb	r3, [r1]
 751 002e 0131     		adds	r1, r1, #1
 752              	.LVL82:
 753              	.L54:
 368:Ourwares/PC_gateway_comm.c **** 	}
 754              		.loc 1 368 0
 755 0030 0134     		adds	r4, r4, #1
 756              	.LVL83:
 757 0032 0132     		adds	r2, r2, #1
 758              	.LVL84:
 759              	.L52:
 358:Ourwares/PC_gateway_comm.c **** 	{
 760              		.loc 1 358 0
 761 0034 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 762 0036 1BB1     		cbz	r3, .L55
 358:Ourwares/PC_gateway_comm.c **** 	{
 763              		.loc 1 358 0 is_stmt 0 discriminator 1
 764 0038 0A2B     		cmp	r3, #10
 765 003a 01D0     		beq	.L55
 358:Ourwares/PC_gateway_comm.c **** 	{
 766              		.loc 1 358 0 discriminator 2
 767 003c 2F2A     		cmp	r2, #47
 768 003e E9DD     		ble	.L56
 769              	.L55:
 370:Ourwares/PC_gateway_comm.c **** 
 770              		.loc 1 370 0 is_stmt 1
 771 0040 2F2A     		cmp	r2, #47
 772 0042 13DC     		bgt	.L58
 373:Ourwares/PC_gateway_comm.c **** 
 773              		.loc 1 373 0
 774 0044 891B     		subs	r1, r1, r6
 775              	.LVL85:
 776 0046 09B2     		sxth	r1, r1
 777 0048 A5F85C10 		strh	r1, [r5, #92]	@ movhi
 376:Ourwares/PC_gateway_comm.c **** 	if ( x > 8 ) return -1;		// Return: too many bytes for payload count
 778              		.loc 1 376 0
 779 004c 95F84430 		ldrb	r3, [r5, #68]	@ zero_extendqisi2
 780              	.LVL86:
 377:Ourwares/PC_gateway_comm.c **** 
 781              		.loc 1 377 0
 782 0050 082B     		cmp	r3, #8
 783 0052 0ED8     		bhi	.L59
 379:Ourwares/PC_gateway_comm.c **** 	id = (u32)(ptr->cmprs.cm[0]);		// Get ID in binary word form
 784              		.loc 1 379 0
ARM GAS  /tmp/cc2bndLQ.s 			page 27


 785 0054 0533     		adds	r3, r3, #5
 786              	.LVL87:
 787 0056 9942     		cmp	r1, r3
 788 0058 0ED1     		bne	.L60
 789              	.LVL88:
 381:Ourwares/PC_gateway_comm.c **** 	
 790              		.loc 1 381 0
 791 005a 95F84000 		ldrb	r0, [r5, #64]	@ zero_extendqisi2
 792              	.LVL89:
 793 005e FFF7FEFF 		bl	CAN_id_valid
 794              	.LVL90:
 795 0062 0346     		mov	r3, r0
 796 0064 50B1     		cbz	r0, .L57
 797 0066 6FF00203 		mvn	r3, #2
 798 006a 07E0     		b	.L57
 799              	.LVL91:
 800              	.L58:
 370:Ourwares/PC_gateway_comm.c **** 
 801              		.loc 1 370 0
 802 006c 6FF00403 		mvn	r3, #4
 803 0070 04E0     		b	.L57
 804              	.LVL92:
 805              	.L59:
 377:Ourwares/PC_gateway_comm.c **** 
 806              		.loc 1 377 0
 807 0072 4FF0FF33 		mov	r3, #-1
 808              	.LVL93:
 809 0076 01E0     		b	.L57
 810              	.L60:
 379:Ourwares/PC_gateway_comm.c **** 	id = (u32)(ptr->cmprs.cm[0]);		// Get ID in binary word form
 811              		.loc 1 379 0
 812 0078 6FF00103 		mvn	r3, #1
 813              	.LVL94:
 814              	.L57:
 384:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 815              		.loc 1 384 0
 816 007c 1846     		mov	r0, r3
 817 007e 70BD     		pop	{r4, r5, r6, pc}
 818              	.LVL95:
 819              	.L63:
 820              		.align	2
 821              	.L62:
 822 0080 00000000 		.word	.LANCHOR5
 823              		.cfi_endproc
 824              	.LFE136:
 826              		.section	.text.PC_msg_prep,"ax",%progbits
 827              		.align	2
 828              		.global	PC_msg_prep
 829              		.thumb
 830              		.thumb_func
 832              	PC_msg_prep:
 833              	.LFB137:
 398:Ourwares/PC_gateway_comm.c **** 	u8 *p1 = pin;	// Redundant?
 834              		.loc 1 398 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2bndLQ.s 			page 28


 838              	.LVL96:
 839 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 840              	.LCFI8:
 841              		.cfi_def_cfa_offset 24
 842              		.cfi_offset 3, -24
 843              		.cfi_offset 4, -20
 844              		.cfi_offset 5, -16
 845              		.cfi_offset 6, -12
 846              		.cfi_offset 7, -8
 847              		.cfi_offset 14, -4
 848 0002 0746     		mov	r7, r0
 849 0004 1446     		mov	r4, r2
 850 0006 1E46     		mov	r6, r3
 851              	.LVL97:
 401:Ourwares/PC_gateway_comm.c **** 	u8 chk;		// Checksum computed on input bytes
 852              		.loc 1 401 0
 853 0008 4518     		adds	r5, r0, r1
 854              	.LVL98:
 406:Ourwares/PC_gateway_comm.c **** 	
 855              		.loc 1 406 0
 856 000a 1946     		mov	r1, r3
 857              	.LVL99:
 858 000c 1046     		mov	r0, r2
 859              	.LVL100:
 860 000e FFF7FEFF 		bl	CANgenchksum
 861              	.LVL101:
 400:Ourwares/PC_gateway_comm.c **** 	u8 *p2e = pout + outsize; // End of output buffer pointer
 862              		.loc 1 400 0
 863 0012 3B46     		mov	r3, r7
 409:Ourwares/PC_gateway_comm.c **** 	{
 864              		.loc 1 409 0
 865 0014 0022     		movs	r2, #0
 866 0016 16E0     		b	.L65
 867              	.LVL102:
 868              	.L69:
 411:Ourwares/PC_gateway_comm.c **** 		{
 869              		.loc 1 411 0
 870 0018 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 871 001a 0A29     		cmp	r1, #10
 872 001c 01D0     		beq	.L66
 411:Ourwares/PC_gateway_comm.c **** 		{
 873              		.loc 1 411 0 is_stmt 0 discriminator 1
 874 001e 7D29     		cmp	r1, #125
 875 0020 07D1     		bne	.L67
 876              	.L66:
 413:Ourwares/PC_gateway_comm.c **** 			if (p2 >= p2e) p2--;  // Prevent some bozo from overrunning the buffer.
 877              		.loc 1 413 0 is_stmt 1
 878 0022 591C     		adds	r1, r3, #1
 879              	.LVL103:
 880 0024 4FF07D0E 		mov	lr, #125
 881 0028 83F800E0 		strb	lr, [r3]
 414:Ourwares/PC_gateway_comm.c **** 		}
 882              		.loc 1 414 0
 883 002c 8D42     		cmp	r5, r1
 884 002e 00D9     		bls	.L67
 413:Ourwares/PC_gateway_comm.c **** 			if (p2 >= p2e) p2--;  // Prevent some bozo from overrunning the buffer.
 885              		.loc 1 413 0
ARM GAS  /tmp/cc2bndLQ.s 			page 29


 886 0030 0B46     		mov	r3, r1
 887              	.LVL104:
 888              	.L67:
 416:Ourwares/PC_gateway_comm.c **** 		if (p2 >= p2e) p2 -= 1; // Prevent buffer overflow by a thoughtless scoundrel.
 889              		.loc 1 416 0
 890 0032 591C     		adds	r1, r3, #1
 891              	.LVL105:
 892 0034 04F1010E 		add	lr, r4, #1
 893              	.LVL106:
 894 0038 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 895 003a 1C70     		strb	r4, [r3]
 417:Ourwares/PC_gateway_comm.c **** 	}
 896              		.loc 1 417 0
 897 003c 8D42     		cmp	r5, r1
 898 003e 00D9     		bls	.L68
 416:Ourwares/PC_gateway_comm.c **** 		if (p2 >= p2e) p2 -= 1; // Prevent buffer overflow by a thoughtless scoundrel.
 899              		.loc 1 416 0
 900 0040 0B46     		mov	r3, r1
 901              	.L68:
 902              	.LVL107:
 409:Ourwares/PC_gateway_comm.c **** 	{
 903              		.loc 1 409 0 discriminator 2
 904 0042 0132     		adds	r2, r2, #1
 905              	.LVL108:
 416:Ourwares/PC_gateway_comm.c **** 		if (p2 >= p2e) p2 -= 1; // Prevent buffer overflow by a thoughtless scoundrel.
 906              		.loc 1 416 0 discriminator 2
 907 0044 7446     		mov	r4, lr
 908              	.LVL109:
 909              	.L65:
 409:Ourwares/PC_gateway_comm.c **** 	{
 910              		.loc 1 409 0 discriminator 1
 911 0046 B242     		cmp	r2, r6
 912 0048 E6DB     		blt	.L69
 421:Ourwares/PC_gateway_comm.c **** 	{
 913              		.loc 1 421 0
 914 004a 0A28     		cmp	r0, #10
 915 004c 01D0     		beq	.L70
 421:Ourwares/PC_gateway_comm.c **** 	{
 916              		.loc 1 421 0 is_stmt 0 discriminator 1
 917 004e 7D28     		cmp	r0, #125
 918 0050 05D1     		bne	.L71
 919              	.L70:
 423:Ourwares/PC_gateway_comm.c **** 		if (p2 >= p2e) p2--;  	// Prevent some jerk from jamming too many bytes.
 920              		.loc 1 423 0 is_stmt 1
 921 0052 5A1C     		adds	r2, r3, #1
 922              	.LVL110:
 923 0054 7D21     		movs	r1, #125
 924 0056 1970     		strb	r1, [r3]
 424:Ourwares/PC_gateway_comm.c **** 	}
 925              		.loc 1 424 0
 926 0058 9542     		cmp	r5, r2
 927 005a 00D9     		bls	.L71
 423:Ourwares/PC_gateway_comm.c **** 		if (p2 >= p2e) p2--;  	// Prevent some jerk from jamming too many bytes.
 928              		.loc 1 423 0
 929 005c 1346     		mov	r3, r2
 930              	.LVL111:
 931              	.L71:
ARM GAS  /tmp/cc2bndLQ.s 			page 30


 426:Ourwares/PC_gateway_comm.c **** 	if (p2 >= p2e) p2--; 		// Prevent buffer overflow by some nefarious nerd.
 932              		.loc 1 426 0
 933 005e 5A1C     		adds	r2, r3, #1
 934              	.LVL112:
 935 0060 1870     		strb	r0, [r3]
 427:Ourwares/PC_gateway_comm.c **** 
 936              		.loc 1 427 0
 937 0062 9542     		cmp	r5, r2
 938 0064 00D9     		bls	.L72
 426:Ourwares/PC_gateway_comm.c **** 	if (p2 >= p2e) p2--; 		// Prevent buffer overflow by some nefarious nerd.
 939              		.loc 1 426 0
 940 0066 1346     		mov	r3, r2
 941              	.L72:
 942              	.LVL113:
 429:Ourwares/PC_gateway_comm.c **** 
 943              		.loc 1 429 0
 944 0068 581C     		adds	r0, r3, #1
 945              	.LVL114:
 946 006a 0A22     		movs	r2, #10
 947              	.LVL115:
 948 006c 1A70     		strb	r2, [r3]
 432:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 949              		.loc 1 432 0
 950 006e C01B     		subs	r0, r0, r7
 951              	.LVL116:
 952 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 953              		.cfi_endproc
 954              	.LFE137:
 956 0072 00BF     		.section	.text.PC_msg_prepASCII,"ax",%progbits
 957              		.align	2
 958              		.global	PC_msg_prepASCII
 959              		.thumb
 960              		.thumb_func
 962              	PC_msg_prepASCII:
 963              	.LFB138:
 449:Ourwares/PC_gateway_comm.c **** 	struct SERIALSENDTASKBCB* pbcb = *ppbcb;
 964              		.loc 1 449 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 8
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              	.LVL117:
 969 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 970              	.LCFI9:
 971              		.cfi_def_cfa_offset 36
 972              		.cfi_offset 4, -36
 973              		.cfi_offset 5, -32
 974              		.cfi_offset 6, -28
 975              		.cfi_offset 7, -24
 976              		.cfi_offset 8, -20
 977              		.cfi_offset 9, -16
 978              		.cfi_offset 10, -12
 979              		.cfi_offset 11, -8
 980              		.cfi_offset 14, -4
 981 0004 83B0     		sub	sp, sp, #12
 982              	.LCFI10:
 983              		.cfi_def_cfa_offset 48
 984 0006 8346     		mov	fp, r0
ARM GAS  /tmp/cc2bndLQ.s 			page 31


 985 0008 8846     		mov	r8, r1
 450:Ourwares/PC_gateway_comm.c **** 
 986              		.loc 1 450 0
 987 000a D0F80090 		ldr	r9, [r0]
 988              	.LVL118:
 453:Ourwares/PC_gateway_comm.c **** 
 989              		.loc 1 453 0
 990 000e 0023     		movs	r3, #0
 991 0010 1A46     		mov	r2, r3
 992 0012 1946     		mov	r1, r3
 993              	.LVL119:
 994 0014 D9F80800 		ldr	r0, [r9, #8]
 995              	.LVL120:
 996 0018 FFF7FEFF 		bl	xQueueGenericReceive
 997              	.LVL121:
 455:Ourwares/PC_gateway_comm.c **** 
 998              		.loc 1 455 0
 999 001c D9F80CA0 		ldr	r10, [r9, #12]
 1000              	.LVL122:
 457:Ourwares/PC_gateway_comm.c **** 	char *p2 = pout;	// Working pointer
 1001              		.loc 1 457 0
 1002 0020 4446     		mov	r4, r8
 1003              	.LVL123:
 459:Ourwares/PC_gateway_comm.c **** 	u8 chk;			// Checksum computed on input bytes
 1004              		.loc 1 459 0
 1005 0022 B9F81270 		ldrh	r7, [r9, #18]
 1006 0026 043F     		subs	r7, r7, #4
 1007 0028 5744     		add	r7, r7, r10
 1008              	.LVL124:
 464:Ourwares/PC_gateway_comm.c **** 	
 1009              		.loc 1 464 0
 1010 002a B8F91C10 		ldrsh	r1, [r8, #28]
 1011 002e 4046     		mov	r0, r8
 1012 0030 FFF7FEFF 		bl	CANgenchksum
 1013              	.LVL125:
 1014 0034 0190     		str	r0, [sp, #4]
 1015              	.LVL126:
 458:Ourwares/PC_gateway_comm.c **** 	char *p2e = pout + pbcb->maxsize - 4; // End of output buffer pointer (less checksum and newline)
 1016              		.loc 1 458 0
 1017 0036 5046     		mov	r0, r10
 461:Ourwares/PC_gateway_comm.c **** 
 1018              		.loc 1 461 0
 1019 0038 0023     		movs	r3, #0
 467:Ourwares/PC_gateway_comm.c **** 		p2 = hex(p2, *pin++);
 1020              		.loc 1 467 0
 1021 003a 05E0     		b	.L75
 1022              	.LVL127:
 1023              	.L77:
 468:Ourwares/PC_gateway_comm.c **** 
 1024              		.loc 1 468 0
 1025 003c 661C     		adds	r6, r4, #1
 1026              	.LVL128:
 1027 003e 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 1028 0040 FFF7FEFF 		bl	hex
 1029              	.LVL129:
 467:Ourwares/PC_gateway_comm.c **** 		p2 = hex(p2, *pin++);
 1030              		.loc 1 467 0
ARM GAS  /tmp/cc2bndLQ.s 			page 32


 1031 0044 2B46     		mov	r3, r5
 468:Ourwares/PC_gateway_comm.c **** 
 1032              		.loc 1 468 0
 1033 0046 3446     		mov	r4, r6
 1034              	.LVL130:
 1035              	.L75:
 467:Ourwares/PC_gateway_comm.c **** 		p2 = hex(p2, *pin++);
 1036              		.loc 1 467 0
 1037 0048 B842     		cmp	r0, r7
 1038 004a 04D2     		bcs	.L76
 467:Ourwares/PC_gateway_comm.c **** 		p2 = hex(p2, *pin++);
 1039              		.loc 1 467 0 is_stmt 0 discriminator 1
 1040 004c 5D1C     		adds	r5, r3, #1
 1041              	.LVL131:
 1042 004e B8F91C20 		ldrsh	r2, [r8, #28]
 1043 0052 9342     		cmp	r3, r2
 1044 0054 F2DB     		blt	.L77
 1045              	.LVL132:
 1046              	.L76:
 471:Ourwares/PC_gateway_comm.c **** 
 1047              		.loc 1 471 0 is_stmt 1
 1048 0056 0199     		ldr	r1, [sp, #4]
 1049 0058 FFF7FEFF 		bl	hex
 1050              	.LVL133:
 474:Ourwares/PC_gateway_comm.c **** //if (p->ct >= 16) while(1==1);
 1051              		.loc 1 474 0
 1052 005c 431C     		adds	r3, r0, #1
 1053              	.LVL134:
 1054 005e 0A22     		movs	r2, #10
 1055 0060 0270     		strb	r2, [r0]
 476:Ourwares/PC_gateway_comm.c **** 
 1056              		.loc 1 476 0
 1057 0062 CAEB030A 		rsb	r10, r10, r3
 1058              	.LVL135:
 1059 0066 A9F810A0 		strh	r10, [r9, #16]	@ movhi
 479:Ourwares/PC_gateway_comm.c **** 
 1060              		.loc 1 479 0
 1061 006a 5846     		mov	r0, fp
 1062 006c FFF7FEFF 		bl	vSerialTaskSendQueueBuf
 1063              	.LVL136:
 482:Ourwares/PC_gateway_comm.c **** 
 1064              		.loc 1 482 0
 1065 0070 5046     		mov	r0, r10
 1066 0072 03B0     		add	sp, sp, #12
 1067              	.LCFI11:
 1068              		.cfi_def_cfa_offset 36
 1069              		@ sp needed
 1070 0074 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1071              		.cfi_endproc
 1072              	.LFE138:
 1074              		.section	.text.CANcompress,"ax",%progbits
 1075              		.align	2
 1076              		.global	CANcompress
 1077              		.thumb
 1078              		.thumb_func
 1080              	CANcompress:
 1081              	.LFB141:
ARM GAS  /tmp/cc2bndLQ.s 			page 33


 507:Ourwares/PC_gateway_comm.c **** 
 1082              		.loc 1 507 0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 1086              	.LVL137:
 1087 0000 70B5     		push	{r4, r5, r6, lr}
 1088              	.LCFI12:
 1089              		.cfi_def_cfa_offset 16
 1090              		.cfi_offset 4, -16
 1091              		.cfi_offset 5, -12
 1092              		.cfi_offset 6, -8
 1093              		.cfi_offset 14, -4
 1094 0002 0546     		mov	r5, r0
 1095 0004 0E46     		mov	r6, r1
 513:Ourwares/PC_gateway_comm.c **** 	if (ret < 0) return ret;	// Return: not a valid CAN bus msg id
 1096              		.loc 1 513 0
 1097 0006 0868     		ldr	r0, [r1]
 1098              	.LVL138:
 1099 0008 FFF7FEFF 		bl	CAN_id_valid
 1100              	.LVL139:
 514:Ourwares/PC_gateway_comm.c **** 
 1101              		.loc 1 514 0
 1102 000c 0028     		cmp	r0, #0
 1103 000e 3FDB     		blt	.L80
 516:Ourwares/PC_gateway_comm.c **** 
 1104              		.loc 1 516 0
 1105 0010 AB7F     		ldrb	r3, [r5, #30]	@ zero_extendqisi2
 1106 0012 2B70     		strb	r3, [r5]
 518:Ourwares/PC_gateway_comm.c **** 	
 1107              		.loc 1 518 0
 1108 0014 7468     		ldr	r4, [r6, #4]
 1109 0016 04F00F04 		and	r4, r4, #15
 1110              	.LVL140:
 520:Ourwares/PC_gateway_comm.c **** 	{ // Here, 29 bit id msg
 1111              		.loc 1 520 0
 1112 001a 15DD     		ble	.L81
 522:Ourwares/PC_gateway_comm.c **** 
 1113              		.loc 1 522 0
 1114 001c 3168     		ldr	r1, [r6]
 1115 001e 41F00101 		orr	r1, r1, #1
 1116 0022 681C     		adds	r0, r5, #1
 1117              	.LVL141:
 1118 0024 FFF7FEFF 		bl	strwrd
 1119              	.LVL142:
 524:Ourwares/PC_gateway_comm.c **** 		pout->cm[5] = (u8)tmp;
 1120              		.loc 1 524 0
 1121 0028 082C     		cmp	r4, #8
 1122 002a 2CD8     		bhi	.L88
 525:Ourwares/PC_gateway_comm.c **** 
 1123              		.loc 1 525 0
 1124 002c 6C71     		strb	r4, [r5, #5]
 1125              	.LVL143:
 527:Ourwares/PC_gateway_comm.c **** 			pout->cm[i+6] = pin->cd.u8[i];
 1126              		.loc 1 527 0
 1127 002e 0023     		movs	r3, #0
 1128 0030 04E0     		b	.L82
ARM GAS  /tmp/cc2bndLQ.s 			page 34


 1129              	.LVL144:
 1130              	.L83:
 528:Ourwares/PC_gateway_comm.c **** 
 1131              		.loc 1 528 0 discriminator 3
 1132 0032 9A1D     		adds	r2, r3, #6
 1133 0034 F118     		adds	r1, r6, r3
 1134 0036 097A     		ldrb	r1, [r1, #8]	@ zero_extendqisi2
 1135 0038 A954     		strb	r1, [r5, r2]
 527:Ourwares/PC_gateway_comm.c **** 			pout->cm[i+6] = pin->cd.u8[i];
 1136              		.loc 1 527 0 discriminator 3
 1137 003a 0133     		adds	r3, r3, #1
 1138              	.LVL145:
 1139              	.L82:
 527:Ourwares/PC_gateway_comm.c **** 			pout->cm[i+6] = pin->cd.u8[i];
 1140              		.loc 1 527 0 is_stmt 0 discriminator 1
 1141 003c A342     		cmp	r3, r4
 1142 003e F8D3     		bcc	.L83
 530:Ourwares/PC_gateway_comm.c **** 		return 0;
 1143              		.loc 1 530 0 is_stmt 1
 1144 0040 0634     		adds	r4, r4, #6
 1145              	.LVL146:
 1146 0042 AC83     		strh	r4, [r5, #28]	@ movhi
 531:Ourwares/PC_gateway_comm.c **** 	}
 1147              		.loc 1 531 0
 1148 0044 0020     		movs	r0, #0
 1149 0046 70BD     		pop	{r4, r5, r6, pc}
 1150              	.LVL147:
 1151              	.L81:
 534:Ourwares/PC_gateway_comm.c **** 
 1152              		.loc 1 534 0
 1153 0048 082C     		cmp	r4, #8
 1154 004a 1FD8     		bhi	.L89
 536:Ourwares/PC_gateway_comm.c **** 
 1155              		.loc 1 536 0
 1156 004c E31C     		adds	r3, r4, #3
 1157 004e AB83     		strh	r3, [r5, #28]	@ movhi
 538:Ourwares/PC_gateway_comm.c **** 	{ // Here, give RTR a special dlc count
 1158              		.loc 1 538 0
 1159 0050 3368     		ldr	r3, [r6]
 1160 0052 13F0020F 		tst	r3, #2
 1161 0056 09D1     		bne	.L90
 1162 0058 0023     		movs	r3, #0
 1163 005a 04E0     		b	.L85
 1164              	.LVL148:
 1165              	.L86:
 545:Ourwares/PC_gateway_comm.c **** 	}
 1166              		.loc 1 545 0 discriminator 3
 1167 005c DA1C     		adds	r2, r3, #3
 1168 005e F118     		adds	r1, r6, r3
 1169 0060 097A     		ldrb	r1, [r1, #8]	@ zero_extendqisi2
 1170 0062 A954     		strb	r1, [r5, r2]
 544:Ourwares/PC_gateway_comm.c **** 			pout->cm[i+3] = pin->cd.u8[i];
 1171              		.loc 1 544 0 discriminator 3
 1172 0064 0133     		adds	r3, r3, #1
 1173              	.LVL149:
 1174              	.L85:
 544:Ourwares/PC_gateway_comm.c **** 			pout->cm[i+3] = pin->cd.u8[i];
ARM GAS  /tmp/cc2bndLQ.s 			page 35


 1175              		.loc 1 544 0 is_stmt 0 discriminator 1
 1176 0066 A342     		cmp	r3, r4
 1177 0068 F8D3     		bcc	.L86
 1178 006a 00E0     		b	.L84
 1179              	.LVL150:
 1180              	.L90:
 540:Ourwares/PC_gateway_comm.c **** 	}
 1181              		.loc 1 540 0 is_stmt 1
 1182 006c 0924     		movs	r4, #9
 1183              	.LVL151:
 1184              	.L84:
 548:Ourwares/PC_gateway_comm.c **** 	pout->cm[1] &= ~0x1f;
 1185              		.loc 1 548 0
 1186 006e 7188     		ldrh	r1, [r6, #2]
 1187 0070 681C     		adds	r0, r5, #1
 1188              	.LVL152:
 1189 0072 FFF7FEFF 		bl	strhalfwrd
 1190              	.LVL153:
 549:Ourwares/PC_gateway_comm.c **** 	pout->cm[1] |= (u8)(tmp << 1);	
 1191              		.loc 1 549 0
 1192 0076 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1193 0078 03F0E003 		and	r3, r3, #224
 550:Ourwares/PC_gateway_comm.c **** 
 1194              		.loc 1 550 0
 1195 007c 43EA4404 		orr	r4, r3, r4, lsl #1
 1196              	.LVL154:
 1197 0080 6C70     		strb	r4, [r5, #1]
 552:Ourwares/PC_gateway_comm.c **** }
 1198              		.loc 1 552 0
 1199 0082 0020     		movs	r0, #0
 1200 0084 70BD     		pop	{r4, r5, r6, pc}
 1201              	.LVL155:
 1202              	.L88:
 524:Ourwares/PC_gateway_comm.c **** 		pout->cm[5] = (u8)tmp;
 1203              		.loc 1 524 0
 1204 0086 4FF0FF30 		mov	r0, #-1
 1205 008a 70BD     		pop	{r4, r5, r6, pc}
 1206              	.LVL156:
 1207              	.L89:
 534:Ourwares/PC_gateway_comm.c **** 
 1208              		.loc 1 534 0
 1209 008c 6FF00100 		mvn	r0, #1
 1210              	.LVL157:
 1211              	.L80:
 553:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 1212              		.loc 1 553 0
 1213 0090 70BD     		pop	{r4, r5, r6, pc}
 1214              		.cfi_endproc
 1215              	.LFE141:
 1217 0092 00BF     		.section	.text.CANcompress_G,"ax",%progbits
 1218              		.align	2
 1219              		.global	CANcompress_G
 1220              		.thumb
 1221              		.thumb_func
 1223              	CANcompress_G:
 1224              	.LFB142:
 568:Ourwares/PC_gateway_comm.c **** 	u32 i;
ARM GAS  /tmp/cc2bndLQ.s 			page 36


 1225              		.loc 1 568 0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 0
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 1229              	.LVL158:
 1230 0000 38B5     		push	{r3, r4, r5, lr}
 1231              	.LCFI13:
 1232              		.cfi_def_cfa_offset 16
 1233              		.cfi_offset 3, -16
 1234              		.cfi_offset 4, -12
 1235              		.cfi_offset 5, -8
 1236              		.cfi_offset 14, -4
 1237 0002 0446     		mov	r4, r0
 1238 0004 0D46     		mov	r5, r1
 572:Ourwares/PC_gateway_comm.c **** 	strwrd( &pout->cm[1], pcan->id );	// 
 1239              		.loc 1 572 0
 1240 0006 837F     		ldrb	r3, [r0, #30]	@ zero_extendqisi2
 1241 0008 00F8013B 		strb	r3, [r0], #1
 1242              	.LVL159:
 573:Ourwares/PC_gateway_comm.c **** 	tmp = (pcan->dlc & 0xf);
 1243              		.loc 1 573 0
 1244 000c 0968     		ldr	r1, [r1]
 1245              	.LVL160:
 1246 000e FFF7FEFF 		bl	strwrd
 1247              	.LVL161:
 574:Ourwares/PC_gateway_comm.c **** 
 1248              		.loc 1 574 0
 1249 0012 6A68     		ldr	r2, [r5, #4]
 1250 0014 02F00F02 		and	r2, r2, #15
 1251              	.LVL162:
 576:Ourwares/PC_gateway_comm.c **** 	pout->cm[5] = tmp;
 1252              		.loc 1 576 0
 1253 0018 082A     		cmp	r2, #8
 1254 001a 0DD8     		bhi	.L96
 577:Ourwares/PC_gateway_comm.c **** 
 1255              		.loc 1 577 0
 1256 001c 6271     		strb	r2, [r4, #5]
 1257              	.LVL163:
 579:Ourwares/PC_gateway_comm.c **** 		pout->cm[i+6] = pcan->cd.u8[i];
 1258              		.loc 1 579 0
 1259 001e 0023     		movs	r3, #0
 1260 0020 04E0     		b	.L94
 1261              	.LVL164:
 1262              	.L95:
 580:Ourwares/PC_gateway_comm.c **** 
 1263              		.loc 1 580 0 discriminator 3
 1264 0022 991D     		adds	r1, r3, #6
 1265 0024 E818     		adds	r0, r5, r3
 1266 0026 007A     		ldrb	r0, [r0, #8]	@ zero_extendqisi2
 1267 0028 6054     		strb	r0, [r4, r1]
 579:Ourwares/PC_gateway_comm.c **** 		pout->cm[i+6] = pcan->cd.u8[i];
 1268              		.loc 1 579 0 discriminator 3
 1269 002a 0133     		adds	r3, r3, #1
 1270              	.LVL165:
 1271              	.L94:
 579:Ourwares/PC_gateway_comm.c **** 		pout->cm[i+6] = pcan->cd.u8[i];
 1272              		.loc 1 579 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/cc2bndLQ.s 			page 37


 1273 002c 9342     		cmp	r3, r2
 1274 002e F8D3     		bcc	.L95
 582:Ourwares/PC_gateway_comm.c **** 
 1275              		.loc 1 582 0 is_stmt 1
 1276 0030 0632     		adds	r2, r2, #6
 1277              	.LVL166:
 1278 0032 A283     		strh	r2, [r4, #28]	@ movhi
 584:Ourwares/PC_gateway_comm.c **** }
 1279              		.loc 1 584 0
 1280 0034 0020     		movs	r0, #0
 1281 0036 38BD     		pop	{r3, r4, r5, pc}
 1282              	.LVL167:
 1283              	.L96:
 576:Ourwares/PC_gateway_comm.c **** 	pout->cm[5] = tmp;
 1284              		.loc 1 576 0
 1285 0038 4FF0FF30 		mov	r0, #-1
 585:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 1286              		.loc 1 585 0
 1287 003c 38BD     		pop	{r3, r4, r5, pc}
 1288              		.cfi_endproc
 1289              	.LFE142:
 1291 003e 00BF     		.section	.text.CANuncompress,"ax",%progbits
 1292              		.align	2
 1293              		.global	CANuncompress
 1294              		.thumb
 1295              		.thumb_func
 1297              	CANuncompress:
 1298              	.LFB145:
 612:Ourwares/PC_gateway_comm.c **** 
 613:Ourwares/PC_gateway_comm.c **** int CANuncompress(struct CANRCVBUF* pout,  struct PCTOGATECOMPRESSED* pin)
 614:Ourwares/PC_gateway_comm.c **** {
 1299              		.loc 1 614 0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303              	.LVL168:
 1304 0000 38B5     		push	{r3, r4, r5, lr}
 1305              	.LCFI14:
 1306              		.cfi_def_cfa_offset 16
 1307              		.cfi_offset 3, -16
 1308              		.cfi_offset 4, -12
 1309              		.cfi_offset 5, -8
 1310              		.cfi_offset 14, -4
 1311 0002 0546     		mov	r5, r0
 1312 0004 0C46     		mov	r4, r1
 1313              	.LVL169:
 615:Ourwares/PC_gateway_comm.c **** 	u32 i;
 616:Ourwares/PC_gateway_comm.c **** 	u32 tmp = 0;
 617:Ourwares/PC_gateway_comm.c **** 	if ((pin->cm[1] & 0x01) != 0)	// Is this an 11 bit or 29 bit id?
 1314              		.loc 1 617 0
 1315 0006 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1316 0008 13F0010F 		tst	r3, #1
 1317 000c 1ED0     		beq	.L99
 618:Ourwares/PC_gateway_comm.c **** 	{ // Here, a 29 bit 
 619:Ourwares/PC_gateway_comm.c **** 		if (pin->ct < 6) return -1;	// Too few bytes to a valid 29b compressed msg
 1318              		.loc 1 619 0
 1319 000e B1F91C30 		ldrsh	r3, [r1, #28]
ARM GAS  /tmp/cc2bndLQ.s 			page 38


 1320 0012 052B     		cmp	r3, #5
 1321 0014 42DD     		ble	.L106
 620:Ourwares/PC_gateway_comm.c **** 		pout->id = getwd (&pin->cm[1]);	// Get 4 bytes into word format
 1322              		.loc 1 620 0
 1323 0016 481C     		adds	r0, r1, #1
 1324              	.LVL170:
 1325 0018 FFF7FEFF 		bl	getwd
 1326              	.LVL171:
 621:Ourwares/PC_gateway_comm.c **** 		pout->id &= ~0x1;		// Low bit OFF (reserved for hardware transmit trigger)
 1327              		.loc 1 621 0
 1328 001c 20F00100 		bic	r0, r0, #1
 1329 0020 2860     		str	r0, [r5]
 622:Ourwares/PC_gateway_comm.c **** 
 623:Ourwares/PC_gateway_comm.c **** 		tmp = pin->cm[5];		// dlc byte
 1330              		.loc 1 623 0
 1331 0022 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1332 0024 1846     		mov	r0, r3
 1333              	.LVL172:
 624:Ourwares/PC_gateway_comm.c **** 		if (tmp > 8)	return -2;	// dlc: payload ct too large (> 8)
 1334              		.loc 1 624 0
 1335 0026 082B     		cmp	r3, #8
 1336 0028 3BD8     		bhi	.L107
 625:Ourwares/PC_gateway_comm.c **** 		pout->dlc = tmp;
 1337              		.loc 1 625 0
 1338 002a 6B60     		str	r3, [r5, #4]
 626:Ourwares/PC_gateway_comm.c **** 		
 627:Ourwares/PC_gateway_comm.c **** 		if (pin->ct != (s16)(6 + tmp)) return -3; // dlc doesn't match byte count
 1339              		.loc 1 627 0
 1340 002c B4F91C20 		ldrsh	r2, [r4, #28]
 1341 0030 0633     		adds	r3, r3, #6
 1342 0032 9A42     		cmp	r2, r3
 1343 0034 38D1     		bne	.L108
 1344 0036 0023     		movs	r3, #0
 1345 0038 04E0     		b	.L101
 1346              	.LVL173:
 1347              	.L102:
 628:Ourwares/PC_gateway_comm.c **** 
 629:Ourwares/PC_gateway_comm.c **** 		for (i = 0; i < tmp; i++)	// Copy payload
 630:Ourwares/PC_gateway_comm.c **** 			pout->cd.u8[i] = pin->cm[i + 5];
 1348              		.loc 1 630 0 discriminator 3
 1349 003a 5A1D     		adds	r2, r3, #5
 1350 003c A15C     		ldrb	r1, [r4, r2]	@ zero_extendqisi2
 1351 003e EA18     		adds	r2, r5, r3
 1352 0040 1172     		strb	r1, [r2, #8]
 629:Ourwares/PC_gateway_comm.c **** 			pout->cd.u8[i] = pin->cm[i + 5];
 1353              		.loc 1 629 0 discriminator 3
 1354 0042 0133     		adds	r3, r3, #1
 1355              	.LVL174:
 1356              	.L101:
 629:Ourwares/PC_gateway_comm.c **** 			pout->cd.u8[i] = pin->cm[i + 5];
 1357              		.loc 1 629 0 is_stmt 0 discriminator 1
 1358 0044 8342     		cmp	r3, r0
 1359 0046 F8D3     		bcc	.L102
 631:Ourwares/PC_gateway_comm.c **** 		return 0;	// Success with 29 bit id msg.
 1360              		.loc 1 631 0 is_stmt 1
 1361 0048 0020     		movs	r0, #0
 1362              	.LVL175:
ARM GAS  /tmp/cc2bndLQ.s 			page 39


 1363 004a 38BD     		pop	{r3, r4, r5, pc}
 1364              	.LVL176:
 1365              	.L99:
 632:Ourwares/PC_gateway_comm.c **** 	}
 633:Ourwares/PC_gateway_comm.c **** 	/* Here, an 11 bit id. */
 634:Ourwares/PC_gateway_comm.c **** 	if (pin->ct < 3) return -4;		// Too few bytes to a valid 11b compressed msg
 1366              		.loc 1 634 0
 1367 004c B1F91C30 		ldrsh	r3, [r1, #28]
 1368 0050 022B     		cmp	r3, #2
 1369 0052 2CDD     		ble	.L109
 635:Ourwares/PC_gateway_comm.c **** 
 636:Ourwares/PC_gateway_comm.c **** 	/* Extract id and dlc|rtr from half word */
 637:Ourwares/PC_gateway_comm.c **** 	tmp = gethalfwd (&pin->cm[1]);		// Get 2 bytes into half word form
 1370              		.loc 1 637 0
 1371 0054 481C     		adds	r0, r1, #1
 1372              	.LVL177:
 1373 0056 FFF7FEFF 		bl	gethalfwd
 1374              	.LVL178:
 638:Ourwares/PC_gateway_comm.c **** 	pout->id = ((tmp << 16) & 0xffe00000);	// Positon 11b id with dlc stripped.
 1375              		.loc 1 638 0
 1376 005a C0F34A13 		ubfx	r3, r0, #5, #11
 1377 005e 5B05     		lsls	r3, r3, #21
 1378 0060 2B60     		str	r3, [r5]
 639:Ourwares/PC_gateway_comm.c **** 	tmp = ((tmp >> 1) & 0xf);		// Extract dlc embedded in id's low ord bits
 1379              		.loc 1 639 0
 1380 0062 C0F34300 		ubfx	r0, r0, #1, #4
 1381              	.LVL179:
 640:Ourwares/PC_gateway_comm.c **** 	pout->dlc = tmp;			// Set payload byte ct
 1382              		.loc 1 640 0
 1383 0066 6860     		str	r0, [r5, #4]
 641:Ourwares/PC_gateway_comm.c **** 
 642:Ourwares/PC_gateway_comm.c **** 	if (tmp > 9)	return -5;		// dlc: payload ct too large (> 8)
 1384              		.loc 1 642 0
 1385 0068 0928     		cmp	r0, #9
 1386 006a 23D8     		bhi	.L110
 643:Ourwares/PC_gateway_comm.c **** 	if (tmp == 9)				// Check for RTR
 1387              		.loc 1 643 0
 1388 006c 04D1     		bne	.L103
 644:Ourwares/PC_gateway_comm.c **** 	{ // Here, dlc count code means RTR
 645:Ourwares/PC_gateway_comm.c **** 		pout->id |= 0x2;		// Set RTR bit in id
 1389              		.loc 1 645 0
 1390 006e 43F00203 		orr	r3, r3, #2
 1391 0072 2B60     		str	r3, [r5]
 646:Ourwares/PC_gateway_comm.c **** 		pout->dlc = 0;			// RTR only has zero payload ct
 1392              		.loc 1 646 0
 1393 0074 0023     		movs	r3, #0
 1394 0076 6B60     		str	r3, [r5, #4]
 1395              	.L103:
 647:Ourwares/PC_gateway_comm.c **** 	}
 648:Ourwares/PC_gateway_comm.c **** 
 649:Ourwares/PC_gateway_comm.c **** 	if (pin->ct != (s16)(3 + pout->dlc)) return -6; // dlc doesn't match byte count
 1396              		.loc 1 649 0
 1397 0078 B4F91C20 		ldrsh	r2, [r4, #28]
 1398 007c 6868     		ldr	r0, [r5, #4]
 1399              	.LVL180:
 1400 007e C31C     		adds	r3, r0, #3
 1401 0080 1BB2     		sxth	r3, r3
ARM GAS  /tmp/cc2bndLQ.s 			page 40


 1402 0082 9A42     		cmp	r2, r3
 1403 0084 19D1     		bne	.L111
 1404 0086 0023     		movs	r3, #0
 1405 0088 04E0     		b	.L104
 1406              	.LVL181:
 1407              	.L105:
 650:Ourwares/PC_gateway_comm.c **** 
 651:Ourwares/PC_gateway_comm.c **** 	for (i = 0; i < pout->dlc; i++)		// Copy payload
 652:Ourwares/PC_gateway_comm.c **** 		pout->cd.u8[i] = pin->cm[i + 3];
 1408              		.loc 1 652 0 discriminator 3
 1409 008a DA1C     		adds	r2, r3, #3
 1410 008c A15C     		ldrb	r1, [r4, r2]	@ zero_extendqisi2
 1411 008e EA18     		adds	r2, r5, r3
 1412 0090 1172     		strb	r1, [r2, #8]
 651:Ourwares/PC_gateway_comm.c **** 		pout->cd.u8[i] = pin->cm[i + 3];
 1413              		.loc 1 651 0 discriminator 3
 1414 0092 0133     		adds	r3, r3, #1
 1415              	.LVL182:
 1416              	.L104:
 651:Ourwares/PC_gateway_comm.c **** 		pout->cd.u8[i] = pin->cm[i + 3];
 1417              		.loc 1 651 0 is_stmt 0 discriminator 1
 1418 0094 8342     		cmp	r3, r0
 1419 0096 F8D3     		bcc	.L105
 653:Ourwares/PC_gateway_comm.c **** 
 654:Ourwares/PC_gateway_comm.c **** 	return 0;	// Success with 11 bit id msg.
 1420              		.loc 1 654 0 is_stmt 1
 1421 0098 0020     		movs	r0, #0
 1422 009a 38BD     		pop	{r3, r4, r5, pc}
 1423              	.LVL183:
 1424              	.L106:
 619:Ourwares/PC_gateway_comm.c **** 		pout->id = getwd (&pin->cm[1]);	// Get 4 bytes into word format
 1425              		.loc 1 619 0
 1426 009c 4FF0FF30 		mov	r0, #-1
 1427              	.LVL184:
 1428 00a0 38BD     		pop	{r3, r4, r5, pc}
 1429              	.LVL185:
 1430              	.L107:
 624:Ourwares/PC_gateway_comm.c **** 		pout->dlc = tmp;
 1431              		.loc 1 624 0
 1432 00a2 6FF00100 		mvn	r0, #1
 1433              	.LVL186:
 1434 00a6 38BD     		pop	{r3, r4, r5, pc}
 1435              	.LVL187:
 1436              	.L108:
 627:Ourwares/PC_gateway_comm.c **** 
 1437              		.loc 1 627 0
 1438 00a8 6FF00200 		mvn	r0, #2
 1439              	.LVL188:
 1440 00ac 38BD     		pop	{r3, r4, r5, pc}
 1441              	.LVL189:
 1442              	.L109:
 634:Ourwares/PC_gateway_comm.c **** 
 1443              		.loc 1 634 0
 1444 00ae 6FF00300 		mvn	r0, #3
 1445              	.LVL190:
 1446 00b2 38BD     		pop	{r3, r4, r5, pc}
 1447              	.LVL191:
ARM GAS  /tmp/cc2bndLQ.s 			page 41


 1448              	.L110:
 642:Ourwares/PC_gateway_comm.c **** 	if (tmp == 9)				// Check for RTR
 1449              		.loc 1 642 0
 1450 00b4 6FF00400 		mvn	r0, #4
 1451              	.LVL192:
 1452 00b8 38BD     		pop	{r3, r4, r5, pc}
 1453              	.LVL193:
 1454              	.L111:
 649:Ourwares/PC_gateway_comm.c **** 
 1455              		.loc 1 649 0
 1456 00ba 6FF00500 		mvn	r0, #5
 655:Ourwares/PC_gateway_comm.c **** }
 1457              		.loc 1 655 0
 1458 00be 38BD     		pop	{r3, r4, r5, pc}
 1459              		.cfi_endproc
 1460              	.LFE145:
 1462              		.section	.text.CANuncompress_G,"ax",%progbits
 1463              		.align	2
 1464              		.global	CANuncompress_G
 1465              		.thumb
 1466              		.thumb_func
 1468              	CANuncompress_G:
 1469              	.LFB146:
 656:Ourwares/PC_gateway_comm.c **** /* **************************************************************************************
 657:Ourwares/PC_gateway_comm.c ****  * int CANuncompress_G(struct CANRCVBUF* pout,  struct PCTOGATECOMPRESSED* pin);
 658:Ourwares/PC_gateway_comm.c ****  * @brief	: Given a binary msg (w/o byte stuffing/framing), convert to "standard" CAN register form
 659:Ourwares/PC_gateway_comm.c ****  * @param	: pout = pointer to output w uncompressed msg in register format
 660:Ourwares/PC_gateway_comm.c ****  * @param	: pin = pointer to input with compressed (binary) msg
 661:Ourwares/PC_gateway_comm.c ****  * @return	:  0 = OK, and--
 662:Ourwares/PC_gateway_comm.c ****  *        	:    pin->seq = 1st byte of received (binary) frame
 663:Ourwares/PC_gateway_comm.c ****  *        	:    pout = struct filled with id, dlc, payload
 664:Ourwares/PC_gateway_comm.c ****  *		: negative = Some error--
 665:Ourwares/PC_gateway_comm.c ****  *		: -1 = Too few bytes to a valid 29b compressed msg
 666:Ourwares/PC_gateway_comm.c ****  *		: -2 = dlc: payload ct too large (> 8) in a 29 bit id msg
 667:Ourwares/PC_gateway_comm.c ****  *		: -3 = dlc doesn't match byte count in a 29 bit id msg
 668:Ourwares/PC_gateway_comm.c ****  * Note: see '../svn_discoveryf4/docs/trunk/Userdocs/gateway_format.txt'
 669:Ourwares/PC_gateway_comm.c ****  * Note: 'cm[0] holds the sequence number
 670:Ourwares/PC_gateway_comm.c ****  * ************************************************************************************** */
 671:Ourwares/PC_gateway_comm.c **** int CANuncompress_G(struct CANRCVBUF* pout,  struct PCTOGATECOMPRESSED* pin)
 672:Ourwares/PC_gateway_comm.c **** {
 1470              		.loc 1 672 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 1474              	.LVL194:
 1475 0000 38B5     		push	{r3, r4, r5, lr}
 1476              	.LCFI15:
 1477              		.cfi_def_cfa_offset 16
 1478              		.cfi_offset 3, -16
 1479              		.cfi_offset 4, -12
 1480              		.cfi_offset 5, -8
 1481              		.cfi_offset 14, -4
 1482              	.LVL195:
 673:Ourwares/PC_gateway_comm.c **** 	u32 i;
 674:Ourwares/PC_gateway_comm.c **** 	u32 tmp = 0;
 675:Ourwares/PC_gateway_comm.c **** 
 676:Ourwares/PC_gateway_comm.c **** 	if (pin->ct < 6) return -1;		// Too few bytes to a valid msg	
ARM GAS  /tmp/cc2bndLQ.s 			page 42


 1483              		.loc 1 676 0
 1484 0002 B1F91C30 		ldrsh	r3, [r1, #28]
 1485 0006 052B     		cmp	r3, #5
 1486 0008 1ADD     		ble	.L117
 1487 000a 0C46     		mov	r4, r1
 1488 000c 0546     		mov	r5, r0
 677:Ourwares/PC_gateway_comm.c **** 	pout->id = getwd (&pin->cm[1]);		// Get 4 bytes into word format
 1489              		.loc 1 677 0
 1490 000e 481C     		adds	r0, r1, #1
 1491              	.LVL196:
 1492 0010 FFF7FEFF 		bl	getwd
 1493              	.LVL197:
 1494 0014 2860     		str	r0, [r5]
 678:Ourwares/PC_gateway_comm.c **** 	tmp = pin->cm[5];			// dlc byte
 1495              		.loc 1 678 0
 1496 0016 6379     		ldrb	r3, [r4, #5]	@ zero_extendqisi2
 1497 0018 1846     		mov	r0, r3
 1498              	.LVL198:
 679:Ourwares/PC_gateway_comm.c **** 	if (tmp > 8)	return -2;		// dlc: payload ct too large (> 8)
 1499              		.loc 1 679 0
 1500 001a 082B     		cmp	r3, #8
 1501 001c 13D8     		bhi	.L118
 680:Ourwares/PC_gateway_comm.c **** 	if (pin->ct != (s16)(6 + tmp)) return -3; // dlc doesn't match byte count
 1502              		.loc 1 680 0
 1503 001e B4F91C10 		ldrsh	r1, [r4, #28]
 1504 0022 9A1D     		adds	r2, r3, #6
 1505 0024 9142     		cmp	r1, r2
 1506 0026 11D1     		bne	.L119
 681:Ourwares/PC_gateway_comm.c **** 	pout->dlc = tmp;
 1507              		.loc 1 681 0
 1508 0028 6B60     		str	r3, [r5, #4]
 1509              	.LVL199:
 682:Ourwares/PC_gateway_comm.c **** 	for (i = 0; i < tmp; i++)		// Copy payload
 1510              		.loc 1 682 0
 1511 002a 0023     		movs	r3, #0
 1512 002c 04E0     		b	.L115
 1513              	.LVL200:
 1514              	.L116:
 683:Ourwares/PC_gateway_comm.c **** 		pout->cd.u8[i] = pin->cm[i + 6];
 1515              		.loc 1 683 0 discriminator 3
 1516 002e 9A1D     		adds	r2, r3, #6
 1517 0030 A15C     		ldrb	r1, [r4, r2]	@ zero_extendqisi2
 1518 0032 EA18     		adds	r2, r5, r3
 1519 0034 1172     		strb	r1, [r2, #8]
 682:Ourwares/PC_gateway_comm.c **** 	for (i = 0; i < tmp; i++)		// Copy payload
 1520              		.loc 1 682 0 discriminator 3
 1521 0036 0133     		adds	r3, r3, #1
 1522              	.LVL201:
 1523              	.L115:
 682:Ourwares/PC_gateway_comm.c **** 	for (i = 0; i < tmp; i++)		// Copy payload
 1524              		.loc 1 682 0 is_stmt 0 discriminator 1
 1525 0038 8342     		cmp	r3, r0
 1526 003a F8D3     		bcc	.L116
 684:Ourwares/PC_gateway_comm.c **** 	return 0;	// Success with 29 bit id msg.
 1527              		.loc 1 684 0 is_stmt 1
 1528 003c 0020     		movs	r0, #0
 1529              	.LVL202:
ARM GAS  /tmp/cc2bndLQ.s 			page 43


 1530 003e 38BD     		pop	{r3, r4, r5, pc}
 1531              	.LVL203:
 1532              	.L117:
 676:Ourwares/PC_gateway_comm.c **** 	pout->id = getwd (&pin->cm[1]);		// Get 4 bytes into word format
 1533              		.loc 1 676 0
 1534 0040 4FF0FF30 		mov	r0, #-1
 1535              	.LVL204:
 1536 0044 38BD     		pop	{r3, r4, r5, pc}
 1537              	.LVL205:
 1538              	.L118:
 679:Ourwares/PC_gateway_comm.c **** 	if (pin->ct != (s16)(6 + tmp)) return -3; // dlc doesn't match byte count
 1539              		.loc 1 679 0
 1540 0046 6FF00100 		mvn	r0, #1
 1541              	.LVL206:
 1542 004a 38BD     		pop	{r3, r4, r5, pc}
 1543              	.LVL207:
 1544              	.L119:
 680:Ourwares/PC_gateway_comm.c **** 	pout->dlc = tmp;
 1545              		.loc 1 680 0
 1546 004c 6FF00200 		mvn	r0, #2
 1547              	.LVL208:
 685:Ourwares/PC_gateway_comm.c **** }
 1548              		.loc 1 685 0
 1549 0050 38BD     		pop	{r3, r4, r5, pc}
 1550              		.cfi_endproc
 1551              	.LFE146:
 1553              		.comm	debugR,4,4
 1554              		.global	hxbn
 1555 0052 00BF     		.section	.rodata.hxbn,"a",%progbits
 1556              		.align	2
 1557              		.set	.LANCHOR5,. + 0
 1560              	hxbn:
 1561 0000 00       		.byte	0
 1562 0001 00       		.byte	0
 1563 0002 00       		.byte	0
 1564 0003 00       		.byte	0
 1565 0004 00       		.byte	0
 1566 0005 00       		.byte	0
 1567 0006 00       		.byte	0
 1568 0007 00       		.byte	0
 1569 0008 00       		.byte	0
 1570 0009 00       		.byte	0
 1571 000a 00       		.byte	0
 1572 000b 00       		.byte	0
 1573 000c 00       		.byte	0
 1574 000d 00       		.byte	0
 1575 000e 00       		.byte	0
 1576 000f 00       		.byte	0
 1577 0010 00       		.byte	0
 1578 0011 00       		.byte	0
 1579 0012 00       		.byte	0
 1580 0013 00       		.byte	0
 1581 0014 00       		.byte	0
 1582 0015 00       		.byte	0
 1583 0016 00       		.byte	0
 1584 0017 00       		.byte	0
 1585 0018 00       		.byte	0
ARM GAS  /tmp/cc2bndLQ.s 			page 44


 1586 0019 00       		.byte	0
 1587 001a 00       		.byte	0
 1588 001b 00       		.byte	0
 1589 001c 00       		.byte	0
 1590 001d 00       		.byte	0
 1591 001e 00       		.byte	0
 1592 001f 00       		.byte	0
 1593 0020 00       		.byte	0
 1594 0021 00       		.byte	0
 1595 0022 00       		.byte	0
 1596 0023 00       		.byte	0
 1597 0024 00       		.byte	0
 1598 0025 00       		.byte	0
 1599 0026 00       		.byte	0
 1600 0027 00       		.byte	0
 1601 0028 00       		.byte	0
 1602 0029 00       		.byte	0
 1603 002a 00       		.byte	0
 1604 002b 00       		.byte	0
 1605 002c 00       		.byte	0
 1606 002d 00       		.byte	0
 1607 002e 00       		.byte	0
 1608 002f 00       		.byte	0
 1609 0030 00       		.byte	0
 1610 0031 01       		.byte	1
 1611 0032 02       		.byte	2
 1612 0033 03       		.byte	3
 1613 0034 04       		.byte	4
 1614 0035 05       		.byte	5
 1615 0036 06       		.byte	6
 1616 0037 07       		.byte	7
 1617 0038 08       		.byte	8
 1618 0039 09       		.byte	9
 1619 003a 00       		.byte	0
 1620 003b 00       		.byte	0
 1621 003c 00       		.byte	0
 1622 003d 00       		.byte	0
 1623 003e 00       		.byte	0
 1624 003f 00       		.byte	0
 1625 0040 00       		.byte	0
 1626 0041 0A       		.byte	10
 1627 0042 0B       		.byte	11
 1628 0043 0C       		.byte	12
 1629 0044 0D       		.byte	13
 1630 0045 0E       		.byte	14
 1631 0046 0F       		.byte	15
 1632 0047 00       		.byte	0
 1633 0048 00       		.byte	0
 1634 0049 00       		.byte	0
 1635 004a 00       		.byte	0
 1636 004b 00       		.byte	0
 1637 004c 00       		.byte	0
 1638 004d 00       		.byte	0
 1639 004e 00       		.byte	0
 1640 004f 00       		.byte	0
 1641 0050 00       		.byte	0
 1642 0051 00       		.byte	0
ARM GAS  /tmp/cc2bndLQ.s 			page 45


 1643 0052 00       		.byte	0
 1644 0053 00       		.byte	0
 1645 0054 00       		.byte	0
 1646 0055 00       		.byte	0
 1647 0056 00       		.byte	0
 1648 0057 00       		.byte	0
 1649 0058 00       		.byte	0
 1650 0059 00       		.byte	0
 1651 005a 00       		.byte	0
 1652 005b 00       		.byte	0
 1653 005c 00       		.byte	0
 1654 005d 00       		.byte	0
 1655 005e 00       		.byte	0
 1656 005f 00       		.byte	0
 1657 0060 00       		.byte	0
 1658 0061 0A       		.byte	10
 1659 0062 0B       		.byte	11
 1660 0063 0C       		.byte	12
 1661 0064 0D       		.byte	13
 1662 0065 0E       		.byte	14
 1663 0066 0F       		.byte	15
 1664 0067 00       		.byte	0
 1665 0068 00       		.byte	0
 1666 0069 00       		.byte	0
 1667 006a 00       		.byte	0
 1668 006b 00       		.byte	0
 1669 006c 00       		.byte	0
 1670 006d 00       		.byte	0
 1671 006e 00       		.byte	0
 1672 006f 00       		.byte	0
 1673 0070 00       		.byte	0
 1674 0071 00       		.byte	0
 1675 0072 00       		.byte	0
 1676 0073 00       		.byte	0
 1677 0074 00       		.byte	0
 1678 0075 00       		.byte	0
 1679 0076 00       		.byte	0
 1680 0077 00       		.byte	0
 1681 0078 00       		.byte	0
 1682 0079 00       		.byte	0
 1683 007a 00       		.byte	0
 1684 007b 00       		.byte	0
 1685 007c 00       		.byte	0
 1686 007d 00       		.byte	0
 1687 007e 00       		.byte	0
 1688 007f 00       		.byte	0
 1689 0080 00       		.byte	0
 1690 0081 00       		.byte	0
 1691 0082 00       		.byte	0
 1692 0083 00       		.byte	0
 1693 0084 00       		.byte	0
 1694 0085 00       		.byte	0
 1695 0086 00       		.byte	0
 1696 0087 00       		.byte	0
 1697 0088 00       		.byte	0
 1698 0089 00       		.byte	0
 1699 008a 00       		.byte	0
ARM GAS  /tmp/cc2bndLQ.s 			page 46


 1700 008b 00       		.byte	0
 1701 008c 00       		.byte	0
 1702 008d 00       		.byte	0
 1703 008e 00       		.byte	0
 1704 008f 00       		.byte	0
 1705 0090 00       		.byte	0
 1706 0091 00       		.byte	0
 1707 0092 00       		.byte	0
 1708 0093 00       		.byte	0
 1709 0094 00       		.byte	0
 1710 0095 00       		.byte	0
 1711 0096 00       		.byte	0
 1712 0097 00       		.byte	0
 1713 0098 00       		.byte	0
 1714 0099 00       		.byte	0
 1715 009a 00       		.byte	0
 1716 009b 00       		.byte	0
 1717 009c 00       		.byte	0
 1718 009d 00       		.byte	0
 1719 009e 00       		.byte	0
 1720 009f 00       		.byte	0
 1721 00a0 00       		.byte	0
 1722 00a1 00       		.byte	0
 1723 00a2 00       		.byte	0
 1724 00a3 00       		.byte	0
 1725 00a4 00       		.byte	0
 1726 00a5 00       		.byte	0
 1727 00a6 00       		.byte	0
 1728 00a7 00       		.byte	0
 1729 00a8 00       		.byte	0
 1730 00a9 00       		.byte	0
 1731 00aa 00       		.byte	0
 1732 00ab 00       		.byte	0
 1733 00ac 00       		.byte	0
 1734 00ad 00       		.byte	0
 1735 00ae 00       		.byte	0
 1736 00af 00       		.byte	0
 1737 00b0 00       		.byte	0
 1738 00b1 00       		.byte	0
 1739 00b2 00       		.byte	0
 1740 00b3 00       		.byte	0
 1741 00b4 00       		.byte	0
 1742 00b5 00       		.byte	0
 1743 00b6 00       		.byte	0
 1744 00b7 00       		.byte	0
 1745 00b8 00       		.byte	0
 1746 00b9 00       		.byte	0
 1747 00ba 00       		.byte	0
 1748 00bb 00       		.byte	0
 1749 00bc 00       		.byte	0
 1750 00bd 00       		.byte	0
 1751 00be 00       		.byte	0
 1752 00bf 00       		.byte	0
 1753 00c0 00       		.byte	0
 1754 00c1 00       		.byte	0
 1755 00c2 00       		.byte	0
 1756 00c3 00       		.byte	0
ARM GAS  /tmp/cc2bndLQ.s 			page 47


 1757 00c4 00       		.byte	0
 1758 00c5 00       		.byte	0
 1759 00c6 00       		.byte	0
 1760 00c7 00       		.byte	0
 1761 00c8 00       		.byte	0
 1762 00c9 00       		.byte	0
 1763 00ca 00       		.byte	0
 1764 00cb 00       		.byte	0
 1765 00cc 00       		.byte	0
 1766 00cd 00       		.byte	0
 1767 00ce 00       		.byte	0
 1768 00cf 00       		.byte	0
 1769 00d0 00       		.byte	0
 1770 00d1 00       		.byte	0
 1771 00d2 00       		.byte	0
 1772 00d3 00       		.byte	0
 1773 00d4 00       		.byte	0
 1774 00d5 00       		.byte	0
 1775 00d6 00       		.byte	0
 1776 00d7 00       		.byte	0
 1777 00d8 00       		.byte	0
 1778 00d9 00       		.byte	0
 1779 00da 00       		.byte	0
 1780 00db 00       		.byte	0
 1781 00dc 00       		.byte	0
 1782 00dd 00       		.byte	0
 1783 00de 00       		.byte	0
 1784 00df 00       		.byte	0
 1785 00e0 00       		.byte	0
 1786 00e1 00       		.byte	0
 1787 00e2 00       		.byte	0
 1788 00e3 00       		.byte	0
 1789 00e4 00       		.byte	0
 1790 00e5 00       		.byte	0
 1791 00e6 00       		.byte	0
 1792 00e7 00       		.byte	0
 1793 00e8 00       		.byte	0
 1794 00e9 00       		.byte	0
 1795 00ea 00       		.byte	0
 1796 00eb 00       		.byte	0
 1797 00ec 00       		.byte	0
 1798 00ed 00       		.byte	0
 1799 00ee 00       		.byte	0
 1800 00ef 00       		.byte	0
 1801 00f0 00       		.byte	0
 1802 00f1 00       		.byte	0
 1803 00f2 00       		.byte	0
 1804 00f3 00       		.byte	0
 1805 00f4 00       		.byte	0
 1806 00f5 00       		.byte	0
 1807 00f6 00       		.byte	0
 1808 00f7 00       		.byte	0
 1809 00f8 00       		.byte	0
 1810 00f9 00       		.byte	0
 1811 00fa 00       		.byte	0
 1812 00fb 00       		.byte	0
 1813 00fc 00       		.byte	0
ARM GAS  /tmp/cc2bndLQ.s 			page 48


 1814 00fd 00       		.byte	0
 1815 00fe 00       		.byte	0
 1816 00ff 00       		.byte	0
 1817              		.section	.bss.PC_oddeven_ct_err,"aw",%nobits
 1818              		.align	2
 1819              		.set	.LANCHOR4,. + 0
 1822              	PC_oddeven_ct_err:
 1823 0000 00000000 		.space	4
 1824              		.section	.bss.PC_toofew_ct_err,"aw",%nobits
 1825              		.align	2
 1826              		.set	.LANCHOR1,. + 0
 1829              	PC_toofew_ct_err:
 1830 0000 00000000 		.space	4
 1831              		.section	.bss.PC_chksum_ct_err,"aw",%nobits
 1832              		.align	2
 1833              		.set	.LANCHOR3,. + 0
 1836              	PC_chksum_ct_err:
 1837 0000 00000000 		.space	4
 1838              		.section	.bss.PC_toomany_ct_err,"aw",%nobits
 1839              		.align	2
 1840              		.set	.LANCHOR2,. + 0
 1843              	PC_toomany_ct_err:
 1844 0000 00000000 		.space	4
 1845              		.section	.rodata.h,"a",%progbits
 1846              		.align	2
 1847              		.set	.LANCHOR0,. + 0
 1850              	h:
 1851 0000 30       		.byte	48
 1852 0001 31       		.byte	49
 1853 0002 32       		.byte	50
 1854 0003 33       		.byte	51
 1855 0004 34       		.byte	52
 1856 0005 35       		.byte	53
 1857 0006 36       		.byte	54
 1858 0007 37       		.byte	55
 1859 0008 38       		.byte	56
 1860 0009 39       		.byte	57
 1861 000a 41       		.byte	65
 1862 000b 42       		.byte	66
 1863 000c 43       		.byte	67
 1864 000d 44       		.byte	68
 1865 000e 45       		.byte	69
 1866 000f 46       		.byte	70
 1867              		.text
 1868              	.Letext0:
 1869              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 1870              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1871              		.file 4 "Ourwares/common_misc.h"
 1872              		.file 5 "Ourwares/common_can.h"
 1873              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1874              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1875              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1876              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 1877              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1878              		.file 11 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1879              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1880              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
ARM GAS  /tmp/cc2bndLQ.s 			page 49


 1881              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1882              		.file 15 "Ourwares/SerialTaskSend.h"
 1883              		.file 16 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/cc2bndLQ.s 			page 50


DEFINED SYMBOLS
                            *ABS*:00000000 PC_gateway_comm.c
     /tmp/cc2bndLQ.s:22     .text.hex:00000000 $t
     /tmp/cc2bndLQ.s:26     .text.hex:00000000 hex
     /tmp/cc2bndLQ.s:62     .text.hex:00000020 $d
     /tmp/cc2bndLQ.s:67     .text.strstuff:00000000 $t
     /tmp/cc2bndLQ.s:71     .text.strstuff:00000000 strstuff
     /tmp/cc2bndLQ.s:109    .text.strwrd:00000000 $t
     /tmp/cc2bndLQ.s:113    .text.strwrd:00000000 strwrd
     /tmp/cc2bndLQ.s:137    .text.strhalfwrd:00000000 $t
     /tmp/cc2bndLQ.s:141    .text.strhalfwrd:00000000 strhalfwrd
     /tmp/cc2bndLQ.s:160    .text.getwd:00000000 $t
     /tmp/cc2bndLQ.s:164    .text.getwd:00000000 getwd
     /tmp/cc2bndLQ.s:188    .text.gethalfwd:00000000 $t
     /tmp/cc2bndLQ.s:192    .text.gethalfwd:00000000 gethalfwd
     /tmp/cc2bndLQ.s:211    .text.CANgenchksum:00000000 $t
     /tmp/cc2bndLQ.s:216    .text.CANgenchksum:00000000 CANgenchksum
     /tmp/cc2bndLQ.s:274    .text.PC_msg_initg:00000000 $t
     /tmp/cc2bndLQ.s:279    .text.PC_msg_initg:00000000 PC_msg_initg
     /tmp/cc2bndLQ.s:310    .text.PC_msg_get:00000000 $t
     /tmp/cc2bndLQ.s:315    .text.PC_msg_get:00000000 PC_msg_get
     /tmp/cc2bndLQ.s:468    .text.PC_msg_get:000000c4 $d
     /tmp/cc2bndLQ.s:475    .text.PC_msg_getASCII:00000000 $t
     /tmp/cc2bndLQ.s:480    .text.PC_msg_getASCII:00000000 PC_msg_getASCII
     /tmp/cc2bndLQ.s:637    .text.PC_msg_getASCII:000000cc $d
     /tmp/cc2bndLQ.s:645    .text.CAN_id_valid:00000000 $t
     /tmp/cc2bndLQ.s:650    .text.CAN_id_valid:00000000 CAN_id_valid
     /tmp/cc2bndLQ.s:693    .text.CAN_id_valid:00000028 $d
     /tmp/cc2bndLQ.s:698    .text.PC_msg_asctobin:00000000 $t
     /tmp/cc2bndLQ.s:703    .text.PC_msg_asctobin:00000000 PC_msg_asctobin
     /tmp/cc2bndLQ.s:822    .text.PC_msg_asctobin:00000080 $d
     /tmp/cc2bndLQ.s:827    .text.PC_msg_prep:00000000 $t
     /tmp/cc2bndLQ.s:832    .text.PC_msg_prep:00000000 PC_msg_prep
     /tmp/cc2bndLQ.s:957    .text.PC_msg_prepASCII:00000000 $t
     /tmp/cc2bndLQ.s:962    .text.PC_msg_prepASCII:00000000 PC_msg_prepASCII
     /tmp/cc2bndLQ.s:1075   .text.CANcompress:00000000 $t
     /tmp/cc2bndLQ.s:1080   .text.CANcompress:00000000 CANcompress
     /tmp/cc2bndLQ.s:1218   .text.CANcompress_G:00000000 $t
     /tmp/cc2bndLQ.s:1223   .text.CANcompress_G:00000000 CANcompress_G
     /tmp/cc2bndLQ.s:1292   .text.CANuncompress:00000000 $t
     /tmp/cc2bndLQ.s:1297   .text.CANuncompress:00000000 CANuncompress
     /tmp/cc2bndLQ.s:1463   .text.CANuncompress_G:00000000 $t
     /tmp/cc2bndLQ.s:1468   .text.CANuncompress_G:00000000 CANuncompress_G
                            *COM*:00000004 debugR
     /tmp/cc2bndLQ.s:1560   .rodata.hxbn:00000000 hxbn
     /tmp/cc2bndLQ.s:1556   .rodata.hxbn:00000000 $d
     /tmp/cc2bndLQ.s:1818   .bss.PC_oddeven_ct_err:00000000 $d
     /tmp/cc2bndLQ.s:1822   .bss.PC_oddeven_ct_err:00000000 PC_oddeven_ct_err
     /tmp/cc2bndLQ.s:1825   .bss.PC_toofew_ct_err:00000000 $d
     /tmp/cc2bndLQ.s:1829   .bss.PC_toofew_ct_err:00000000 PC_toofew_ct_err
     /tmp/cc2bndLQ.s:1832   .bss.PC_chksum_ct_err:00000000 $d
     /tmp/cc2bndLQ.s:1836   .bss.PC_chksum_ct_err:00000000 PC_chksum_ct_err
     /tmp/cc2bndLQ.s:1839   .bss.PC_toomany_ct_err:00000000 $d
     /tmp/cc2bndLQ.s:1843   .bss.PC_toomany_ct_err:00000000 PC_toomany_ct_err
     /tmp/cc2bndLQ.s:1846   .rodata.h:00000000 $d
     /tmp/cc2bndLQ.s:1850   .rodata.h:00000000 h
                     .debug_frame:00000010 $d
ARM GAS  /tmp/cc2bndLQ.s 			page 51



UNDEFINED SYMBOLS
xQueueGenericReceive
vSerialTaskSendQueueBuf
