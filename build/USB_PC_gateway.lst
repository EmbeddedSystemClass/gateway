ARM GAS  /tmp/cciEc0HH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"USB_PC_gateway.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.USB_PC_get_msg_mode,"ax",%progbits
  22              		.align	2
  23              		.global	USB_PC_get_msg_mode
  24              		.thumb
  25              		.thumb_func
  27              	USB_PC_get_msg_mode:
  28              	.LFB129:
  29              		.file 1 "Ourwares/USB_PC_gateway.c"
   1:Ourwares/USB_PC_gateway.c **** /******************************************************************************
   2:Ourwares/USB_PC_gateway.c **** * File Name          : USB_PC_gateway.c
   3:Ourwares/USB_PC_gateway.c **** * Date First Issued  : 10/16/2013
   4:Ourwares/USB_PC_gateway.c **** * Board              : Discovery F4
   5:Ourwares/USB_PC_gateway.c **** * Description        : PC<->gateway 
   6:Ourwares/USB_PC_gateway.c **** *******************************************************************************/
   7:Ourwares/USB_PC_gateway.c **** /*
   8:Ourwares/USB_PC_gateway.c **** 10-04-2013 - revised so that 'PC_gateway_comm.[ch]' has routines common to PC and stm32,
   9:Ourwares/USB_PC_gateway.c ****    and this routine is USART1 specific.
  10:Ourwares/USB_PC_gateway.c **** 10-16-2013 - copy and revised for USB instead of USART1
  11:Ourwares/USB_PC_gateway.c **** */
  12:Ourwares/USB_PC_gateway.c **** 
  13:Ourwares/USB_PC_gateway.c **** #include <fcntl.h>
  14:Ourwares/USB_PC_gateway.c **** #include <unistd.h>
  15:Ourwares/USB_PC_gateway.c **** 
  16:Ourwares/USB_PC_gateway.c **** 
  17:Ourwares/USB_PC_gateway.c **** #include "USB_PC_gateway.h"
  18:Ourwares/USB_PC_gateway.c **** #include "PC_gateway_comm.h"
  19:Ourwares/USB_PC_gateway.c **** #include <stdio.h>
  20:Ourwares/USB_PC_gateway.c **** #include <string.h>
  21:Ourwares/USB_PC_gateway.c **** //#include "xprintf.h"
  22:Ourwares/USB_PC_gateway.c **** 
  23:Ourwares/USB_PC_gateway.c **** /* Local buffer for extracting msgs/lines from incoming data.  This allows 'read' to
  24:Ourwares/USB_PC_gateway.c ****    attempt to retrieve more than just one byte. */
  25:Ourwares/USB_PC_gateway.c **** #define GETLOCALBUFSZ	256		// Size of local buffer for incoming bytes
  26:Ourwares/USB_PC_gateway.c **** static char localbuf[GETLOCALBUFSZ];	// 
  27:Ourwares/USB_PC_gateway.c **** static char* plocalbuf = &localbuf[0];	// Pointer into local buffer
  28:Ourwares/USB_PC_gateway.c **** static int localct = 0;			// Byte count of data remaining in buffer
  29:Ourwares/USB_PC_gateway.c **** 
ARM GAS  /tmp/cciEc0HH.s 			page 2


  30:Ourwares/USB_PC_gateway.c **** u32 debug_inct;
  31:Ourwares/USB_PC_gateway.c **** 
  32:Ourwares/USB_PC_gateway.c **** /* **************************************************************************************
  33:Ourwares/USB_PC_gateway.c ****  * int USB_PC_get_msg_mode(int fd, struct PCTOGATEWAY* ptr, struct CANRCVBUF* pcan);
  34:Ourwares/USB_PC_gateway.c ****  * @brief	: Build message from PC, various modes modes
  35:Ourwares/USB_PC_gateway.c ****  * @param	: fd = file descriptor
  36:Ourwares/USB_PC_gateway.c ****  * @param	: ptr = Pointer to msg buffer (see common_can.h)
  37:Ourwares/USB_PC_gateway.c ****  *          : ptr->mode_link = selection of PC<->gateway mode and format (binary, ascii,...)
  38:Ourwares/USB_PC_gateway.c ****  *          : return: ptr->c[] = binary msg, possibly compressed
  39:Ourwares/USB_PC_gateway.c ****  *          : return: ptr->asc[] = asc line
  40:Ourwares/USB_PC_gateway.c ****  *          : return: ptr->ct; ptr->ctasc; counts for above, repsectively.
  41:Ourwares/USB_PC_gateway.c ****  *          : return: ptr->seq; sequence number extracted., (if applicable to mode)
  42:Ourwares/USB_PC_gateway.c ****  * @param	: pcan = pointer to struct with CAN msg (stm32 register format)
  43:Ourwares/USB_PC_gateway.c ****  * @return	:  1 = completed; ptr->ct hold byte count
  44:Ourwares/USB_PC_gateway.c ****  *          :  0 = msg not ready; 
  45:Ourwares/USB_PC_gateway.c ****  *    : If negative = Some error--
  46:Ourwares/USB_PC_gateway.c ****  *          : -1 = completed, but bad checksum
  47:Ourwares/USB_PC_gateway.c ****  *          : -2 = completed, but too few bytes to be a valid CAN msg
  48:Ourwares/USB_PC_gateway.c ****  *          : -3 = bad mode selection code
  49:Ourwares/USB_PC_gateway.c ****  *          : -4 = 'read' returned an error
  50:Ourwares/USB_PC_gateway.c ****  *    : If message completion has no errors, but following compression does-- 
  51:Ourwares/USB_PC_gateway.c ****  *          : -5 = Too few bytes to a valid 29b compressed msg
  52:Ourwares/USB_PC_gateway.c ****  *          : -6 = dlc: payload ct too large (> 8) in a 29 bit id msg
  53:Ourwares/USB_PC_gateway.c ****  *          : -7 = dlc doesn't match byte count in a 29 bit id msg
  54:Ourwares/USB_PC_gateway.c ****  *          : -8 = Too few bytes to a valid 11b compressed msg
  55:Ourwares/USB_PC_gateway.c ****  *          : -9 = dlc: payload ct too large (> 8) in a 11 bit id msg
  56:Ourwares/USB_PC_gateway.c ****  *          : -10 = dlc doesn't match byte count in a 11 bit id msg
  57:Ourwares/USB_PC_gateway.c ****  * ************************************************************************************** */
  58:Ourwares/USB_PC_gateway.c **** /* @param	: ptr->mode_link: mode selection
  59:Ourwares/USB_PC_gateway.c ****  *              : 0 = binary-- seq byte, data, chksum byte, '\n' framing byte
  60:Ourwares/USB_PC_gateway.c ****  *              : 1 = ascii-- mode 0 converted to ascii/hex, with '\n' new line framing
  61:Ourwares/USB_PC_gateway.c ****  *              : ... other modes in the future?
  62:Ourwares/USB_PC_gateway.c **** */
  63:Ourwares/USB_PC_gateway.c **** 
  64:Ourwares/USB_PC_gateway.c **** int USB_PC_get_msg_mode(int fd, struct PCTOGATEWAY* ptr, struct CANRCVBUF* pcan )
  65:Ourwares/USB_PC_gateway.c **** {
  30              		.loc 1 65 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LVL0:
  35 0000 70B5     		push	{r4, r5, r6, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 4, -16
  39              		.cfi_offset 5, -12
  40              		.cfi_offset 6, -8
  41              		.cfi_offset 14, -4
  42 0002 0C46     		mov	r4, r1
  43 0004 1546     		mov	r5, r2
  44              	.LVL1:
  66:Ourwares/USB_PC_gateway.c **** 	int retstatus;
  67:Ourwares/USB_PC_gateway.c **** 	int temp = 0;
  68:Ourwares/USB_PC_gateway.c **** 	char c;
  69:Ourwares/USB_PC_gateway.c **** 
  70:Ourwares/USB_PC_gateway.c **** 	if (localct <= 0) // Is the buffer empty?
  45              		.loc 1 70 0
ARM GAS  /tmp/cciEc0HH.s 			page 3


  46 0006 454B     		ldr	r3, .L23
  47 0008 1B68     		ldr	r3, [r3]
  48 000a 002B     		cmp	r3, #0
  49 000c 11DC     		bgt	.L2
  71:Ourwares/USB_PC_gateway.c **** 	{ // Here yes.
  72:Ourwares/USB_PC_gateway.c **** 		/* Try to replenish buffer if it is empty. */
  73:Ourwares/USB_PC_gateway.c **** 		localct = read(fd, localbuf, GETLOCALBUFSZ); // Seek a fist-full, or more, bytes
  50              		.loc 1 73 0
  51 000e 4FF48072 		mov	r2, #256
  52              	.LVL2:
  53 0012 4349     		ldr	r1, .L23+4
  54              	.LVL3:
  55 0014 FFF7FEFF 		bl	read
  56              	.LVL4:
  57 0018 404B     		ldr	r3, .L23
  58 001a 1860     		str	r0, [r3]
  74:Ourwares/USB_PC_gateway.c **** 		if (localct == 0) return  0;	// But, if alas, there were none, return empty handed :(
  59              		.loc 1 74 0
  60 001c 0028     		cmp	r0, #0
  61 001e 7BD0     		beq	.L3
  75:Ourwares/USB_PC_gateway.c **** 		if (localct  < 0) return -4;	// Ooops!
  62              		.loc 1 75 0
  63 0020 0028     		cmp	r0, #0
  64 0022 6EDB     		blt	.L13
  76:Ourwares/USB_PC_gateway.c **** 
  77:Ourwares/USB_PC_gateway.c **** 		plocalbuf = &localbuf[0];	// Reset pointer for removing buffer bytes.
  65              		.loc 1 77 0
  66 0024 3E4A     		ldr	r2, .L23+4
  67 0026 3F4B     		ldr	r3, .L23+8
  68 0028 1A60     		str	r2, [r3]
  78:Ourwares/USB_PC_gateway.c **** debug_inct += localct; // Debug: running ct of bytes
  69              		.loc 1 78 0
  70 002a 3F4B     		ldr	r3, .L23+12
  71 002c 1E68     		ldr	r6, [r3]
  72 002e 0644     		add	r6, r6, r0
  73 0030 1E60     		str	r6, [r3]
  74              	.L2:
  79:Ourwares/USB_PC_gateway.c **** 	}
  80:Ourwares/USB_PC_gateway.c **** 
  81:Ourwares/USB_PC_gateway.c **** 	switch (ptr->mode_link)	// To use 'switch' for just two cases is lame, but allows for easy additio
  75              		.loc 1 81 0
  76 0032 94F83E30 		ldrb	r3, [r4, #62]	@ zero_extendqisi2
  77 0036 012B     		cmp	r3, #1
  78 0038 3DD0     		beq	.L4
  79 003a E3B1     		cbz	r3, .L5
  80 003c 022B     		cmp	r3, #2
  81 003e 5AD0     		beq	.L6
  82 0040 62E0     		b	.L21
  83              	.L8:
  82:Ourwares/USB_PC_gateway.c **** 	{
  83:Ourwares/USB_PC_gateway.c **** 	case 0:	// BINARY Mode (byte stuffing/frame byte format) 
  84:Ourwares/USB_PC_gateway.c **** 		while (localct > 0)	// Onward through those bytes!
  85:Ourwares/USB_PC_gateway.c **** 		{
  86:Ourwares/USB_PC_gateway.c **** 			localct -= 1;		// Like a pacman, take a byte
  84              		.loc 1 86 0
  85 0042 013B     		subs	r3, r3, #1
  86 0044 354A     		ldr	r2, .L23
ARM GAS  /tmp/cciEc0HH.s 			page 4


  87 0046 1360     		str	r3, [r2]
  87:Ourwares/USB_PC_gateway.c **** 			c = *plocalbuf++;	//   and move one step.
  88              		.loc 1 87 0
  89 0048 364A     		ldr	r2, .L23+8
  90 004a 1368     		ldr	r3, [r2]
  91 004c 591C     		adds	r1, r3, #1
  92 004e 1160     		str	r1, [r2]
  93              	.LVL5:
  88:Ourwares/USB_PC_gateway.c **** 	
  89:Ourwares/USB_PC_gateway.c **** 			if ( (retstatus = PC_msg_get(ptr,c)) != 0) // Did this byte complete a msg?
  94              		.loc 1 89 0
  95 0050 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
  96 0052 2046     		mov	r0, r4
  97 0054 FFF7FEFF 		bl	PC_msg_get
  98              	.LVL6:
  99 0058 0646     		mov	r6, r0
 100 005a 60B1     		cbz	r0, .L5
  90:Ourwares/USB_PC_gateway.c **** 			{ // Here, either a good msg, or an error such as chksum or too many/few bytes
  91:Ourwares/USB_PC_gateway.c **** 				if (retstatus >= 1)
 101              		.loc 1 91 0
 102 005c 0028     		cmp	r0, #0
 103 005e 05DD     		ble	.L15
  92:Ourwares/USB_PC_gateway.c **** 					temp = CANuncompress(pcan, &ptr->cmprs); 
 104              		.loc 1 92 0
 105 0060 04F14001 		add	r1, r4, #64
 106 0064 2846     		mov	r0, r5
 107              	.LVL7:
 108 0066 FFF7FEFF 		bl	CANuncompress
 109              	.LVL8:
 110 006a 00E0     		b	.L7
 111              	.LVL9:
 112              	.L15:
  67:Ourwares/USB_PC_gateway.c **** 	char c;
 113              		.loc 1 67 0
 114 006c 0020     		movs	r0, #0
 115              	.LVL10:
 116              	.L7:
  93:Ourwares/USB_PC_gateway.c **** 				if (temp < 0) return temp -= 4;
 117              		.loc 1 93 0
 118 006e 0028     		cmp	r0, #0
 119 0070 4DDA     		bge	.L16
 120              		.loc 1 93 0 is_stmt 0 discriminator 1
 121 0072 0438     		subs	r0, r0, #4
 122              	.LVL11:
 123 0074 70BD     		pop	{r4, r5, r6, pc}
 124              	.LVL12:
 125              	.L5:
  84:Ourwares/USB_PC_gateway.c **** 		{
 126              		.loc 1 84 0 is_stmt 1
 127 0076 294B     		ldr	r3, .L23
 128 0078 1B68     		ldr	r3, [r3]
 129 007a 002B     		cmp	r3, #0
 130 007c E1DC     		bgt	.L8
  94:Ourwares/USB_PC_gateway.c **** 				return retstatus; // Note: there maybe be unused bytes still in the buffer.
  95:Ourwares/USB_PC_gateway.c **** 			}		
  96:Ourwares/USB_PC_gateway.c **** 		}
  97:Ourwares/USB_PC_gateway.c **** 		break;
ARM GAS  /tmp/cciEc0HH.s 			page 5


  98:Ourwares/USB_PC_gateway.c **** 
  99:Ourwares/USB_PC_gateway.c **** 	case 1: // ASCII Mode (ascii/hex only with '\n' newline)
 100:Ourwares/USB_PC_gateway.c **** 		while (localct > 0)	// Rattle through those chars!
 101:Ourwares/USB_PC_gateway.c **** 		{
 102:Ourwares/USB_PC_gateway.c **** 			localct -= 1;		// Count chars
 103:Ourwares/USB_PC_gateway.c **** 			c = *plocalbuf++;	
 104:Ourwares/USB_PC_gateway.c **** 
 105:Ourwares/USB_PC_gateway.c **** 			if ( (retstatus = PC_msg_getASCII(ptr, c)) != 0) // Did this char complete a msg?
 106:Ourwares/USB_PC_gateway.c **** 			{ // Here, either a good line, or an error, such as too many or few chars, checksum err, or odd 
 107:Ourwares/USB_PC_gateway.c **** 				if (retstatus >= 1)
 108:Ourwares/USB_PC_gateway.c **** 					temp = CANuncompress(pcan, &ptr->cmprs); 
 109:Ourwares/USB_PC_gateway.c **** 				if (temp < 0) return temp -= 4;
 110:Ourwares/USB_PC_gateway.c **** 				return retstatus; // Note: there maybe be unused bytes still in the buffer.
 111:Ourwares/USB_PC_gateway.c **** 			}		
 112:Ourwares/USB_PC_gateway.c **** 		}
 113:Ourwares/USB_PC_gateway.c **** 		break;
 114:Ourwares/USB_PC_gateway.c **** 		
 115:Ourwares/USB_PC_gateway.c **** 	case 2: // ASCII Mode (Gonzaga project: minimal compression)
 116:Ourwares/USB_PC_gateway.c **** 		while (localct > 0)	// Rattle through those chars!
 117:Ourwares/USB_PC_gateway.c **** 		{
 118:Ourwares/USB_PC_gateway.c **** 			localct -= 1;		// Count chars
 119:Ourwares/USB_PC_gateway.c **** 			c = *plocalbuf++;
 120:Ourwares/USB_PC_gateway.c **** //xprintf(6,"%c",c);
 121:Ourwares/USB_PC_gateway.c **** 
 122:Ourwares/USB_PC_gateway.c **** 			if ( (retstatus = PC_msg_getASCII(ptr, c)) != 0) // Did this char complete a msg?
 123:Ourwares/USB_PC_gateway.c **** 			{ // Here, either a good line, or an error, such as too many or few chars, checksum err, or odd 
 124:Ourwares/USB_PC_gateway.c **** 				if (retstatus >= 1)
 125:Ourwares/USB_PC_gateway.c **** 					temp = CANuncompress_G(pcan, &ptr->cmprs); 
 126:Ourwares/USB_PC_gateway.c **** 				if (temp < 0) return temp -= 4;
 127:Ourwares/USB_PC_gateway.c **** 				return retstatus; // Note: there maybe be unused bytes still in the buffer.
 128:Ourwares/USB_PC_gateway.c **** 			}		
 129:Ourwares/USB_PC_gateway.c **** 
 130:Ourwares/USB_PC_gateway.c **** 		}
 131:Ourwares/USB_PC_gateway.c **** 		break;
 132:Ourwares/USB_PC_gateway.c **** 
 133:Ourwares/USB_PC_gateway.c **** 	default:	return -3; // The bozo calling this routine failed miserably setting up the struct.
 134:Ourwares/USB_PC_gateway.c **** 		break;	
 135:Ourwares/USB_PC_gateway.c **** 	}
 136:Ourwares/USB_PC_gateway.c **** 
 137:Ourwares/USB_PC_gateway.c **** 	return 0; // No more bytes to work with, AND msg is not complete...sorry, maybe next time.
 131              		.loc 1 137 0
 132 007e 0020     		movs	r0, #0
 133 0080 70BD     		pop	{r4, r5, r6, pc}
 134              	.LVL13:
 135              	.L10:
 102:Ourwares/USB_PC_gateway.c **** 			c = *plocalbuf++;	
 136              		.loc 1 102 0
 137 0082 013B     		subs	r3, r3, #1
 138 0084 254A     		ldr	r2, .L23
 139 0086 1360     		str	r3, [r2]
 103:Ourwares/USB_PC_gateway.c **** 
 140              		.loc 1 103 0
 141 0088 264A     		ldr	r2, .L23+8
 142 008a 1368     		ldr	r3, [r2]
 143 008c 591C     		adds	r1, r3, #1
 144 008e 1160     		str	r1, [r2]
 145              	.LVL14:
ARM GAS  /tmp/cciEc0HH.s 			page 6


 105:Ourwares/USB_PC_gateway.c **** 			{ // Here, either a good line, or an error, such as too many or few chars, checksum err, or odd 
 146              		.loc 1 105 0
 147 0090 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 148 0092 2046     		mov	r0, r4
 149 0094 FFF7FEFF 		bl	PC_msg_getASCII
 150              	.LVL15:
 151 0098 0646     		mov	r6, r0
 152 009a 60B1     		cbz	r0, .L4
 107:Ourwares/USB_PC_gateway.c **** 					temp = CANuncompress(pcan, &ptr->cmprs); 
 153              		.loc 1 107 0
 154 009c 0028     		cmp	r0, #0
 155 009e 05DD     		ble	.L17
 108:Ourwares/USB_PC_gateway.c **** 				if (temp < 0) return temp -= 4;
 156              		.loc 1 108 0
 157 00a0 04F14001 		add	r1, r4, #64
 158 00a4 2846     		mov	r0, r5
 159              	.LVL16:
 160 00a6 FFF7FEFF 		bl	CANuncompress
 161              	.LVL17:
 162 00aa 00E0     		b	.L9
 163              	.LVL18:
 164              	.L17:
  67:Ourwares/USB_PC_gateway.c **** 	char c;
 165              		.loc 1 67 0
 166 00ac 0020     		movs	r0, #0
 167              	.LVL19:
 168              	.L9:
 109:Ourwares/USB_PC_gateway.c **** 				return retstatus; // Note: there maybe be unused bytes still in the buffer.
 169              		.loc 1 109 0
 170 00ae 0028     		cmp	r0, #0
 171 00b0 2FDA     		bge	.L18
 109:Ourwares/USB_PC_gateway.c **** 				return retstatus; // Note: there maybe be unused bytes still in the buffer.
 172              		.loc 1 109 0 is_stmt 0 discriminator 1
 173 00b2 0438     		subs	r0, r0, #4
 174              	.LVL20:
 175 00b4 70BD     		pop	{r4, r5, r6, pc}
 176              	.LVL21:
 177              	.L4:
 100:Ourwares/USB_PC_gateway.c **** 		{
 178              		.loc 1 100 0 is_stmt 1
 179 00b6 194B     		ldr	r3, .L23
 180 00b8 1B68     		ldr	r3, [r3]
 181 00ba 002B     		cmp	r3, #0
 182 00bc E1DC     		bgt	.L10
 183              		.loc 1 137 0
 184 00be 0020     		movs	r0, #0
 185 00c0 70BD     		pop	{r4, r5, r6, pc}
 186              	.LVL22:
 187              	.L12:
 118:Ourwares/USB_PC_gateway.c **** 			c = *plocalbuf++;
 188              		.loc 1 118 0
 189 00c2 013B     		subs	r3, r3, #1
 190 00c4 154A     		ldr	r2, .L23
 191 00c6 1360     		str	r3, [r2]
 119:Ourwares/USB_PC_gateway.c **** //xprintf(6,"%c",c);
 192              		.loc 1 119 0
 193 00c8 164A     		ldr	r2, .L23+8
ARM GAS  /tmp/cciEc0HH.s 			page 7


 194 00ca 1368     		ldr	r3, [r2]
 195 00cc 591C     		adds	r1, r3, #1
 196 00ce 1160     		str	r1, [r2]
 197              	.LVL23:
 122:Ourwares/USB_PC_gateway.c **** 			{ // Here, either a good line, or an error, such as too many or few chars, checksum err, or odd 
 198              		.loc 1 122 0
 199 00d0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 200 00d2 2046     		mov	r0, r4
 201 00d4 FFF7FEFF 		bl	PC_msg_getASCII
 202              	.LVL24:
 203 00d8 0646     		mov	r6, r0
 204 00da 60B1     		cbz	r0, .L6
 124:Ourwares/USB_PC_gateway.c **** 					temp = CANuncompress_G(pcan, &ptr->cmprs); 
 205              		.loc 1 124 0
 206 00dc 0028     		cmp	r0, #0
 207 00de 05DD     		ble	.L19
 125:Ourwares/USB_PC_gateway.c **** 				if (temp < 0) return temp -= 4;
 208              		.loc 1 125 0
 209 00e0 04F14001 		add	r1, r4, #64
 210 00e4 2846     		mov	r0, r5
 211              	.LVL25:
 212 00e6 FFF7FEFF 		bl	CANuncompress_G
 213              	.LVL26:
 214 00ea 00E0     		b	.L11
 215              	.LVL27:
 216              	.L19:
  67:Ourwares/USB_PC_gateway.c **** 	char c;
 217              		.loc 1 67 0
 218 00ec 0020     		movs	r0, #0
 219              	.LVL28:
 220              	.L11:
 126:Ourwares/USB_PC_gateway.c **** 				return retstatus; // Note: there maybe be unused bytes still in the buffer.
 221              		.loc 1 126 0
 222 00ee 0028     		cmp	r0, #0
 223 00f0 11DA     		bge	.L20
 126:Ourwares/USB_PC_gateway.c **** 				return retstatus; // Note: there maybe be unused bytes still in the buffer.
 224              		.loc 1 126 0 is_stmt 0 discriminator 1
 225 00f2 0438     		subs	r0, r0, #4
 226              	.LVL29:
 227 00f4 70BD     		pop	{r4, r5, r6, pc}
 228              	.LVL30:
 229              	.L6:
 116:Ourwares/USB_PC_gateway.c **** 		{
 230              		.loc 1 116 0 is_stmt 1
 231 00f6 094B     		ldr	r3, .L23
 232 00f8 1B68     		ldr	r3, [r3]
 233 00fa 002B     		cmp	r3, #0
 234 00fc E1DC     		bgt	.L12
 235              		.loc 1 137 0
 236 00fe 0020     		movs	r0, #0
 237 0100 70BD     		pop	{r4, r5, r6, pc}
 238              	.LVL31:
 239              	.L13:
  75:Ourwares/USB_PC_gateway.c **** 
 240              		.loc 1 75 0
 241 0102 6FF00300 		mvn	r0, #3
 242 0106 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/cciEc0HH.s 			page 8


 243              	.LVL32:
 244              	.L21:
 133:Ourwares/USB_PC_gateway.c **** 		break;	
 245              		.loc 1 133 0
 246 0108 6FF00200 		mvn	r0, #2
 247 010c 70BD     		pop	{r4, r5, r6, pc}
 248              	.LVL33:
 249              	.L16:
  94:Ourwares/USB_PC_gateway.c **** 			}		
 250              		.loc 1 94 0
 251 010e 3046     		mov	r0, r6
 252              	.LVL34:
 253 0110 70BD     		pop	{r4, r5, r6, pc}
 254              	.LVL35:
 255              	.L18:
 110:Ourwares/USB_PC_gateway.c **** 			}		
 256              		.loc 1 110 0
 257 0112 3046     		mov	r0, r6
 258              	.LVL36:
 259 0114 70BD     		pop	{r4, r5, r6, pc}
 260              	.LVL37:
 261              	.L20:
 127:Ourwares/USB_PC_gateway.c **** 			}		
 262              		.loc 1 127 0
 263 0116 3046     		mov	r0, r6
 264              	.LVL38:
 265              	.L3:
 138:Ourwares/USB_PC_gateway.c **** }
 266              		.loc 1 138 0
 267 0118 70BD     		pop	{r4, r5, r6, pc}
 268              	.LVL39:
 269              	.L24:
 270 011a 00BF     		.align	2
 271              	.L23:
 272 011c 00000000 		.word	.LANCHOR0
 273 0120 00000000 		.word	.LANCHOR1
 274 0124 00000000 		.word	.LANCHOR2
 275 0128 00000000 		.word	debug_inct
 276              		.cfi_endproc
 277              	.LFE129:
 279              		.section	.text.USB_toPC_msgASCII,"ax",%progbits
 280              		.align	2
 281              		.global	USB_toPC_msgASCII
 282              		.thumb
 283              		.thumb_func
 285              	USB_toPC_msgASCII:
 286              	.LFB130:
 139:Ourwares/USB_PC_gateway.c **** /* **************************************************************************************
 140:Ourwares/USB_PC_gateway.c ****  * int USB_toPC_msgASCII(struct SERIALSENDTASKBCB** ppbcb, struct PCTOGATECOMPRESSED* p);
 141:Ourwares/USB_PC_gateway.c ****  * @brief	: Send msg to PC after converting binary msg to ASCII/HEX 
 142:Ourwares/USB_PC_gateway.c ****  * @param	: pbufy = Pointer buffer control block w buffer and uart handle
 143:Ourwares/USB_PC_gateway.c ****  * @param	: p = Pointer to struct with bytes to send to PC
 144:Ourwares/USB_PC_gateway.c ****  * @return	: count of bytes written
 145:Ourwares/USB_PC_gateway.c ****  * ************************************************************************************** */
 146:Ourwares/USB_PC_gateway.c **** int USB_toPC_msgASCII(struct SERIALSENDTASKBCB** ppbcb, struct PCTOGATECOMPRESSED* p)
 147:Ourwares/USB_PC_gateway.c **** {
 287              		.loc 1 147 0
ARM GAS  /tmp/cciEc0HH.s 			page 9


 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              	.LVL40:
 292 0000 08B5     		push	{r3, lr}
 293              	.LCFI1:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 3, -8
 296              		.cfi_offset 14, -4
 148:Ourwares/USB_PC_gateway.c **** 	int sz;
 149:Ourwares/USB_PC_gateway.c **** 	/* Convert binary to ascii, and prepare with sequence number at beginning, plus checksum and newli
 150:Ourwares/USB_PC_gateway.c **** //	pbufy->pbcb->size = PC_msg_prepASCII(&b[0], BUFFSIZE, p);
 151:Ourwares/USB_PC_gateway.c **** 	sz = PC_msg_prepASCII(ppbcb, p);	
 297              		.loc 1 151 0
 298 0002 FFF7FEFF 		bl	PC_msg_prepASCII
 299              	.LVL41:
 152:Ourwares/USB_PC_gateway.c **** 	return	sz;
 153:Ourwares/USB_PC_gateway.c **** }
 300              		.loc 1 153 0
 301 0006 08BD     		pop	{r3, pc}
 302              		.cfi_endproc
 303              	.LFE130:
 305              		.section	.text.USB_toPC_msgBIN,"ax",%progbits
 306              		.align	2
 307              		.global	USB_toPC_msgBIN
 308              		.thumb
 309              		.thumb_func
 311              	USB_toPC_msgBIN:
 312              	.LFB131:
 154:Ourwares/USB_PC_gateway.c **** /* **************************************************************************************
 155:Ourwares/USB_PC_gateway.c ****  * int USB_toPC_msgBIN(struct SERIALSENDTASKBCB** ppbcb, struct PCTOGATECOMPRESSED* p);
 156:Ourwares/USB_PC_gateway.c ****  * @brief	: Send msg to PC in the binary format
 157:Ourwares/USB_PC_gateway.c ****  * @brief	: pbufy = Pointer buffer control block w buffer and uart handle
 158:Ourwares/USB_PC_gateway.c ****  * @param	: p = Pointer to struct with bytes to send to PC
 159:Ourwares/USB_PC_gateway.c ****  * @return	: count of bytes written
 160:Ourwares/USB_PC_gateway.c ****  * ************************************************************************************** */
 161:Ourwares/USB_PC_gateway.c **** int USB_toPC_msgBIN(struct SERIALSENDTASKBCB** ppbcb, struct PCTOGATECOMPRESSED* p)
 162:Ourwares/USB_PC_gateway.c **** {
 313              		.loc 1 162 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 104
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              	.LVL42:
 318 0000 30B5     		push	{r4, r5, lr}
 319              	.LCFI2:
 320              		.cfi_def_cfa_offset 12
 321              		.cfi_offset 4, -12
 322              		.cfi_offset 5, -8
 323              		.cfi_offset 14, -4
 324 0002 9BB0     		sub	sp, sp, #108
 325              	.LCFI3:
 326              		.cfi_def_cfa_offset 120
 163:Ourwares/USB_PC_gateway.c **** 	struct SERIALSENDTASKBCB* pbcb = *ppbcb;
 327              		.loc 1 163 0
 328 0004 0568     		ldr	r5, [r0]
 329              	.LVL43:
 164:Ourwares/USB_PC_gateway.c **** 	#define BUFFSIZE (PCTOGATEWAYSIZE*2+4)
ARM GAS  /tmp/cciEc0HH.s 			page 10


 165:Ourwares/USB_PC_gateway.c **** 	u8 b[BUFFSIZE];		// Sufficiently large output buffer
 166:Ourwares/USB_PC_gateway.c **** 
 167:Ourwares/USB_PC_gateway.c **** 	/* Make an array with seq number, CAN msg. */
 168:Ourwares/USB_PC_gateway.c **** 	if (p->ct >= PCTOGATEWAYSIZE) return -1; 	// Prevent overruns
 330              		.loc 1 168 0
 331 0006 B1F91C30 		ldrsh	r3, [r1, #28]
 332 000a 2F2B     		cmp	r3, #47
 333 000c 0CDC     		bgt	.L29
 334 000e 0A46     		mov	r2, r1
 335 0010 0446     		mov	r4, r0
 169:Ourwares/USB_PC_gateway.c **** 	/* Prepare msg for sending.  Add byte stuffing, framing, and checksum to input bytes. */
 170:Ourwares/USB_PC_gateway.c **** 	pbcb->size = PC_msg_prep(&b[0], BUFFSIZE, &p->cm[0], p->ct);
 336              		.loc 1 170 0
 337 0012 6421     		movs	r1, #100
 338              	.LVL44:
 339 0014 01A8     		add	r0, sp, #4
 340              	.LVL45:
 341 0016 FFF7FEFF 		bl	PC_msg_prep
 342              	.LVL46:
 343 001a 2882     		strh	r0, [r5, #16]	@ movhi
 171:Ourwares/USB_PC_gateway.c **** 
 172:Ourwares/USB_PC_gateway.c **** 	/* Send to USB, or other output per file descriptor. */
 173:Ourwares/USB_PC_gateway.c **** 	return yprintf(ppbcb,"%s",b);
 344              		.loc 1 173 0
 345 001c 01AA     		add	r2, sp, #4
 346 001e 0449     		ldr	r1, .L31
 347 0020 2046     		mov	r0, r4
 348 0022 FFF7FEFF 		bl	yprintf
 349              	.LVL47:
 350 0026 01E0     		b	.L28
 351              	.LVL48:
 352              	.L29:
 168:Ourwares/USB_PC_gateway.c **** 	/* Prepare msg for sending.  Add byte stuffing, framing, and checksum to input bytes. */
 353              		.loc 1 168 0
 354 0028 4FF0FF30 		mov	r0, #-1
 355              	.LVL49:
 356              	.L28:
 174:Ourwares/USB_PC_gateway.c **** }
 357              		.loc 1 174 0
 358 002c 1BB0     		add	sp, sp, #108
 359              	.LCFI4:
 360              		.cfi_def_cfa_offset 12
 361              		@ sp needed
 362 002e 30BD     		pop	{r4, r5, pc}
 363              	.LVL50:
 364              	.L32:
 365              		.align	2
 366              	.L31:
 367 0030 00000000 		.word	.LC0
 368              		.cfi_endproc
 369              	.LFE131:
 371              		.section	.text.USB_toPC_msg_mode,"ax",%progbits
 372              		.align	2
 373              		.global	USB_toPC_msg_mode
 374              		.thumb
 375              		.thumb_func
 377              	USB_toPC_msg_mode:
ARM GAS  /tmp/cciEc0HH.s 			page 11


 378              	.LFB132:
 175:Ourwares/USB_PC_gateway.c **** /* **************************************************************************************
 176:Ourwares/USB_PC_gateway.c ****  * int USB_toPC_msg_mode(struct SERIALSENDTASKBCB** ppbcb, struct PCTOGATEWAY* ptr, struct CANRCVBU
 177:Ourwares/USB_PC_gateway.c ****  * @brief	: Send msg to PC in selected mode
 178:Ourwares/USB_PC_gateway.c ****  * @brief	: ppbcb = pointer to pointer to buffer control block
 179:Ourwares/USB_PC_gateway.c ****  * @param	: pcan = pointer to struct with CAN msg (stm32 register format)
 180:Ourwares/USB_PC_gateway.c ****  * @param	: ptr = Pointer to msg buffer
 181:Ourwares/USB_PC_gateway.c ****  *              : ptr->mode_link = selection of PC<->gateway mode and format (binary, ascii,...)
 182:Ourwares/USB_PC_gateway.c ****  *              : ptr->mode_send = CAN msg (from calling routine) is binary or ascii
 183:Ourwares/USB_PC_gateway.c ****  *              : ptr->c[] = binary msg, possibly compressed
 184:Ourwares/USB_PC_gateway.c ****  *              : ptr->asc[] = asc line
 185:Ourwares/USB_PC_gateway.c ****  *              : ptr->ct; ptr->ctasc; counts for above, repsectively.
 186:Ourwares/USB_PC_gateway.c ****  *              : ptr->seq; sequence number to be sent., (if applicable to mode)
 187:Ourwares/USB_PC_gateway.c ****  * @return	: postive = number of bytes written
 188:Ourwares/USB_PC_gateway.c ****  *              : negative = error
 189:Ourwares/USB_PC_gateway.c ****  *              : -1 = The bozo that called this routine gave us booogus ptr->mode_link|send!
 190:Ourwares/USB_PC_gateway.c ****  * ************************************************************************************** */
 191:Ourwares/USB_PC_gateway.c **** int USB_toPC_msg_mode(struct SERIALSENDTASKBCB** ppbcb, struct PCTOGATEWAY* ptr, struct CANRCVBUF* 
 192:Ourwares/USB_PC_gateway.c **** {
 379              		.loc 1 192 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              	.LVL51:
 384 0000 38B5     		push	{r3, r4, r5, lr}
 385              	.LCFI5:
 386              		.cfi_def_cfa_offset 16
 387              		.cfi_offset 3, -16
 388              		.cfi_offset 4, -12
 389              		.cfi_offset 5, -8
 390              		.cfi_offset 14, -4
 391 0002 0546     		mov	r5, r0
 392 0004 0846     		mov	r0, r1
 393              	.LVL52:
 193:Ourwares/USB_PC_gateway.c **** //	struct SERIALSENDTASKBCB* pbcb = *ppbcb;
 194:Ourwares/USB_PC_gateway.c **** 	switch (ptr->mode_link)	// 'switch' for just two cases is lame, but allow for many more modes.
 394              		.loc 1 194 0
 395 0006 91F83E30 		ldrb	r3, [r1, #62]	@ zero_extendqisi2
 396 000a 012B     		cmp	r3, #1
 397 000c 0AD0     		beq	.L35
 398 000e 13B1     		cbz	r3, .L36
 399 0010 022B     		cmp	r3, #2
 400 0012 12D0     		beq	.L37
 401 0014 1CE0     		b	.L39
 402              	.L36:
 195:Ourwares/USB_PC_gateway.c **** 	{
 196:Ourwares/USB_PC_gateway.c **** 	case 0:	// BINARY Mode: PC<->gateway
 197:Ourwares/USB_PC_gateway.c **** 		CANcompress(&ptr->cmprs, pcan);		// Compress
 403              		.loc 1 197 0
 404 0016 1146     		mov	r1, r2
 405              	.LVL53:
 406 0018 4030     		adds	r0, r0, #64
 407              	.LVL54:
 408 001a FFF7FEFF 		bl	CANcompress
 409              	.LVL55:
 198:Ourwares/USB_PC_gateway.c **** 		// TODO
 199:Ourwares/USB_PC_gateway.c **** 		break; // JIC
ARM GAS  /tmp/cciEc0HH.s 			page 12


 200:Ourwares/USB_PC_gateway.c **** 
 201:Ourwares/USB_PC_gateway.c **** 	case 1: // ASCII/HEX mode: PC<->gateway (same "strong" compression as case 0 above)
 202:Ourwares/USB_PC_gateway.c **** 		CANcompress(&ptr->cmprs, pcan);		// Heavy compression
 203:Ourwares/USB_PC_gateway.c **** 		return USB_toPC_msgASCII(ppbcb, &ptr->cmprs);
 204:Ourwares/USB_PC_gateway.c **** 		break; // JIC
 205:Ourwares/USB_PC_gateway.c **** 
 206:Ourwares/USB_PC_gateway.c **** 	case 2: // ASCII/HEX Gonzaga format (minimal compression)
 207:Ourwares/USB_PC_gateway.c **** 		CANcompress_G(&ptr->cmprs, pcan);	// dlc = one byte the only compression
 208:Ourwares/USB_PC_gateway.c **** 		return USB_toPC_msgASCII(ppbcb, &ptr->cmprs);
 209:Ourwares/USB_PC_gateway.c **** 		break;
 210:Ourwares/USB_PC_gateway.c **** 	}
 211:Ourwares/USB_PC_gateway.c **** 	return -1;
 410              		.loc 1 211 0
 411 001e 4FF0FF30 		mov	r0, #-1
 199:Ourwares/USB_PC_gateway.c **** 
 412              		.loc 1 199 0
 413 0022 38BD     		pop	{r3, r4, r5, pc}
 414              	.LVL56:
 415              	.L35:
 202:Ourwares/USB_PC_gateway.c **** 		return USB_toPC_msgASCII(ppbcb, &ptr->cmprs);
 416              		.loc 1 202 0
 417 0024 01F14004 		add	r4, r1, #64
 418 0028 1146     		mov	r1, r2
 419 002a 2046     		mov	r0, r4
 420              	.LVL57:
 421 002c FFF7FEFF 		bl	CANcompress
 422              	.LVL58:
 203:Ourwares/USB_PC_gateway.c **** 		break; // JIC
 423              		.loc 1 203 0
 424 0030 2146     		mov	r1, r4
 425 0032 2846     		mov	r0, r5
 426 0034 FFF7FEFF 		bl	USB_toPC_msgASCII
 427              	.LVL59:
 428 0038 38BD     		pop	{r3, r4, r5, pc}
 429              	.LVL60:
 430              	.L37:
 207:Ourwares/USB_PC_gateway.c **** 		return USB_toPC_msgASCII(ppbcb, &ptr->cmprs);
 431              		.loc 1 207 0
 432 003a 01F14004 		add	r4, r1, #64
 433 003e 1146     		mov	r1, r2
 434 0040 2046     		mov	r0, r4
 435              	.LVL61:
 436 0042 FFF7FEFF 		bl	CANcompress_G
 437              	.LVL62:
 208:Ourwares/USB_PC_gateway.c **** 		break;
 438              		.loc 1 208 0
 439 0046 2146     		mov	r1, r4
 440 0048 2846     		mov	r0, r5
 441 004a FFF7FEFF 		bl	USB_toPC_msgASCII
 442              	.LVL63:
 443 004e 38BD     		pop	{r3, r4, r5, pc}
 444              	.LVL64:
 445              	.L39:
 446              		.loc 1 211 0
 447 0050 4FF0FF30 		mov	r0, #-1
 448              	.LVL65:
 212:Ourwares/USB_PC_gateway.c **** }
ARM GAS  /tmp/cciEc0HH.s 			page 13


 449              		.loc 1 212 0
 450 0054 38BD     		pop	{r3, r4, r5, pc}
 451              		.cfi_endproc
 452              	.LFE132:
 454 0056 00BF     		.section	.text.USB_toPC_msg_asciican,"ax",%progbits
 455              		.align	2
 456              		.global	USB_toPC_msg_asciican
 457              		.thumb
 458              		.thumb_func
 460              	USB_toPC_msg_asciican:
 461              	.LFB133:
 213:Ourwares/USB_PC_gateway.c **** /* **************************************************************************************
 214:Ourwares/USB_PC_gateway.c ****  * int USB_toPC_msg_asciican(struct SERIALSENDTASKBCB** ppbcb, char* pin, struct PCTOGATEWAY* ptr);
 215:Ourwares/USB_PC_gateway.c ****  * @brief	: I have a CAN msg in ASCII/HEX (no seq, no chksum).  Send in selected mode.
 216:Ourwares/USB_PC_gateway.c ****  * *param	: pbufy = pointer to buffer control block w buffer for uart
 217:Ourwares/USB_PC_gateway.c ****  * *param	: ptr = pointer to stuff used in conversions
 218:Ourwares/USB_PC_gateway.c ****  * @return	: postive = number of bytes written
 219:Ourwares/USB_PC_gateway.c ****  *              : negative = error
 220:Ourwares/USB_PC_gateway.c ****  *              : -1 = The bozo that called this routine gave us booogus ptr->mode_link!
 221:Ourwares/USB_PC_gateway.c ****  * @NOTE	: Be sure ptr->mode_link is set!
 222:Ourwares/USB_PC_gateway.c ****  * ************************************************************************************** */
 223:Ourwares/USB_PC_gateway.c **** int USB_toPC_msg_asciican(struct SERIALSENDTASKBCB** ppbcb, char* pin, struct PCTOGATEWAY* ptr)
 224:Ourwares/USB_PC_gateway.c **** {
 462              		.loc 1 224 0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 16
 465              		@ frame_needed = 0, uses_anonymous_args = 0
 466              	.LVL66:
 467 0000 30B5     		push	{r4, r5, lr}
 468              	.LCFI6:
 469              		.cfi_def_cfa_offset 12
 470              		.cfi_offset 4, -12
 471              		.cfi_offset 5, -8
 472              		.cfi_offset 14, -4
 473 0002 85B0     		sub	sp, sp, #20
 474              	.LCFI7:
 475              		.cfi_def_cfa_offset 32
 476 0004 0546     		mov	r5, r0
 477 0006 1446     		mov	r4, r2
 225:Ourwares/USB_PC_gateway.c **** 	int ret;
 226:Ourwares/USB_PC_gateway.c **** 	struct CANRCVBUF can;
 227:Ourwares/USB_PC_gateway.c **** 
 228:Ourwares/USB_PC_gateway.c **** 	/* Convert msg to binary */
 229:Ourwares/USB_PC_gateway.c **** 	ret = PC_msg_asctobin(ptr, pin);
 478              		.loc 1 229 0
 479 0008 1046     		mov	r0, r2
 480              	.LVL67:
 481 000a FFF7FEFF 		bl	PC_msg_asctobin
 482              	.LVL68:
 230:Ourwares/USB_PC_gateway.c **** 	if (ret < 0) return ret;
 483              		.loc 1 230 0
 484 000e 0028     		cmp	r0, #0
 485 0010 08DB     		blt	.L42
 231:Ourwares/USB_PC_gateway.c **** 
 232:Ourwares/USB_PC_gateway.c **** 
 233:Ourwares/USB_PC_gateway.c **** 	/* Handle binary msg no differently than others */
 234:Ourwares/USB_PC_gateway.c **** 	ptr->cmprs.seq = ptr->seq;		// Add sequence number (for PC checking for missing msgs)
ARM GAS  /tmp/cciEc0HH.s 			page 14


 486              		.loc 1 234 0
 487 0012 94F83D30 		ldrb	r3, [r4, #61]	@ zero_extendqisi2
 488 0016 84F85E30 		strb	r3, [r4, #94]
 235:Ourwares/USB_PC_gateway.c **** 	
 236:Ourwares/USB_PC_gateway.c **** 	/* Send as we would any msg that is in binary form. */
 237:Ourwares/USB_PC_gateway.c **** 	return USB_toPC_msg_mode(ppbcb, ptr, &can);
 489              		.loc 1 237 0
 490 001a 6A46     		mov	r2, sp
 491 001c 2146     		mov	r1, r4
 492 001e 2846     		mov	r0, r5
 493              	.LVL69:
 494 0020 FFF7FEFF 		bl	USB_toPC_msg_mode
 495              	.LVL70:
 496              	.L42:
 238:Ourwares/USB_PC_gateway.c **** }
 497              		.loc 1 238 0
 498 0024 05B0     		add	sp, sp, #20
 499              	.LCFI8:
 500              		.cfi_def_cfa_offset 12
 501              		@ sp needed
 502 0026 30BD     		pop	{r4, r5, pc}
 503              		.cfi_endproc
 504              	.LFE133:
 506              		.comm	debug_inct,4,4
 507              		.section	.bss.localbuf,"aw",%nobits
 508              		.align	2
 509              		.set	.LANCHOR1,. + 0
 512              	localbuf:
 513 0000 00000000 		.space	256
 513      00000000 
 513      00000000 
 513      00000000 
 513      00000000 
 514              		.section	.rodata.str1.4,"aMS",%progbits,1
 515              		.align	2
 516              	.LC0:
 517 0000 257300   		.ascii	"%s\000"
 518              		.section	.bss.localct,"aw",%nobits
 519              		.align	2
 520              		.set	.LANCHOR0,. + 0
 523              	localct:
 524 0000 00000000 		.space	4
 525              		.section	.data.plocalbuf,"aw",%progbits
 526              		.align	2
 527              		.set	.LANCHOR2,. + 0
 530              	plocalbuf:
 531 0000 00000000 		.word	localbuf
 532              		.text
 533              	.Letext0:
 534              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 535              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 536              		.file 4 "Ourwares/common_misc.h"
 537              		.file 5 "Ourwares/common_can.h"
 538              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 539              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 540              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 541              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  /tmp/cciEc0HH.s 			page 15


 542              		.file 10 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 543              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 544              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 545              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 546              		.file 14 "Ourwares/SerialTaskSend.h"
 547              		.file 15 "Drivers/CMSIS/Include/core_cm4.h"
 548              		.file 16 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/unistd.h"
 549              		.file 17 "Ourwares/PC_gateway_comm.h"
 550              		.file 18 "Ourwares/yprintf.h"
ARM GAS  /tmp/cciEc0HH.s 			page 16


DEFINED SYMBOLS
                            *ABS*:00000000 USB_PC_gateway.c
     /tmp/cciEc0HH.s:22     .text.USB_PC_get_msg_mode:00000000 $t
     /tmp/cciEc0HH.s:27     .text.USB_PC_get_msg_mode:00000000 USB_PC_get_msg_mode
     /tmp/cciEc0HH.s:272    .text.USB_PC_get_msg_mode:0000011c $d
                            *COM*:00000004 debug_inct
     /tmp/cciEc0HH.s:280    .text.USB_toPC_msgASCII:00000000 $t
     /tmp/cciEc0HH.s:285    .text.USB_toPC_msgASCII:00000000 USB_toPC_msgASCII
     /tmp/cciEc0HH.s:306    .text.USB_toPC_msgBIN:00000000 $t
     /tmp/cciEc0HH.s:311    .text.USB_toPC_msgBIN:00000000 USB_toPC_msgBIN
     /tmp/cciEc0HH.s:367    .text.USB_toPC_msgBIN:00000030 $d
     /tmp/cciEc0HH.s:372    .text.USB_toPC_msg_mode:00000000 $t
     /tmp/cciEc0HH.s:377    .text.USB_toPC_msg_mode:00000000 USB_toPC_msg_mode
     /tmp/cciEc0HH.s:455    .text.USB_toPC_msg_asciican:00000000 $t
     /tmp/cciEc0HH.s:460    .text.USB_toPC_msg_asciican:00000000 USB_toPC_msg_asciican
     /tmp/cciEc0HH.s:508    .bss.localbuf:00000000 $d
     /tmp/cciEc0HH.s:512    .bss.localbuf:00000000 localbuf
     /tmp/cciEc0HH.s:515    .rodata.str1.4:00000000 $d
     /tmp/cciEc0HH.s:519    .bss.localct:00000000 $d
     /tmp/cciEc0HH.s:523    .bss.localct:00000000 localct
     /tmp/cciEc0HH.s:526    .data.plocalbuf:00000000 $d
     /tmp/cciEc0HH.s:530    .data.plocalbuf:00000000 plocalbuf
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
read
PC_msg_get
CANuncompress
PC_msg_getASCII
CANuncompress_G
PC_msg_prepASCII
PC_msg_prep
yprintf
CANcompress
CANcompress_G
PC_msg_asctobin
